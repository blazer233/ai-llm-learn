[
  {
    "name": "<Button/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Button, Space } from 'tdesign-react';\n\nexport default function ButtonExample() {\n  return (\n    <Space>\n      <Button theme=\"default\" variant=\"base\">\n        填充按钮\n      </Button>\n      <Button theme=\"default\" variant=\"outline\">\n        描边按钮\n      </Button>\n      <Button theme=\"default\" variant=\"dashed\">\n        虚框按钮\n      </Button>\n      <Button theme=\"default\" variant=\"text\">\n        文字按钮\n      </Button>\n    </Space>\n  );\n}\n",
        "desc": "直接使用文字作为按钮。是视觉吸引力最弱的一个按钮，通常出现在表格操作栏、标题和字段旁等。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Space } from 'tdesign-react';\nimport { SearchIcon, AddIcon, CloudUploadIcon, DiscountIcon, CloudDownloadIcon } from 'tdesign-icons-react';\n\nexport default function ButtonExample() {\n  return (\n    <Space>\n      <Button icon={<AddIcon />}>新建</Button>\n      <Button variant=\"outline\" icon={<CloudUploadIcon />}>\n        上传文件\n      </Button>\n      <Button shape=\"circle\" icon={<DiscountIcon />} />\n      <Button shape=\"circle\" icon={<CloudDownloadIcon />} />\n      <Button theme=\"default\" variant=\"outline\" icon={<SearchIcon />}>\n        Function Icon\n      </Button>\n    </Space>\n  );\n}\n",
        "desc": "图标按钮由图标+文字或图标构成。通过图标可增强识别性，以便直观理解。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Space } from 'tdesign-react';\n\nexport default function ButtonExample() {\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Button variant=\"outline\" ghost>\n          幽灵按钮\n        </Button>\n        <Button variant=\"dashed\" ghost>\n          幽灵按钮\n        </Button>\n        <Button variant=\"text\" ghost>\n          幽灵按钮\n        </Button>\n      </Space>\n      <Space>\n        <Button variant=\"outline\" theme=\"primary\" ghost>\n          幽灵按钮\n        </Button>\n        <Button variant=\"dashed\" theme=\"primary\" ghost>\n          幽灵按钮\n        </Button>\n        <Button variant=\"text\" theme=\"primary\" ghost>\n          幽灵按钮\n        </Button>\n      </Space>\n      <Space>\n        <Button variant=\"outline\" theme=\"success\" ghost>\n          幽灵按钮\n        </Button>\n        <Button variant=\"dashed\" theme=\"success\" ghost>\n          幽灵按钮\n        </Button>\n        <Button variant=\"text\" theme=\"success\" ghost>\n          幽灵按钮\n        </Button>\n      </Space>\n      <Space>\n        <Button variant=\"outline\" theme=\"warning\" ghost>\n          幽灵按钮\n        </Button>\n        <Button variant=\"dashed\" theme=\"warning\" ghost>\n          幽灵按钮\n        </Button>\n        <Button variant=\"text\" theme=\"warning\" ghost>\n          幽灵按钮\n        </Button>\n      </Space>\n      <Space>\n        <Button variant=\"outline\" theme=\"danger\" ghost>\n          幽灵按钮\n        </Button>\n        <Button variant=\"dashed\" theme=\"danger\" ghost>\n          幽灵按钮\n        </Button>\n        <Button variant=\"text\" theme=\"danger\" ghost>\n          幽灵按钮\n        </Button>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "幽灵按钮将按钮的内容反色，背景变为透明，一般是底色透明。常用于有色背景上，例如 banner 图等。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Space } from 'tdesign-react';\n\nexport default function ButtonExample() {\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Button block variant=\"base\">\n        填充按钮\n      </Button>\n      <Button block variant=\"outline\">\n        描边按钮\n      </Button>\n      <Button block variant=\"dashed\">\n        虚框按钮\n      </Button>\n      <Button block variant=\"text\">\n        文字按钮\n      </Button>\n    </Space>\n  );\n}\n",
        "desc": "Block 按钮在宽度上充满其所在的父容器（无 padding 和 margin 值）。该按钮常见于移动端和一些表单场景中。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Space } from 'tdesign-react';\n\nexport default function ButtonExample() {\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Button theme=\"default\">填充按钮</Button>\n        <Button variant=\"outline\" theme=\"default\">\n          描边按钮\n        </Button>\n        <Button variant=\"dashed\" theme=\"default\">\n          虚框按钮\n        </Button>\n        <Button variant=\"text\" theme=\"default\">\n          文字按钮\n        </Button>\n      </Space>\n      <Space>\n        <Button theme=\"primary\" variant=\"base\">\n          填充按钮\n        </Button>\n        <Button theme=\"primary\" variant=\"outline\">\n          描边按钮\n        </Button>\n        <Button theme=\"primary\" variant=\"dashed\">\n          虚框按钮\n        </Button>\n        <Button theme=\"primary\" variant=\"text\">\n          文字按钮\n        </Button>\n      </Space>\n      <Space>\n        <Button theme=\"danger\" variant=\"base\">\n          填充按钮\n        </Button>\n        <Button theme=\"danger\" variant=\"outline\">\n          描边按钮\n        </Button>\n        <Button theme=\"danger\" variant=\"dashed\">\n          虚框按钮\n        </Button>\n        <Button theme=\"danger\" variant=\"text\">\n          文字按钮\n        </Button>\n      </Space>\n      <Space>\n        <Button theme=\"warning\" variant=\"base\">\n          填充按钮\n        </Button>\n        <Button theme=\"warning\" variant=\"outline\">\n          描边按钮\n        </Button>\n        <Button theme=\"warning\" variant=\"dashed\">\n          虚框按钮\n        </Button>\n        <Button theme=\"warning\" variant=\"text\">\n          文字按钮\n        </Button>\n      </Space>\n      <Space>\n        <Button theme=\"success\" variant=\"base\">\n          填充按钮\n        </Button>\n        <Button theme=\"success\" variant=\"outline\">\n          描边按钮\n        </Button>\n        <Button theme=\"success\" variant=\"dashed\">\n          虚框按钮\n        </Button>\n        <Button theme=\"success\" variant=\"text\">\n          文字按钮\n        </Button>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "提供浅灰色、蓝色、红色、黄色和绿色为主题的按钮。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Space } from 'tdesign-react';\n\nexport default function ButtonExample() {\n  return (\n    <Space>\n      <Button disabled>填充按钮</Button>\n      <Button loading>加载中</Button>\n    </Space>\n  );\n}\n",
        "desc": "提供加载、禁用两种状态。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Space } from 'tdesign-react';\n\nexport default function ButtonExample() {\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Button size=\"small\" variant=\"base\">\n          填充按钮\n        </Button>\n        <Button size=\"small\" variant=\"outline\">\n          描边按钮\n        </Button>\n        <Button size=\"small\" variant=\"dashed\">\n          虚框按钮\n        </Button>\n        <Button size=\"small\" variant=\"text\">\n          文字按钮\n        </Button>\n      </Space>\n      <Space>\n        <Button size=\"medium\" variant=\"base\">\n          填充按钮\n        </Button>\n        <Button size=\"medium\" variant=\"outline\">\n          描边按钮\n        </Button>\n        <Button size=\"medium\" variant=\"dashed\">\n          虚框按钮\n        </Button>\n        <Button size=\"medium\" variant=\"text\">\n          文字按钮\n        </Button>\n      </Space>\n      <Space>\n        <Button size=\"large\" variant=\"base\">\n          填充按钮\n        </Button>\n        <Button size=\"large\" variant=\"outline\">\n          描边按钮\n        </Button>\n        <Button size=\"large\" variant=\"dashed\">\n          虚框按钮\n        </Button>\n        <Button size=\"large\" variant=\"text\">\n          文字按钮\n        </Button>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "提供大、中（默认）、小三种尺寸。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Space } from 'tdesign-react';\nimport { CalendarIcon } from 'tdesign-icons-react';\n\nexport default function ButtonExample() {\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Button shape=\"rectangle\" variant=\"base\">\n          填充按钮\n        </Button>\n        <Button shape=\"square\" variant=\"base\">\n          <CalendarIcon />\n        </Button>\n        <Button shape=\"round\" variant=\"base\">\n          填充按钮\n        </Button>\n        <Button shape=\"circle\" variant=\"base\">\n          <CalendarIcon />\n        </Button>\n      </Space>\n      <Space>\n        <Button shape=\"rectangle\" variant=\"outline\">\n          描边按钮\n        </Button>\n        <Button shape=\"square\" variant=\"outline\">\n          <CalendarIcon />\n        </Button>\n        <Button shape=\"round\" variant=\"outline\">\n          描边按钮\n        </Button>\n        <Button shape=\"circle\" variant=\"outline\">\n          <CalendarIcon />\n        </Button>\n      </Space>\n      <Space>\n        <Button shape=\"rectangle\" variant=\"dashed\">\n          虚框按钮\n        </Button>\n        <Button shape=\"square\" variant=\"dashed\">\n          <CalendarIcon />\n        </Button>\n        <Button shape=\"round\" variant=\"dashed\">\n          虚框按钮\n        </Button>\n        <Button shape=\"circle\" variant=\"dashed\">\n          <CalendarIcon />\n        </Button>\n      </Space>\n      <Space>\n        <Button shape=\"rectangle\" variant=\"text\">\n          文字按钮\n        </Button>\n        <Button shape=\"square\" variant=\"text\">\n          <CalendarIcon />\n        </Button>\n        <Button shape=\"round\" variant=\"text\">\n          文字按钮\n        </Button>\n        <Button shape=\"circle\" variant=\"text\">\n          <CalendarIcon />\n        </Button>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "提供长方形、正方形、圆角长方形、圆形四种形状。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Space } from 'tdesign-react';\n\nexport default function ButtonExample() {\n  return (\n    <Space size={24}>\n      <Button tag=\"div\">div</Button>\n      <Button tag=\"a\">a</Button>\n      <Button href=\"#\">a:href</Button>\n    </Space>\n  );\n}\n",
        "desc": "支持自定义渲染元素，支持"
      }
    ]
  },
  {
    "name": "<Icon/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport {\n  LettersTIcon,\n  LettersDIcon,\n  LettersSIcon,\n  LettersEIcon,\n  LettersIIcon,\n  LettersNIcon,\n  LettersGIcon,\n  ComponentCheckboxIcon,\n  ComponentInputIcon,\n  ComponentSwitchIcon,\n  ComponentBreadcrumbIcon,\n  ComponentDropdownIcon,\n  ComponentRadioIcon,\n  ComponentStepsIcon,\n} from 'tdesign-icons-react';\nimport { Space } from 'tdesign-react';\n\nexport default function IconExample() {\n  return (\n    <Space direction=\"vertical\">\n      <Space\n        breakLine\n        style={{\n          color: `var(--td-brand-color)`,\n        }}\n      >\n        <LettersTIcon />\n        <LettersDIcon />\n        <LettersEIcon />\n        <LettersSIcon />\n        <LettersIIcon />\n        <LettersGIcon />\n        <LettersNIcon />\n      </Space>\n      <Space breakLine>\n        <ComponentCheckboxIcon />\n        <ComponentBreadcrumbIcon />\n        <ComponentInputIcon />\n        <ComponentSwitchIcon />\n        <ComponentDropdownIcon />\n        <ComponentRadioIcon />\n        <ComponentStepsIcon />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": ""
      },
      {
        "code": "import React from 'react';\nimport { Space } from 'tdesign-react';\nimport { Icon } from 'tdesign-icons-react';\n\nexport default function SvgSpriteExample() {\n  return (\n    <Space direction=\"vertical\">\n      <Space break-line>\n        <p>How do you feel today?</p>\n        <Icon name=\"sneer\" />\n        <Icon name=\"unhappy\" />\n        <Icon name=\"excited\" />\n        <Icon name=\"surprised\" />\n        <Icon name=\"giggle\" />\n      </Space>\n      <Space breakLine align=\"center\">\n        <p>What is your favourite food?</p>\n        <Icon name=\"tangerinr\" color=\"orange\" />\n        <Icon name=\"bamboo-shoot\" color=\"green\" />\n        <Icon name=\"apple\" color=\"red\" />\n        <Icon name=\"milk\" color=\"#0052D9\" />\n        <Icon name=\"peach\" color=\"pink\" />\n      </Space>\n      <Space break-line>\n        <p>How much icons does TDesign Icon includes?</p>\n        <Icon\n          name=\"numbers-1\"\n          style={{\n            color: 'var(--td-brand-color-5)',\n          }}\n        />\n        <Icon\n          name=\"numbers-2\"\n          style={{\n            color: 'var(--td-brand-color-6)',\n          }}\n        />\n        <Icon\n          name=\"numbers-0\"\n          style={{\n            color: 'var(--td-brand-color-7)',\n          }}\n        />\n        <Icon\n          name=\"numbers-3\"\n          style={{\n            color: 'var(--td-brand-color-8)',\n          }}\n        />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "图标尺寸单位支持多种， 'small', 'medium', 'large', '35px', '3em' 等。 图标颜色使用 CSS 控制，如：style=\"color: red\"，或者 style=\"fill: red\"。 点击右侧导航「全部图标」即可查看组件库全部图标。"
      },
      {
        "code": "import React from 'react';\nimport { Space } from 'tdesign-react';\nimport { IconFont } from 'tdesign-icons-react';\n\nexport default function SvgSpriteExample() {\n  return (\n    <Space direction=\"vertical\">\n      <Space break-line>\n        <p>How do you feel today?</p>\n        <IconFont name=\"sneer\" />\n        <IconFont name=\"unhappy\" />\n        <IconFont name=\"excited\" />\n        <IconFont name=\"surprised\" />\n        <IconFont name=\"giggle\" />\n      </Space>\n      <Space breakLine align=\"center\">\n        <p>What is your favourite food?</p>\n        <IconFont\n          name=\"tangerinr\"\n          style={{\n            color: 'orange',\n          }}\n        />\n        <IconFont\n          name=\"bamboo-shoot\"\n          style={{\n            color: 'green',\n          }}\n        />\n        <IconFont\n          name=\"apple\"\n          style={{\n            color: 'red',\n          }}\n        />\n        <IconFont\n          name=\"milk\"\n          style={{\n            color: '#0052D9',\n          }}\n        />\n        <IconFont\n          name=\"peach\"\n          style={{\n            color: 'pink',\n          }}\n        />\n      </Space>\n      <Space break-line>\n        <p>How much icons does TDesign Icon includes?</p>\n        <IconFont\n          name=\"numbers-1\"\n          style={{\n            color: 'var(--td-brand-color-5)',\n          }}\n        />\n        <IconFont\n          name=\"numbers-2\"\n          style={{\n            color: 'var(--td-brand-color-6)',\n          }}\n        />\n        <IconFont\n          name=\"numbers-0\"\n          style={{\n            color: 'var(--td-brand-color-7)',\n          }}\n        />\n        <IconFont\n          name=\"numbers-3\"\n          style={{\n            color: 'var(--td-brand-color-8)',\n          }}\n        />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": ""
      },
      {
        "code": "import React from 'react';\nimport { Icon } from 'tdesign-icons-react';\n\nconst CustomUrlIcon = ({ name, size, style }) => (\n  <Icon name={name} size={size} style={style} url=\"https://tdesign.gtimg.com/icon/default-demo/index.js\" />\n);\nfunction EnhancedIconExample() {\n  return (\n    <div>\n      <CustomUrlIcon\n        name=\"cps-icon-home-sheep\"\n        style={{\n          marginRight: '8px',\n        }}\n      />\n      <CustomUrlIcon\n        name=\"cps-icon-home-sheep\"\n        size=\"medium\"\n        style={{\n          marginRight: '8px',\n        }}\n      />\n      <CustomUrlIcon\n        name=\"cps-icon-home-sheep\"\n        size=\"large\"\n        style={{\n          marginRight: '8px',\n        }}\n      />\n      <CustomUrlIcon name=\"cps-icon-home-sheep\" size=\"25px\" />\n      <br />\n      <br />\n      <CustomUrlIcon\n        name=\"cps-icon-home-sheep\"\n        style={{\n          color: 'red',\n          marginRight: '8px',\n        }}\n      />\n      <CustomUrlIcon\n        name=\"cps-icon-home-sheep\"\n        style={{\n          color: 'green',\n          marginRight: '8px',\n        }}\n      />\n      <CustomUrlIcon\n        name=\"cps-icon-home-sheep\"\n        style={{\n          color: 'orange',\n          marginRight: '8px',\n        }}\n      />\n      <CustomUrlIcon name=\"t-icon-home\" />\n    </div>\n  );\n}\nexport default EnhancedIconExample;\n",
        "desc": "组件会引入默认的 SVG 图标，如果希望禁止组件加载默认的 SVG 图标，将  置为 false 即可。"
      },
      {
        "code": "import React from 'react';\nimport { IconFont } from 'tdesign-icons-react';\n\nconst CustomUrlIconFont = ({ name, size, style }) => (\n  <IconFont name={name} size={size} style={style} url=\"https://tdesign.gtimg.com/icon/default-demo/index.css\" />\n);\nfunction EnhancedIconExample() {\n  return (\n    <div>\n      <CustomUrlIconFont\n        name=\"cps-icon cps-icon-home-sheep\"\n        style={{\n          marginRight: '8px',\n        }}\n      />\n      <CustomUrlIconFont\n        name=\"cps-icon cps-icon-home-sheep\"\n        size=\"medium\"\n        style={{\n          marginRight: '8px',\n        }}\n      />\n      <CustomUrlIconFont\n        name=\"cps-icon cps-icon-home-sheep\"\n        size=\"large\"\n        style={{\n          marginRight: '8px',\n        }}\n      />\n      <CustomUrlIconFont name=\"cps-icon cps-icon-home-sheep\" size=\"25px\" />\n      <br />\n      <br />\n      <CustomUrlIconFont\n        name=\"cps-icon cps-icon-home-sheep\"\n        style={{\n          color: 'red',\n          marginRight: '8px',\n        }}\n      />\n      <CustomUrlIconFont\n        name=\"cps-icon cps-icon-home-sheep\"\n        style={{\n          color: 'green',\n          marginRight: '8px',\n        }}\n      />\n      <CustomUrlIconFont\n        name=\"cps-icon cps-icon-home-sheep\"\n        style={{\n          color: 'orange',\n          marginRight: '8px',\n        }}\n      />\n      <CustomUrlIconFont name=\"t-icon-home\" />\n    </div>\n  );\n}\nexport default EnhancedIconExample;\n",
        "desc": "组件会引入默认的 iconfont 图标，如果希望禁止组件加载默认的 iconfont 图标，将  置为 false 即可。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select } from 'tdesign-react';\nimport { Icon, manifest } from 'tdesign-icons-react';\n\nconst { Option } = Select;\nfunction IconSelect() {\n  const [value, setValue] = useState('edit-1');\n  return (\n    <Select\n      value={value}\n      onChange={setValue}\n      prefixIcon={\n        <Icon\n          name={value}\n          style={{\n            marginRight: '8px',\n          }}\n        />\n      }\n    >\n      {manifest.map((item) => (\n        <Option\n          key={item.stem}\n          value={item.stem}\n          label={item.stem}\n          style={{\n            display: 'inline-block',\n            fontSize: '20px',\n          }}\n        >\n          <Icon name={item.stem} />\n        </Option>\n      ))}\n    </Select>\n  );\n}\nexport default IconSelect;\n",
        "desc": "在一些业务场景中，存在需要选择图标的情况，可以配合组件来实现。"
      }
    ]
  },
  {
    "name": "<Link/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Link } from 'tdesign-react';\n\nexport default function LinkExample() {\n  return <Link theme=\"primary\">跳转链接</Link>;\n}\n",
        "desc": "最简单的文字链接形式，点击后直接跳转到对应链接。"
      },
      {
        "code": "import React from 'react';\nimport { Space, Link } from 'tdesign-react';\n\nexport default function LinkExample() {\n  return (\n    <Space>\n      <Link theme=\"default\" underline>\n        跳转链接\n      </Link>\n      <Link theme=\"primary\" underline>\n        跳转链接\n      </Link>\n      <Link theme=\"danger\" underline>\n        跳转链接\n      </Link>\n      <Link theme=\"warning\" underline>\n        跳转链接\n      </Link>\n      <Link theme=\"success\" underline>\n        跳转链接\n      </Link>\n    </Space>\n  );\n}\n",
        "desc": "在文字下加横线，表明此处为链接。"
      },
      {
        "code": "import React from 'react';\nimport { JumpIcon, LinkIcon } from 'tdesign-icons-react';\nimport { Space, Link } from 'tdesign-react';\n\nexport default function LinkExample() {\n  return (\n    <Space>\n      <Link theme=\"default\" prefixIcon={<LinkIcon />}>\n        跳转链接\n      </Link>\n      <Link theme=\"primary\" underline href=\"https://tdesign.tencent.com/\" target=\"_self\" prefixIcon={<LinkIcon />}>\n        跳转链接\n      </Link>\n      <Link theme=\"danger\" underline href=\"https://tdesign.tencent.com/\" target=\"_self\" prefixIcon={<JumpIcon />}>\n        跳转链接\n      </Link>\n      <Link\n        theme=\"warning\"\n        underline\n        href=\"https://tdesign.tencent.com/\"\n        target=\"_self\"\n        prefixIcon={<JumpIcon />}\n        disabled\n      >\n        跳转链接\n      </Link>\n    </Space>\n  );\n}\n",
        "desc": "文字链接与图标搭配使用，通过图标快速了解链接所代表的含义。"
      },
      {
        "code": "import React from 'react';\nimport { Space, Link } from 'tdesign-react';\n\nexport default function LinkExample() {\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Link theme=\"default\" hover=\"underline\">\n          跳转链接\n        </Link>\n        <Link theme=\"primary\" hover=\"underline\">\n          跳转链接\n        </Link>\n        <Link theme=\"danger\" hover=\"underline\">\n          跳转链接\n        </Link>\n        <Link theme=\"warning\" hover=\"underline\">\n          跳转链接\n        </Link>\n        <Link theme=\"success\" hover=\"underline\">\n          跳转链接\n        </Link>\n      </Space>\n      <Space>\n        <Link theme=\"default\" hover=\"color\">\n          跳转链接\n        </Link>\n        <Link theme=\"primary\" hover=\"color\">\n          跳转链接\n        </Link>\n        <Link theme=\"danger\" hover=\"color\">\n          跳转链接\n        </Link>\n        <Link theme=\"warning\" hover=\"color\">\n          跳转链接\n        </Link>\n        <Link theme=\"success\" hover=\"color\">\n          跳转链接\n        </Link>\n      </Space>\n      <Space>\n        <Link theme=\"default\" hover=\"color\" underline>\n          跳转链接\n        </Link>\n        <Link theme=\"primary\" hover=\"color\" underline>\n          跳转链接\n        </Link>\n        <Link theme=\"danger\" hover=\"color\" underline>\n          跳转链接\n        </Link>\n        <Link theme=\"warning\" hover=\"color\" underline>\n          跳转链接\n        </Link>\n        <Link theme=\"success\" hover=\"color\" underline>\n          跳转链接\n        </Link>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "悬浮状态包含 2 种状态：文本颜色变化 和 添加下划线。由  控制，可选值："
      },
      {
        "code": "import React from 'react';\nimport { Space, Link } from 'tdesign-react';\n\nexport default function LinkExample() {\n  return (\n    <Space>\n      <Link theme=\"default\">跳转链接</Link>\n      <Link theme=\"primary\">跳转链接</Link>\n      <Link theme=\"danger\">跳转链接</Link>\n      <Link theme=\"warning\">跳转链接</Link>\n      <Link theme=\"success\">跳转链接</Link>\n    </Space>\n  );\n}\n",
        "desc": "在不同状态下，可提供对应的链接主题色。"
      },
      {
        "code": "import React from 'react';\nimport { JumpIcon } from 'tdesign-icons-react';\nimport { Space, Link } from 'tdesign-react';\n\nexport default function LinkExample() {\n  const clickLink = () => {\n    console.log('不触发');\n  };\n  return (\n    <Space>\n      <Link theme=\"default\" disabled onClick={clickLink}>\n        查看链接\n      </Link>\n      <Link theme=\"primary\" underline disabled onClick={clickLink}>\n        查看链接\n      </Link>\n      <Link theme=\"danger\" hover=\"color\" disabled onClick={clickLink}>\n        查看链接\n      </Link>\n      <Link theme=\"warning\" hover=\"underline\" disabled onClick={clickLink}>\n        查看链接\n      </Link>\n      <Link theme=\"success\" disabled suffixIcon={<JumpIcon />} onClick={clickLink}>\n        查看链接\n      </Link>\n    </Space>\n  );\n}\n",
        "desc": "当链接不可用时，显示禁用状态。"
      },
      {
        "code": "import React from 'react';\nimport { JumpIcon } from 'tdesign-icons-react';\nimport { Space, Link } from 'tdesign-react';\n\nexport default function LinkExample() {\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Link theme=\"default\" size=\"small\">\n          跳转链接\n        </Link>\n        <Link theme=\"primary\" size=\"small\">\n          跳转链接\n        </Link>\n        <Link theme=\"danger\" size=\"small\">\n          跳转链接\n        </Link>\n        <Link theme=\"warning\" size=\"small\" disabled>\n          跳转链接\n        </Link>\n        <Link theme=\"success\" size=\"small\" suffixIcon={<JumpIcon />}>\n          跳转链接\n        </Link>\n      </Space>\n      <Space>\n        <Link theme=\"default\" size=\"medium\">\n          跳转链接\n        </Link>\n        <Link theme=\"primary\" size=\"medium\">\n          跳转链接\n        </Link>\n        <Link theme=\"danger\" size=\"medium\">\n          跳转链接\n        </Link>\n        <Link theme=\"warning\" size=\"medium\" disabled>\n          跳转链接\n        </Link>\n        <Link theme=\"success\" size=\"medium\" suffixIcon={<JumpIcon />}>\n          跳转链接\n        </Link>\n      </Space>\n      <Space>\n        <Link theme=\"default\" size=\"large\">\n          跳转链接\n        </Link>\n        <Link theme=\"primary\" size=\"large\">\n          跳转链接\n        </Link>\n        <Link theme=\"danger\" size=\"large\">\n          跳转链接\n        </Link>\n        <Link theme=\"warning\" size=\"large\" disabled>\n          跳转链接\n        </Link>\n        <Link theme=\"success\" size=\"large\" suffixIcon={<JumpIcon />}>\n          跳转链接\n        </Link>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "提供大、中（默认）、小三种尺寸。"
      }
    ]
  },
  {
    "name": "<Typography/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Typography, Space } from 'tdesign-react';\n\nconst { Title, Text, Paragraph } = Typography;\nexport default function BasicExample() {\n  return (\n    <>\n      <Title>What is TDesign</Title>\n      <Text mark>\n        TDesign is an enterprise-level design system accumulated by Tencent&apos;s various business teams.\n      </Text>\n      <Paragraph>\n        <Text strong>\n          TDesign features a unified design values, consistent design language, and visual style, helping users form\n          continuous and coherent perceptions of the experience.\n        </Text>{' '}\n        Based on this, TDesign offers out-of-the-box UI component libraries, design guidelines, and design assets,\n        elegantly and efficiently freeing design and development from repetitive tasks. Simultaneously, it facilitates\n        easy extension on top of TDesign, enabling a better alignment with business requirements.\n      </Paragraph>\n      <Title level=\"h2\">Comprehensive</Title>\n      <Paragraph>\n        TDesign Support <Text code>Vue 2</Text>, <Text code>Vue 3</Text>, <Text code>React</Text>, components for\n        Desktop Application and <Text code>Vue 3</Text>, <Text code>Wechat MiniProgram</Text> components for Mobile\n        Application.\n      </Paragraph>\n\n      <Space direction=\"vertical\" size={12}>\n        <Paragraph>\n          <ul>\n            <li>Features</li>\n            <li>\n              Comprehensive\n              <ul>\n                <li>Consistency</li>\n                <li>Usability</li>\n              </ul>\n            </li>\n            <li>Join TDesign </li>\n          </ul>\n\n          <ol>\n            <li>Features</li>\n            <li>\n              Comprehensive\n              <ol type=\"a\">\n                <li>Consistency</li>\n                <li>Usability</li>\n              </ol>\n            </li>\n            <li>Join TDesign</li>\n          </ol>\n        </Paragraph>\n      </Space>\n    </>\n  );\n}\n",
        "desc": "基础组合用法"
      },
      {
        "code": "import React from 'react';\nimport { Typography } from 'tdesign-react';\n\nconst { Title } = Typography;\nconst TitleExample = () => (\n  <>\n    <Title level=\"h1\">H1. TDesign</Title>\n    <Title level=\"h2\">H2. TDesign</Title>\n    <Title level=\"h3\">H3. TDesign</Title>\n    <Title level=\"h4\">H4. TDesign</Title>\n    <Title level=\"h5\">H5. TDesign</Title>\n    <Title level=\"h6\">H6. TDesign</Title>\n  </>\n);\nexport default TitleExample;\n",
        "desc": "标题"
      },
      {
        "code": "import React from 'react';\nimport { Typography, Space } from 'tdesign-react';\n\nconst { Text } = Typography;\nexport default function TextExample() {\n  return (\n    <Space direction=\"vertical\" className=\"vertical-demo\" size={12}>\n      <Text theme=\"primary\">TDesign (primary)</Text>\n      <Text theme=\"secondary\">TDesign (secondary)</Text>\n      <Text disabled>TDesign (disabled)</Text>\n      <Text theme=\"success\">TDesign (success)</Text>\n      <Text theme=\"warning\">TDesign (warning)</Text>\n      <Text theme=\"error\">TDesign (error)</Text>\n      <Text mark=\"pink\">TDesign (mark)</Text>\n      <Text code>TDesign (code)</Text>\n      <Text keyboard>TDesign (keyboard)</Text>\n      <Text underline>TDesign (underline)</Text>\n      <Text delete>TDesign (delete)</Text>\n      <Text strong>TDesign (strong)</Text>\n      <Text italic>TDesign (italic)</Text>\n    </Space>\n  );\n}\n",
        "desc": "文本"
      },
      {
        "code": "import React from 'react';\nimport { AngryIcon, SmileIcon } from 'tdesign-icons-react';\nimport { Typography } from 'tdesign-react';\n\nconst { Text } = Typography;\nconst textString = `TDesign was founded with the principles of open-source collaboration from the beginning. The collaboration scheme discussion, component design, and API design, including source code, are fully open within the company, garnering widespread attention from internal developers and designers. TDesign follows an equal, open, and strict policy, regardless of the participants' roles.`;\nexport default function CopyableExample() {\n  return (\n    <>\n      <Text copyable>This is a copyable text.</Text>\n      <br />\n      <Text\n        ellipsis\n        copyable={{\n          text: textString,\n          tooltipProps: {\n            content: 'click to copy',\n          },\n        }}\n        style={{\n          display: 'inline-block',\n          width: '50%',\n        }}\n      >\n        This is a copyable long text. {textString}\n      </Text>\n      <br />\n      <Text\n        copyable={{\n          suffix: ({ copied }) => (copied ? <SmileIcon /> : <AngryIcon />),\n        }}\n      >\n        This is a copyable long text with custom suffix.\n      </Text>\n    </>\n  );\n}\n",
        "desc": "可复制"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { ChevronDownIcon, ChevronUpIcon } from 'tdesign-icons-react';\nimport { Button, Typography } from 'tdesign-react';\n\nconst { Text, Paragraph } = Typography;\nconst textString = `TDesign was founded with the principles of open-source collaboration from the beginning. The collaboration scheme discussion, component design, and API design, including source code, are fully open within the company, garnering widespread attention from internal developers and designers. TDesign follows an equal, open, and strict policy, regardless of the participants' roles.`;\nconst EllipsisExample = () => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const handleExpand = () => {\n    setIsExpanded(true);\n  };\n  return (\n    <>\n      <Paragraph ellipsis>{textString}</Paragraph>\n      <Paragraph\n        ellipsis={{\n          row: 2,\n          suffix: ({ expanded }) => (\n            <>\n              <Button\n                theme=\"primary\"\n                variant=\"text\"\n                style={{\n                  padding: 0,\n                  height: '1em',\n                }}\n              >\n                {expanded ? 'less' : 'more'}\n              </Button>\n            </>\n          ),\n          expandable: true,\n          collapsible: true,\n        }}\n      >\n        {textString}\n      </Paragraph>\n      <Text\n        ellipsis={{\n          suffix: () => '',\n          expandable: false,\n          tooltipProps: {\n            content: 'long long long text',\n          },\n          onExpand: handleExpand,\n        }}\n        style={{\n          width: isExpanded ? '100%' : 300,\n          display: 'block',\n        }}\n      >\n        {textString}\n      </Text>\n\n      <Paragraph\n        ellipsis={{\n          suffix: ({ expanded }) => (\n            <span>\n              {expanded ? (\n                <ChevronUpIcon\n                  size={16}\n                  style={{\n                    marginLeft: 4,\n                  }}\n                />\n              ) : (\n                <ChevronDownIcon\n                  style={{\n                    marginLeft: 4,\n                  }}\n                  size={16}\n                />\n              )}\n            </span>\n          ),\n          expandable: true,\n        }}\n      >\n        {textString}\n      </Paragraph>\n    </>\n  );\n};\nexport default EllipsisExample;\n",
        "desc": "可省略"
      }
    ]
  },
  {
    "name": "<Divider/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Divider } from 'tdesign-react';\n\nexport default function BasicDivider() {\n  return (\n    <>\n      <p>\n        通过高效广告平台，协助品牌和市场营销者触达数以亿计的中国消费者通过金融科技及企业服务，促进合作伙伴业务发展，助力实现数字化升级，我们大力投资于人才队伍和推动科技创新，积极参与互联网行业协同发展。\n      </p>\n      <Divider></Divider>\n      <p>\n        通过高效广告平台，协助品牌和市场营销者触达数以亿计的中国消费者通过金融科技及企业服务，促进合作伙伴业务发展，助力实现数字化升级，我们大力投资于人才队伍和推动科技创新，积极参与互联网行业协同发展。\n      </p>\n      <Divider dashed></Divider>\n      <p>\n        通过高效广告平台，协助品牌和市场营销者触达数以亿计的中国消费者通过金融科技及企业服务，促进合作伙伴业务发展，助力实现数字化升级，我们大力投资于人才队伍和推动科技创新，积极参与互联网行业协同发展。\n      </p>\n    </>\n  );\n}\n",
        "desc": "水平分割线常用来对不同元素内容进行分割。"
      },
      {
        "code": "import React from 'react';\nimport { Divider } from 'tdesign-react';\n\nexport default function BasicDivider() {\n  return (\n    <>\n      <span>正直</span>\n      <Divider layout=\"vertical\"></Divider>\n      <span>进取</span>\n      <Divider layout=\"vertical\"></Divider>\n      <span>合作</span>\n      <Divider layout=\"vertical\"></Divider>\n      <span>创新</span>\n    </>\n  );\n}\n",
        "desc": "垂直分割线常用来做行内分割。"
      },
      {
        "code": "import React from 'react';\nimport { Divider } from 'tdesign-react';\n\nexport default function BasicDivider() {\n  return (\n    <>\n      <p>\n        通过高效广告平台，协助品牌和市场营销者触达数以亿计的中国消费者通过金融科技及企业服务，促进合作伙伴业务发展，助力实现数字化升级，我们大力投资于人才队伍和推动科技创新，积极参与互联网行业协同发展。\n      </p>\n      <Divider align=\"left\">TDesign</Divider>\n      <p>\n        通过高效广告平台，协助品牌和市场营销者触达数以亿计的中国消费者通过金融科技及企业服务，促进合作伙伴业务发展，助力实现数字化升级，我们大力投资于人才队伍和推动科技创新，积极参与互联网行业协同发展。\n      </p>\n      <Divider align=\"center\">TDesign</Divider>\n      <p>\n        通过高效广告平台，协助品牌和市场营销者触达数以亿计的中国消费者通过金融科技及企业服务，促进合作伙伴业务发展，助力实现数字化升级，我们大力投资于人才队伍和推动科技创新，积极参与互联网行业协同发展。\n      </p>\n      <Divider align=\"right\">TDesign</Divider>\n      <p>\n        通过高效广告平台，协助品牌和市场营销者触达数以亿计的中国消费者通过金融科技及企业服务，促进合作伙伴业务发展，助力实现数字化升级，我们大力投资于人才队伍和推动科技创新，积极参与互联网行业协同发展。\n      </p>\n    </>\n  );\n}\n",
        "desc": "带文字的分割线是在分割线中嵌入文字，在需要对分割内容进行解释说明时使用。"
      }
    ]
  },
  {
    "name": "<Grid/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Row, Col } from 'tdesign-react';\n\nconst demoCols = [\n  Array(12).fill(1),\n  Array(6).fill(2),\n  Array(4).fill(3),\n  Array(3).fill(4),\n  Array(2).fill(6),\n  Array(1).fill(12),\n];\nexport default function BasicGrid() {\n  return (\n    <>\n      {demoCols.map((cols, i) => (\n        <Row key={i}>\n          {cols.map((col, j) => (\n            <Col span={col} key={j}>\n              <div>{col}</div>\n            </Col>\n          ))}\n        </Row>\n      ))}\n    </>\n  );\n}\n",
        "desc": "基本使用"
      },
      {
        "code": "import React from 'react';\nimport { Row, Col } from 'tdesign-react';\n\nexport default function SpaceGrid() {\n  return (\n    <>\n      <Row gutter={16}>\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n      </Row>\n\n      <Row\n        gutter={{\n          xs: 8,\n          sm: 16,\n          md: 24,\n          lg: 32,\n          xl: 32,\n          xxl: 40,\n        }}\n      >\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n      </Row>\n\n      <Row gutter={[16, 24]}>\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n        <Col span={3}>\n          <div>col-3</div>\n        </Col>\n      </Row>\n    </>\n  );\n}\n",
        "desc": "区块间隔"
      },
      {
        "code": "import React from 'react';\nimport { Row, Col } from 'tdesign-react';\n\nexport default function OffsetGrid() {\n  return (\n    <>\n      <Row>\n        <Col span={4}>\n          <div>col-4</div>\n        </Col>\n        <Col span={4} offset={4}>\n          <div>col-4</div>\n        </Col>\n      </Row>\n      <Row>\n        <Col span={3} offset={3}>\n          <div>col-3 col-offset-3</div>\n        </Col>\n        <Col span={3} offset={3}>\n          <div>col-3 col-offset-3</div>\n        </Col>\n      </Row>\n      <Row>\n        <Col span={6} offset={2}>\n          <div>col-6 col-offset-2</div>\n        </Col>\n      </Row>\n    </>\n  );\n}\n",
        "desc": "左右偏移"
      },
      {
        "code": "import React from 'react';\nimport { Row, Col } from 'tdesign-react';\n\nexport default function PullPushGrid() {\n  return (\n    <>\n      <Row>通过 `pull` `push` 进行排序</Row>\n      <Row>\n        <Col span={9} push={3}>\n          <div>col-9 col-push-3</div>\n        </Col>\n        <Col span={3} pull={9}>\n          <div>col-3 col-pull-9</div>\n        </Col>\n      </Row>\n      <Row>\n        <Col span={8} push={4}>\n          <div>col-8 col-push-4</div>\n        </Col>\n        <Col span={4} pull={8}>\n          <div>col-4 col-pull-8</div>\n        </Col>\n      </Row>\n    </>\n  );\n}\n",
        "desc": "排序"
      },
      {
        "code": "import React from 'react';\nimport { Row, Col } from 'tdesign-react';\n\nexport default function OrderGrid() {\n  return (\n    <>\n      <Row>通过 `order` 来改变元素的排序。</Row>\n      <Row>\n        <Col span={3} order={4}>\n          <div>1 col-order-4</div>\n        </Col>\n        <Col span={3} order={3}>\n          <div>2 col-order-3</div>\n        </Col>\n        <Col span={3} order={2}>\n          <div>3 col-order-2</div>\n        </Col>\n        <Col span={3} order={1}>\n          <div>4 col-order-1</div>\n        </Col>\n      </Row>\n      <Row>\n        <Col\n          span={3}\n          xs={{\n            order: 1,\n          }}\n          sm={{\n            order: 2,\n          }}\n          md={{\n            order: 3,\n          }}\n          lg={{\n            order: 4,\n          }}\n        >\n          <div>1 col-order-responsive</div>\n        </Col>\n        <Col\n          span={3}\n          xs={{\n            order: 2,\n          }}\n          sm={{\n            order: 1,\n          }}\n          md={{\n            order: 4,\n          }}\n          lg={{\n            order: 3,\n          }}\n        >\n          <div>2 col-order-responsive</div>\n        </Col>\n        <Col\n          span={3}\n          xs={{\n            order: 3,\n          }}\n          sm={{\n            order: 4,\n          }}\n          md={{\n            order: 2,\n          }}\n          lg={{\n            order: 1,\n          }}\n        >\n          <div>3 col-order-responsive</div>\n        </Col>\n        <Col\n          span={3}\n          xs={{\n            order: 4,\n          }}\n          sm={{\n            order: 3,\n          }}\n          md={{\n            order: 1,\n          }}\n          lg={{\n            order: 2,\n          }}\n        >\n          <div>4 col-order-responsive</div>\n        </Col>\n      </Row>\n    </>\n  );\n}\n",
        "desc": "次序"
      },
      {
        "code": "import React from 'react';\nimport { Row, Col } from 'tdesign-react';\n\nexport default function OrderGrid() {\n  return (\n    <>\n      <p>align left</p>\n      <Row justify=\"start\">\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n      </Row>\n\n      <p>align center</p>\n      <Row justify=\"center\">\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n      </Row>\n\n      <p>align right</p>\n      <Row justify=\"end\">\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n      </Row>\n\n      <p>space-between</p>\n      <Row justify=\"space-between\">\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n      </Row>\n\n      <p>space-around</p>\n      <Row justify=\"space-around\">\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n        <Col span={2}>\n          <div>col-2</div>\n        </Col>\n      </Row>\n    </>\n  );\n}\n",
        "desc": "排版"
      },
      {
        "code": "import React from 'react';\nimport { Row, Col } from 'tdesign-react';\n\nexport default function OrderGrid() {\n  return (\n    <>\n      <p>align top</p>\n      <Row justify=\"center\" align=\"top\">\n        <Col span={3}>\n          <div\n            style={{\n              height: 80,\n            }}\n          >\n            col-3\n          </div>\n        </Col>\n        <Col span={3}>\n          <div\n            style={{\n              height: 40,\n            }}\n          >\n            col-3\n          </div>\n        </Col>\n        <Col span={3}>\n          <div\n            style={{\n              height: 80,\n            }}\n          >\n            col-3\n          </div>\n        </Col>\n        <Col span={3}>\n          <div\n            style={{\n              height: 40,\n            }}\n          >\n            col-3\n          </div>\n        </Col>\n      </Row>\n\n      <p>Align Middle</p>\n      <Row justify=\"space-around\" align=\"middle\">\n        <Col span={3}>\n          <div\n            style={{\n              height: 80,\n            }}\n          >\n            col-3\n          </div>\n        </Col>\n        <Col span={3}>\n          <div\n            style={{\n              height: 40,\n            }}\n          >\n            col-3\n          </div>\n        </Col>\n        <Col span={3}>\n          <div\n            style={{\n              height: 80,\n            }}\n          >\n            col-3\n          </div>\n        </Col>\n        <Col span={3}>\n          <div\n            style={{\n              height: 40,\n            }}\n          >\n            col-3\n          </div>\n        </Col>\n      </Row>\n\n      <p>Align Bottom</p>\n      <Row justify=\"space-between\" align=\"bottom\">\n        <Col span={3}>\n          <div\n            style={{\n              height: 80,\n            }}\n          >\n            col-3\n          </div>\n        </Col>\n        <Col span={3}>\n          <div\n            style={{\n              height: 40,\n            }}\n          >\n            col-3\n          </div>\n        </Col>\n        <Col span={3}>\n          <div\n            style={{\n              height: 80,\n            }}\n          >\n            col-3\n          </div>\n        </Col>\n        <Col span={3}>\n          <div\n            style={{\n              height: 40,\n            }}\n          >\n            col-3\n          </div>\n        </Col>\n      </Row>\n    </>\n  );\n}\n",
        "desc": "对齐"
      },
      {
        "code": "import React from 'react';\nimport { Row, Col } from 'tdesign-react';\n\nexport default function OrderGrid() {\n  return (\n    <>\n      <Row>\n        <Col flex={2}>\n          <div>2 / 5</div>\n        </Col>\n        <Col flex={3}>\n          <div>3 / 5</div>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col flex=\"100px\">\n          <div>100px</div>\n        </Col>\n        <Col flex=\"auto\">\n          <div>Fill Rest</div>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col flex=\"1 1 200px\">\n          <div>1 1 200px</div>\n        </Col>\n        <Col flex=\"0 1 300px\">\n          <div>0 1 300px</div>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col flex=\"none\">\n          <div\n            style={{\n              padding: '0 16px',\n            }}\n          >\n            none\n          </div>\n        </Col>\n        <Col flex=\"auto\">\n          <div>auto with no-wrap</div>\n        </Col>\n      </Row>\n    </>\n  );\n}\n",
        "desc": "flex"
      },
      {
        "code": "import React from 'react';\nimport { Row, Col, Space } from 'tdesign-react';\n\nexport default function OrderGrid() {\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <span>宽度响应式</span>\n      <Row>\n        <Col xs={2} sm={4} md={6} lg={8} xl={10}>\n          <div>Col</div>\n        </Col>\n        <Col xs={10} sm={8} md={6} lg={4} xl={2}>\n          <div>Col</div>\n        </Col>\n      </Row>\n\n      <span>其他属性响应式（支持span，offset，order，pull，push）</span>\n      <Row>\n        <Col\n          xs={{\n            offset: 0,\n            span: 3,\n          }}\n          sm={{\n            offset: 2,\n            span: 3,\n          }}\n          md={{\n            offset: 4,\n            span: 3,\n          }}\n          lg={{\n            offset: 6,\n            span: 3,\n          }}\n          xl={{\n            offset: 8,\n            span: 3,\n          }}\n        >\n          <div>Col</div>\n        </Col>\n      </Row>\n    </Space>\n  );\n}\n",
        "desc": "响应式布局"
      }
    ]
  },
  {
    "name": "<Layout/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Layout } from 'tdesign-react';\n\nconst { Header, Content, Footer, Aside } = Layout;\nexport default function BasicDivider() {\n  return (\n    <>\n      <h4>顶部导航布局</h4>\n      <Layout>\n        <Header>Header</Header>\n        <Content>Content</Content>\n        <Footer>Copyright @ 2019-2021 Tencent. All Rights Reserved</Footer>\n      </Layout>\n\n      <br />\n\n      <h4>侧边导航布局</h4>\n      <Layout>\n        <Aside>Aside</Aside>\n        <Layout>\n          <Content>Content</Content>\n          <Footer>Copyright @ 2019-2021 Tencent. All Rights Reserved</Footer>\n        </Layout>\n      </Layout>\n\n      <br />\n\n      <h4>组合导航布局</h4>\n      <Layout>\n        <Header>Header</Header>\n        <Layout>\n          <Aside>Aside</Aside>\n          <Layout>\n            <Content>Content</Content>\n            <Footer>Copyright @ 2019-2021 Tencent. All Rights Reserved</Footer>\n          </Layout>\n        </Layout>\n      </Layout>\n\n      <br />\n\n      <Layout>\n        <Header>Header</Header>\n        <Layout>\n          <Layout>\n            <Content>Content</Content>\n            <Footer>Copyright @ 2019-2021 Tencent. All Rights Reserved</Footer>\n          </Layout>\n          <Aside>Aside</Aside>\n        </Layout>\n      </Layout>\n\n      <br />\n\n      <Layout>\n        <Header>Header</Header>\n        <Layout>\n          <Aside width={'80px'}>Aside</Aside>\n          <Layout>\n            <Content>Content</Content>\n            <Footer>Copyright @ 2019-2021 Tencent. All Rights Reserved</Footer>\n          </Layout>\n        </Layout>\n      </Layout>\n    </>\n  );\n}\n",
        "desc": "当子元素中包含  时，全部子元素会水平排列，否则会垂直排列。"
      },
      {
        "code": "import React from 'react';\nimport { Layout, Menu } from 'tdesign-react';\n\nconst { Content, Footer, Aside } = Layout;\nconst { MenuItem } = Menu;\nconst Logo = () => <img width=\"136\" src=\"https://www.tencent.com/img/index/menu_logo_hover.png\" alt=\"logo\" />;\nfunction BasicUsage(props) {\n  return (\n    <Menu\n      style={{\n        width: '100%',\n        height: '100%',\n        boxShadow: 'none',\n      }}\n      logo={<Logo />}\n      {...props}\n    >\n      <MenuItem value=\"1\">侧边内容一</MenuItem>\n      <MenuItem value=\"2\">侧边内容二</MenuItem>\n      <MenuItem value=\"3\">侧边内容三</MenuItem>\n      <MenuItem value=\"4\">侧边内容四</MenuItem>\n      <MenuItem value=\"5\">侧边内容无</MenuItem>\n    </Menu>\n  );\n}\nexport default function BasicDivider() {\n  return (\n    <>\n      <h4>侧边导航布局</h4>\n      <Layout>\n        <Aside>\n          <BasicUsage />\n        </Aside>\n        <Layout>\n          <Content>\n            <div>Content</div>\n          </Content>\n          <Footer>Copyright @ 2019-2020 Tencent. All Rights Reserved</Footer>\n        </Layout>\n      </Layout>\n    </>\n  );\n}\n",
        "desc": "主要包含侧边导航、内容区域。该布局下，页面间切换的操作效率较高，但压缩了内容区域的横向空间。适用于导航层级较深，导航效率要求较高的页面。"
      },
      {
        "code": "import React from 'react';\nimport { Layout, Menu } from 'tdesign-react';\nimport { SearchIcon, NotificationFilledIcon, HomeIcon } from 'tdesign-icons-react';\n\nconst { Header, Content, Footer } = Layout;\nconst { HeadMenu, MenuItem } = Menu;\nexport default function BasicDivider() {\n  return (\n    <Layout>\n      <Header>\n        <HeadMenu\n          value=\"item1\"\n          logo={<img width=\"136\" src=\"https://www.tencent.com/img/index/menu_logo_hover.png\" alt=\"logo\" />}\n          operations={\n            <div className=\"t-menu__operations\">\n              <SearchIcon className=\"t-menu__operations-icon\" />\n              <NotificationFilledIcon className=\"t-menu__operations-icon\" />\n              <HomeIcon className=\"t-menu__operations-icon\" />\n            </div>\n          }\n        >\n          <MenuItem value=\"item1\">已选内容</MenuItem>\n          <MenuItem value=\"item2\">菜单内容一</MenuItem>\n          <MenuItem value=\"item3\">菜单内容二</MenuItem>\n          <MenuItem value=\"item4\" disabled>\n            菜单内容三\n          </MenuItem>\n        </HeadMenu>\n      </Header>\n      <Content>\n        <div>Content</div>\n      </Content>\n      <Footer>Copyright @ 2019-2020 Tencent. All Rights Reserved</Footer>\n    </Layout>\n  );\n}\n",
        "desc": "主要包含顶部区域、内容区域。该布局下，横向空间的展示效率很高，但损失了导航空间，降低了页面导航的切换效率。适用于主要操作区域在内容区域，对页面叠好效率要求不高的页面。对于该类页面，为了保证信息布局的稳定性，内容区域的宽度常设置为固定宽度。"
      },
      {
        "code": "import React from 'react';\nimport { Layout, Menu } from 'tdesign-react';\nimport {\n  SearchIcon,\n  NotificationFilledIcon,\n  HomeIcon,\n  DashboardIcon,\n  ServerIcon,\n  RootListIcon,\n  ControlPlatformIcon,\n  PreciseMonitorIcon,\n  MailIcon,\n  UserCircleIcon,\n  PlayCircleIcon,\n  Edit1Icon,\n} from 'tdesign-icons-react';\n\nconst { HeadMenu, MenuItem } = Menu;\nfunction BasicUsage() {\n  return (\n    <Menu\n      theme=\"light\"\n      value=\"dashboard\"\n      style={{\n        marginRight: 50,\n        height: 550,\n      }}\n    >\n      <MenuItem value=\"dashboard\" icon={<DashboardIcon />}>\n        仪表盘\n      </MenuItem>\n      <MenuItem value=\"resource\" icon={<ServerIcon />}>\n        资源列表\n      </MenuItem>\n      <MenuItem value=\"root\">\n        <RootListIcon />\n        根目录\n      </MenuItem>\n      <MenuItem value=\"control-platform\" icon={<ControlPlatformIcon />}>\n        调度平台\n      </MenuItem>\n      <MenuItem value=\"precise-monitor\" icon={<PreciseMonitorIcon />}>\n        精准监控\n      </MenuItem>\n      <MenuItem value=\"mail\" icon={<MailIcon />}>\n        消息区\n      </MenuItem>\n      <MenuItem value=\"user-circle\" icon={<UserCircleIcon />}>\n        个人中心\n      </MenuItem>\n      <MenuItem value=\"play-circle\" icon={<PlayCircleIcon />}>\n        视频区\n      </MenuItem>\n      <MenuItem value=\"edit1\" icon={<Edit1Icon />}>\n        资源编辑\n      </MenuItem>\n    </Menu>\n  );\n}\nconst { Header, Content, Footer, Aside } = Layout;\nexport default function BasicDivider() {\n  return (\n    <div className=\"tdesign-demo-item--layout\">\n      <Layout>\n        <Header>\n          <HeadMenu\n            value=\"item1\"\n            logo={<img width=\"136\" src=\"https://www.tencent.com/img/index/menu_logo_hover.png\" alt=\"logo\" />}\n            operations={\n              <div className=\"t-menu__operations\">\n                <SearchIcon className=\"t-menu__operations-icon\" />\n                <NotificationFilledIcon className=\"t-menu__operations-icon\" />\n                <HomeIcon className=\"t-menu__operations-icon\" />\n              </div>\n            }\n          >\n            <MenuItem value=\"item1\">已选内容</MenuItem>\n            <MenuItem value=\"item2\">菜单内容一</MenuItem>\n            <MenuItem value=\"item3\">菜单内容二</MenuItem>\n            <MenuItem value=\"item4\" disabled>\n              菜单内容三\n            </MenuItem>\n          </HeadMenu>\n        </Header>\n        <Layout>\n          <Aside\n            style={{\n              borderTop: '1px solid var(--component-border)',\n            }}\n          >\n            <BasicUsage />\n          </Aside>\n          <Layout>\n            <Content>\n              <div>Content</div>\n            </Content>\n            <Footer>Copyright @ 2019-2020 Tencent. All Rights Reserved</Footer>\n          </Layout>\n        </Layout>\n      </Layout>\n    </div>\n  );\n}\n",
        "desc": "主要包含顶部导航、侧边导航、内容区域。顶部导航和侧边导航的组合使用，提升了导航效率。多用于信息架构复杂、对导航效率有一定要求的应用型网站。"
      }
    ]
  },
  {
    "name": "<Space/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Space, Button } from 'tdesign-react';\n\nconst BaseSpace = () => (\n  <Space>\n    <Button>Button</Button>\n    <Button>Button</Button>\n    <Button>Button</Button>\n  </Space>\n);\nexport default BaseSpace;\n",
        "desc": "默认为横向排列，控制相邻组件水平间距。"
      },
      {
        "code": "import React from 'react';\nimport { Space, Card } from 'tdesign-react';\n\nconst BaseSpace = () => (\n  <Space direction=\"vertical\">\n    <Card title=\"标题\" actions=\"操作\" header bordered hoverShadow>\n      仅有内容区域的卡片形式。卡片内容区域可以是文字、图片、表单、表格等形式信息内容。可使用大中小不同的卡片尺寸，按业务需求进行呈现。\n    </Card>\n    <Card title=\"标题\" actions=\"操作\" header bordered hoverShadow>\n      仅有内容区域的卡片形式。卡片内容区域可以是文字、图片、表单、表格等形式信息内容。可使用大中小不同的卡片尺寸，按业务需求进行呈现。\n    </Card>\n    <Card title=\"标题\" actions=\"操作\" header bordered hoverShadow>\n      仅有内容区域的卡片形式。卡片内容区域可以是文字、图片、表单、表格等形式信息内容。可使用大中小不同的卡片尺寸，按业务需求进行呈现。\n    </Card>\n  </Space>\n);\nexport default BaseSpace;\n",
        "desc": "可以设置  调整为竖向排列。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Space, Slider, Button } from 'tdesign-react';\n\nconst BaseSpace = () => {\n  const [size, setSize] = useState(8);\n  return (\n    <>\n      <Slider value={size} onChange={setSize}></Slider>\n      <br />\n      <Space size={size}>\n        <Button>Button</Button>\n        <Button>Button</Button>\n        <Button>Button</Button>\n        <Button>Button</Button>\n      </Space>\n    </>\n  );\n};\nexport default BaseSpace;\n",
        "desc": "可以通过  调整间距大小，自带三个可选值 、、。 也可以自定义设置，设置为数组时参数为 。"
      },
      {
        "code": "import React from 'react';\nimport { Space, Button } from 'tdesign-react';\n\nconst BaseSpace = () => (\n  <Space breakLine>\n    <Space\n      align=\"start\"\n      style={{\n        padding: 12,\n        border: '1px dashed var(--td-component-stroke)',\n      }}\n    >\n      <div>start</div>\n      <Button>Button</Button>\n      <div\n        style={{\n          background: 'var(--td-bg-color-component)',\n          height: 60,\n          width: 60,\n        }}\n      ></div>\n    </Space>\n    <Space\n      align=\"center\"\n      style={{\n        padding: 12,\n        border: '1px dashed var(--td-component-stroke)',\n      }}\n    >\n      <div>center</div>\n      <Button>Button</Button>\n      <div\n        style={{\n          background: 'var(--td-bg-color-component)',\n          height: 60,\n          width: 60,\n        }}\n      ></div>\n    </Space>\n    <Space\n      align=\"end\"\n      style={{\n        padding: 12,\n        border: '1px dashed var(--td-component-stroke)',\n      }}\n    >\n      <div>end</div>\n      <Button>Button</Button>\n      <div\n        style={{\n          background: 'var(--td-bg-color-component)',\n          height: 60,\n          width: 60,\n        }}\n      ></div>\n    </Space>\n    <Space\n      align=\"baseline\"\n      style={{\n        padding: 12,\n        border: '1px dashed var(--td-component-stroke)',\n      }}\n    >\n      <div>baseline</div>\n      <Button>Button</Button>\n      <div\n        style={{\n          background: 'var(--td-bg-color-component)',\n          height: 60,\n          width: 60,\n        }}\n      ></div>\n    </Space>\n  </Space>\n);\nexport default BaseSpace;\n",
        "desc": "可以通过  设置辅轴对齐方式，效果与  一致。"
      },
      {
        "code": "import React from 'react';\nimport { Space, Button } from 'tdesign-react';\n\nconst BaseSpace = () => (\n  <Space breakLine>\n    <Button>Button</Button>\n    <Button>Button</Button>\n    <Button>Button</Button>\n    <Button>Button</Button>\n    <Button>Button</Button>\n    <Button>Button</Button>\n    <Button>Button</Button>\n    <Button>Button</Button>\n    <Button>Button</Button>\n    <Button>Button</Button>\n  </Space>\n);\nexport default BaseSpace;\n",
        "desc": "可以通过  控制是否自动换行，默认不换行。"
      },
      {
        "code": "import React from 'react';\nimport { Space, Button, Divider } from 'tdesign-react';\n\nconst BaseSpace = () => (\n  <Space align=\"center\" separator={<Divider layout=\"vertical\" />}>\n    <Button variant=\"text\">Text</Button>\n    <Button variant=\"text\">Text</Button>\n    <Button variant=\"text\">Text</Button>\n  </Space>\n);\nexport default BaseSpace;\n",
        "desc": "可以通过  设置分隔符。"
      }
    ]
  },
  {
    "name": "<Affix/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { Affix, Button } from 'tdesign-react';\n\nexport default function BaseExample() {\n  const [top, setTop] = useState(150);\n  const handleClick = () => {\n    setTop(top + 10);\n  };\n  return (\n    <Affix offsetTop={top} offsetBottom={10}>\n      <Button onClick={handleClick}>固钉</Button>\n    </Affix>\n  );\n}\n",
        "desc": "适用于页面结构简单的场景，默认容器是 。"
      },
      {
        "code": "import React, { useState, useRef, useEffect } from 'react';\nimport { Affix, Button } from 'tdesign-react';\n\nexport default function ContainerExample() {\n  const [container, setContainer] = useState(null);\n  const [affixed, setAffixed] = useState(false);\n  const affixRef = useRef(null);\n  const handleFixedChange = (affixed, { top }) => {\n    console.log('top', top);\n    setAffixed(affixed);\n  };\n  useEffect(() => {\n    if (affixRef.current) {\n      const { handleScroll } = affixRef.current;\n      // 防止 affix 移动到容器外\n      window.addEventListener('scroll', handleScroll);\n      return () => window.removeEventListener('scroll', handleScroll);\n    }\n  }, []);\n  const backgroundStyle = {\n    height: '1500px',\n    paddingTop: '700px',\n    backgroundColor: '#eee',\n    backgroundImage:\n      'linear-gradient(45deg,#bbb 25%,transparent 0),linear-gradient(45deg,transparent 75%,#bbb 0),linear-gradient(45deg,#bbb 25%,transparent 0),linear-gradient(45deg,transparent 75%,#bbb 0)',\n    backgroundSize: '30px 30px',\n    backgroundPosition: '0 0,15px 15px,15px 15px,0 0',\n  };\n  return (\n    <div\n      style={{\n        border: '1px solid var(--component-stroke)',\n        borderRadius: '3px',\n        height: '400px',\n        overflowX: 'hidden',\n        overflowY: 'auto',\n        overscrollBehavior: 'none',\n      }}\n      ref={setContainer}\n    >\n      <div style={backgroundStyle}>\n        <Affix\n          offsetTop={50}\n          offsetBottom={50}\n          container={container}\n          zIndex={5}\n          onFixedChange={handleFixedChange}\n          ref={affixRef}\n        >\n          <Button>affixed: {`${affixed}`}</Button>\n        </Affix>\n      </div>\n    </div>\n  );\n}\n",
        "desc": "适用于较为复杂的场景，元素固定位置会受容器位置的影响。"
      }
    ]
  },
  {
    "name": "<Anchor/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Anchor } from 'tdesign-react';\n\nconst { AnchorItem } = Anchor;\nexport default function AnchorBase() {\n  const handleClick = ({ e, href, title }) => {\n    console.log('handleClick', e, href, title);\n  };\n  const handleChange = (currentLink, prevLink) => {\n    console.log('currentLink', currentLink, 'prevLink', prevLink);\n  };\n  return (\n    <div\n      style={{\n        display: 'flex',\n      }}\n    >\n      <div\n        style={{\n          flex: '1',\n        }}\n      ></div>\n      <Anchor\n        onClick={handleClick}\n        onChange={handleChange}\n        targetOffset={150}\n        affixProps={{\n          offsetTop: 150,\n        }}\n      >\n        <AnchorItem href=\"#基础锚点\" title=\"基础锚点\" />\n        <AnchorItem href=\"#多级锚点\" title=\"多级锚点\" />\n        <AnchorItem href=\"#指定容器锚点\" title=\"指定容器锚点\" />\n        <AnchorItem href=\"#特定交互锚点\" title=\"特定交互锚点\" />\n        <AnchorItem href=\"#尺寸\" title=\"尺寸\"></AnchorItem>\n      </Anchor>\n    </div>\n  );\n}\n",
        "desc": "锚点间不存在层级关系。适用于锚点间为同级关系时，属于页面结构简单的场景。"
      },
      {
        "code": "import React from 'react';\nimport { Anchor } from 'tdesign-react';\n\nconst { AnchorItem } = Anchor;\nexport default function AnchorMultiple() {\n  return (\n    <>\n      <Anchor bounds={100} targetOffset={50}>\n        <AnchorItem href=\"#基础锚点\" title=\"基础锚点\" />\n        <AnchorItem href=\"#多级锚点\" title=\"多级锚点\" />\n        <AnchorItem href=\"#指定容器锚点\" title=\"指定容器锚点\" />\n        <AnchorItem href=\"#特定交互锚点\" title=\"特定交互锚点\" />\n        <AnchorItem href=\"#尺寸\" title=\"尺寸\">\n          <AnchorItem href=\"#size\" title=\"size-medium\"></AnchorItem>\n          <AnchorItem href=\"#size-large\" title=\"size-large\"></AnchorItem>\n        </AnchorItem>\n      </Anchor>\n    </>\n  );\n}\n",
        "desc": "锚点内含有层级关系。适用锚点内含有父子级关系时，属于页面结构复杂的场景。"
      },
      {
        "code": "import React from 'react';\nimport { Anchor } from 'tdesign-react';\n\nconst { AnchorItem } = Anchor;\nconst cursorStyle = {\n  width: '10px',\n  height: '10px',\n  backgroundColor: '#0052D9',\n  position: 'absolute',\n  borderRadius: '50%',\n  left: '50%',\n  marginLeft: '-5px',\n  top: '50%',\n  marginTop: '-5px',\n};\nexport default function AnchorBase() {\n  return (\n    <div\n      style={{\n        display: 'flex',\n      }}\n    >\n      <Anchor targetOffset={150} cursor={<div style={cursorStyle}></div>}>\n        <AnchorItem href=\"#基础锚点\" title=\"基础锚点\" />\n        <AnchorItem href=\"#多级锚点\" title=\"多级锚点\" />\n        <AnchorItem href=\"#指定容器锚点\" title=\"指定容器锚点\" />\n        <AnchorItem href=\"#特定交互锚点\" title=\"特定交互锚点\" />\n        <AnchorItem href=\"#尺寸\" title=\"尺寸\"></AnchorItem>\n      </Anchor>\n    </div>\n  );\n}\n",
        "desc": "支持根据自己的需求，设置游标的样式"
      },
      {
        "code": "import React from 'react';\nimport { Anchor } from 'tdesign-react';\n\nconst { AnchorItem } = Anchor;\nexport default function AnchorAttach() {\n  const handleClick = ({ e, href, title }) => {\n    e.preventDefault();\n    console.log('handleClick', href, title);\n  };\n  return (\n    <>\n      <div\n        style={{\n          display: 'flex',\n        }}\n        id=\"attach\"\n        className=\"anchor-demo-attach\"\n      >\n        <Anchor container=\"#anchor-container\" onClick={handleClick}>\n          <AnchorItem href=\"#content-1\" title=\"content-1\" />\n          <AnchorItem href=\"#content-2\" title=\"content-2\" />\n          <AnchorItem href=\"#content-3\" title=\"content-3\" />\n          <AnchorItem href=\"#content-4\" title=\"content-4\" />\n        </Anchor>\n        <div\n          id=\"anchor-container\"\n          style={{\n            width: '100%',\n            height: '200px',\n            overflow: 'auto',\n            textAlign: 'center',\n            fontSize: '22px',\n          }}\n        >\n          <div\n            id=\"content-1\"\n            style={{\n              background: '#DFEFFF',\n              lineHeight: '100px',\n            }}\n          >\n            content-1\n          </div>\n          <div\n            id=\"content-2\"\n            style={{\n              background: '#BFDBF7',\n              lineHeight: '100px',\n            }}\n          >\n            content-2\n          </div>\n          <div\n            id=\"content-3\"\n            style={{\n              background: '#9BC5F2',\n              lineHeight: '100px',\n            }}\n          >\n            content-3\n          </div>\n          <div\n            id=\"content-4\"\n            style={{\n              background: '#7BAFED',\n              lineHeight: '100px',\n            }}\n          >\n            content-4\n          </div>\n          <div\n            id=\"content-5\"\n            style={{\n              background: '#5C99EB',\n              lineHeight: '100px',\n            }}\n          >\n            content-5\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n",
        "desc": "指定响应滚动的容器进行锚点定位，以及 click 事件的应用，阻止锚点添加到 uri 上。"
      },
      {
        "code": "import React from 'react';\nimport { Anchor } from 'tdesign-react';\n\nconst { AnchorTarget } = Anchor;\nexport default function AnchorTargetExample() {\n  return (\n    <div id=\"/components/anchor/#anchor-target\" className=\"anchor-demo\">\n      <AnchorTarget id=\"/components/anchor/#default\" tag=\"h1\">\n        基础锚点\n      </AnchorTarget>\n      <AnchorTarget id=\"/components/anchor/#multiple\" tag=\"h1\">\n        多级锚点\n      </AnchorTarget>\n      <AnchorTarget id=\"/components/anchor/#size\" tag=\"h1\">\n        尺寸大小\n      </AnchorTarget>\n      <AnchorTarget id=\"/components/anchor/#attach\" tag=\"h1\">\n        指定容器\n      </AnchorTarget>\n    </div>\n  );\n}\n",
        "desc": "用于锚点定位后的交互, 包括: 高亮当前锚点、复制链接"
      },
      {
        "code": "import React from 'react';\nimport { Anchor } from 'tdesign-react';\n\nconst { AnchorItem } = Anchor;\nexport default function AnchorSize() {\n  return (\n    <div id=\"size-small\">\n      <Anchor bounds={100} targetOffset={50} size=\"small\">\n        <AnchorItem href=\"#default\" title=\"基础锚点\" />\n        <AnchorItem href=\"#multiple\" title=\"多级锚点\" />\n        <AnchorItem href=\"#size\" title=\"尺寸大小\">\n          <AnchorItem href=\"#size\" title=\"size-medium\"></AnchorItem>\n          <AnchorItem href=\"#size-large\" title=\"size-large\"></AnchorItem>\n        </AnchorItem>\n        <AnchorItem href=\"#attach\" title=\"指定容器\" />\n      </Anchor>\n    </div>\n  );\n}\n",
        "desc": "提供大、小两种尺寸"
      },
      {
        "code": "import React from 'react';\nimport { Anchor } from 'tdesign-react';\n\nconst { AnchorItem } = Anchor;\nexport default function AnchorSizeLarge() {\n  return (\n    <div id=\"size-large\">\n      <Anchor bounds={100} targetOffset={50} size=\"large\">\n        <AnchorItem href=\"#default\" title=\"基础锚点\" />\n        <AnchorItem href=\"#multiple\" title=\"多级锚点\" />\n        <AnchorItem href=\"#size\" title=\"尺寸大小\">\n          <AnchorItem href=\"#size\" title=\"size-medium\"></AnchorItem>\n          <AnchorItem href=\"#size-large\" title=\"size-large\"></AnchorItem>\n        </AnchorItem>\n        <AnchorItem href=\"#attach\" title=\"指定容器\" />\n      </Anchor>\n    </div>\n  );\n}\n",
        "desc": "基础锚点多级锚点尺寸大小size-mediumsize-large指定容器"
      },
      {
        "code": "import React from 'react';\nimport { Anchor } from 'tdesign-react';\n\nconst { AnchorItem } = Anchor;\nexport default function AnchorBase() {\n  return (\n    <div\n      style={{\n        display: 'flex',\n      }}\n    >\n      <div\n        style={{\n          flex: '1',\n        }}\n      ></div>\n      <Anchor getCurrentAnchor={() => '#基础锚点'}>\n        <AnchorItem href=\"#基础锚点\" title=\"基础锚点\" />\n        <AnchorItem href=\"#多级锚点\" title=\"多级锚点\" />\n        <AnchorItem href=\"#自定义游标锚点\" title=\"自定义游标锚点\" />\n        <AnchorItem href=\"#指定容器锚点\" title=\"指定容器锚点\" />\n        <AnchorItem href=\"#特定交互锚点\" title=\"特定交互锚点\" />\n        <AnchorItem href=\"#不同尺寸的锚点\" title=\"不同尺寸的锚点\" />\n        <AnchorItem href=\"#自定义锚点高亮\" title=\"自定义锚点高亮\" />\n      </Anchor>\n    </div>\n  );\n}\n",
        "desc": "自定义锚点高亮"
      }
    ]
  },
  {
    "name": "<BackTop/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { BackTop, List } from 'tdesign-react';\n\nexport default function BasicBackTop() {\n  const [container, setContainer] = useState(null);\n  const style = {\n    position: 'absolute',\n    insetInlineEnd: 24,\n    insetBlockEnd: 80,\n  };\n  const listWrapStyle = {\n    width: '100%',\n    height: '280px',\n    position: 'relative',\n    overflowY: 'scroll',\n    overflowX: 'hidden',\n    border: '1px solid #dcdcdcff',\n  };\n  return (\n    <div\n      style={{\n        position: 'relative',\n      }}\n    >\n      <div id=\"demo_1\" style={listWrapStyle} ref={setContainer}>\n        <List>\n          {Array.from(Array(50), () => '列表内容').map((item, index) => (\n            <List.ListItem key={index}>{item}</List.ListItem>\n          ))}\n        </List>\n      </div>\n      <BackTop container={() => container} visibleHeight={46} style={style}></BackTop>\n    </div>\n  );\n}\n",
        "desc": "默认距离页面右侧24px，距离页面底部80px，滚动动画时长200ms"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { BackTop, List } from 'tdesign-react';\n\nexport default function BasicBackTop() {\n  const [container, setContainer] = useState(null);\n  const style = {\n    position: 'absolute',\n    insetInlineEnd: 24,\n    insetBlockEnd: 80,\n  };\n  const listWrapStyle = {\n    width: '100%',\n    height: '280px',\n    position: 'relative',\n    overflowY: 'scroll',\n    overflowX: 'hidden',\n    border: '1px solid #dcdcdcff',\n  };\n  return (\n    <div\n      style={{\n        position: 'relative',\n      }}\n    >\n      <div id=\"demo_1\" style={listWrapStyle} ref={setContainer}>\n        <List>\n          {Array.from(Array(50), () => '列表内容').map((item, index) => (\n            <List.ListItem key={index}>{item}</List.ListItem>\n          ))}\n        </List>\n      </div>\n      <BackTop container={() => container} visibleHeight={46} style={style} size=\"small\" duration={500}></BackTop>\n    </div>\n  );\n}\n",
        "desc": "可设置不同耗时的回到顶部"
      },
      {
        "code": "import React from 'react';\nimport { BackTop, Space } from 'tdesign-react';\n\nexport default function BasicBackTop() {\n  const style = {\n    position: 'relative',\n    insetInlineEnd: 0,\n    insetBlockEnd: 0,\n  };\n  return (\n    <Space direction=\"vertical\" size={32}>\n      <Space size={24}>\n        <BackTop style={style} visibleHeight={0} size=\"small\" offset={['24px', '300px']} container={() => document} />\n        <BackTop style={style} visibleHeight={0} size=\"medium\" offset={['124px', '300px']} container={() => document} />\n      </Space>\n      <Space size={24}>\n        <BackTop\n          style={style}\n          visibleHeight={0}\n          size=\"small\"\n          theme=\"primary\"\n          offset={['24px', '300px']}\n          container={() => document}\n        />\n        <BackTop\n          style={style}\n          visibleHeight={0}\n          size=\"medium\"\n          theme=\"primary\"\n          offset={['124px', '300px']}\n          container={() => document}\n        />\n      </Space>\n      <Space size={24}>\n        <BackTop\n          style={style}\n          visibleHeight={0}\n          size=\"small\"\n          theme=\"dark\"\n          offset={['24px', '300px']}\n          container={() => document}\n        />\n        <BackTop\n          style={style}\n          visibleHeight={0}\n          size=\"medium\"\n          theme=\"dark\"\n          offset={['124px', '300px']}\n          container={() => document}\n        />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "提供标准（默认）、小两种尺寸。"
      },
      {
        "code": "import React from 'react';\nimport { BackTop, Space } from 'tdesign-react';\n\nexport default function BasicBackTop() {\n  const style = {\n    position: 'relative',\n    insetInlineEnd: 0,\n    insetBlockEnd: 0,\n  };\n  return (\n    <Space direction=\"vertical\" size={32}>\n      <Space size={24}>\n        <BackTop style={style} visibleHeight={0} shape=\"circle\" container={() => document} />\n        <BackTop style={style} visibleHeight={0} shape=\"square\" container={() => document} />\n      </Space>\n      <Space size={24}>\n        <BackTop style={style} visibleHeight={0} shape=\"circle\" theme=\"primary\" container={() => document} />\n        <BackTop style={style} visibleHeight={0} shape=\"square\" theme=\"primary\" container={() => document} />\n      </Space>\n      <Space size={24}>\n        <BackTop style={style} visibleHeight={0} shape=\"circle\" theme=\"dark\" container={() => document} />\n        <BackTop style={style} visibleHeight={0} shape=\"square\" theme=\"dark\" container={() => document} />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "提供圆形和方形两种不同形状。"
      },
      {
        "code": "import React from 'react';\nimport { BackTop, Space } from 'tdesign-react';\n\nexport default function BasicBackTop() {\n  const style = {\n    position: 'relative',\n    insetInlineEnd: 0,\n    insetBlockEnd: 0,\n  };\n  return (\n    <Space direction=\"vertical\" size={32}>\n      <Space size={24}>\n        <BackTop style={style} visibleHeight={0} container={() => document} />\n        <BackTop style={style} visibleHeight={0} theme=\"primary\" container={() => document} />\n        <BackTop style={style} visibleHeight={0} theme=\"dark\" container={() => document} />\n      </Space>\n      <Space size={24}>\n        <BackTop style={style} shape=\"circle\" visibleHeight={0} container={() => document} />\n        <BackTop style={style} shape=\"circle\" visibleHeight={0} theme=\"primary\" container={() => document} />\n        <BackTop style={style} shape=\"circle\" visibleHeight={0} theme=\"dark\" container={() => document} />\n      </Space>\n      <Space size={24}>\n        <BackTop style={style} size=\"small\" visibleHeight={0} container={() => document} />\n        <BackTop style={style} size=\"small\" visibleHeight={0} theme=\"primary\" container={() => document} />\n        <BackTop style={style} size=\"small\" visibleHeight={0} theme=\"dark\" container={() => document} />\n      </Space>\n      <Space size={24}>\n        <BackTop style={style} shape=\"circle\" size=\"small\" visibleHeight={0} container={() => document} />\n        <BackTop\n          style={style}\n          shape=\"circle\"\n          size=\"small\"\n          visibleHeight={0}\n          theme=\"primary\"\n          container={() => document}\n        />\n        <BackTop style={style} shape=\"circle\" size=\"small\" visibleHeight={0} theme=\"dark\" container={() => document} />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "不同组件主题的回到顶部"
      },
      {
        "code": "import React from 'react';\nimport { BackTop, Space } from 'tdesign-react';\n\nexport default function BasicBackTop() {\n  const style = {\n    position: 'relative',\n    insetInlineEnd: 0,\n    insetBlockEnd: 0,\n  };\n  return (\n    <Space size={24}>\n      <BackTop style={style} visibleHeight={0} offset={['24px', '500px']} container={() => document}>\n        <span className=\"custom-node\">返回</span>\n      </BackTop>\n      <BackTop\n        style={style}\n        visibleHeight={0}\n        default={<span>TOP</span>}\n        offset={['124px', '500px']}\n        container={() => document}\n      />\n      <BackTop\n        style={style}\n        visibleHeight={0}\n        content={<span>UP</span>}\n        offset={['224px', '500px']}\n        container={() => document}\n      />\n    </Space>\n  );\n}\n",
        "desc": "可自定义内容的回到顶部"
      }
    ]
  },
  {
    "name": "<Breadcrumb/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Breadcrumb } from 'tdesign-react';\n\nconst { BreadcrumbItem } = Breadcrumb;\nexport default function BreadcrumbExample() {\n  return (\n    <Breadcrumb maxItemWidth=\"200px\">\n      <BreadcrumbItem>页面1</BreadcrumbItem>\n      <BreadcrumbItem>页面2页面2页面2页面2页面2页面2页面2页面2</BreadcrumbItem>\n      <BreadcrumbItem maxWidth=\"120px\">\n        页面3页面3页面3页面3页面3页面3页面3页面3页面3页面3页面3页面3页面3页面3页面3\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n}\n",
        "desc": "适用于广泛的基础用法，系统拥有超过两级以上的层级结构，用于切换向上任意层级的内容。"
      },
      {
        "code": "import React from 'react';\nimport { Breadcrumb } from 'tdesign-react';\nimport { BookmarkIcon } from 'tdesign-icons-react';\n\nconst { BreadcrumbItem } = Breadcrumb;\nexport default function BreadcrumbExample() {\n  return (\n    <Breadcrumb>\n      <BreadcrumbItem icon={<BookmarkIcon />}>页面1</BreadcrumbItem>\n      <BreadcrumbItem icon={<BookmarkIcon />}>页面2</BreadcrumbItem>\n      <BreadcrumbItem icon={<BookmarkIcon />}>页面3</BreadcrumbItem>\n    </Breadcrumb>\n  );\n}\n",
        "desc": "可自定义每项内容，统一图标加文字，图标放在文字前面。"
      },
      {
        "code": "import React from 'react';\nimport { Breadcrumb } from 'tdesign-react';\n\nconst { BreadcrumbItem } = Breadcrumb;\nexport default function BreadcrumbExample() {\n  return (\n    <>\n      <Breadcrumb maxItemWidth=\"150\" separator={'>>'}>\n        <BreadcrumbItem>页面1</BreadcrumbItem>\n        <BreadcrumbItem>页面2</BreadcrumbItem>\n        <BreadcrumbItem maxItemWidth=\"160\">页面3</BreadcrumbItem>\n      </Breadcrumb>\n      <Breadcrumb maxItemWidth=\"150\" separator={'/////'}>\n        <BreadcrumbItem>页面1</BreadcrumbItem>\n        <BreadcrumbItem>页面2</BreadcrumbItem>\n        <BreadcrumbItem maxItemWidth=\"160\">页面3</BreadcrumbItem>\n      </Breadcrumb>\n    </>\n  );\n}\n",
        "desc": "通过  属性自定义分隔符，建议用图标而非文本符号。"
      },
      {
        "code": "import React from 'react';\nimport { Breadcrumb } from 'tdesign-react';\n\nexport default function BreadcrumbExample() {\n  const options = [\n    {\n      content: '页面1',\n    },\n    {\n      content: '页面2',\n    },\n    {\n      content: '页面3',\n      href: 'https://github.com/',\n    },\n  ];\n  return <Breadcrumb options={options} />;\n}\n",
        "desc": "使用  属性配置面包屑内容。"
      },
      {
        "code": "import React from 'react';\nimport { Breadcrumb } from 'tdesign-react';\n\nconst { BreadcrumbItem } = Breadcrumb;\nconst options = [\n  {\n    content: '页面1',\n  },\n  {\n    content: '页面2',\n  },\n  {\n    content: '页面3',\n  },\n  {\n    content: '页面4',\n  },\n  {\n    content: '页面5',\n  },\n];\nexport default function BreadcrumbExample() {\n  return (\n    <>\n      <Breadcrumb maxItems={3} itemsBeforeCollapse={2} itemsAfterCollapse={1}>\n        {options.map((option) => (\n          <BreadcrumbItem key={option.content} content={option.content} />\n        ))}\n      </Breadcrumb>\n\n      <Breadcrumb maxItems={3} itemsBeforeCollapse={2} itemsAfterCollapse={1} options={options} />\n    </>\n  );\n}\n",
        "desc": "使用 、、，配置省略。"
      },
      {
        "code": "import React from 'react';\nimport { Breadcrumb, Button, Dropdown } from 'tdesign-react';\nimport { EllipsisIcon } from 'tdesign-icons-react';\n\nconst { BreadcrumbItem } = Breadcrumb;\nconst options = [\n  {\n    content: '页面1',\n  },\n  {\n    content: '页面2',\n  },\n  {\n    content: '页面3',\n  },\n  {\n    content: '页面4',\n  },\n  {\n    content: '页面5',\n  },\n];\nexport default function BreadcrumbExample() {\n  return (\n    <>\n      <Breadcrumb\n        maxItems={4}\n        itemsBeforeCollapse={2}\n        itemsAfterCollapse={1}\n        ellipsis={(props) => (\n          <Dropdown>\n            <Button icon={<EllipsisIcon />} shape=\"square\" variant=\"text\" />\n            <Dropdown.DropdownMenu>\n              {props.items.map((item) => (\n                <Dropdown.DropdownItem key={String(item.content)}>{item.content}</Dropdown.DropdownItem>\n              ))}\n            </Dropdown.DropdownMenu>\n          </Dropdown>\n        )}\n      >\n        {options.map((option) => (\n          <BreadcrumbItem key={option.content} content={option.content} />\n        ))}\n      </Breadcrumb>\n\n      <Breadcrumb\n        maxItems={4}\n        itemsBeforeCollapse={2}\n        itemsAfterCollapse={1}\n        options={options}\n        ellipsis={(props) => (\n          <Dropdown>\n            <Button icon={<EllipsisIcon />} shape=\"square\" variant=\"text\" />\n            <Dropdown.DropdownMenu>\n              {props.items.map((item) => (\n                <Dropdown.DropdownItem key={String(item.content)}>{item.content}</Dropdown.DropdownItem>\n              ))}\n            </Dropdown.DropdownMenu>\n          </Dropdown>\n        )}\n      />\n    </>\n  );\n}\n",
        "desc": "自定义省略号"
      }
    ]
  },
  {
    "name": "<Dropdown/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Dropdown, Button, MessagePlugin } from 'tdesign-react';\nimport { Icon } from 'tdesign-icons-react';\n\nexport default function BasicDropdown() {\n  const getContent = () => <div>操作四</div>;\n  const options = [\n    {\n      content: '操作一',\n      value: 1,\n    },\n    {\n      content: '操作二',\n      value: 2,\n    },\n    {\n      content: '操作三',\n      value: 3,\n    },\n    {\n      content: getContent(),\n      value: 4,\n    },\n  ];\n  const clickHandler = (data) => {\n    MessagePlugin.success(`选中【${data.value}】`);\n  };\n  return (\n    <Dropdown options={options} onClick={clickHandler}>\n      <Button variant=\"text\" suffix={<Icon name=\"chevron-down\" size=\"16\" />}>\n        更多\n      </Button>\n    </Dropdown>\n  );\n}\n",
        "desc": "文字按钮触发下拉菜单。常用于空间极度受限的收纳操作场景，一般用于表格内详情操作的收纳。"
      },
      {
        "code": "import React from 'react';\nimport { Dropdown, Button, MessagePlugin } from 'tdesign-react';\nimport { Icon } from 'tdesign-icons-react';\n\nexport default function BasicDropdown() {\n  const getContent = () => <div>操作四</div>;\n  const options = [\n    {\n      content: '操作一',\n      value: 1,\n    },\n    {\n      content: '操作二',\n      value: 2,\n    },\n    {\n      content: '操作三',\n      value: 3,\n    },\n    {\n      content: getContent(),\n      value: 4,\n    },\n  ];\n  const clickHandler = (data) => {\n    MessagePlugin.success(`选中【${data.value}】`);\n  };\n  return (\n    <Dropdown options={options} onClick={clickHandler}>\n      <Button theme=\"default\" variant=\"outline\" shape=\"square\">\n        <Icon name=\"ellipsis\" size=\"16\" />\n      </Button>\n    </Dropdown>\n  );\n}\n",
        "desc": "普通按钮触发下拉菜单。常用于操作收纳场景。"
      },
      {
        "code": "import React from 'react';\nimport { Dropdown, Button, MessagePlugin } from 'tdesign-react';\nimport { Icon } from 'tdesign-icons-react';\n\nexport default function BasicDropdown() {\n  const getContent = () => <div>操作四</div>;\n  const options = [\n    {\n      content: '操作一',\n      value: 1,\n    },\n    {\n      content: '操作二',\n      value: 2,\n    },\n    {\n      content: '操作三',\n      value: 3,\n      divider: true,\n    },\n    {\n      content: getContent(),\n      value: 4,\n    },\n  ];\n  const clickHandler = (data) => {\n    MessagePlugin.success(`选中【${data.value}】`);\n  };\n  return (\n    <Dropdown options={options} onClick={clickHandler}>\n      <Button variant=\"text\" suffix={<Icon name=\"chevron-down\" size=\"16\" />}>\n        更多\n      </Button>\n    </Dropdown>\n  );\n}\n",
        "desc": "通过分割线区分不同的下拉菜单操作。常用于需要区分不同操作结果的场景。"
      },
      {
        "code": "import React from 'react';\nimport { Dropdown, Button, MessagePlugin } from 'tdesign-react';\nimport { Icon } from 'tdesign-icons-react';\n\nexport default function BasicDropdown() {\n  const options = [\n    {\n      content: '操作一',\n      value: 1,\n      children: [\n        {\n          content: '操作九',\n          value: 9,\n        },\n      ],\n    },\n    {\n      content: '操作二操作二操作二操作二',\n      value: 2,\n      children: [\n        {\n          content: '操作五',\n          value: 5,\n        },\n        {\n          content: '操作六',\n          value: 6,\n        },\n      ],\n    },\n    {\n      content: '操作三',\n      value: 3,\n      children: [\n        {\n          content: '操作十',\n          value: 10,\n        },\n      ],\n    },\n    {\n      content: '操作四',\n      value: 4,\n      children: [\n        {\n          content: '操作十一',\n          value: 11,\n        },\n      ],\n    },\n    {\n      content: '操作五',\n      value: 5,\n      children: [\n        {\n          content: '操作十二',\n          value: 12,\n        },\n      ],\n    },\n    {\n      content: '操作六',\n      value: 6,\n      children: [\n        {\n          content: '操作十三',\n          value: 13,\n        },\n      ],\n    },\n    {\n      content: '操作七',\n      value: 7,\n    },\n    {\n      content: '操作八',\n      value: 8,\n    },\n    {\n      content: '操作十八',\n      value: 18,\n      children: [\n        {\n          content: '操作十四',\n          value: 14,\n        },\n        {\n          content: '操作十五',\n          value: 15,\n        },\n        {\n          content: '操作十六',\n          value: 16,\n          children: [\n            {\n              content: '三级操作一',\n              value: 20,\n            },\n            {\n              content: '三级操作二',\n              value: 21,\n            },\n          ],\n        },\n        {\n          content: '操作十七',\n          value: 17,\n        },\n      ],\n    },\n  ];\n  const clickHandler = (data) => {\n    MessagePlugin.success(`选中【${data.value}】`);\n  };\n  return (\n    <Dropdown options={options} onClick={clickHandler} maxHeight={200}>\n      <Button theme=\"default\" variant=\"outline\" shape=\"square\">\n        <Icon name=\"ellipsis\" size=\"16\" />\n      </Button>\n    </Dropdown>\n  );\n}\n",
        "desc": "带逻辑层级关系的操作下拉菜单。常用于需要收纳多层逻辑的操作场景。"
      },
      {
        "code": "import React from 'react';\nimport { Dropdown, Button, MessagePlugin } from 'tdesign-react';\nimport { Icon } from 'tdesign-icons-react';\n\nexport default function BasicDropdown() {\n  const getContent = () => <div>操作四</div>;\n  const options = [\n    {\n      content: '操作一',\n      value: 1,\n    },\n    {\n      content: '操作二',\n      value: 2,\n    },\n    {\n      content: '操作三',\n      value: 3,\n      disabled: true,\n    },\n    {\n      content: getContent(),\n      value: 4,\n      disabled: true,\n    },\n  ];\n  const clickHandler = (data) => {\n    MessagePlugin.success(`选中【${data.value}】`);\n  };\n  return (\n    <Dropdown options={options} onClick={clickHandler}>\n      <Button variant=\"text\" suffix={<Icon name=\"chevron-down\" size=\"16\" />}>\n        更多\n      </Button>\n    </Dropdown>\n  );\n}\n",
        "desc": "下拉菜单的操作项可以设置禁用。常用于禁用部分操作项的场景。"
      },
      {
        "code": "import React from 'react';\nimport { Dropdown, Button, MessagePlugin } from 'tdesign-react';\n\nexport default function BasicDropdown() {\n  const getContent = () => <div>操作四</div>;\n  const options = [\n    {\n      content: '操作一',\n      value: 1,\n    },\n    {\n      content: '操作二',\n      value: 2,\n    },\n    {\n      content: '操作三',\n      value: 3,\n    },\n    {\n      content: getContent(),\n      value: 4,\n    },\n  ];\n  const clickHandler = (data) => {\n    MessagePlugin.success(`选中【${data.value}】`);\n  };\n  return (\n    <Dropdown\n      options={options}\n      onClick={clickHandler}\n      trigger=\"click\"\n      popupProps={{\n        overlayStyle: {\n          fontWeight: 'normal',\n        },\n        overlayInnerStyle: {\n          fontWeight: 'normal',\n        },\n        overlayClassName: 'dropdown-custom-overlay-class',\n        overlayInnerClassName: 'dropdown-custom-overlay-inner-class',\n      }}\n    >\n      <Button>点击我试试</Button>\n    </Dropdown>\n  );\n}\n",
        "desc": "下拉菜单依赖  组件，可以透传自定义  组件的属性。"
      },
      {
        "code": "import React from 'react';\nimport { Dropdown, Button, MessagePlugin } from 'tdesign-react';\n\nexport default function BasicDropdown() {\n  const options = Array.from({\n    length: 20,\n  }).map((v, k) => ({\n    content: `选项${k + 1}`,\n    value: k + 1,\n  }));\n  const clickHandler = (data) => {\n    MessagePlugin.success(`选中【${data.value}】`);\n  };\n  return (\n    <Dropdown options={options} onClick={clickHandler} maxHeight={400} minColumnWidth={'90px'}>\n      <Button>hover我试试</Button>\n    </Dropdown>\n  );\n}\n",
        "desc": "下拉菜单支持定义最大高度。"
      },
      {
        "code": "import React from 'react';\nimport { Dropdown, Button, MessagePlugin } from 'tdesign-react';\nimport { Icon } from 'tdesign-icons-react';\n\nexport default function ThemeDropdown() {\n  const options = [\n    {\n      content: '选项一',\n      value: 1,\n      children: [\n        {\n          content: '选项九',\n          value: 9,\n        },\n      ],\n    },\n    {\n      content: '选项二',\n      value: 3,\n      children: [\n        {\n          content: '选项十',\n          value: 10,\n        },\n      ],\n    },\n    {\n      content: '危险操作',\n      value: 4,\n      theme: 'error',\n      children: [\n        {\n          content: '危险操作一',\n          value: 11,\n          theme: 'error',\n          children: [\n            {\n              content: '危险操作项',\n              value: 13,\n              theme: 'error',\n            },\n            {\n              content: '操作项',\n              value: 12,\n            },\n          ],\n        },\n      ],\n    },\n  ];\n  const clickHandler = (data) => {\n    MessagePlugin.success(`选中【${data.value}】`);\n  };\n  return (\n    <Dropdown options={options.concat()} onClick={clickHandler} trigger=\"click\">\n      <Button variant=\"text\" suffix={<Icon name=\"chevron-down\" size=\"16\" />}>\n        更多\n      </Button>\n    </Dropdown>\n  );\n}\n",
        "desc": "下拉菜单的菜单项都支持自定义主题，根据具体场景使用。"
      },
      {
        "code": "import React from 'react';\nimport { Dropdown, Button, MessagePlugin } from 'tdesign-react';\nimport { Icon } from 'tdesign-icons-react';\n\nexport default function LeftDropdown() {\n  const options = [\n    {\n      content: '选项一',\n      value: 1,\n      children: [\n        {\n          content: '选项九',\n          value: 9,\n        },\n      ],\n    },\n    {\n      content: '选项二',\n      value: 2,\n      children: [\n        {\n          content: '选项五',\n          value: 5,\n        },\n        {\n          content: '选项六',\n          value: 6,\n          children: [\n            {\n              content: '选项七',\n              value: 7,\n            },\n            {\n              content: '选项八',\n              value: 8,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      content: '选项三',\n      value: 3,\n      children: [\n        {\n          content: '选项十',\n          value: 10,\n        },\n      ],\n    },\n  ];\n  const clickHandler = (data) => {\n    MessagePlugin.success(`选中【${data.value}】`);\n  };\n  return (\n    <Dropdown\n      options={options}\n      onClick={clickHandler}\n      direction=\"left\"\n      popupProps={{\n        placement: 'bottom-right',\n      }}\n    >\n      <Button variant=\"text\" suffix={<Icon name=\"chevron-down\" size=\"16\" />}>\n        更多\n      </Button>\n    </Dropdown>\n  );\n}\n",
        "desc": "下拉菜单支持向左侧展开。"
      },
      {
        "code": "import React from 'react';\nimport { Dropdown, Button, MessagePlugin } from 'tdesign-react';\nimport { Icon, DiscountIcon } from 'tdesign-icons-react';\n\nexport default function BasicDropdown() {\n  const options = [\n    {\n      content: '选项一',\n      value: 1,\n      prefixIcon: <DiscountIcon />,\n    },\n    {\n      content: '选项二',\n      value: 2,\n      prefixIcon: <DiscountIcon />,\n    },\n    {\n      content: '选项三',\n      value: 3,\n      prefixIcon: <DiscountIcon />,\n    },\n    {\n      content: '选项四',\n      value: 4,\n      prefixIcon: <DiscountIcon />,\n      children: [\n        {\n          content: '选项五',\n          value: 5,\n          prefixIcon: <DiscountIcon />,\n        },\n        {\n          content: '选项六',\n          value: 6,\n          prefixIcon: <DiscountIcon />,\n        },\n      ],\n    },\n  ];\n  const clickHandler = (data) => {\n    MessagePlugin.success(`选中【${data.value}】`);\n  };\n  return (\n    <Dropdown options={options} onClick={clickHandler}>\n      <Button variant=\"text\" suffix={<Icon name=\"chevron-down\" size=\"16\" />}>\n        更多\n      </Button>\n    </Dropdown>\n  );\n}\n",
        "desc": "下拉菜单支持配置菜单项的前置图标。"
      },
      {
        "code": "import React from 'react';\nimport { Dropdown, Button, MessagePlugin } from 'tdesign-react';\nimport { Icon } from 'tdesign-icons-react';\n\nconst { DropdownMenu, DropdownItem } = Dropdown;\nexport default function BasicDropdown() {\n  const clickHandler = (data) => {\n    MessagePlugin.success(`选中【${data.value}】`);\n  };\n  return (\n    <Dropdown\n      minColumnWidth={100}\n      trigger=\"click\"\n      panelTopContent={\n        <div\n          style={{\n            height: 48,\n            backgroundColor: 'var(--td-bg-color-component)',\n            borderRadius: '6px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          Top Content\n        </div>\n      }\n    >\n      <Button variant=\"text\" suffix={<Icon name=\"chevron-down\" size=\"16\" />}>\n        更多\n      </Button>\n      <DropdownMenu>\n        <DropdownItem value={1}>\n          操作一\n          <DropdownMenu>\n            <DropdownItem value={11}>操作1-1</DropdownItem>\n            <DropdownItem value={12}>\n              操作1-2\n              <DropdownMenu>\n                <DropdownItem value={111}>操作1-1-1</DropdownItem>\n                <DropdownItem value={112}>操作1-1-2</DropdownItem>\n              </DropdownMenu>\n            </DropdownItem>\n          </DropdownMenu>\n        </DropdownItem>\n        <DropdownItem value={2}>\n          操作二\n          <DropdownMenu>\n            <DropdownItem value={21}>\n              操作2-1\n              <DropdownMenu>\n                <DropdownItem value={211}>操作2-1-1</DropdownItem>\n                <DropdownItem value={211}>操作2-1-2</DropdownItem>\n              </DropdownMenu>\n            </DropdownItem>\n            <DropdownItem value={22} onClick={clickHandler}>\n              操作2-2\n            </DropdownItem>\n          </DropdownMenu>\n        </DropdownItem>\n        <DropdownItem value={3}>操作三</DropdownItem>\n      </DropdownMenu>\n    </Dropdown>\n  );\n}\n",
        "desc": "下拉菜单操作项支持通过传入Children的方式传递操作项。"
      }
    ]
  },
  {
    "name": "<Menu/>",
    "demoCode": [
      {
        "code": "import React, { Fragment, useState } from 'react';\nimport { Menu, MessagePlugin, Button } from 'tdesign-react';\nimport { SearchIcon, MailIcon, UserIcon, EllipsisIcon } from 'tdesign-icons-react';\n\nconst { HeadMenu, MenuItem } = Menu;\nfunction Single() {\n  const [active, setActive] = useState('0');\n  const [darkActive, setDarkActive] = useState('1');\n  const operations = () => (\n    <div className=\"tdesign-demo-menu__operations\">\n      <Button variant=\"text\" shape=\"square\" icon={<SearchIcon />} />\n      <Button variant=\"text\" shape=\"square\" icon={<MailIcon />} />\n      <Button variant=\"text\" shape=\"square\" icon={<UserIcon />} />\n      <Button variant=\"text\" shape=\"square\" icon={<EllipsisIcon />} />\n    </div>\n  );\n  const operationsDark = () => (\n    <div className=\"tdesign-demo-menu__operations--dark\">\n      <Button variant=\"text\" shape=\"square\" icon={<SearchIcon />} />\n      <Button variant=\"text\" shape=\"square\" icon={<MailIcon />} />\n      <Button variant=\"text\" shape=\"square\" icon={<UserIcon />} />\n      <Button variant=\"text\" shape=\"square\" icon={<EllipsisIcon />} />\n    </div>\n  );\n  return (\n    <Fragment>\n      <HeadMenu\n        theme=\"light\"\n        value={active}\n        onChange={(v) => setActive(v)}\n        logo={<img src=\"https://tdesign.gtimg.com/site/baseLogo-light.png\" height=\"28\" alt=\"logo\" />}\n        operations={operations()}\n        style={{\n          marginBottom: 20,\n        }}\n      >\n        <MenuItem value={'0'} onClick={() => MessagePlugin.info('click 菜单1')}>\n          <span>菜单1</span>\n        </MenuItem>\n        <MenuItem value={'1'}>\n          <span>菜单2</span>\n        </MenuItem>\n        <MenuItem value={'2'}>\n          <span>菜单3</span>\n        </MenuItem>\n        <MenuItem value={'3'}>\n          <span>菜单4</span>\n        </MenuItem>\n      </HeadMenu>\n      {/* 暗黑模式 */}\n      <HeadMenu\n        theme=\"dark\"\n        value={darkActive}\n        onChange={(v) => setDarkActive(v)}\n        logo={<img src=\"https://tdesign.gtimg.com/site/baseLogo-dark.png\" height=\"28\" alt=\"logo\" />}\n        operations={operationsDark()}\n      >\n        <MenuItem value={'0'}>\n          <span>菜单1</span>\n        </MenuItem>\n        <MenuItem value={'1'}>\n          <span>菜单2</span>\n        </MenuItem>\n        <MenuItem value={'2'}>\n          <span>菜单3</span>\n        </MenuItem>\n        <MenuItem value={'3'}>\n          <span>菜单4</span>\n        </MenuItem>\n      </HeadMenu>\n    </Fragment>\n  );\n}\nexport default Single;\n",
        "desc": "只存在单层结构的顶部导航，点击即跳转。可在承载单一产品或单一业务线等层级结构简单的网站使用。"
      },
      {
        "code": "import React, { Fragment, useState } from 'react';\nimport { Menu } from 'tdesign-react';\n\nconst { HeadMenu, SubMenu, MenuItem } = Menu;\nfunction Double() {\n  const [active, setActive] = useState('1');\n  const [darkActive, setDarkActive] = useState('1');\n  return (\n    <Fragment>\n      <HeadMenu\n        value={active}\n        onChange={(v) => setActive(v)}\n        logo={<img src=\"https://tdesign.gtimg.com/site/baseLogo-light.png\" height=\"28\" alt=\"logo\" />}\n        style={{\n          marginBottom: 20,\n        }}\n      >\n        <SubMenu value=\"sub-0\" title=\"菜单1\">\n          <MenuItem value=\"1\">子菜单1</MenuItem>\n          <MenuItem value=\"2\">子菜单2</MenuItem>\n        </SubMenu>\n        <SubMenu value=\"sub-1\" title=\"菜单2\">\n          <MenuItem value=\"3\">\n            <span>子菜单1</span>\n          </MenuItem>\n          <MenuItem value=\"4\">\n            <span>子菜单2</span>\n          </MenuItem>\n        </SubMenu>\n        <SubMenu value=\"sub-2\" title=\"菜单3\">\n          <MenuItem value=\"5\">\n            <span>二级菜单-1</span>\n          </MenuItem>\n          <MenuItem value=\"6\">\n            <span>二级菜单-2</span>\n          </MenuItem>\n        </SubMenu>\n        <SubMenu value=\"sub-3\" title=\"菜单4\">\n          <MenuItem value=\"7\">\n            <span>菜单四</span>\n          </MenuItem>\n        </SubMenu>\n      </HeadMenu>\n      {/* 暗黑模式 */}\n      <HeadMenu\n        theme=\"dark\"\n        value={darkActive}\n        onChange={(v) => setDarkActive(v)}\n        logo={<img src=\"https://tdesign.gtimg.com/site/baseLogo-dark.png\" height=\"28\" alt=\"logo\" />}\n      >\n        <SubMenu value=\"sub-0\" title=\"菜单1\">\n          <MenuItem value=\"1\">子菜单1</MenuItem>\n          <MenuItem value=\"2\">子菜单2</MenuItem>\n        </SubMenu>\n        <SubMenu value=\"sub-1\" title=\"菜单2\">\n          <MenuItem value=\"3\">\n            <span>子菜单1</span>\n          </MenuItem>\n          <MenuItem value=\"4\">\n            <span>子菜单2</span>\n          </MenuItem>\n        </SubMenu>\n        <SubMenu value=\"sub-2\" title=\"菜单3\">\n          <MenuItem value=\"5\">\n            <span>二级菜单-1</span>\n          </MenuItem>\n          <MenuItem value=\"6\">\n            <span>二级菜单-2</span>\n          </MenuItem>\n        </SubMenu>\n        <SubMenu value=\"sub-3\" title=\"菜单4\">\n          <MenuItem value=\"7\">\n            <span>菜单四</span>\n          </MenuItem>\n        </SubMenu>\n      </HeadMenu>\n    </Fragment>\n  );\n}\nexport default Double;\n",
        "desc": "顶部导航可承载2级页面导航。常用于聚焦单个业务线下的二级页面导航。"
      },
      {
        "code": "import React, { Fragment, useState } from 'react';\nimport { Menu } from 'tdesign-react';\nimport { UserIcon } from 'tdesign-icons-react';\n\nconst { HeadMenu, SubMenu, MenuItem } = Menu;\nfunction Multiple() {\n  const [active, setActive] = useState('0');\n  const [darkActive, setDarkActive] = useState('1');\n  return (\n    <Fragment>\n      <HeadMenu\n        value={active}\n        expandType=\"popup\"\n        onChange={(v) => setActive(v)}\n        logo={<img src=\"https://tdesign.gtimg.com/site/baseLogo-light.png\" height=\"28\" alt=\"logo\" />}\n        style={{\n          marginBottom: 20,\n        }}\n      >\n        <SubMenu value=\"0\" title=\"电器\">\n          <SubMenu value=\"0-1\" title=\"电视\">\n            <MenuItem value=\"xiaomi\">小米电视</MenuItem>\n            <MenuItem value=\"soni\">索尼电视</MenuItem>\n            <MenuItem value=\"huawei\">华为电视</MenuItem>\n          </SubMenu>\n          <MenuItem value=\"0-2\">\n            <span>冰箱</span>\n          </MenuItem>\n        </SubMenu>\n        <MenuItem value=\"7\" disabled>\n          女装\n        </MenuItem>\n        <SubMenu value=\"sub-2\" title=\"水果蔬菜\" icon={<UserIcon />}>\n          <MenuItem value=\"5\">\n            <span>苹果</span>\n          </MenuItem>\n          <MenuItem value=\"6\">黄瓜</MenuItem>\n        </SubMenu>\n        <MenuItem value=\"9\">其他</MenuItem>\n      </HeadMenu>\n      {/* 暗黑模式 */}\n      <HeadMenu\n        theme=\"dark\"\n        value={darkActive}\n        expandType=\"popup\"\n        onChange={(v) => setDarkActive(v)}\n        logo={<img src=\"https://tdesign.gtimg.com/site/baseLogo-dark.png\" height=\"28\" alt=\"logo\" />}\n        style={{\n          marginBottom: 20,\n        }}\n      >\n        <SubMenu value=\"0\" title=\"电器\">\n          <MenuItem value=\"0-1\">\n            <span>电视</span>\n          </MenuItem>\n          <MenuItem value=\"0-2\">\n            <span>冰箱</span>\n          </MenuItem>\n        </SubMenu>\n        <MenuItem value=\"7\" disabled>\n          女装\n        </MenuItem>\n        <SubMenu\n          value=\"sub-2\"\n          title=\"水果蔬菜\"\n          icon={<UserIcon />}\n          popupProps={{\n            overlayStyle: {\n              fontWeight: 'normal',\n            },\n            overlayInnerStyle: {\n              fontWeight: 'normal',\n            },\n            overlayClassName: 'sub-menu-custom-overlay-class',\n            overlayInnerClassName: 'sub-menu-custom-overlay-inner-class',\n          }}\n        >\n          <MenuItem value=\"5\">\n            <span>苹果</span>\n          </MenuItem>\n          <MenuItem value=\"6\">黄瓜</MenuItem>\n        </SubMenu>\n        <MenuItem value=\"9\">其他</MenuItem>\n      </HeadMenu>\n    </Fragment>\n  );\n}\nexport default Multiple;\n",
        "desc": "顶部导航下拉菜单收纳2-3级页面导航，可拓展分组展示，常用于多种业务下的快速切换导航。"
      },
      {
        "code": "import React, { Fragment, useState } from 'react';\nimport { Menu, Button } from 'tdesign-react';\nimport { SearchIcon, MailIcon, UserIcon, EllipsisIcon } from 'tdesign-icons-react';\n\nconst { HeadMenu, MenuItem } = Menu;\nfunction Single() {\n  const [active, setActive] = useState('0');\n  const [darkActive, setDarkActive] = useState('1');\n  const operations = () => (\n    <div className=\"tdesign-demo-menu__operations\">\n      <Button variant=\"text\" shape=\"square\" icon={<SearchIcon />} />\n      <Button variant=\"text\" shape=\"square\" icon={<MailIcon />} />\n      <Button variant=\"text\" shape=\"square\" icon={<UserIcon />} />\n      <Button variant=\"text\" shape=\"square\" icon={<EllipsisIcon />} />\n    </div>\n  );\n  const operationsDark = () => (\n    <div className=\"tdesign-demo-menu__operations--dark\">\n      <Button variant=\"text\" shape=\"square\" icon={<SearchIcon />} />\n      <Button variant=\"text\" shape=\"square\" icon={<MailIcon />} />\n      <Button variant=\"text\" shape=\"square\" icon={<UserIcon />} />\n      <Button variant=\"text\" shape=\"square\" icon={<EllipsisIcon />} />\n    </div>\n  );\n  return (\n    <Fragment>\n      <HeadMenu\n        value={active}\n        onChange={(v) => setActive(v)}\n        logo={<img src=\"https://tdesign.gtimg.com/site/baseLogo-light.png\" height=\"28\" alt=\"logo\" />}\n        operations={operations()}\n        style={{\n          marginBottom: 20,\n        }}\n      >\n        <MenuItem value={'0'}>\n          <span>菜单1</span>\n        </MenuItem>\n        <MenuItem value={'1'}>\n          <span>菜单2</span>\n        </MenuItem>\n        <MenuItem value={'2'}>\n          <span>菜单3</span>\n        </MenuItem>\n        <MenuItem value={'3'}>\n          <span>菜单4</span>\n        </MenuItem>\n      </HeadMenu>\n      {/* 暗黑模式 */}\n      <HeadMenu\n        theme=\"dark\"\n        value={darkActive}\n        onChange={(v) => setDarkActive(v)}\n        logo={\n          <img className=\"margin_0\" src=\"https://tdesign.gtimg.com/site/baseLogo-dark.png\" height=\"28\" alt=\"logo\" />\n        }\n        operations={operationsDark()}\n      >\n        <MenuItem value={'0'}>\n          <span>菜单1</span>\n        </MenuItem>\n        <MenuItem value={'1'}>\n          <span>菜单2</span>\n        </MenuItem>\n        <MenuItem value={'2'}>\n          <span>菜单3</span>\n        </MenuItem>\n        <MenuItem value={'3'}>\n          <span>菜单4</span>\n        </MenuItem>\n      </HeadMenu>\n    </Fragment>\n  );\n}\nexport default Single;\n",
        "desc": "可在原有导航上面加入自定义的功能。在具有复杂逻辑或有特定诉求的业务场景使用。"
      },
      {
        "code": "import React, { Fragment, useState } from 'react';\nimport { Menu } from 'tdesign-react';\n\nconst { MenuItem } = Menu;\nfunction SingleSide() {\n  const [active, setActive] = useState('0');\n  const [darkActive, setDarkActive] = useState('1');\n  return (\n    <Fragment>\n      <Menu\n        value={active}\n        onChange={(v) => setActive(v)}\n        logo={<img src=\"https://tdesign.gtimg.com/site/baseLogo-light.png\" height=\"28\" alt=\"logo\" />}\n        style={{\n          marginRight: 20,\n        }}\n      >\n        <MenuItem value={'0'}>\n          <span>仪表盘</span>\n        </MenuItem>\n        <MenuItem value={'1'}>\n          <span>资源列表</span>\n        </MenuItem>\n        <MenuItem value={'2'}>\n          <span>视频区</span>\n        </MenuItem>\n        <MenuItem value={'3'} disabled>\n          <span>根目录</span>\n        </MenuItem>\n        <MenuItem value={'4'}>\n          <span>调度平台</span>\n        </MenuItem>\n        <MenuItem value={'5'}>\n          <span>精准监控</span>\n        </MenuItem>\n        <MenuItem value={'6'}>\n          <span>个人中心</span>\n        </MenuItem>\n      </Menu>\n      {/* 暗黑模式 */}\n      <Menu\n        value={darkActive}\n        theme=\"dark\"\n        onChange={(v) => setDarkActive(v)}\n        logo={<img src=\"https://tdesign.gtimg.com/site/baseLogo-dark.png\" height=\"28\" alt=\"logo\" />}\n      >\n        <MenuItem value={'0'}>\n          <span>仪表盘</span>\n        </MenuItem>\n        <MenuItem value={'1'}>\n          <span>资源列表</span>\n        </MenuItem>\n        <MenuItem value={'2'}>\n          <span>视频区</span>\n        </MenuItem>\n        <MenuItem value={'3'} disabled>\n          <span>根目录</span>\n        </MenuItem>\n        <MenuItem value={'4'}>\n          <span>调度平台</span>\n        </MenuItem>\n        <MenuItem value={'5'}>\n          <span>精准监控</span>\n        </MenuItem>\n        <MenuItem value={'6'}>\n          <span>个人中心</span>\n        </MenuItem>\n      </Menu>\n    </Fragment>\n  );\n}\nexport default SingleSide;\n",
        "desc": "只存在单层结构的侧边导航，点击即跳转。一般与单层顶部导航相结合，作为二级页面的侧边导航。"
      },
      {
        "code": "import React, { Fragment, useState } from 'react';\nimport { Menu, Button } from 'tdesign-react';\nimport { AppIcon, CodeIcon, FileIcon, UserIcon, ViewListIcon, MailIcon, RollbackIcon } from 'tdesign-icons-react';\n\nconst { SubMenu, MenuItem } = Menu;\nfunction MultiSide() {\n  const [active, setActive] = useState('1-1');\n  const [collapsed, setCollapsed] = useState(false);\n  const [expands, setExpands] = useState(['1', '2']);\n  const [darkActive, setDarkActive] = useState('1-1');\n  const [darkCollapsed, setDarkCollapsed] = useState(false);\n  const [darkExpands, setDarkExpands] = useState(['1', '2']);\n  return (\n    <Fragment>\n      <Menu\n        value={active}\n        collapsed={collapsed}\n        expandMutex={false}\n        expanded={expands}\n        onExpand={(values) => setExpands(values)}\n        onChange={(v) => setActive(v)}\n        operations={\n          <Button variant=\"text\" shape=\"square\" icon={<ViewListIcon />} onClick={() => setCollapsed(!collapsed)} />\n        }\n        style={{\n          marginRight: 20,\n        }}\n      >\n        <MenuItem\n          value=\"0\"\n          icon={<AppIcon />}\n          tooltipProps={{\n            theme: 'light',\n          }}\n        >\n          仪表盘\n        </MenuItem>\n        <SubMenu value=\"1\" title={<span>资源列表</span>} icon={<CodeIcon />}>\n          <MenuItem value=\"1-1\" disabled>\n            <span>菜单二</span>\n          </MenuItem>\n        </SubMenu>\n        <SubMenu value=\"2\" title={<span>调度平台</span>} icon={<FileIcon />}>\n          <SubMenu value=\"2-1\" title=\"二级菜单-1\">\n            <MenuItem value=\"2-1-1\">三级菜单-1</MenuItem>\n            <MenuItem value=\"2-1-2\">三级菜单-2</MenuItem>\n            <MenuItem value=\"2-1-3\">三级菜单-3</MenuItem>\n          </SubMenu>\n          <MenuItem value=\"2-2\">\n            <span>二级菜单-2</span>\n          </MenuItem>\n        </SubMenu>\n        <SubMenu value=\"3\" title={<span>精准监控</span>} icon={<UserIcon />}>\n          <MenuItem value=\"3-1\">\n            <span>二级菜单-1</span>\n          </MenuItem>\n          <MenuItem value=\"3-2\">\n            <span>二级菜单-2</span>\n          </MenuItem>\n        </SubMenu>\n        <MenuItem value=\"4\" disabled icon={<RollbackIcon />}>\n          根目录\n        </MenuItem>\n        <SubMenu value=\"5\" title={<span>消息区</span>} icon={<MailIcon />}>\n          <MenuItem value=\"5-1\">\n            <span>二级菜单-1</span>\n          </MenuItem>\n          <MenuItem value=\"5-2\">\n            <span>二级菜单-2</span>\n          </MenuItem>\n        </SubMenu>\n      </Menu>\n      {/* 暗黑模式 */}\n      <Menu\n        theme=\"dark\"\n        value={darkActive}\n        collapsed={darkCollapsed}\n        expandMutex={false}\n        expanded={darkExpands}\n        onExpand={(values) => setDarkExpands(values)}\n        onChange={(v) => setDarkActive(v)}\n        operations={\n          <div className=\"tdesign-demo-menu-collapse--dark\">\n            <Button\n              variant=\"text\"\n              shape=\"square\"\n              icon={<ViewListIcon />}\n              onClick={() => setDarkCollapsed(!darkCollapsed)}\n            />\n          </div>\n        }\n      >\n        <MenuItem value=\"0\" icon={<AppIcon />}>\n          仪表盘\n        </MenuItem>\n        <SubMenu value=\"1\" title={<span>资源列表</span>} icon={<CodeIcon />}>\n          <SubMenu value=\"2-1\" title=\"二级菜单-1\">\n            <MenuItem value=\"2-1-1\">三级菜单-1</MenuItem>\n            <MenuItem value=\"2-1-2\">三级菜单-2</MenuItem>\n            <MenuItem value=\"2-1-3\">三级菜单-3</MenuItem>\n          </SubMenu>\n        </SubMenu>\n        <SubMenu value=\"2\" title={<span>调度平台</span>} icon={<FileIcon />}>\n          <MenuItem value=\"2-1\">\n            <span>二级菜单-1</span>\n          </MenuItem>\n          <MenuItem value=\"2-2\">\n            <span>二级菜单-2</span>\n          </MenuItem>\n        </SubMenu>\n        <SubMenu value=\"3\" title={<span>精准监控</span>} icon={<UserIcon />}>\n          <MenuItem value=\"3-1\">\n            <span>二级菜单-1</span>\n          </MenuItem>\n          <MenuItem value=\"3-2\">\n            <span>二级菜单-2</span>\n          </MenuItem>\n        </SubMenu>\n        <MenuItem value=\"4\" disabled icon={<RollbackIcon />}>\n          根目录\n        </MenuItem>\n        <SubMenu value=\"5\" title={<span>消息区</span>} icon={<MailIcon />}>\n          <MenuItem value=\"5-1\">\n            <span>二级菜单-1</span>\n          </MenuItem>\n          <MenuItem value=\"5-2\">\n            <span>二级菜单-2</span>\n          </MenuItem>\n        </SubMenu>\n      </Menu>\n    </Fragment>\n  );\n}\nexport default MultiSide;\n",
        "desc": "侧边导航可承载1-3级页面导航，并平铺展示。适用于层级较深的网站。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Menu, Button } from 'tdesign-react';\nimport {\n  ViewListIcon,\n  ServerIcon,\n  Edit1Icon,\n  RootListIcon,\n  CheckIcon,\n  UserIcon,\n  AppIcon,\n  LoginIcon,\n} from 'tdesign-icons-react';\n\nconst { MenuGroup, MenuItem, SubMenu } = Menu;\nfunction GroupSide() {\n  const [value, setValue] = useState('1');\n  const [collapsed, setCollapsed] = useState(false);\n  return (\n    <Menu\n      value={value}\n      onChange={(value) => setValue(value)}\n      collapsed={collapsed}\n      operations={\n        <Button variant=\"text\" shape=\"square\" icon={<ViewListIcon />} onClick={() => setCollapsed(!collapsed)} />\n      }\n      logo={\n        collapsed ? (\n          <img\n            src=\"https://oteam-tdesign-1258344706.cos.ap-guangzhou.myqcloud.com/site/logo%402x.png\"\n            width=\"35\"\n            alt=\"logo\"\n          />\n        ) : (\n          <img src=\"https://tdesign.gtimg.com/site/baseLogo-light.png\" height=\"28\" alt=\"logo\" />\n        )\n      }\n    >\n      <MenuGroup title=\"主导航\">\n        <MenuItem value=\"item1\" icon={<AppIcon />}>\n          仪表盘\n        </MenuItem>\n      </MenuGroup>\n      <MenuGroup title=\"组件\">\n        <SubMenu title=\"列表项\" value=\"2-1\" icon={<ServerIcon />}>\n          <MenuItem value=\"2-1-1\">基础列表项</MenuItem>\n          <MenuItem value=\"2-1-2\">卡片列表项</MenuItem>\n          <MenuItem value=\"2-1-3\">筛选列表项</MenuItem>\n          <MenuItem value=\"2-1-4\">树状筛选列表项</MenuItem>\n        </SubMenu>\n        <MenuItem value=\"2-2\" icon={<Edit1Icon />}>\n          表单项\n        </MenuItem>\n        <MenuItem value=\"2-3\" icon={<RootListIcon />}>\n          详情页\n        </MenuItem>\n        <MenuItem value=\"2-4\" icon={<CheckIcon />}>\n          结果页\n        </MenuItem>\n      </MenuGroup>\n      <MenuGroup title=\"更多\">\n        <MenuItem value=\"item3\" icon={<UserIcon />}>\n          个人页\n        </MenuItem>\n        <MenuItem value=\"item4\" icon={<LoginIcon />}>\n          登录页\n        </MenuItem>\n      </MenuGroup>\n    </Menu>\n  );\n}\nexport default GroupSide;\n",
        "desc": "针对大量页面进行分组展示，以方便用户理解及查找。一般在大量业务或者页面需要展示的网站使用。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Menu, Button } from 'tdesign-react';\nimport { AppIcon, CodeIcon, FileIcon, UserIcon, ViewListIcon, MailIcon, RollbackIcon } from 'tdesign-icons-react';\n\nconst { SubMenu, MenuItem } = Menu;\nfunction ClosableSide() {\n  const [active, setActive] = useState('1-1');\n  const [collapsed, setCollapsed] = useState(true);\n  return (\n    <Menu\n      value={active}\n      collapsed={collapsed}\n      expandMutex={false}\n      onChange={(v) => setActive(v)}\n      operations={\n        <Button variant=\"text\" shape=\"square\" icon={<ViewListIcon />} onClick={() => setCollapsed(!collapsed)} />\n      }\n      logo={<span>LOGO</span>}\n    >\n      <MenuItem value=\"0\" icon={<AppIcon />}>\n        仪表盘\n      </MenuItem>\n      <SubMenu value=\"1\" title={<span>资源列表</span>} icon={<CodeIcon />}>\n        <MenuItem value=\"1-1\" disabled>\n          <span>菜单二</span>\n        </MenuItem>\n      </SubMenu>\n      <SubMenu value=\"2\" title={<span>调度平台</span>} icon={<FileIcon />}>\n        <MenuItem value=\"2-1\">\n          <span>三级菜单-1</span>\n        </MenuItem>\n        <MenuItem value=\"2-2\">\n          <span>三级菜单-2</span>\n        </MenuItem>\n      </SubMenu>\n      <SubMenu value=\"3\" title={<span>精准监控</span>} icon={<UserIcon />}>\n        <MenuItem value=\"3-1\">\n          <span>三级菜单-1</span>\n        </MenuItem>\n        <MenuItem value=\"3-2\">\n          <span>三级菜单-2</span>\n        </MenuItem>\n      </SubMenu>\n      <MenuItem value=\"4\" disabled icon={<RollbackIcon />}>\n        根目录\n      </MenuItem>\n      <SubMenu value=\"5\" title={<span>消息区</span>} icon={<MailIcon />}>\n        <MenuItem value=\"5-1\">\n          <span>三级菜单-1</span>\n        </MenuItem>\n        <MenuItem value=\"5-2\">\n          <span>三级菜单-2</span>\n        </MenuItem>\n      </SubMenu>\n    </Menu>\n  );\n}\nexport default ClosableSide;\n",
        "desc": "在侧边导航上提供收起按钮，点击后可以将侧边栏最小化，常见于带有图标的侧边导航。"
      }
    ]
  },
  {
    "name": "<Pagination/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Pagination } from 'tdesign-react';\n\nexport default function PaginationExample() {\n  const onChange = (pageInfo) => {\n    console.log(pageInfo);\n  };\n  const onPageSizeChange = (size) => {\n    console.log('page-size:', size);\n  };\n  const onCurrentChange = (index, pageInfo) => {\n    console.log(`转到第${index}页`);\n    console.log(pageInfo);\n  };\n  return (\n    <Pagination\n      total={100}\n      defaultPageSize={5}\n      onChange={onChange}\n      onCurrentChange={onCurrentChange}\n      onPageSizeChange={onPageSizeChange}\n    />\n  );\n}\n",
        "desc": "最基础的分页控件，仅展示页码。建议使用在内容少于10页的轻量化分页场景。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Pagination } from 'tdesign-react';\n\nexport default function PaginationExample() {\n  const [pageSize, changePageSize] = useState(5);\n  const onChange = (pageInfo) => {\n    console.log(pageInfo);\n  };\n  return (\n    <div>\n      <span>展示首尾页码省略</span>\n      <Pagination total={100} pageSize={pageSize} onChange={onChange} onPageSizeChange={(v) => changePageSize(v)} />\n      <span>不展示首尾页码省略</span>\n      <Pagination\n        total={100}\n        pageSize={pageSize}\n        onChange={onChange}\n        pageEllipsisMode=\"both-ends\"\n        onPageSizeChange={(v) => changePageSize(v)}\n      />\n    </div>\n  );\n}\n",
        "desc": "拥有大量数据需要展示，通过分页能够让用户快速定位当前页码。建议使用在内容超过10页以上的分页场景。"
      },
      {
        "code": "import React from 'react';\nimport { Pagination } from 'tdesign-react';\n\nexport default function PaginationExample() {\n  return <Pagination total={685} defaultPageSize={10} totalContent />;\n}\n",
        "desc": "关联模块内数据进行展示，以方便用户无需全部浏览即可快速了解数据量级。常用于表格内的数据统计。"
      },
      {
        "code": "import React from 'react';\nimport { Pagination } from 'tdesign-react';\n\nexport default function PaginationExample() {\n  const [current, setCurrent] = React.useState(1);\n  const [pageSize, setPageSize] = React.useState(20);\n  const onChange = React.useCallback((pageInfo) => {\n    const index = pageInfo.current;\n    setCurrent(index);\n    console.log(`current: ${index}`);\n  }, []);\n  const onPageSizeChange = React.useCallback((index, pageInfo) => {\n    setPageSize(index);\n    console.log(`pageSize: ${index}`);\n    console.log(`pageInfo: ${JSON.stringify(pageInfo)}`);\n  }, []);\n  return (\n    <Pagination\n      total={645}\n      current={current}\n      pageSize={pageSize}\n      pageSizeOptions={[20, 30, 100, 200]}\n      onChange={onChange}\n      onPageSizeChange={onPageSizeChange}\n      selectProps={{\n        popupProps: {\n          overlayStyle: {\n            fontWeight: 'normal',\n          },\n          overlayInnerStyle: {\n            fontWeight: 'normal',\n          },\n          overlayClassName: 'pagination-num-custom-overlay-class',\n          overlayInnerClassName: 'pagination-num-custom-overlay-inner-class',\n        },\n      }}\n    />\n  );\n}\n",
        "desc": "可根据用户需求对每页展示条目数进行调整。"
      },
      {
        "code": "import React from 'react';\nimport { Pagination } from 'tdesign-react';\n\nexport default function PaginationExample() {\n  const [current, setCurrent] = React.useState(1);\n  const [pageSize, setPageSize] = React.useState(20);\n  const onChange = React.useCallback((pageInfo) => {\n    const index = pageInfo.current;\n    setCurrent(index);\n    console.log(`current: ${index}`);\n  }, []);\n  const onPageSizeChange = React.useCallback((index, pageInfo) => {\n    setPageSize(index);\n    console.log(`pageSize: ${index}`);\n    console.log(`pageInfo: ${JSON.stringify(pageInfo)}`);\n  }, []);\n  return (\n    <Pagination\n      showJumper\n      total={645}\n      current={current}\n      pageSize={pageSize}\n      onChange={onChange}\n      onPageSizeChange={onPageSizeChange}\n    />\n  );\n}\n",
        "desc": "当数据有快速定位的需求时，通过选择显示快速跳转的分页。"
      },
      {
        "code": "import React from 'react';\nimport { Pagination } from 'tdesign-react';\n\nexport default function PaginationExample() {\n  const onChange = (pageInfo) => {\n    console.log(pageInfo);\n  };\n  return <Pagination total={100} defaultPageSize={5} theme=\"simple\" onChange={onChange} />;\n}\n",
        "desc": "极度简单的翻页控件，只展示当前页、总页数及上下翻页。模块内的横向空间较少，并且无需精准定位具体页面的场景。"
      },
      {
        "code": "import React from 'react';\nimport { Pagination } from 'tdesign-react';\n\nexport default function PaginationExample() {\n  return <Pagination size=\"small\" total={100} defaultPageSize={5} />;\n}\n",
        "desc": "去掉线框的翻页控件，并保留翻页的主要功能。模块内的空间较少，需要轻量化的翻页的场景，以增加页面利用率。"
      },
      {
        "code": "import React from 'react';\nimport { Pagination } from 'tdesign-react';\n\nexport default function PaginationExample() {\n  const onChange = (pageInfo) => {\n    console.log(pageInfo);\n  };\n  return <Pagination total={100} defaultPageSize={5} size=\"small\" theme=\"simple\" onChange={onChange} />;\n}\n",
        "desc": "更小尺寸的迷你风格分页控件，适合内嵌在其他组件中分页导航使用。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Radio, PaginationMini, Space } from 'tdesign-react';\n\nexport default function DemoPaginationMini() {\n  const [layout, setLayout] = useState('vertical');\n  const [size, setSize] = useState('medium');\n  const tips = {\n    prev: '前尘忆梦',\n    current: '回到现在',\n    next: '展望未来',\n  };\n  return (\n    <Space direction=\"vertical\" size={16}>\n      <Space align=\"center\">\n        <span>layout:</span>\n        <Radio.Group value={layout} onChange={(val) => setLayout(val)} variant=\"default-filled\">\n          <Radio.Button value=\"vertical\">vertical</Radio.Button>\n          <Radio.Button value=\"horizontal\">horizontal</Radio.Button>\n        </Radio.Group>\n      </Space>\n      <Space align=\"center\">\n        <span>size:</span>\n        <Radio.Group value={size} onChange={(val) => setSize(val)} variant=\"default-filled\">\n          <Radio.Button value=\"small\">small</Radio.Button>\n          <Radio.Button value=\"medium\">medium</Radio.Button>\n          <Radio.Button value=\"large\">large</Radio.Button>\n        </Radio.Group>\n      </Space>\n      <PaginationMini layout={layout} size={size} tips={tips} />\n    </Space>\n  );\n}\n",
        "desc": "最小单元分页控件，适合内嵌在其他空间较小的组件中使用。"
      }
    ]
  },
  {
    "name": "<Steps/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Steps, Space } from 'tdesign-react';\n\nconst { StepItem } = Steps;\nexport default function HorizontalStepsWithNumbers() {\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Steps defaultCurrent={1}>\n        <StepItem title=\"已完成的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"进行中的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"未进行的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"未进行的步骤\" content=\"这里是提示文字\" />\n      </Steps>\n      <Steps defaultCurrent={2}>\n        <StepItem title=\"已完成的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"已完成的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"进行中的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"未进行的步骤\" content=\"这里是提示文字\" />\n      </Steps>\n    </Space>\n  );\n}\n",
        "desc": "适用于步骤数较多时，让用户更明确的了解步骤数量。"
      },
      {
        "code": "import React from 'react';\nimport { Steps } from 'tdesign-react';\n\nconst { StepItem } = Steps;\nexport default function HorizontalStepsWithNumbers() {\n  return (\n    <Steps theme=\"dot\" defaultCurrent={1}>\n      <StepItem title=\"已完成的步骤\" content=\"这里是提示文字\" />\n      <StepItem title=\"进行中的步骤\" content=\"这里是提示文字\" />\n      <StepItem title=\"未进行的步骤\" content=\"这里是提示文字\" />\n      <StepItem title=\"未进行的步骤\" content=\"这里是提示文字\" />\n    </Steps>\n  );\n}\n",
        "desc": "适用于步骤数较少时，主要引导用户按步骤完成操作。"
      },
      {
        "code": "import React from 'react';\nimport { Steps } from 'tdesign-react';\n\nconst { StepItem } = Steps;\nexport default function HorizontalStepsWithNumbers() {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'space-between',\n      }}\n    >\n      <Steps layout=\"vertical\" theme=\"dot\" defaultCurrent={1}>\n        <StepItem title=\"已完成的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"进行中的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"未进行的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"未进行的步骤\" content=\"这里是提示文字\" />\n      </Steps>\n      <Steps layout=\"vertical\" sequence=\"reverse\" theme=\"dot\" defaultCurrent={1}>\n        <StepItem title=\"已完成的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"已完成的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"进行中的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"未进行的步骤\" content=\"这里是提示文字\" />\n      </Steps>\n    </div>\n  );\n}\n",
        "desc": "适用于垂直步骤较少的情况。"
      },
      {
        "code": "import React from 'react';\nimport { Steps } from 'tdesign-react';\n\nconst { StepItem } = Steps;\nexport default function HorizontalStepsWithNumbers() {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'space-between',\n      }}\n    >\n      <Steps layout=\"vertical\" defaultCurrent={1}>\n        <StepItem title=\"已完成的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"进行中的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"未进行的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"未进行的步骤\" content=\"这里是提示文字\" />\n      </Steps>\n      <Steps layout=\"vertical\" sequence=\"reverse\" defaultCurrent={1}>\n        <StepItem title=\"已完成的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"已完成的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"进行中的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"未进行的步骤\" content=\"这里是提示文字\" />\n      </Steps>\n    </div>\n  );\n}\n",
        "desc": "适用于步骤较多、步骤提示内容较长的场景。"
      },
      {
        "code": "import React from 'react';\nimport { Steps, Space } from 'tdesign-react';\n\nconst { StepItem } = Steps;\nexport default function BasicStepsExample() {\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Steps>\n        <StepItem status=\"finish\" title=\"已完成的步骤\" content=\"这里是提示文字\" />\n        <StepItem status=\"process\" title=\"进行中的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"未进行的步骤\" content=\"这里是提示文字\" />\n        <StepItem title=\"未进行的步骤\" content=\"这里是提示文字\" />\n      </Steps>\n      <Steps>\n        <StepItem status=\"finish\" title=\"已完成的步骤\" content=\"这里是提示文字\" />\n        <StepItem status=\"process\" title=\"进行中的步骤\" content=\"这里是提示文字\" />\n        <StepItem status=\"error\" title=\"错误的步骤\" content=\"优先展示`t-step`中设置的 status\" />\n        <StepItem title=\"未进行的步骤\" content=\"这里是提示文字\" />\n      </Steps>\n    </Space>\n  );\n}\n",
        "desc": "在步骤中，包含“已完成、进行中、未完成”三种状态的步骤条。"
      },
      {
        "code": "import React from 'react';\nimport { Steps } from 'tdesign-react';\nimport { LoginIcon, CartIcon, WalletIcon, CheckCircleIcon } from 'tdesign-icons-react';\n\nconst { StepItem } = Steps;\nexport default function BasicStepsExample() {\n  return (\n    <Steps defaultCurrent={1}>\n      <StepItem icon={<LoginIcon />} title=\"登录\" content=\"已完成状态\" />\n      <StepItem icon={<CartIcon />} title=\"购物\" content=\"进行中状态\" />\n      <StepItem icon={<WalletIcon />} title=\"支付\" content=\"未开始\" />\n      <StepItem icon={<CheckCircleIcon />} title=\"完成\" content=\"未开始\" />\n    </Steps>\n  );\n}\n",
        "desc": "适用于需要自定义图标的场景。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Steps, Button } from 'tdesign-react';\n\nconst { StepItem } = Steps;\nexport default function HorizontalStepsWithNumbers() {\n  const [current, setCurrent] = useState(1);\n  const preBtn = (\n    <Button\n      size={'small'}\n      onClick={() => {\n        setCurrent(current - 1);\n      }}\n    >\n      pre\n    </Button>\n  );\n  const preTextBtn = (\n    <Button\n      size={'small'}\n      variant=\"text\"\n      onClick={() => {\n        setCurrent(current - 1);\n      }}\n    >\n      pre\n    </Button>\n  );\n  const nextBtn = (\n    <Button\n      size={'small'}\n      onClick={() => {\n        setCurrent(current + 1);\n      }}\n    >\n      Next\n    </Button>\n  );\n  const preNextBtnGroup = (\n    <>\n      {preTextBtn}\n      <div\n        style={{\n          display: 'inline',\n          marginLeft: 4,\n        }}\n      >\n        {nextBtn}\n      </div>\n    </>\n  );\n  return (\n    <Steps layout=\"vertical\" defaultCurrent={current}>\n      <StepItem title=\"步骤1\" content=\"这里是提示文字\">\n        {current === 0 ? nextBtn : null}\n      </StepItem>\n      <StepItem title=\"步骤2\" content=\"这里是提示文字\">\n        {current === 1 ? preNextBtnGroup : null}\n      </StepItem>\n      <StepItem title=\"步骤3\" content=\"这里是提示文字\">\n        {current === 2 ? preNextBtnGroup : null}\n      </StepItem>\n      <StepItem title=\"步骤4\" content=\"这里是提示文字\">\n        {current === 3 ? preBtn : null}\n      </StepItem>\n    </Steps>\n  );\n}\n",
        "desc": "适用于步骤中需要额外操作，等待下一步操作场景。"
      }
    ]
  },
  {
    "name": "<StickyTool/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { StickyTool, Space } from 'tdesign-react';\nimport { ChatIcon, AddIcon, QrcodeIcon } from 'tdesign-icons-react';\n\nconst { StickyItem } = StickyTool;\nexport default function Base() {\n  const handleClick = (context) => {\n    console.log('click', context);\n  };\n  const handleHover = (context) => {\n    console.log('hover', context);\n  };\n  return (\n    <Space>\n      <StickyTool\n        style={{\n          position: 'relative',\n          overflow: 'hidden',\n        }}\n        offset={[-500, -24]}\n        onClick={handleClick}\n        onHover={handleHover}\n      >\n        <StickyItem label=\"chat\" icon={<ChatIcon />}></StickyItem>\n        <StickyItem label=\"add\" icon={<AddIcon />}></StickyItem>\n        <StickyItem\n          label=\"qrcode\"\n          icon={<QrcodeIcon />}\n          popup={<img alt=\"TDesign Logo\" width=\"120\" height=\"120\" src=\"https://tdesign.gtimg.com/site/site.jpg\" />}\n          popupProps={{\n            overlayInnerStyle: {\n              padding: '4px',\n              height: '128px',\n            },\n          }}\n        ></StickyItem>\n      </StickyTool>\n    </Space>\n  );\n}\n",
        "desc": "基础侧边栏"
      },
      {
        "code": "import React from 'react';\nimport { StickyTool, Space } from 'tdesign-react';\nimport { ChatIcon, AddIcon, QrcodeIcon } from 'tdesign-icons-react';\n\nconst { StickyItem } = StickyTool;\nexport default function Compact() {\n  const handleClick = (context) => {\n    console.log('click', context);\n  };\n  const handleHover = (context) => {\n    console.log('hover', context);\n  };\n  return (\n    <Space>\n      <StickyTool\n        style={{\n          position: 'relative',\n          overflow: 'hidden',\n        }}\n        type=\"compact\"\n        offset={[-500, -24]}\n        onClick={handleClick}\n        onHover={handleHover}\n      >\n        <StickyItem icon={<ChatIcon />} popup=\"chat\"></StickyItem>\n        <StickyItem icon={<AddIcon />} popup=\"add\"></StickyItem>\n        <StickyItem\n          icon={<QrcodeIcon />}\n          popup={<img alt=\"TDesign Logo\" width=\"120\" height=\"120\" src=\"https://tdesign.gtimg.com/site/site.jpg\" />}\n          popupProps={{\n            overlayInnerStyle: {\n              padding: '4px',\n              height: '128px',\n            },\n          }}\n        ></StickyItem>\n      </StickyTool>\n    </Space>\n  );\n}\n",
        "desc": "紧凑侧边栏"
      },
      {
        "code": "import React from 'react';\nimport { StickyTool, Space } from 'tdesign-react';\nimport { ChatIcon, AddIcon, QrcodeIcon } from 'tdesign-icons-react';\n\nconst { StickyItem } = StickyTool;\nexport default function Shape() {\n  const handleClick = (context) => {\n    console.log('click', context);\n  };\n  const handleHover = (context) => {\n    console.log('hover', context);\n  };\n  return (\n    <Space>\n      <StickyTool\n        style={{\n          position: 'relative',\n          overflow: 'hidden',\n        }}\n        offset={[-500, -24]}\n        onClick={handleClick}\n        onHover={handleHover}\n      >\n        <StickyItem label=\"chat\" icon={<ChatIcon />}></StickyItem>\n        <StickyItem label=\"add\" icon={<AddIcon />}></StickyItem>\n        <StickyItem\n          label=\"qrcode\"\n          icon={<QrcodeIcon />}\n          popup={<img alt=\"TDesign Logo\" width=\"120\" height=\"120\" src=\"https://tdesign.gtimg.com/site/site.jpg\" />}\n          popupProps={{\n            overlayInnerStyle: {\n              padding: '4px',\n              height: '128px',\n            },\n            overlayClassName: 'sticky-item-custom-overlay-class',\n            overlayInnerClassName: 'sticky-item-custom-overlay-inner-class',\n          }}\n        ></StickyItem>\n      </StickyTool>\n      <StickyTool\n        style={{\n          position: 'relative',\n          overflow: 'hidden',\n        }}\n        shape=\"round\"\n        offset={[-300, -24]}\n        onClick={handleClick}\n        onHover={handleHover}\n      >\n        <StickyItem label=\"chat\" icon={<ChatIcon />}></StickyItem>\n        <StickyItem label=\"add\" icon={<AddIcon />}></StickyItem>\n        <StickyItem\n          label=\"qrcode\"\n          icon={<QrcodeIcon />}\n          popup={<img alt=\"TDesign Logo\" width=\"120\" height=\"120\" src=\"https://tdesign.gtimg.com/site/site.jpg\" />}\n          popupProps={{\n            overlayStyle: {\n              fontWeight: 'normal',\n            },\n            overlayInnerStyle: {\n              padding: '4px',\n              height: '128px',\n            },\n            overlayClassName: 'sticky-item-custom-overlay-class',\n            overlayInnerClassName: 'sticky-item-custom-overlay-inner-class',\n          }}\n        ></StickyItem>\n      </StickyTool>\n    </Space>\n  );\n}\n",
        "desc": "提供圆形和方形两种不同形状。"
      }
    ]
  },
  {
    "name": "<Tabs/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Space, Tabs } from 'tdesign-react';\n\nconst { TabPanel } = Tabs;\nexport default function BasicTabs() {\n  const tabList = [\n    {\n      label: '选项卡一',\n      value: 1,\n      panel: (\n        <p\n          style={{\n            padding: 25,\n          }}\n        >\n          这是选项卡一的内容，使用 Tabs 渲染\n        </p>\n      ),\n    },\n    {\n      label: '选项卡二',\n      value: 2,\n      panel: (\n        <p\n          style={{\n            padding: 25,\n          }}\n        >\n          这是选项卡二的内容，使用 Tabs 渲染\n        </p>\n      ),\n    },\n    {\n      label: '选项卡三',\n      value: 3,\n      panel: (\n        <p\n          style={{\n            padding: 25,\n          }}\n        >\n          这是选项卡三的内容，使用 Tabs 渲染\n        </p>\n      ),\n    },\n  ];\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Tabs placement={'top'} size={'medium'} defaultValue={1}>\n        <TabPanel value={1} label=\"选项卡1\">\n          <p\n            style={{\n              padding: 25,\n            }}\n          >\n            选项卡1的内容，使用 TabPanel 渲染\n          </p>\n        </TabPanel>\n        <TabPanel value={2} label=\"选项卡2\">\n          <p\n            style={{\n              padding: 25,\n            }}\n          >\n            选项卡2的内容，使用 TabPanel 渲染\n          </p>\n        </TabPanel>\n        <TabPanel value={3} label=\"选项卡3\">\n          <p\n            style={{\n              padding: 25,\n            }}\n          >\n            选项卡3的内容，使用 TabPanel 渲染\n          </p>\n        </TabPanel>\n      </Tabs>\n\n      <Tabs defaultValue={1} list={tabList} />\n    </Space>\n  );\n}\n",
        "desc": "使用选项卡切换内容模块，操作后不会进行页面跳转。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Tabs, Radio, Space } from 'tdesign-react';\nimport { DiscountIcon, ToolsIcon, TipsIcon } from 'tdesign-icons-react';\n\nconst { TabPanel } = Tabs;\nexport default function IconTabs() {\n  const [theme, setTheme] = useState('normal');\n  const handleChange = (value) => {\n    setTheme(value);\n  };\n  return (\n    <Space\n      direction=\"vertical\"\n      size=\"large\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Radio.Group variant=\"default-filled\" defaultValue=\"normal\" onChange={handleChange}>\n        <Radio.Button value=\"normal\">常规</Radio.Button>\n        <Radio.Button value=\"card\">卡片</Radio.Button>\n      </Radio.Group>\n      <Tabs placement={'top'} defaultValue={'a'} theme={theme}>\n        <TabPanel\n          value=\"a\"\n          label={\n            <>\n              <DiscountIcon />\n              选项卡1\n            </>\n          }\n        >\n          <div\n            className=\"tabs-content\"\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡1内容区\n          </div>\n        </TabPanel>\n        <TabPanel\n          value=\"b\"\n          label={\n            <>\n              <ToolsIcon />\n              选项卡2\n            </>\n          }\n        >\n          <div\n            className=\"tabs-content\"\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡2内容区\n          </div>\n        </TabPanel>\n        <TabPanel\n          value=\"c\"\n          label={\n            <>\n              <TipsIcon />\n              选项卡3\n            </>\n          }\n        >\n          <div\n            className=\"tabs-content\"\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡3内容区\n          </div>\n        </TabPanel>\n      </Tabs>\n    </Space>\n  );\n}\n",
        "desc": "在基础选项卡基础上，在每个标签前添加图标，方便用户快速理解。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Tabs } from 'tdesign-react';\n\nconst { TabPanel } = Tabs;\nconst tabs = [];\nfor (let i = 1, max = 10; i <= max; ++i) {\n  tabs.push({\n    value: i,\n    label: `选项卡 ${i}`,\n  });\n}\nexport default function AddTabs() {\n  const [panels, setPanels] = useState(tabs);\n  const [value, setValue] = useState(1);\n  return (\n    <Tabs\n      placement={'top'}\n      size={'medium'}\n      disabled={false}\n      theme={'card'}\n      defaultValue={1}\n      value={value}\n      onChange={setValue}\n      addable\n      onRemove={({ value }) => {\n        const newPanels = panels.filter((panel) => panel.value !== value);\n        setPanels(newPanels);\n      }}\n      onAdd={() => {\n        const newValue = panels.length > 0 ? panels[panels.length - 1].value + 1 : 1;\n        const newPanels = panels.concat({\n          value: newValue,\n          label: `选项卡${panels.length + 1}`,\n        });\n        setValue(newValue);\n        setPanels(newPanels);\n      }}\n    >\n      {panels.map(({ value, label }, index) => (\n        <TabPanel\n          key={value}\n          value={value}\n          label={label}\n          removable={true}\n          onRemove={() => {\n            setPanels((panels) => {\n              panels.splice(index, 1);\n              return panels;\n            });\n          }}\n        >\n          <div\n            className=\"tabs-content\"\n            style={{\n              margin: 20,\n            }}\n          >\n            {label}内容区\n          </div>\n        </TabPanel>\n      ))}\n    </Tabs>\n  );\n}\n",
        "desc": "用户可添加、删除选项卡，满足自定义场景。"
      },
      {
        "code": "import React from 'react';\nimport { Tabs, Space } from 'tdesign-react';\n\nconst { TabPanel } = Tabs;\nexport default function SizeTabs() {\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Tabs placement={'top'} size=\"medium\" theme=\"normal\" disabled={false} defaultValue={'1'}>\n        <TabPanel value={'1'} label={'选项卡1'}>\n          <div\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡1内容区\n          </div>\n        </TabPanel>\n        <TabPanel value={'2'} label={'选项卡2'}>\n          <div\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡2内容区\n          </div>\n        </TabPanel>\n      </Tabs>\n      <Tabs placement={'top'} size=\"large\" theme=\"normal\" disabled={false} defaultValue={'1'}>\n        <TabPanel value={'1'} label={'选项卡1'}>\n          <div\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡1内容区\n          </div>\n        </TabPanel>\n        <TabPanel value={'2'} label={'选项卡2'}>\n          <div\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡2内容区\n          </div>\n        </TabPanel>\n      </Tabs>\n    </Space>\n  );\n}\n",
        "desc": "提供 大、中（默认）两种尺寸。"
      },
      {
        "code": "import React from 'react';\nimport { Tabs, Space } from 'tdesign-react';\n\nconst { TabPanel } = Tabs;\nexport default function ThemeTabs() {\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Tabs placement={'top'} size={'medium'} theme=\"normal\" disabled={false}>\n        <TabPanel value={'1'} label={'选项卡1'}>\n          <div\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡1内容区\n          </div>\n        </TabPanel>\n        <TabPanel value={'2'} label={'选项卡2'}>\n          <div\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡2内容区\n          </div>\n        </TabPanel>\n      </Tabs>\n\n      <Tabs placement={'top'} size={'medium'} theme=\"card\" disabled={false}>\n        <TabPanel value={'1'} label={'选项卡1'}>\n          <div\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡1内容区\n          </div>\n        </TabPanel>\n        <TabPanel value={'2'} label={'选项卡2'}>\n          <div\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡2内容区\n          </div>\n        </TabPanel>\n      </Tabs>\n    </Space>\n  );\n}\n",
        "desc": "提供 默认 和 卡片 两种风格。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Tabs, Radio, Space } from 'tdesign-react';\n\nconst { TabPanel } = Tabs;\nexport default function PositionTabs() {\n  const [position, setPosition] = useState('top');\n  const handlePositionChange = (val) => {\n    setPosition(val);\n  };\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Radio.Group variant=\"default-filled\" defaultValue=\"top\" onChange={handlePositionChange}>\n        <Radio.Button value=\"top\">top</Radio.Button>\n        <Radio.Button value=\"right\">right</Radio.Button>\n        <Radio.Button value=\"bottom\">bottom</Radio.Button>\n        <Radio.Button value=\"left\">left</Radio.Button>\n      </Radio.Group>\n      <Tabs placement={position} defaultValue={'1'} theme={'normal'} disabled={false}>\n        <TabPanel value={'1'} label=\"选项卡1\">\n          <div\n            className=\"tabs-content\"\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡1内容区\n          </div>\n        </TabPanel>\n        <TabPanel value={'2'} label=\"选项卡2\">\n          <div\n            className=\"tabs-content\"\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡2内容区\n          </div>\n        </TabPanel>\n        <TabPanel value={'3'} label=\"选项卡3\">\n          <div\n            className=\"tabs-content\"\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡3内容区\n          </div>\n        </TabPanel>\n      </Tabs>\n    </Space>\n  );\n}\n",
        "desc": "提供 上、右、下、左 不同位置的选项卡。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Tabs, Radio, Space } from 'tdesign-react';\n\nconst { TabPanel } = Tabs;\nexport default function AddTabs() {\n  const [theme, setTheme] = useState('normal');\n  const [scrollPosition, setScrollPosition] = useState('auto');\n  const panels = Array.from({\n    length: 20,\n  }).map((item, index) => ({\n    value: index + 1,\n    label: `选项卡${index + 1}`,\n  }));\n  return (\n    <Space\n      direction=\"vertical\"\n      size=\"large\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Radio.Group variant=\"default-filled\" defaultValue=\"normal\" onChange={(val) => setTheme(val)}>\n        <Radio.Button value=\"normal\">常规型</Radio.Button>\n        <Radio.Button value=\"card\">卡片型</Radio.Button>\n      </Radio.Group>\n      <Radio.Group variant=\"default-filled\" defaultValue=\"auto\" onChange={(v) => setScrollPosition(v)}>\n        <Radio.Button value=\"auto\">Auto</Radio.Button>\n        <Radio.Button value=\"start\">Start</Radio.Button>\n        <Radio.Button value=\"center\">Center</Radio.Button>\n        <Radio.Button value=\"end\">End</Radio.Button>\n      </Radio.Group>\n\n      <Tabs\n        placement={'top'}\n        size={'medium'}\n        disabled={false}\n        theme={theme}\n        scrollPosition={scrollPosition}\n        defaultValue={1}\n      >\n        {panels.map(({ value, label }) => (\n          <TabPanel key={value} value={value} label={label}>\n            <div\n              className=\"tabs-content\"\n              style={{\n                margin: 20,\n              }}\n            >\n              {label}内容区\n            </div>\n          </TabPanel>\n        ))}\n      </Tabs>\n    </Space>\n  );\n}\n",
        "desc": "当选项卡数量超出最大宽度，可通过滑动展示选项卡。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Tabs, Radio, Space } from 'tdesign-react';\n\nconst { TabPanel } = Tabs;\nexport default function ThemeTabs() {\n  const [theme, setTheme] = useState('normal');\n  return (\n    <Space\n      direction=\"vertical\"\n      size=\"large\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Radio.Group variant=\"default-filled\" defaultValue=\"normal\" onChange={(val) => setTheme(val)}>\n        <Radio.Button value=\"normal\">常规型</Radio.Button>\n        <Radio.Button value=\"card\">卡片型</Radio.Button>\n      </Radio.Group>\n      <Tabs placement={'top'} defaultValue={'1'} theme={theme} size={'medium'} disabled={false}>\n        <TabPanel value={'1'} label={'选项卡1'}>\n          <div\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡1内容区\n          </div>\n        </TabPanel>\n        <TabPanel value={'2'} label={'选项卡2'} disabled>\n          <div\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡2内容区\n          </div>\n        </TabPanel>\n        <TabPanel value={'3'} label={'选项卡3'}>\n          <div\n            style={{\n              margin: 20,\n            }}\n          >\n            选项卡3内容区\n          </div>\n        </TabPanel>\n      </Tabs>\n    </Space>\n  );\n}\n",
        "desc": "提供了选项卡的禁用状态。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Space, Tabs } from 'tdesign-react';\n\nconst { TabPanel } = Tabs;\nconst defaultList = [\n  {\n    label: '选项卡一',\n    value: 1,\n    panel: (\n      <p\n        style={{\n          padding: 25,\n        }}\n      >\n        这是选项卡一的内容，使用 Tabs 渲染\n      </p>\n    ),\n  },\n  {\n    label: '选项卡二',\n    value: 2,\n    panel: (\n      <p\n        style={{\n          padding: 25,\n        }}\n      >\n        这是选项卡二的内容，使用 Tabs 渲染\n      </p>\n    ),\n  },\n  {\n    label: '选项卡三',\n    value: 3,\n    panel: (\n      <p\n        style={{\n          padding: 25,\n        }}\n      >\n        这是选项卡三的内容，使用 Tabs 渲染\n      </p>\n    ),\n  },\n];\nexport default function DragSortExample() {\n  const [tabList1, setTabList1] = useState([...defaultList]);\n  const [tabList2, setTabList2] = useState([...defaultList]);\n  const onDragSort1 = ({ currentIndex, targetIndex }) => {\n    const temp = tabList1[currentIndex];\n    tabList1[currentIndex] = tabList1[targetIndex];\n    tabList1[targetIndex] = temp;\n    setTabList1([...tabList1]);\n  };\n  const onDragSort2 = ({ currentIndex, targetIndex }) => {\n    const temp = tabList2[currentIndex];\n    tabList2[currentIndex] = tabList2[targetIndex];\n    tabList2[targetIndex] = temp;\n    setTabList2([...tabList2]);\n  };\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Tabs defaultValue={1} list={tabList1} dragSort onDragSort={onDragSort1} />\n      <Tabs dragSort onDragSort={onDragSort2} placement={'top'} size={'medium'} defaultValue={1}>\n        {tabList2.map(({ label, value, panel }) => (\n          <TabPanel key={value} value={value} label={label}>\n            {panel}\n          </TabPanel>\n        ))}\n      </Tabs>\n    </Space>\n  );\n}\n",
        "desc": "提供了可拖拽的选项卡。"
      },
      {
        "code": "import React from 'react';\nimport { Space, Tabs } from 'tdesign-react';\n\nconst { TabPanel } = Tabs;\nexport default function BasicTabs() {\n  const tabList = [\n    {\n      label: '选项卡一',\n      value: 1,\n      panel: (\n        <p\n          style={{\n            padding: 25,\n          }}\n        >\n          这是选项卡1的内容，使用 Tabs 渲染\n        </p>\n      ),\n    },\n    {\n      label: '选项卡二',\n      value: 2,\n      panel: (\n        <p\n          style={{\n            padding: 25,\n          }}\n        >\n          这是选项卡2的内容，使用 Tabs 渲染\n        </p>\n      ),\n      destroyOnHide: false,\n    },\n    {\n      label: '选项卡三',\n      value: 3,\n      panel: (\n        <p\n          style={{\n            padding: 25,\n          }}\n        >\n          这是选项卡3的内容，使用 Tabs 渲染\n        </p>\n      ),\n      lazy: true,\n      destroyOnHide: false,\n    },\n  ];\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Tabs placement={'top'} size={'medium'} defaultValue={1}>\n        <TabPanel value={1} label=\"选项卡1\">\n          <p\n            style={{\n              padding: 25,\n            }}\n          >\n            选项卡1的内容，使用 TabPanel 渲染\n          </p>\n        </TabPanel>\n        <TabPanel value={2} label=\"选项卡2\" destroyOnHide={false}>\n          <p\n            style={{\n              padding: 25,\n            }}\n          >\n            选项卡2的内容，使用 TabPanel 渲染\n          </p>\n        </TabPanel>\n        <TabPanel value={3} label=\"选项卡3\" destroyOnHide={false} lazy>\n          <p\n            style={{\n              padding: 25,\n            }}\n          >\n            选项卡3的内容，使用 TabPanel 渲染\n          </p>\n        </TabPanel>\n      </Tabs>\n\n      <Tabs defaultValue={1} list={tabList} />\n    </Space>\n  );\n}\n",
        "desc": "通过设置 lazy，可以实现懒加载，只在选中tab时才进行渲染。"
      }
    ]
  },
  {
    "name": "<AutoComplete/>",
    "demoCode": [
      {
        "code": "import React, { useEffect, useState } from 'react';\nimport { Space, AutoComplete, Button } from 'tdesign-react';\nimport { SearchIcon } from 'tdesign-icons-react';\n\nconst classStyles = `\n<style>\n.t-demo-autocomplete__search .t-input {\n  padding-right: 0;\n}\n.t-demo-auto-complete__base .t-button svg {\n  font-size: 20px;\n}\n</style>\n`;\nlet timer = null;\nconst AutoCompleteBase = () => {\n  const [value, setValue] = useState('');\n  const [value2, setValue2] = useState('');\n  const [options, setOptions] = useState(['第一个默认联想词', '第二个默认联想词', '第三个默认联想词']);\n  const [options2] = useState(['第一个默认联想词', '第二个默认联想词', '第三个默认联想词']);\n\n  // 输入框内容发生变化时进行搜索，100ms 搜索一次\n  const onChange = (val) => {\n    setValue(val);\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      const text = '搜索联想词';\n      const pureValue = val.replace(`第一个${text}`, '').replace(`第二个${text}`, '').replace(`第三个${text}`, '');\n      setOptions([`${pureValue}第一个${text}`, `${pureValue}第二个${text}`, `${pureValue}第三个${text}`]);\n      clearTimeout(timer);\n    }, 100);\n  };\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  return (\n    <Space\n      direction=\"vertical\"\n      className=\"t-demo-auto-complete__base\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <AutoComplete\n        value={value}\n        options={options}\n        onChange={onChange}\n        highlightKeyword\n        filterable={false}\n        clearable\n        placeholder=\"请输入关键词搜索\"\n        onBlur={() => {\n          console.log('blur');\n        }}\n      />\n\n      {/* 左侧图标可以使用 label，同 input */}\n      <AutoComplete\n        value={value2}\n        options={options2}\n        onChange={setValue2}\n        highlightKeyword\n        filterable\n        placeholder=\"请输入关键词搜索（自定义右侧图标）\"\n        className=\"t-demo-autocomplete__search\"\n        inputProps={{\n          suffix: (\n            <Button shape=\"square\">\n              <SearchIcon />\n            </Button>\n          ),\n        }}\n      />\n    </Space>\n  );\n};\nAutoCompleteBase.displayName = 'AutoCompleteBase';\nexport default AutoCompleteBase;\n",
        "desc": "基础自动填充"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Space, AutoComplete } from 'tdesign-react';\nimport { escapeRegExp } from 'lodash-es';\n\nconst LIST = ['第一个 AutoComplete 默认联想词', '第二个 AutoComplete 默认联想词', '第三个 AutoComplete 默认联想词'];\nconst AutoCompleteBaseFilter = () => {\n  const [value1, setValue1] = useState('');\n  const [value2, setValue2] = useState('');\n  const filterWords = (keyword, option) => {\n    const regExp = new RegExp(escapeRegExp(keyword));\n    return regExp.test(option);\n  };\n  return (\n    <Space\n      style={{\n        width: '100%',\n      }}\n    >\n      <AutoComplete\n        value={value1}\n        options={[...LIST]}\n        onChange={setValue1}\n        highlightKeyword\n        filterable\n        placeholder=\"组件默认过滤规则（不区分大小写）\"\n        style={{\n          width: '280px',\n        }}\n      />\n\n      <AutoComplete\n        value={value2}\n        options={[...LIST]}\n        onChange={setValue2}\n        highlightKeyword\n        filter={filterWords}\n        placeholder=\"组件默认过滤规则（不区分大小写）\"\n        style={{\n          width: '280px',\n        }}\n      />\n    </Space>\n  );\n};\nAutoCompleteBaseFilter.displayName = 'AutoCompleteBaseFilter';\nexport default AutoCompleteBaseFilter;\n",
        "desc": "设置  后的默认过滤规则为：不区分大小写，文本任意位置。如果  的默认规则不符合需求，可以使用  自定义过滤规则。"
      },
      {
        "code": "import React, { useEffect, useState } from 'react';\nimport { AutoComplete, HighlightOption } from 'tdesign-react';\n\nconst classStyles = `\n<style>\n.t-demo-autocomplete-option-list .t-select-option {\n  height: 50px;\n}\n\n.t-demo-autocomplete-option-list .custom-option {\n  display: flex;\n  align-items: center;\n}\n\n.t-demo-autocomplete-option-list .custom-option > img {\n  max-height: 40px;\n  border-radius: 50%;\n}\n\n.t-demo-autocomplete-option-list .custom-option__main {\n  margin-left: 8px;\n}\n\n.t-demo-autocomplete-option-list .custom-option .description {\n  color: var(--td-gray-color-9);\n}\n</style>\n`;\nconst TEXTS = ['第一个默认联想词', '第二个默认联想词', '第三个默认联想词'];\nconst AutoCompleteOption = () => {\n  const [value, setValue] = useState('');\n  const options = TEXTS.map((text) => ({\n    text,\n    label: (\n      <div className=\"custom-option\">\n        <img src=\"https://tdesign.gtimg.com/site/avatar.jpg\" />\n        <div className=\"custom-option__main\">\n          <HighlightOption content={text} keyword={value} />\n          <small className=\"description\">这是关于联想词的描述，使用 label 渲染</small>\n        </div>\n      </div>\n    ),\n  }));\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  return (\n    <div className=\"t-demo-autocomplete-option\">\n      <AutoComplete\n        value={value}\n        options={options}\n        onChange={setValue}\n        highlightKeyword\n        placeholder=\"请输入关键词搜索\"\n        popupProps={{\n          overlayStyle: {\n            fontWeight: 'normal',\n          },\n          overlayInnerStyle: {\n            fontWeight: 'normal',\n          },\n          overlayClassName: 't-demo-autocomplete-option-list',\n          overlayInnerClassName: 'autocomplete-custom-overlay-inner-class',\n        }}\n      />\n    </div>\n  );\n};\nAutoCompleteOption.displayName = 'AutoCompleteOption';\nexport default AutoCompleteOption;\n",
        "desc": "使用  自定义联想词"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { AutoComplete, Textarea } from 'tdesign-react';\n\nlet timer = null;\nconst AutoCompleteTriggerElement = () => {\n  const [value, setValue] = useState('');\n  const [options, setOptions] = useState([\n    'First AutoComplete Textarea',\n    'Second AutoComplete Textarea',\n    'Third AutoComplete Textarea',\n  ]);\n\n  // 输入框内容发生变化时进行搜索，200ms 搜索一次\n  const onChange = (val) => {\n    setValue(val);\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      const text = 'AutoComplete Textarea';\n      const pureValue = val.replace(`First ${text}`, '').replace(`Second ${text}`, '').replace(`Third ${text}`, '');\n      setOptions([`${pureValue}First ${text}`, `${pureValue}Second ${text}`, `${pureValue}Third ${text}`]);\n      clearTimeout(timer);\n    }, 200);\n  };\n  return (\n    <AutoComplete value={value} options={options} onChange={onChange} highlightKeyword>\n      <Textarea value={value} onChange={setValue} placeholder=\"自定义联想词触发元素\" />\n    </AutoComplete>\n  );\n};\nAutoCompleteTriggerElement.displayName = 'AutoCompleteTriggerElement';\nexport default AutoCompleteTriggerElement;\n",
        "desc": "可自定义触发元素的自动填充"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { AutoComplete, Space } from 'tdesign-react';\n\nconst options = ['第一个联想词', '第二个联想词', '第三个联想词'];\nconst AutoCompleteSize = () => {\n  const [value1, setValue1] = useState('');\n  const [value2, setValue2] = useState('');\n  const [value3, setValue3] = useState('');\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <AutoComplete\n        value={value1}\n        options={options}\n        onChange={setValue1}\n        size=\"small\"\n        inputProps={{\n          label: '小尺寸：',\n        }}\n      />\n      <AutoComplete\n        value={value2}\n        options={options}\n        onChange={setValue2}\n        inputProps={{\n          label: '中尺寸：',\n        }}\n      />\n      <AutoComplete\n        value={value3}\n        options={options}\n        onChange={setValue3}\n        size=\"large\"\n        inputProps={{\n          label: '大尺寸：',\n        }}\n      />\n    </Space>\n  );\n};\nAutoCompleteSize.displayName = 'AutoCompleteSize';\nexport default AutoCompleteSize;\n",
        "desc": "不同尺寸的自动填充"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { AutoComplete, Space } from 'tdesign-react';\n\nconst options = ['第一个联想词', '第二个联想词', '第三个联想词'];\nconst AutoCompleteStatus = () => {\n  const [value, setValue] = useState('');\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n      size=\"32px\"\n    >\n      <AutoComplete\n        value={value}\n        options={options}\n        onChange={setValue}\n        disabled\n        tips=\"这是禁用状态\"\n        placeholder=\"请输入关键词搜索\"\n      />\n      <AutoComplete\n        value={value}\n        options={options}\n        onChange={setValue}\n        readonly\n        tips=\"这是只读状态\"\n        placeholder=\"请输入关键词搜索\"\n      />\n      <AutoComplete\n        value={value}\n        options={options}\n        onChange={setValue}\n        tips=\"这是普通状态\"\n        placeholder=\"请输入关键词搜索\"\n      />\n      <AutoComplete\n        value={value}\n        options={options}\n        onChange={setValue}\n        tips=\"这是告警状态\"\n        status=\"warning\"\n        placeholder=\"请输入关键词搜索\"\n      />\n      <AutoComplete\n        value={value}\n        options={options}\n        onChange={setValue}\n        tips=\"这是错误状态\"\n        status=\"error\"\n        placeholder=\"请输入关键词搜索\"\n      />\n      <AutoComplete\n        value={value}\n        options={options}\n        onChange={setValue}\n        tips=\"这是成功状态\"\n        status=\"success\"\n        placeholder=\"请输入关键词搜索\"\n      />\n    </Space>\n  );\n};\nAutoCompleteStatus.displayName = 'AutoCompleteStatus';\nexport default AutoCompleteStatus;\n",
        "desc": "不同状态的自动填充"
      }
    ]
  },
  {
    "name": "<Cascader/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { Cascader } from 'tdesign-react';\n\nexport default function Example() {\n  const [value, setValue] = useState([]);\n  const [options] = useState([\n    {\n      label: '选项一',\n      value: '1',\n      children: [\n        {\n          label: '子选项一',\n          value: '1.1',\n        },\n        {\n          label: '子选项二',\n          value: '1.2',\n        },\n        {\n          label: '子选项三',\n          value: '1.3',\n        },\n      ],\n    },\n    {\n      label: '选项二',\n      value: '2',\n      children: [\n        {\n          label: '子选项一',\n          value: '2.1',\n        },\n        {\n          label: '子选项二',\n          value: '2.2',\n        },\n      ],\n    },\n  ]);\n  const onChange = (value) => {\n    setValue(value);\n  };\n  return <Cascader options={options} onChange={onChange} value={value} size=\"medium\" clearable />;\n}\n",
        "desc": "提供单选的级联选择器，选取后展示每一层级所选的内容。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Cascader } from 'tdesign-react';\n\nexport default function Example() {\n  const [value, setValue] = useState(['8.1']);\n  const options = [\n    {\n      label: '选项一',\n      value: '1',\n      children: [\n        {\n          label: '子选项一',\n          value: '1.1',\n        },\n        {\n          label: '子选项二',\n          value: '1.2',\n        },\n        {\n          label: '子选项三',\n          value: '1.3',\n        },\n      ],\n    },\n    {\n      label: '选项二',\n      value: '2',\n      children: [\n        {\n          label: '子选项一',\n          value: '2.1',\n        },\n        {\n          label: '子选项二',\n          value: '2.2',\n        },\n      ],\n    },\n    {\n      label: '选项三',\n      value: '3',\n      children: [\n        {\n          label: '子选项一',\n          value: '3.1',\n        },\n        {\n          label: '子选项二',\n          value: '3.2',\n        },\n      ],\n    },\n    {\n      label: '选项四',\n      value: '4',\n      children: [\n        {\n          label: '子选项一',\n          value: '4.1',\n        },\n        {\n          label: '子选项二',\n          value: '4.2',\n        },\n      ],\n    },\n    {\n      label: '选项五',\n      value: '5',\n      children: [\n        {\n          label: '子选项一',\n          value: '5.1',\n        },\n        {\n          label: '子选项二',\n          value: '5.2',\n        },\n      ],\n    },\n    {\n      label: '选项六',\n      value: '6',\n      children: [\n        {\n          label: '子选项一',\n          value: '6.1',\n        },\n        {\n          label: '子选项二',\n          value: '6.2',\n        },\n      ],\n    },\n    {\n      label: '选项七',\n      value: '7',\n      children: [\n        {\n          label: '子选项一',\n          value: '7.1',\n        },\n        {\n          label: '子选项二',\n          value: '7.2',\n        },\n      ],\n    },\n    {\n      label: '选项8',\n      value: '8',\n      children: [\n        {\n          label: '子选项一',\n          value: '8.1',\n        },\n        {\n          label: '子选项二',\n          value: '8.2',\n        },\n      ],\n    },\n  ];\n  const onChange = (value) => {\n    setValue(value);\n  };\n  return (\n    <div className=\"tdesign-demo-block-row\">\n      <Cascader options={options} onChange={onChange} value={value} multiple clearable />\n    </div>\n  );\n}\n",
        "desc": "提供多选的级联选择器，通过标签展示多选内容。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Cascader, Space } from 'tdesign-react';\n\nexport default function Example() {\n  const [value, setValue] = useState(['1.1', '1.2', '1.3']);\n  const options = [\n    {\n      label: '选项一',\n      value: '1',\n      children: [\n        {\n          label: '子选项一',\n          value: '1.1',\n        },\n        {\n          label: '子选项二',\n          value: '1.2',\n        },\n        {\n          label: '子选项三',\n          value: '1.3',\n        },\n      ],\n    },\n    {\n      label: '选项二',\n      value: '2',\n      children: [\n        {\n          label: '子选项一',\n          value: '2.1',\n        },\n        {\n          label: '子选项二',\n          value: '2.2',\n        },\n      ],\n    },\n  ];\n  const onChange = (value) => {\n    setValue(value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Cascader options={options} value={value} onChange={onChange} multiple minCollapsedNum={1} />\n      <Cascader\n        options={options}\n        value={value}\n        onChange={onChange}\n        multiple\n        minCollapsedNum={1}\n        collapsedItems={({ count }) =>\n          count > 0 && (\n            <span\n              style={{\n                color: '#00a870',\n              }}\n            >\n              +{count - 1}\n            </span>\n          )\n        }\n      />\n    </Space>\n  );\n}\n",
        "desc": "多选情况下折叠选中项，超出该数值的选中项折叠。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Cascader, Space } from 'tdesign-react';\n\nexport default function Example() {\n  const [value, setValue] = useState([]);\n  const [options] = useState([\n    {\n      label: '选项一',\n      value: '1',\n      children: [\n        {\n          label: '子选项一',\n          value: '1.1',\n        },\n        {\n          label: '子选项二',\n          value: '1.2',\n        },\n        {\n          label: '子选项三',\n          value: '1.3',\n        },\n      ],\n    },\n    {\n      label: '选项二',\n      value: '2',\n      children: [\n        {\n          label: '子选项一',\n          value: '2.1',\n        },\n        {\n          label: '子选项二',\n          value: '2.2',\n        },\n      ],\n    },\n  ]);\n  const onChange = (value) => {\n    setValue(value);\n  };\n  const itemStyle = {\n    marginTop: '16px',\n  };\n  return (\n    <Space direction=\"vertical\">\n      {/* 非受控 */}\n      <Cascader style={itemStyle} options={options} defaultValue={value} clearable size=\"small\" placeholder=\"请选择\" />\n      {/* 受控 */}\n      <Cascader style={itemStyle} options={options} onChange={onChange} value={value} size=\"medium\" clearable />\n      {/* 受控 */}\n      <Cascader style={itemStyle} options={options} onChange={onChange} value={value} size=\"large\" clearable />\n    </Space>\n  );\n}\n",
        "desc": "提供大中小三种不同高度、宽度的选择器，以适应不同尺寸布局。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Cascader, Space } from 'tdesign-react';\n\nexport default function Example() {\n  const [value1, setValue1] = useState('');\n  const [value2, setValue2] = useState(['1.1']);\n  const options = [\n    {\n      label: '当选项一数据展示文本过长时',\n      value: '1',\n      children: [\n        {\n          label: '子选项一',\n          value: '1.1',\n        },\n        {\n          label: '子选项二',\n          value: '1.2',\n        },\n        {\n          label: '当选项数据展示文本过长时',\n          value: '1.3',\n        },\n      ],\n    },\n    {\n      label: '选项二',\n      value: '2',\n      children: [\n        {\n          label: '子选项一',\n          value: '2.1',\n        },\n        {\n          label: '当选项数据展示文本过长时',\n          value: '2.2',\n        },\n      ],\n    },\n  ];\n  const onChange1 = (value) => {\n    setValue1(value);\n  };\n  const onChange2 = (value) => {\n    setValue2(value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Cascader options={options} value={value1} onChange={onChange1} filterable />\n      <Cascader options={options} value={value2} multiple onChange={onChange2} filterable />\n    </Space>\n  );\n}\n",
        "desc": "输入过滤已选项。在有特定诉求的业务场景时使用。默认过滤文本。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Cascader, Space } from 'tdesign-react';\n\nexport default function Example() {\n  const value1 = '1.1';\n  const value2 = ['1.1'];\n  const [options] = useState([\n    {\n      label: '选项一',\n      value: '1',\n      children: [\n        {\n          label: '子选项一',\n          value: '1.1',\n        },\n        {\n          label: '子选项二',\n          value: '1.2',\n        },\n        {\n          label: '子选项三',\n          value: '1.3',\n        },\n      ],\n    },\n    {\n      label: '选项二',\n      value: '2',\n      children: [\n        {\n          label: '子选项一',\n          value: '2.1',\n        },\n        {\n          label: '子选项二',\n          value: '2.2',\n        },\n      ],\n    },\n  ]);\n  return (\n    <Space direction=\"vertical\">\n      <Cascader options={options} value={value1} disabled />\n      <Cascader options={options} value={value2} disabled multiple />\n    </Space>\n  );\n}\n",
        "desc": "提供禁用状态的级联选择器。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Cascader, Space } from 'tdesign-react';\n\nexport default function Example() {\n  const [value1, setValue1] = useState('');\n  const [value2, setValue2] = useState([]);\n  const options = [\n    {\n      label: '选项一',\n      value: '1',\n      children: [\n        {\n          label: '子选项一',\n          value: '1.1',\n        },\n        {\n          label: '子选项二',\n          value: '1.2',\n        },\n        {\n          label: '子选项三',\n          value: '1.3',\n        },\n      ],\n    },\n    {\n      label: '选项二',\n      value: '2',\n      children: [\n        {\n          label: '子选项一',\n          value: '2.1',\n        },\n        {\n          label: '子选项二',\n          value: '2.2',\n        },\n      ],\n    },\n  ];\n  const onChange1 = (value) => {\n    setValue1(value);\n  };\n  const onChange2 = (value) => {\n    setValue2(value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Cascader options={options} value={value1} showAllLevels={false} onChange={onChange1} />\n      <Cascader options={options} value={value2} showAllLevels={false} multiple onChange={onChange2} />\n    </Space>\n  );\n}\n",
        "desc": "可以仅在输入框中显示选中项最后一级的标签，而不是选中项所在的完整路径。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Cascader, Space } from 'tdesign-react';\n\nexport default function Example() {\n  const [value1, setValue1] = useState('1.2.2');\n  const [value2, setValue2] = useState(['1.1.2.1', '2']);\n  const options = [\n    {\n      value: '1',\n      label: '1',\n      children: [\n        {\n          value: '1.1',\n          label: '1.1',\n          children: [\n            {\n              value: '1.1.1',\n              label: '1.1.1',\n              children: [\n                {\n                  value: '1.1.1.1',\n                  label: '1.1.1.1',\n                },\n                {\n                  value: '1.1.1.2',\n                  label: '1.1.1.2',\n                },\n              ],\n            },\n            {\n              value: '1.1.2',\n              label: '1.1.2',\n              children: [\n                {\n                  value: '1.1.2.1',\n                  label: '1.1.2.1',\n                },\n                {\n                  value: '1.1.2.2',\n                  label: '1.1.2.2',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          value: '1.2',\n          label: '1.2',\n          children: [\n            {\n              value: '1.2.1',\n              label: '1.2.1',\n              children: [\n                {\n                  value: '1.2.1.1',\n                  label: '1.2.1.1',\n                },\n                {\n                  value: '1.2.1.2',\n                  label: '1.2.1.2',\n                },\n              ],\n            },\n            {\n              value: '1.2.2',\n              label: '1.2.2',\n              children: [\n                {\n                  value: '1.2.2.1',\n                  label: '1.2.2.1',\n                },\n                {\n                  value: '1.2.2.2',\n                  label: '1.2.2.2',\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n    {\n      value: '2',\n      label: '2',\n      children: [\n        {\n          value: '2.1',\n          label: '2.1',\n        },\n        {\n          value: '2.2',\n          label: '2.2',\n        },\n      ],\n    },\n  ];\n  const onChange1 = (value) => {\n    setValue1(value);\n  };\n  const onChange2 = (value) => {\n    setValue2(value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Cascader options={options} value={value1} onChange={onChange1} checkStrictly />\n      <Cascader options={options} value={value2} onChange={onChange2} checkStrictly multiple />\n    </Space>\n  );\n}\n",
        "desc": "启用该功能后，可以选择任意一级选项。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Cascader, Space } from 'tdesign-react';\n\nexport default function Example() {\n  const [value1, setValue1] = useState(['1', '1.1']);\n  const [value2, setValue2] = useState([\n    ['1', '1.1'],\n    ['1', '1.2'],\n  ]);\n  const options = [\n    {\n      label: '选项一',\n      value: '1',\n      children: [\n        {\n          label: '子选项一',\n          value: '1.1',\n        },\n        {\n          label: '子选项二',\n          value: '1.2',\n        },\n        {\n          label: '子选项三',\n          value: '1.3',\n        },\n      ],\n    },\n    {\n      label: '选项二',\n      value: '2',\n      children: [\n        {\n          label: '子选项一',\n          value: '2.1',\n        },\n        {\n          label: '子选项二',\n          value: '2.2',\n        },\n      ],\n    },\n  ];\n  const onChange1 = (value) => {\n    setValue1(value);\n  };\n  const onChange2 = (value) => {\n    setValue2(value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      {JSON.stringify(value1)}\n      <Cascader options={options} value={value1} onChange={onChange1} valueType=\"full\" />\n      {JSON.stringify(value2)}\n      <Cascader options={options} value={value2} onChange={onChange2} valueType=\"full\" multiple />\n    </Space>\n  );\n}\n",
        "desc": "单选情况下，选中后是一维数组，如：多选情况下，选中后是二维数组，如："
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Cascader, Space } from 'tdesign-react';\n\nexport default function Example() {\n  const [value1, setValue1] = useState([]);\n  const [value2, setValue2] = useState([]);\n  const [value3, setValue3] = useState([]);\n  const options = [\n    {\n      label: '选项一',\n      value: '1',\n      children: [\n        {\n          label: '子选项一',\n          value: '1.1',\n        },\n        {\n          label: '子选项二',\n          value: '1.2',\n        },\n        {\n          label: '子选项三',\n          value: '1.3',\n        },\n      ],\n    },\n    {\n      label: '选项二',\n      value: '2',\n      children: [\n        {\n          label: '子选项一',\n          value: '2.1',\n        },\n        {\n          label: '子选项二',\n          value: '2.2',\n        },\n      ],\n    },\n  ];\n  const onChange1 = (value) => {\n    setValue1(value);\n  };\n  const onChange2 = (value) => {\n    setValue2(value);\n  };\n  const onChange3 = (value) => {\n    setValue3(value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Cascader\n        options={options}\n        value={value1}\n        onChange={onChange1}\n        multiple\n        valueMode=\"onlyLeaf\"\n        popupProps={{\n          overlayStyle: {\n            fontWeight: 'normal',\n          },\n          overlayInnerStyle: {\n            fontWeight: 'normal',\n          },\n          overlayClassName: 'cascader-custom-overlay-class',\n          overlayInnerClassName: 'cascader-custom-overlay-inner-class',\n        }}\n      />\n      <Cascader options={options} value={value2} onChange={onChange2} multiple valueMode=\"parentFirst\" />\n      <Cascader options={options} value={value3} onChange={onChange3} multiple valueMode=\"all\" />\n    </Space>\n  );\n}\n",
        "desc": "只在多选条件下生效。 表示无论什么情况，选中值仅呈现叶子节点、 表示当子节点全部选中时，仅父节点在选中值里面、 表示父节点和子节点全部会出现在选中值里面。"
      },
      {
        "code": "import React from 'react';\nimport { Space, Cascader, Tag } from 'tdesign-react';\n\nconst SingleValueDisplay = ({ value, selectedOptions }) =>\n  value ? (\n    <div>\n      <img\n        src={selectedOptions?.[0]?.avatar}\n        style={{\n          width: '16px',\n          height: '16px',\n          marginTop: '2px',\n          verticalAlign: '-4px',\n          marginRight: '4px',\n        }}\n      />\n      <span>{selectedOptions?.[0]?.label}</span>\n      <span>({value})</span>\n    </div>\n  ) : null;\nconst MultipleValueDisplay = ({ selectedOptions, onClose }) =>\n  Array.isArray(selectedOptions) && selectedOptions.length\n    ? selectedOptions.map((option, index) => (\n        <Tag key={option.value} closable onClose={() => onClose(index)}>\n          <img\n            src={option.avatar}\n            style={{\n              width: '16px',\n              height: '16px',\n              marginTop: '2px',\n              verticalAlign: '-4px',\n              marginRight: '4px',\n            }}\n          />\n          <span>{option.label}</span>\n          <span>({option.value})</span>\n        </Tag>\n      ))\n    : null;\nexport default function Example() {\n  const [value1, setValue1] = React.useState('2.2');\n  const [value2, setValue2] = React.useState(['1.3', '2.1', '2.2']);\n  const AVATAR = 'https://tdesign.gtimg.com/site/avatar.jpg';\n  const optionsData = [\n    {\n      label: '选项一',\n      value: '1',\n      children: [\n        {\n          label: '子选项一',\n          value: '1.1',\n          avatar: AVATAR,\n        },\n        {\n          label: '子选项二',\n          value: '1.2',\n          avatar: AVATAR,\n        },\n        {\n          label: '子选项三',\n          value: '1.3',\n          avatar: AVATAR,\n        },\n      ],\n    },\n    {\n      label: '选项二',\n      value: '2',\n      children: [\n        {\n          label: '子选项一',\n          value: '2.1',\n          avatar: AVATAR,\n        },\n        {\n          label: '子选项二',\n          value: '2.2',\n          avatar: AVATAR,\n        },\n      ],\n    },\n  ];\n  return (\n    <Space direction=\"vertical\">\n      <Cascader\n        value={value1}\n        label=\"单选：\"\n        options={optionsData}\n        valueDisplay={SingleValueDisplay}\n        onChange={(val) => setValue1(val)}\n        clearable\n      ></Cascader>\n\n      <Cascader\n        value={value2}\n        label=\"多选：\"\n        options={optionsData}\n        valueDisplay={MultipleValueDisplay}\n        onChange={(val) => setValue2(val)}\n        clearable\n        multiple\n        style={{\n          width: '500px',\n        }}\n      ></Cascader>\n    </Space>\n  );\n}\n",
        "desc": "可以自定义输入框中显示的选中项内容展示"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Cascader, Space } from 'tdesign-react';\n\nexport default function Example() {\n  const [value, setValue] = useState('');\n  const options = [\n    {\n      label: '选项一',\n      value: '1',\n      children: [\n        {\n          label: '子选项一',\n          value: '1.1',\n        },\n        {\n          label: '子选项二',\n          value: '1.2',\n        },\n        {\n          label: '子选项三',\n          value: '1.3',\n        },\n      ],\n    },\n    {\n      label: '选项二',\n      value: '2',\n      children: [\n        {\n          label: '子选项一',\n          value: '2.1',\n        },\n        {\n          label: '子选项二',\n          value: '2.2',\n        },\n      ],\n    },\n  ];\n  const onChange = (value) => {\n    setValue(value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Cascader options={options} value={value} trigger=\"click\" onChange={onChange} />\n      <Cascader options={options} value={value} trigger=\"hover\" onChange={onChange} />\n    </Space>\n  );\n}\n",
        "desc": "可通过不同的触发方式来加载子菜单。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Cascader } from 'tdesign-react';\n\nexport default function Example() {\n  const [value1, setValue1] = useState('');\n  const options = [\n    {\n      label: '当选项一数据展示文本过长时',\n      value: '1',\n      children: [\n        {\n          label: '子选项一',\n          value: '1.1',\n        },\n        {\n          label: '子选项二',\n          value: '1.2',\n        },\n        {\n          label: '当选项数据展示文本过长时',\n          value: '1.3',\n        },\n      ],\n    },\n    {\n      label: '选项二',\n      value: '2',\n      children: [\n        {\n          label: '子选项一',\n          value: '2.1',\n        },\n        {\n          label: '当选项数据展示文本过长时',\n          value: '2.2',\n        },\n      ],\n    },\n  ];\n  const onChange1 = (value) => {\n    setValue1(value);\n  };\n  return <Cascader options={options} value={value1} onChange={onChange1} filterable />;\n}\n",
        "desc": "数据文本展示过长时，使用浏览器  展示过长文案。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Cascader } from 'tdesign-react';\n\nexport default function Example() {\n  const [value1, setValue1] = useState([]);\n  const options = [\n    {\n      label: '选项一',\n      value: '1',\n      children: [\n        {\n          label: '子选项一',\n          value: '1.1',\n        },\n        {\n          label: '子选项二',\n          value: '1.2',\n        },\n        {\n          label: '子选项三',\n          value: '1.3',\n        },\n      ],\n    },\n    {\n      label: '选项二',\n      value: '2',\n      children: [\n        {\n          label: '子选项一',\n          value: '2.1',\n        },\n        {\n          label: '子选项二',\n          value: '2.2',\n        },\n      ],\n    },\n  ];\n  const onChange1 = (value) => {\n    setValue1(value);\n  };\n  return <Cascader options={options} value={value1} max={3} onChange={onChange1} multiple />;\n}\n",
        "desc": "限制多选选择器的最大可选数目。通常在需要限制多选可选数目时使用。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Cascader, Space } from 'tdesign-react';\n\nexport default function Example() {\n  const [value1, setValue1] = useState('');\n  const [value2, setValue2] = useState([]);\n  const options = [\n    {\n      name: '选项一',\n      code: '1',\n      items: [\n        {\n          name: '子选项一',\n          code: '1.1',\n        },\n        {\n          name: '子选项二',\n          code: '1.2',\n        },\n        {\n          name: '子选项三',\n          code: '1.3',\n        },\n      ],\n    },\n    {\n      name: '选项二',\n      code: '2',\n      items: [\n        {\n          name: '子选项一',\n          code: '2.1',\n        },\n        {\n          name: '子选项二',\n          code: '2.2',\n        },\n      ],\n    },\n  ];\n  const onChange1 = (value) => {\n    setValue1(value);\n  };\n  const onChange2 = (value) => {\n    setValue2(value);\n  };\n  const keys = {\n    label: 'name',\n    value: 'code',\n    children: 'items',\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Cascader keys={keys} options={options} value={value1} onChange={onChange1} />\n      <Cascader keys={keys} options={options} value={value2} multiple onChange={onChange2} />\n    </Space>\n  );\n}\n",
        "desc": "使用  配置下拉选项时，如果数据字段不是  和 ，可以使用  定义别名。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Cascader, Space } from 'tdesign-react';\n\nexport default function Example() {\n  const [singleValue, setSingleValue] = useState('');\n  const [multipleValue, setMultipleValue] = useState([]);\n  const options = [\n    {\n      label: '选项1',\n      value: '1',\n      children: true,\n    },\n    {\n      label: '选项2',\n      value: '2',\n      children: true,\n    },\n  ];\n  const onSingleChange = (value) => {\n    setSingleValue(value);\n  };\n  const onMultipleChange = (value) => {\n    setMultipleValue(value);\n  };\n  const load = (node) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        let nodes = [];\n        if (node.getLevel() < 3) {\n          nodes = [\n            {\n              label: `${node.label}.1`,\n              children: node.getLevel() < 2,\n            },\n            {\n              label: `${node.label}.2`,\n              children: node.getLevel() < 2,\n            },\n          ];\n        }\n        resolve(nodes);\n      }, 300);\n    });\n  return (\n    <Space direction=\"vertical\">\n      <Cascader options={options} value={singleValue} onChange={onSingleChange} load={load} />\n      <Cascader multiple options={options} value={multipleValue} onChange={onMultipleChange} load={load} />\n    </Space>\n  );\n}\n",
        "desc": "可根据需求定制选择器内容。在有复杂逻辑或有特定诉求的业务场景时使用。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { CascaderPanel, Space } from 'tdesign-react';\n\nexport default function Example() {\n  const [value1, setValue1] = useState('');\n  const [value2, setValue2] = useState([]);\n  const options = [\n    {\n      label: '选项一',\n      value: '1',\n      children: [\n        {\n          label: '子选项一',\n          value: '1.1',\n        },\n        {\n          label: '子选项二',\n          value: '1.2',\n        },\n        {\n          label: '子选项三',\n          value: '1.3',\n        },\n      ],\n    },\n    {\n      label: '选项二',\n      value: '2',\n      children: [\n        {\n          label: '子选项一',\n          value: '2.1',\n        },\n        {\n          label: '子选项二',\n          value: '2.2',\n        },\n      ],\n    },\n  ];\n  const onChange1 = (value) => {\n    setValue1(value);\n  };\n  const onChange2 = (value) => {\n    setValue2(value);\n  };\n  const style = {\n    border: '1px solid #eee',\n    width: '100%',\n  };\n  return (\n    <Space direction=\"vertical\">\n      <div style={style}>\n        <CascaderPanel options={options} value={value1} showAllLevels={false} onChange={onChange1} />\n      </div>\n      <div style={style}>\n        <CascaderPanel options={options} value={value2} showAllLevels={false} multiple onChange={onChange2} />\n      </div>\n    </Space>\n  );\n}\n",
        "desc": "单独使用级联面板，用于与其他触发器结合"
      }
    ]
  },
  {
    "name": "<Checkbox/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { Checkbox, Space } from 'tdesign-react';\n\nexport default function CheckboxExample() {\n  const [value, setValue] = useState(true);\n  return (\n    <Space>\n      <Checkbox>未选中项</Checkbox>\n      <Checkbox indeterminate>半选状态</Checkbox>\n      <Checkbox checked={value} onChange={setValue}>\n        选中项\n      </Checkbox>\n      <Checkbox disabled>未选禁用项</Checkbox>\n      <Checkbox disabled defaultChecked>\n        选中禁用项\n      </Checkbox>\n    </Space>\n  );\n}\n",
        "desc": "最简单的多选框形式，常用于表单中数据多选的场景。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Checkbox, Button, Space } from 'tdesign-react';\n\nexport default function CheckboxControlledExample() {\n  const [checked, setChecked] = useState(false);\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Checkbox checked={checked}>腾讯云A</Checkbox>\n        <Checkbox checked={checked}>腾讯云B</Checkbox>\n        <Checkbox checked={checked}>腾讯云C</Checkbox>\n      </Space>\n\n      <Space>\n        <Button onClick={() => setChecked(false)}>重置</Button>\n        <Button\n          style={{\n            marginLeft: 16,\n          }}\n          onClick={() => setChecked(true)}\n        >\n          全选\n        </Button>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "联动多选框指多选框与其他组件配合使用。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Checkbox, Space } from 'tdesign-react';\n\nconst options = [\n  {\n    value: '北京',\n    label: '北京',\n  },\n  {\n    value: '上海',\n    label: '上海',\n  },\n  {\n    value: '广州',\n    label: '广州',\n  },\n  {\n    label: '全选',\n    checkAll: true,\n  },\n];\nexport default function CheckboxExample() {\n  const [disabled, setDisabled] = useState(false);\n  const [city, setCity] = useState(['北京']);\n  return (\n    <Space direction=\"vertical\">\n      <div>选中值: {city.join('、')}</div>\n      <div>\n        <Checkbox checked={disabled} onChange={(value) => setDisabled(value)}>\n          禁用全部\n        </Checkbox>\n      </div>\n\n      <Checkbox.Group\n        disabled={disabled}\n        value={city}\n        onChange={(value) => {\n          setCity(value);\n        }}\n        options={options}\n      />\n    </Space>\n  );\n}\n",
        "desc": "将多选框按一定属性组合使用的多选框组。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Checkbox, Space } from 'tdesign-react';\n\nexport default function CheckboxExample() {\n  const [value, setValue] = useState(false);\n  return (\n    <Space>\n      <Checkbox checked={value} onChange={setValue}>\n        受控属性\n      </Checkbox>\n      <Checkbox defaultChecked={true}>非受控属性</Checkbox>\n    </Space>\n  );\n}\n",
        "desc": "多选框支持受控和非受控使用方式。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Checkbox, InputNumber, Space } from 'tdesign-react';\n\nconst options = [\n  {\n    value: '北京',\n    label: '北京',\n  },\n  {\n    value: '上海',\n    label: '上海',\n  },\n  {\n    value: '广州',\n    label: '广州',\n  },\n  {\n    value: '深圳',\n    label: '深圳',\n  },\n];\nexport default function CheckboxExample() {\n  const [city, setCity] = useState(['北京']);\n  const [max, setMax] = useState(1);\n  return (\n    <Space direction=\"vertical\">\n      <div>\n        最多可选:{' '}\n        <InputNumber\n          value={max}\n          max={3}\n          min={1}\n          onChange={(value) => {\n            setMax(value);\n          }}\n        />\n      </div>\n      <div>选中值: {city.length ? city.join('、') : '无'}</div>\n\n      <Checkbox.Group max={max} value={city} onChange={(value) => setCity(value)}>\n        {options.map((item) => (\n          <Checkbox key={item.value} value={item.value}>\n            {item.label}\n          </Checkbox>\n        ))}\n      </Checkbox.Group>\n    </Space>\n  );\n}\n",
        "desc": "最多选中的数量"
      }
    ]
  },
  {
    "name": "<ColorPicker/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { ColorPickerPanel } from 'tdesign-react';\n\nexport default function PanelExample() {\n  const [recentColors, setRecentColors] = useState([]);\n  const handleChange = (value, context) => {\n    console.log('handleChange', value, context);\n  };\n  const handlePaletteChange = (context) => {\n    console.log('色相面板改变', context);\n  };\n  const handleRecentColorsChange = (value) => {\n    console.log('最近使用颜色改变', value);\n    setRecentColors(value);\n  };\n  return (\n    <ColorPickerPanel\n      onChange={handleChange}\n      onPaletteBarChange={handlePaletteChange}\n      onRecentColorsChange={handleRecentColorsChange}\n      recentColors={recentColors}\n      defaultValue=\"#0052d9\"\n      format=\"HEX\"\n      popupProps={{\n        overlayStyle: {\n          fontWeight: 'normal',\n        },\n        overlayInnerStyle: {\n          fontWeight: 'normal',\n        },\n        overlayClassName: 'color-picker-panel-custom-overlay-class',\n        overlayInnerClassName: 'color-picker-panel-custom-overlay-inner-class',\n      }}\n    />\n  );\n}\n",
        "desc": "没有触发器，直接显示颜色选择器面板。"
      },
      {
        "code": "import React from 'react';\nimport { ColorPicker } from 'tdesign-react';\n\nexport default function PanelExample() {\n  return <ColorPicker defaultValue={'#0052d9'} showPrimaryColorPreview={false} format=\"HEX\" />;\n}\n",
        "desc": "通过触发器触发显示选择器面板，透传全部属性到面板选择器组件。"
      },
      {
        "code": "import React from 'react';\nimport { ColorPicker, Space } from 'tdesign-react';\n\nexport default function ColorMode() {\n  const color1 = 'rgba(0, 82, 217, 1)';\n  const color2 = '#0052d9';\n  const color3 = 'linear-gradient(45deg, #4facfe 0%, #00f2fe 100%)';\n  return (\n    <Space breakLine>\n      <div>\n        <h5\n          style={{\n            marginBottom: 10,\n            fontWeight: 'normal',\n          }}\n        >\n          默认（单色 + 线性渐变）\n        </h5>\n        <ColorPicker defaultValue={color1} format=\"CSS\" />\n      </div>\n      <div>\n        <h5\n          style={{\n            marginBottom: 10,\n            fontWeight: 'normal',\n          }}\n        >\n          仅单色模式\n        </h5>\n        <ColorPicker defaultValue={color2} format=\"HEX\" colorModes={['monochrome']} />\n      </div>\n      <div\n        style={{\n          width: '100%',\n        }}\n      ></div>\n      <div>\n        <h5\n          style={{\n            marginBottom: 10,\n            fontWeight: 'normal',\n          }}\n        >\n          仅线性渐变模式\n        </h5>\n        <ColorPicker defaultValue={color3} format=\"CSS\" colorModes={['linear-gradient']} />\n      </div>\n    </Space>\n  );\n}\n",
        "desc": "支持单色模式、线性渐变两种颜色模式选择，可单独一种模式使用，也可同时两种模式切换。使用  进行配置。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { ColorPickerPanel } from 'tdesign-react';\n\nexport default function EnableAlpha() {\n  const [value, setValue] = useState('#0052D9CC');\n  const handleChange = (value) => {\n    setValue(value);\n  };\n  return <ColorPickerPanel enableAlpha value={value} format=\"HEX\" onChange={handleChange} />;\n}\n",
        "desc": "设置  即可开启选择器的透明度设置。"
      },
      {
        "code": "import React from 'react';\nimport { ColorPickerPanel, Space } from 'tdesign-react';\n\nexport default function SwatchColor() {\n  const color = '#0052d9';\n  const systemColors = ['red', 'green', 'yellow', 'blue', 'purple'];\n  return (\n    <Space>\n      <div>\n        <h6\n          style={{\n            marginBottom: 10,\n          }}\n        >\n          自定义系统色\n        </h6>\n        <ColorPickerPanel defaultValue={color} swatchColors={systemColors} />\n      </div>\n      <div>\n        <h6\n          style={{\n            marginBottom: 10,\n          }}\n        >\n          完全不显示系统色\n        </h6>\n        <ColorPickerPanel defaultValue={color} swatchColors={null} />\n      </div>\n    </Space>\n  );\n}\n",
        "desc": "可以通过  配置系统预设颜色，值为 null 或 [] 则不显示系统色。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { ColorPickerPanel, Space } from 'tdesign-react';\n\nexport default function RecentColor() {\n  const color = '#0052d9';\n  const [recentColors, setRecentColors] = useState([\n    '#f00',\n    '#008000',\n    '#ffff00',\n    '#0000ff',\n    '#800080',\n    'linear-gradient(to right, #fa709a 0%, #fee140 100%)',\n    'linear-gradient(45deg, #eea2a2 0%, #bbc1bf 19%, #57c6e1 42%, #b49fda 79%, #7ac5d8 100%)',\n    'linear-gradient(120deg, #fcc5e4 0%, #fda34b 15%, #ff7882 35%, #c8699e 52%, #7046aa 71%, #0c1db8 87%, #020f75 100%)',\n  ]);\n  return (\n    <Space>\n      <div>\n        <h6\n          style={{\n            marginBottom: 10,\n          }}\n        >\n          预设最近使用色\n        </h6>\n        <ColorPickerPanel defaultValue={color} recentColors={recentColors} onRecentColorsChange={setRecentColors} />\n      </div>\n      <div>\n        <h6\n          style={{\n            marginBottom: 10,\n          }}\n        >\n          完全不显示最近使用色\n        </h6>\n        <ColorPickerPanel defaultValue={color} recentColors={null} />\n      </div>\n    </Space>\n  );\n}\n",
        "desc": "可以通过  配置最近使用的颜色，值为 [] 表示以组件内部的“最近使用颜色”为准，值长度大于 0 则以该值为准显示“最近使用颜色”。值为 null 则完全不显示“最近使用颜色”。"
      },
      {
        "code": "import React from 'react';\nimport { ColorPicker } from 'tdesign-react';\n\nexport default function StatusDisabled() {\n  const color = '#0052d9';\n  return <ColorPicker defaultValue={color} disabled />;\n}\n",
        "desc": "禁用状态的颜色选择器"
      },
      {
        "code": "import React from 'react';\nimport { ColorPickerPanel } from 'tdesign-react';\n\nexport default function StatusReadonly() {\n  const color = '#0052d9';\n  return <ColorPickerPanel defaultValue={color} disabled />;\n}\n",
        "desc": "只读状态的颜色选择器"
      }
    ]
  },
  {
    "name": "<DatePicker/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { DatePicker, DateRangePicker, Space } from 'tdesign-react';\n\nexport default function YearDatePicker() {\n  const handleChange = (value) => {\n    console.log(value);\n  };\n  const handleRangeChange = (value) => {\n    console.log(value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <DatePicker mode=\"year\" clearable allowInput onChange={handleChange} />\n      <DateRangePicker mode=\"year\" clearable allowInput onChange={handleRangeChange} />\n    </Space>\n  );\n}\n",
        "desc": "用于年份的选择。用户仅需输入年份信息时使用，常用于如年账单等按年记录数据的查询场景。"
      },
      {
        "code": "import React from 'react';\nimport { DatePicker, DateRangePicker, Space } from 'tdesign-react';\n\nexport default function YearDatePicker() {\n  const handleChange = (value) => {\n    console.log(value);\n  };\n  const handleRangeChange = (value) => {\n    console.log(value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <DatePicker mode=\"month\" clearable allowInput onChange={handleChange} />\n      <DateRangePicker mode=\"month\" clearable allowInput onChange={handleRangeChange} />\n    </Space>\n  );\n}\n",
        "desc": "用于月份的选择。用户仅需输入月份信息时使用。"
      },
      {
        "code": "import React from 'react';\nimport { DatePicker, DateRangePicker, Space } from 'tdesign-react';\n\nexport default function YearDatePicker() {\n  const handleChange = (value) => {\n    console.log(value);\n  };\n  const handleRangeChange = (value) => {\n    console.log(value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <DatePicker mode=\"quarter\" clearable allowInput onChange={handleChange} />\n      <DateRangePicker mode=\"quarter\" clearable allowInput onChange={handleRangeChange} />\n    </Space>\n  );\n}\n",
        "desc": "用于季度的选择。用户仅需输入季度信息时使用。"
      },
      {
        "code": "import React from 'react';\nimport { DatePicker, DateRangePicker, Space } from 'tdesign-react';\n\nexport default function YearDatePicker() {\n  const handleChange = (value) => {\n    console.log(value);\n  };\n  const handleRangeChange = (value) => {\n    console.log(value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <DatePicker mode=\"week\" clearable allowInput onChange={handleChange} />\n      <DateRangePicker mode=\"week\" clearable allowInput onChange={handleRangeChange} />\n    </Space>\n  );\n}\n",
        "desc": "用于周的选择。用户仅需输入年份 + 周信息时使用。"
      },
      {
        "code": "import React from 'react';\nimport { DatePicker, Space } from 'tdesign-react';\n\nexport default function YearDatePicker() {\n  const handleChange = (value, context) => {\n    console.log('onChange:', value, context);\n    console.log('timestamp', context.dayjsValue.valueOf());\n    console.log('YYYYMMDD', context.dayjsValue.format('YYYYMMDD'));\n  };\n  return (\n    <Space direction=\"vertical\">\n      <DatePicker onChange={handleChange} />\n      <DatePicker placeholder=\"可清除、可输入的日期选择器\" onChange={handleChange} clearable allowInput />\n    </Space>\n  );\n}\n",
        "desc": "用于具体日期的选择。用户仅需要输入非常具体的日期信息时使用。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { DatePicker, Space } from 'tdesign-react';\n\nexport default function YearDatePicker() {\n  const [dateValue, setDateValue] = useState(['2024-10-01', '2024-10-24']);\n  const [weekValue, setWeekValue] = useState(['2024-50周', '2024-51周']);\n  const [yearValue, setYearValue] = useState(['2022', '2023', '2024']);\n  const handleDateChange = (value, context) => {\n    console.log('onChange:', value, context);\n    setDateValue(value);\n  };\n  const handleWeekChange = (value, context) => {\n    console.log('onChange:', value, context);\n    setWeekValue(value);\n  };\n  const handleYearChange = (value, context) => {\n    console.log('onChange:', value, context);\n    setYearValue(value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <DatePicker\n        value={dateValue}\n        placeholder=\"可清除、可输入的日期选择器\"\n        onChange={handleDateChange}\n        clearable\n        multiple\n      />\n      <DatePicker\n        value={weekValue}\n        placeholder=\"可清除、可输入的日期选择器\"\n        onChange={handleWeekChange}\n        clearable\n        multiple\n        mode=\"week\"\n      />\n      <DatePicker\n        value={yearValue}\n        placeholder=\"可清除、可输入的日期选择器\"\n        onChange={handleYearChange}\n        clearable\n        multiple\n        mode=\"year\"\n      />\n    </Space>\n  );\n}\n",
        "desc": "用于日期多选的选择。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { DatePicker, Space } from 'tdesign-react';\n\nexport default function YearDatePicker() {\n  const [value, setValue] = useState('2022-02-02 12:11:11');\n  const [value2, setValue2] = useState('2022-02-02 am 12:11:11');\n  const handleChange = (value) => {\n    console.log(value);\n    setValue(value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <DatePicker\n        enableTimePicker\n        value={value}\n        onChange={handleChange}\n        allowInput\n        clearable\n        popupProps={{\n          overlayStyle: {\n            fontWeight: 'normal',\n          },\n          overlayInnerStyle: {\n            fontWeight: 'normal',\n          },\n          overlayClassName: 'date-picker-custom-overlay-class',\n          overlayInnerClassName: 'date-picker-custom-overlay-inner-class',\n        }}\n      />\n\n      <DatePicker\n        enableTimePicker\n        value={value2}\n        onChange={(v) => setValue2(v)}\n        allowInput\n        clearable\n        format=\"YYYY-MM-DD a hh:mm:ss\"\n      />\n    </Space>\n  );\n}\n",
        "desc": "用于日期和时间相关联的选择。用户需要输入包含时间在内的日期时使用。"
      },
      {
        "code": "import React from 'react';\nimport { DateRangePicker, Space } from 'tdesign-react';\n\nexport default function YearDatePicker() {\n  // 选中日期时的事件\n  const onPick = (value, context) => {\n    console.log('onPick:', value, context);\n  };\n  const onChange = (value, context) => {\n    console.log('onChange:', value, context);\n    console.log(\n      'timestamp',\n      context.dayjsValue.map((d) => d.valueOf()),\n    );\n    console.log(\n      'YYYYMMDD',\n      context.dayjsValue.map((d) => d.format('YYYYMMDD')),\n    );\n  };\n  return (\n    <Space direction=\"vertical\">\n      <DateRangePicker onPick={onPick} allowInput clearable onChange={onChange} />\n      <DateRangePicker enableTimePicker allowInput clearable onPick={onPick} onChange={onChange} />\n    </Space>\n  );\n}\n",
        "desc": "用于某一段日期的选择。用户需要输入一段日期区间时使用。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport dayjs from 'dayjs';\nimport { DateRangePicker, Space } from 'tdesign-react';\n\nexport default function YearDatePicker() {\n  const [presets] = useState({\n    最近7天: [dayjs().subtract(6, 'day').toDate(), dayjs().toDate()],\n    最近3天: [dayjs().subtract(2, 'day').toDate(), dayjs().toDate()],\n    今天: [dayjs().toDate(), dayjs().toDate()],\n  });\n  const [range1, setRange1] = useState(['2022-01-01', '2022-08-08']);\n  const [range2, setRange2] = useState(['2022-01-01 11:11:11', '2022-08-08 12:12:12']);\n  return (\n    <Space direction=\"vertical\">\n      <DateRangePicker value={range1} presets={presets} onChange={(val) => setRange1(val)} />\n\n      <DateRangePicker value={range2} presets={presets} onChange={(val) => setRange2(val)} enableTimePicker />\n    </Space>\n  );\n}\n",
        "desc": "具有可提前设置的时间标签。当日期信息具有规律性，需要点击标签快捷输入时。"
      },
      {
        "code": "import React from 'react';\nimport dayjs from 'dayjs';\nimport { DatePicker, DateRangePicker, Space } from 'tdesign-react';\n\nexport default function YearDatePicker() {\n  const disableTime = (time) => {\n    if (dayjs(time).format('YYYY-MM-DD') === dayjs().format('YYYY-MM-DD')) {\n      return {\n        hour: [0, 1, 2, 3, 4, 5, 6],\n      };\n    }\n    return {};\n  };\n  return (\n    <Space direction=\"vertical\">\n      <DatePicker\n        placeholder=\"禁用昨天、前天\"\n        disableDate={[dayjs().subtract(1, 'day').format(), dayjs().subtract(2, 'day').format()]}\n      />\n      <DatePicker\n        placeholder=\"明后三天禁用\"\n        disableDate={{\n          from: dayjs().add(1, 'day').format(),\n          to: dayjs().add(3, 'day').format(),\n        }}\n      />\n      <DatePicker placeholder=\"禁用所有周六\" disableDate={(date) => dayjs(date).day() === 6} />\n      <DatePicker\n        placeholder=\"禁用最近 3 天外的日期\"\n        disableDate={{\n          before: dayjs().subtract(3, 'day').format(),\n          after: dayjs().add(3, 'day').format(),\n        }}\n      />\n      <DatePicker\n        placeholder=\"禁用日期精确到时间\"\n        enableTimePicker\n        disableDate={{\n          before: dayjs().subtract(1, 'day').format(),\n        }}\n        disableTime={disableTime}\n      />\n      <DateRangePicker\n        placeholder=\"禁用最近 5 天外的日期\"\n        disableDate={{\n          before: dayjs().subtract(5, 'day').format(),\n          after: dayjs().add(5, 'day').format(),\n        }}\n      />\n    </Space>\n  );\n}\n",
        "desc": "可将不支持用户选择的日期禁止点击。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { DatePicker, Radio, Space } from 'tdesign-react';\n\nexport default function YearDatePicker() {\n  const [startWeek, setStartWeek] = useState(1);\n  return (\n    <Space direction=\"vertical\">\n      <Radio.Group variant=\"default-filled\" value={startWeek} onChange={(value) => setStartWeek(value)}>\n        {[1, 2, 3, 4, 5, 6, 7].map((i) => (\n          <Radio.Button key={i} value={i}>\n            {i}\n          </Radio.Button>\n        ))}\n      </Radio.Group>\n\n      <DatePicker firstDayOfWeek={startWeek} />\n    </Space>\n  );\n}\n",
        "desc": "可以通过  属性指定一周从星期几开始，仅在日期选择时() 时有效，默认为 1 即从周一开始，如下可以设置为周日开始。"
      },
      {
        "code": "import React from 'react';\nimport { DatePicker, Space } from 'tdesign-react';\nimport { BrowseIcon, LockOnIcon } from 'tdesign-icons-react';\n\nexport default function YearDatePicker() {\n  const handleChange = (value) => {\n    console.log(value);\n  };\n  return (\n    <Space>\n      <DatePicker prefixIcon={<BrowseIcon />} suffixIcon={<LockOnIcon />} onChange={handleChange} />\n    </Space>\n  );\n}\n",
        "desc": "支持通过  和  自定义设置前缀和后缀图标。"
      },
      {
        "code": "import React from 'react';\nimport { DatePickerPanel, DateRangePickerPanel, Space } from 'tdesign-react';\n\nexport default function PanelExample() {\n  const handleChange = (value) => {\n    console.log('onChange', value);\n  };\n  const handleCellClick = (value) => {\n    console.log('onCellClick', value);\n  };\n  const handleRangeChange = (value) => {\n    console.log('onChange', value);\n  };\n  const handleRangeCellClick = (value) => {\n    console.log('onCellClick', value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <div\n        style={{\n          border: '1px solid var(--td-border-level-2-color)',\n          width: 'fit-content',\n          borderRadius: 3,\n        }}\n      >\n        <DatePickerPanel onCellClick={handleCellClick} onChange={handleChange} />\n      </div>\n      <div\n        style={{\n          border: '1px solid var(--td-border-level-2-color)',\n          width: 'fit-content',\n          borderRadius: 3,\n        }}\n      >\n        <DatePickerPanel enableTimePicker onCellClick={handleCellClick} onChange={handleChange} />\n      </div>\n\n      <div\n        style={{\n          border: '1px solid var(--td-border-level-2-color)',\n          width: 'fit-content',\n          borderRadius: 3,\n        }}\n      >\n        <DateRangePickerPanel onCellClick={handleRangeCellClick} onChange={handleRangeChange} />\n      </div>\n      <div\n        style={{\n          border: '1px solid var(--td-border-level-2-color)',\n          width: 'fit-content',\n          borderRadius: 3,\n        }}\n      >\n        <DateRangePickerPanel enableTimePicker onCellClick={handleRangeCellClick} onChange={handleRangeChange} />\n      </div>\n    </Space>\n  );\n}\n",
        "desc": "支持  和  单独使用场景，可以自行组装日期选择器。"
      },
      {
        "code": "import React from 'react';\nimport { DateRangePicker, Space } from 'tdesign-react';\n\nexport default function CancelRangeLimitDatePicker() {\n  return (\n    <Space direction=\"vertical\">\n      <DateRangePicker cancelRangeSelectLimit={true} clearable={true} />\n    </Space>\n  );\n}\n",
        "desc": "不限制日期区间选择范围的选择器"
      }
    ]
  },
  {
    "name": "<Form/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Form, Input, Radio, Checkbox, Button, Switch, MessagePlugin, DatePicker, Tooltip, Space } from 'tdesign-react';\n\nconst { FormItem } = Form;\nexport default function BaseForm() {\n  const [form] = Form.useForm();\n  const name = Form.useWatch('name', form);\n  const gender = Form.useWatch('gender', form);\n  console.log('name', name);\n  console.log('gender', gender);\n  const onSubmit = (e) => {\n    console.log(e);\n    if (e.validateResult === true) {\n      MessagePlugin.info('提交成功');\n    }\n  };\n  const onReset = (e) => {\n    console.log(e);\n    MessagePlugin.info('重置成功');\n  };\n  const setMessage = () => {\n    console.log(form);\n    form.setFields([\n      {\n        name: 'name',\n        status: 'error',\n        validateMessage: {\n          type: 'error',\n          message: '输入有误',\n        },\n      },\n      {\n        name: 'birthday',\n        status: 'warning',\n        validateMessage: {\n          type: 'warning',\n          message: '时间有误',\n        },\n      },\n    ]);\n  };\n  return (\n    <Form form={form} onSubmit={onSubmit} onReset={onReset} colon labelWidth={100}>\n      <FormItem label=\"姓名\" name=\"name\">\n        <Input />\n      </FormItem>\n      <FormItem label=\"出生日期\" name=\"birthday\">\n        <DatePicker mode=\"date\" />\n      </FormItem>\n      <FormItem label=\"性别\" name=\"gender\">\n        <Radio.Group>\n          <Radio value=\"male\">男性</Radio>\n          <Radio value=\"female\">女性</Radio>\n        </Radio.Group>\n      </FormItem>\n      <FormItem shouldUpdate={(prev, next) => prev.gender !== next.gender}>\n        {({ getFieldValue }) => {\n          if (getFieldValue('gender') === 'female') {\n            return (\n              <FormItem label=\"动态选项2\" name=\"bar\">\n                <Radio.Group>\n                  <Radio value=\"2\">选项三</Radio>\n                  <Radio value=\"3\">选项四</Radio>\n                </Radio.Group>\n              </FormItem>\n            );\n          }\n          return (\n            <FormItem label=\"动态选项1\" name=\"foo\">\n              <Radio.Group>\n                <Radio value=\"0\">选项一</Radio>\n                <Radio value=\"1\">选项二</Radio>\n              </Radio.Group>\n            </FormItem>\n          );\n        }}\n      </FormItem>\n      <FormItem label=\"课程\" name=\"course\">\n        <Checkbox.Group>\n          <Checkbox value=\"la\">加辣</Checkbox>\n          <Checkbox value=\"ma\">加麻</Checkbox>\n          <Checkbox value=\"nocong\">不要葱花</Checkbox>\n        </Checkbox.Group>\n      </FormItem>\n      <FormItem label=\"状态\" name=\"status\" for=\"status\">\n        <Switch />\n      </FormItem>\n      <FormItem label=\"自定义内容\" for=\"custom\">\n        <div\n          style={{\n            display: 'flex',\n            gap: 8,\n          }}\n        >\n          <FormItem name=\"custom\">\n            <Input />\n          </FormItem>\n          <Tooltip content=\"文字链提示信息\">\n            <Button variant=\"text\">文字链</Button>\n          </Tooltip>\n        </div>\n      </FormItem>\n      <FormItem\n        style={{\n          marginLeft: 100,\n        }}\n      >\n        <Space>\n          <Button type=\"submit\" theme=\"primary\">\n            提交\n          </Button>\n          <Button onClick={setMessage}>设置信息</Button>\n          <Button type=\"reset\" theme=\"default\">\n            重置\n          </Button>\n        </Space>\n      </FormItem>\n    </Form>\n  );\n}\n",
        "desc": "如果表单内存在提交按钮 ，点击提交按钮时，会自动触发  事件。如果表单内存在重置按钮 ，点击重置按钮时，会自动触发  事件。如果表单内不存在提交或重置按钮，您希望点击任意按钮进行提交和重置操作，则可以使用组件实例方法  和 ，详情请查阅 API 文档。"
      },
      {
        "code": "import React from 'react';\nimport { Form, Input, Button, MessagePlugin } from 'tdesign-react';\nimport { DesktopIcon, LockOnIcon } from 'tdesign-icons-react';\n\nconst { FormItem } = Form;\nexport default function BaseForm() {\n  const onSubmit = (e) => {\n    console.log(e);\n    if (e.validateResult === true) {\n      MessagePlugin.info('提交成功');\n    }\n  };\n  const onReset = (e) => {\n    console.log(e);\n    MessagePlugin.info('重置成功');\n  };\n  return (\n    <div\n      style={{\n        width: 350,\n      }}\n    >\n      <Form statusIcon={true} onSubmit={onSubmit} onReset={onReset} colon={true} labelWidth={0}>\n        <FormItem name=\"account\">\n          <Input clearable={true} prefixIcon={<DesktopIcon />} placeholder=\"请输入账户名\" />\n        </FormItem>\n        <FormItem name=\"password\">\n          <Input type=\"password\" prefixIcon={<LockOnIcon />} clearable={true} placeholder=\"请输入密码\" />\n        </FormItem>\n        <FormItem>\n          <Button theme=\"primary\" type=\"submit\" block>\n            登录\n          </Button>\n        </FormItem>\n      </Form>\n    </div>\n  );\n}\n",
        "desc": "专门适用于登录页面的账号和密码输入的表单。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Form, Radio, Input, Space } from 'tdesign-react';\n\nconst { FormItem } = Form;\nexport default function AlignForm() {\n  const [labelAlign, setLabelAlign] = useState('right');\n  return (\n    <Space direction=\"vertical\">\n      <Radio.Group value={labelAlign} onChange={(value) => setLabelAlign(value)} variant=\"default-filled\">\n        <Radio.Button value=\"left\">左对齐</Radio.Button>\n        <Radio.Button value=\"right\">右对齐</Radio.Button>\n        <Radio.Button value=\"top\">顶部对齐</Radio.Button>\n      </Radio.Group>\n      <Form labelAlign={labelAlign} labelWidth={80}>\n        <FormItem label=\"名字\" name=\"name\">\n          <Input />\n        </FormItem>\n        <FormItem label=\"密码\" name=\"password\">\n          <Input />\n        </FormItem>\n      </Form>\n    </Space>\n  );\n}\n",
        "desc": "根据具体目标和制约因素，选择最佳的标签对齐方式，默认对齐方式为右对齐。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Form, Radio, Input, Space } from 'tdesign-react';\n\nconst { FormItem } = Form;\nexport default function LayoutForm() {\n  const [layout, setLayout] = useState('inline');\n  return (\n    <Space direction=\"vertical\">\n      <div>\n        <Radio.Group value={layout} onChange={(value) => setLayout(value)} variant=\"default-filled\">\n          <Radio.Button value=\"vertical\">纵向布局</Radio.Button>\n          <Radio.Button value=\"inline\">行内布局</Radio.Button>\n        </Radio.Group>\n      </div>\n      <Form layout={layout} labelWidth={60}>\n        <FormItem label=\"名字\" name=\"name\">\n          <Input />\n        </FormItem>\n        <FormItem label=\"密码\" name=\"password\">\n          <Input />\n        </FormItem>\n      </Form>\n    </Space>\n  );\n}\n",
        "desc": "不同布局类型的表单"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Form, Input, Radio, Checkbox, Button, MessagePlugin, Popup, Space } from 'tdesign-react';\n\nconst { FormItem } = Form;\nexport default function BaseForm() {\n  const [resetType, setResetType] = useState('initial');\n  const onSubmit = ({ validateResult, firstError }) => {\n    if (validateResult === true) {\n      MessagePlugin.success('提交成功');\n    } else {\n      console.log('Errors: ', validateResult);\n      MessagePlugin.warning(firstError);\n    }\n  };\n  const onReset = (e) => {\n    console.log(e);\n    MessagePlugin.info('重置成功');\n  };\n  const courseOptions = [\n    {\n      label: '语文',\n      value: '1',\n    },\n    {\n      label: '数学',\n      value: '2',\n    },\n    {\n      label: '英语',\n      value: '3',\n    },\n  ];\n  return (\n    <Space direction=\"vertical\">\n      <div>\n        <Radio.Group value={resetType} onChange={(value) => setResetType(value)} variant=\"default-filled\">\n          <Radio.Button value=\"empty\">重置为空</Radio.Button>\n          <Radio.Button value=\"initial\">\n            <Popup content=\"改变表单数据后，点击重置按钮，观察数据重置情况\"> 重置为初始值 </Popup>\n          </Radio.Button>\n        </Radio.Group>\n      </div>\n\n      <Form resetType={resetType} colon onReset={onReset} onSubmit={onSubmit}>\n        <FormItem label=\"姓名\" name=\"name\" initialData=\"TDesign\">\n          <Input placeholder=\"请输入内容\" />\n        </FormItem>\n        <FormItem label=\"手机号码\" name=\"tel\" initialData=\"12345678910\">\n          <Input placeholder=\"请输入内容\" />\n        </FormItem>\n        <FormItem label=\"课程\" name=\"course\" initialData={['1']}>\n          <Checkbox.Group options={courseOptions}></Checkbox.Group>\n        </FormItem>\n        <FormItem\n          style={{\n            marginLeft: 100,\n          }}\n        >\n          <Button\n            theme=\"primary\"\n            type=\"submit\"\n            style={{\n              marginRight: 10,\n            }}\n          >\n            提交\n          </Button>\n          <Button theme=\"default\" variant=\"base\" type=\"reset\">\n            重置\n          </Button>\n        </FormItem>\n      </Form>\n    </Space>\n  );\n}\n",
        "desc": "第一种方式：使用  控制，值为  表示重置表单为空，值为  表示重置表单数据为初始值。示例：。第二种方式：使用组件实例方法  进行数据重置，具体参数参考 API 文档。示例一：，示例二：。"
      },
      {
        "code": "import React, { useEffect } from 'react';\nimport { Form, Input, Button, MessagePlugin, Loading } from 'tdesign-react';\nimport { AddRectangleIcon, HelpCircleIcon } from 'tdesign-icons-react';\n\nconst { FormItem } = Form;\nexport default function BaseForm() {\n  const onSubmit = (e) => {\n    console.log(e);\n    if (e.validateResult === true) {\n      MessagePlugin.info('提交成功');\n    }\n  };\n  const onReset = (e) => {\n    console.log(e);\n    MessagePlugin.info('重置成功');\n  };\n  const rules = {\n    fail: [\n      {\n        required: true,\n        message: '必填',\n        type: 'error',\n      },\n    ],\n    warning: [\n      {\n        required: true,\n        message: '必填',\n        type: 'warning',\n      },\n    ],\n    success: [],\n    failB: [\n      {\n        required: true,\n        message: '必填',\n        type: 'error',\n      },\n    ],\n    warningB: [\n      {\n        required: true,\n        type: 'warning',\n      },\n    ],\n  };\n  const form = React.useRef(null);\n  useEffect(() => {\n    form.current.validate();\n  }, [form]);\n  return (\n    <Form ref={form} statusIcon={true} onSubmit={onSubmit} onReset={onReset} rules={rules}>\n      <FormItem label=\"失败\" help=\"校验不通过，请输入正确内容\" name=\"fail\">\n        <Input />\n      </FormItem>\n      <FormItem\n        label=\"警告\"\n        name=\"warning\"\n        rules={[\n          {\n            required: true,\n            message: '必填',\n            type: 'warning',\n          },\n        ]}\n      >\n        <Input />\n      </FormItem>\n      <FormItem label=\"成功\" name=\"success\">\n        <Input />\n      </FormItem>\n      <FormItem label=\"失败\" name=\"failB\" statusIcon={false}>\n        <Input placeholder=\"隐藏状态icon\" />\n      </FormItem>\n      <FormItem label=\"警告\" name=\"warningB\">\n        <Input />\n      </FormItem>\n      <FormItem\n        label=\"加载中\"\n        name=\"loading\"\n        statusIcon={\n          <Loading\n            loading\n            size=\"25px\"\n            style={{\n              color: '#1890ff',\n            }}\n          />\n        }\n      >\n        <Input placeholder=\"正在校验中，请稍等\" />\n      </FormItem>\n      <FormItem\n        label=\"新增\"\n        name=\"add\"\n        help=\"自定义新增icon\"\n        statusIcon={<AddRectangleIcon name=\"add-rectangle\" size=\"25px\" />}\n      >\n        <Input />\n      </FormItem>\n      <FormItem\n        label=\"帮助\"\n        name=\"help\"\n        help=\"自定义帮助icon\"\n        statusIcon={<HelpCircleIcon name=\"help-circle\" size=\"25px\" />}\n      >\n        <Input />\n      </FormItem>\n      <FormItem\n        style={{\n          marginLeft: 100,\n        }}\n      >\n        <Button\n          theme=\"primary\"\n          type=\"submit\"\n          style={{\n            marginRight: 10,\n          }}\n        >\n          提交\n        </Button>\n        <Button type=\"reset\">重置</Button>\n      </FormItem>\n    </Form>\n  );\n}\n",
        "desc": "校验状态有：成功、失败、警告等状态，可使用  控制是否显示校验成功后的绿色边框。使用  控制校验图标， 优先级大于 。值为  显示默认图标，默认图标有 成功、失败、警告 等，不同的状态图标不同。 值为 ，不显示图标。 值类型为渲染函数，则可以自定义右侧状态图标。"
      },
      {
        "code": "import React, { useRef } from 'react';\nimport { Form, Input, Radio, Checkbox, Button, MessagePlugin } from 'tdesign-react';\nimport { debounce } from 'lodash-es';\n\nconst { FormItem } = Form;\nexport default function BaseForm() {\n  const [form] = Form.useForm();\n  const onSubmit = (e) => {\n    console.log(e);\n    if (e.validateResult === true) {\n      MessagePlugin.info('提交成功');\n    }\n  };\n  const onReset = (e) => {\n    console.log(e);\n    MessagePlugin.info('重置成功');\n  };\n  const asyncValidate = (val) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        if (val === '123') {\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n      }, 1000);\n    });\n  const handleChange = useRef(\n    debounce((value) => {\n      console.log('value', value);\n      form.validate({\n        fields: ['password'],\n        trigger: 'blur',\n      });\n    }, 500),\n  ).current;\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      onSubmit={onSubmit}\n      labelWidth={100}\n      onReset={onReset}\n      scrollToFirstError=\"smooth\"\n    >\n      <FormItem\n        label=\"用户名\"\n        help=\"这里请填写用户名\"\n        name=\"account\"\n        initialData={'张三'}\n        rules={[\n          {\n            whitespace: true,\n            message: '姓名不能为空',\n          },\n          {\n            required: true,\n            message: '姓名必填',\n            type: 'error',\n          },\n          {\n            min: 2,\n            message: '至少需要两个字',\n            type: 'error',\n          },\n        ]}\n      >\n        <Input />\n      </FormItem>\n      <FormItem\n        label=\"密码\"\n        help=\"这里请填写密码\"\n        name=\"password\"\n        rules={[\n          {\n            required: true,\n            message: '密码必填',\n            type: 'error',\n          },\n          {\n            validator: asyncValidate,\n            message: '密码错误',\n            type: 'error',\n            trigger: 'blur',\n          },\n        ]}\n      >\n        <Input onChange={handleChange} />\n      </FormItem>\n      <FormItem\n        label=\"邮箱\"\n        name=\"email\"\n        rules={[\n          {\n            required: true,\n            message: '格式必须为邮箱',\n            type: 'warning',\n          },\n        ]}\n      >\n        <Input />\n      </FormItem>\n      <FormItem\n        label=\"性别\"\n        name=\"gender\"\n        rules={[\n          {\n            required: true,\n            message: '性别必填',\n            type: 'warning',\n          },\n        ]}\n      >\n        <Radio.Group>\n          <Radio value=\"male\">男</Radio>\n          <Radio value=\"femal\">女</Radio>\n        </Radio.Group>\n      </FormItem>\n      <FormItem\n        label=\"课程\"\n        name=\"course\"\n        rules={[\n          {\n            required: true,\n            message: '课程必填',\n            type: 'warning',\n          },\n        ]}\n      >\n        <Checkbox.Group>\n          <Checkbox value=\"1\">语文</Checkbox>\n          <Checkbox value=\"2\">数学</Checkbox>\n          <Checkbox value=\"3\">英语</Checkbox>\n          <Checkbox value=\"4\">体育</Checkbox>\n        </Checkbox.Group>\n      </FormItem>\n      <FormItem\n        label=\"入学时间\"\n        name=\"date\"\n        rules={[\n          {\n            date: true,\n            message: '日期格式有误',\n          },\n        ]}\n      >\n        <Input />\n      </FormItem>\n      <FormItem\n        label=\"个人网站\"\n        name=\"content.url\"\n        rules={[\n          {\n            required: true,\n            message: '个人网站必填',\n            type: 'warning',\n          },\n          {\n            url: {\n              protocols: ['http', 'https', 'ftp'],\n              require_protocol: true,\n            },\n            message: '请输入正确的个人主页',\n          },\n        ]}\n      >\n        <Input />\n      </FormItem>\n      <FormItem\n        style={{\n          marginLeft: 100,\n        }}\n      >\n        <Button\n          theme=\"primary\"\n          type=\"submit\"\n          style={{\n            marginRight: 10,\n          }}\n        >\n          提交\n        </Button>\n        <Button type=\"reset\">重置</Button>\n      </FormItem>\n    </Form>\n  );\n}\n",
        "desc": "表单内置的校验规则有： /  /  /  /  /  /  /  /  /  /  /  /  。其中  /  /  等校验规则参数参看：https://github.com/validatorjs/validator.js。各校验规则示例见 API 文档中的 。"
      },
      {
        "code": "import React from 'react';\nimport { Form, Input, Button, MessagePlugin } from 'tdesign-react';\n\nconst { FormItem } = Form;\nexport default function BaseForm() {\n  const form = React.useRef(null);\n  const onSubmit = (e) => {\n    console.log(e);\n    if (e.validateResult === true) {\n      MessagePlugin.info('提交成功');\n    }\n  };\n  const onReset = (e) => {\n    console.log(e);\n    MessagePlugin.info('重置成功');\n  };\n  const resetValidate = () => {\n    form.current.clearValidate();\n  };\n\n  // 自定义异步校验器\n  const rePassword = (val) =>\n    new Promise((resolve) => {\n      const timer = setTimeout(() => {\n        resolve(form.current.getFieldValue('password') === val);\n        clearTimeout(timer);\n      });\n    });\n\n  // 自定义异步校验器\n  const validateName = (name) => {\n    const names = ['张三', '李四', '王五'];\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(!names.includes(name));\n      }, 1000);\n    });\n  };\n\n  // 自定义校验器，不同的值输出不同的校验结果。支持异步校验（文案选自某密码重置站点，如有侵权，请联系我们删除）\n  const passwordValidator = (val) => {\n    if (!val || (val.length > 0 && val.length <= 2)) {\n      return {\n        result: false,\n        message: '太简单了！再开动一下你的小脑筋吧！',\n        type: 'error',\n      };\n    }\n    if (val.length > 2 && val.length < 4) {\n      return {\n        result: false,\n        message: '还差一点点，就是一个完美的密码了！',\n        type: 'warning',\n      };\n    }\n    return {\n      result: true,\n      message: '太强了，你确定自己记得住吗！',\n      type: 'success',\n    };\n  };\n  const rules = {\n    account: [\n      {\n        required: true,\n        message: '姓名必填',\n        type: 'error',\n      },\n      {\n        min: 2,\n        message: '至少需要两个字',\n        type: 'error',\n      },\n      {\n        validator: validateName,\n        message: '该用户名已存在',\n        type: 'error',\n        trigger: 'blur',\n      },\n    ],\n    password: [\n      {\n        required: true,\n        message: '密码必填',\n        type: 'error',\n      },\n      // 不同的校验结果有不同的错误信息提醒，切错误信息类型不同\n      {\n        validator: passwordValidator,\n      },\n    ],\n    rePassword: [\n      // 自定义校验规则\n      {\n        required: true,\n        message: '密码必填',\n        type: 'error',\n      },\n      {\n        validator: rePassword,\n        message: '两次密码不一致',\n      },\n    ],\n  };\n  return (\n    <Form ref={form} statusIcon={true} onSubmit={onSubmit} onReset={onReset} labelWidth={100} rules={rules}>\n      <FormItem label=\"用户名\" name=\"account\">\n        <Input />\n      </FormItem>\n      <FormItem label=\"密码\" name=\"password\" initialData=\"\">\n        <Input />\n      </FormItem>\n      <FormItem label=\"确认密码\" name=\"rePassword\" initialData=\"\">\n        <Input />\n      </FormItem>\n      <FormItem\n        style={{\n          marginLeft: 100,\n        }}\n      >\n        <Button theme=\"primary\" type=\"submit\">\n          提交\n        </Button>\n        <Button\n          theme=\"default\"\n          type=\"reset\"\n          style={{\n            margin: '0 12px',\n          }}\n        >\n          重置\n        </Button>\n        <Button theme=\"default\" onClick={resetValidate}>\n          清除校验状态\n        </Button>\n      </FormItem>\n    </Form>\n  );\n}\n",
        "desc": "示例一：。示例二：。如果是异步校验，必须返回所有情况的校验结果，不能只返回  校验不通过的情况，还需要注意返回  校验通过的情况。"
      },
      {
        "code": "import React from 'react';\nimport { Form, Input, Checkbox, Button, MessagePlugin, Radio, Select } from 'tdesign-react';\n\nconst { FormItem } = Form;\nconst rules = {\n  account: [\n    {\n      required: true,\n      message: '姓名必填',\n    },\n    {\n      min: 2,\n      message: '至少需要两个字符，一个中文等于两个字符',\n    },\n    {\n      max: 10,\n      message: '姓名字符长度超出',\n    },\n  ],\n  description: [\n    {\n      validator: (val) => val.length >= 5,\n      message: '至少 5 个字，中文长度等于英文长度',\n    },\n    {\n      validator: (val) => val.length < 20,\n      message: '不能超过 20 个字，中文长度等于英文长度',\n    },\n  ],\n  password: [\n    {\n      required: true,\n      message: '密码必填',\n    },\n    {\n      len: 8,\n      message: '请输入 8 位密码',\n    },\n    {\n      pattern: /[A-Z]+/,\n      message: '密码必须包含大写字母',\n    },\n  ],\n  email: [\n    {\n      required: true,\n      message: '邮箱必填',\n    },\n    {\n      email: {\n        ignore_max_length: true,\n      },\n      message: '请输入正确的邮箱地址',\n    },\n  ],\n  gender: [\n    {\n      required: true,\n      message: '性别必填',\n    },\n  ],\n  course: [\n    {\n      required: true,\n      message: '课程必填',\n    },\n    {\n      validator: (val) => val.length <= 2,\n      message: '最多选择 2 门课程',\n    },\n  ],\n  'content.url': [\n    {\n      required: true,\n      message: '个人网站必填',\n    },\n    {\n      url: {\n        protocols: ['http', 'https', 'ftp'],\n        require_protocol: true,\n      },\n      message: '请输入正确的个人主页',\n    },\n  ],\n};\nconst courseOptions = [\n  {\n    label: '语文',\n    value: '1',\n  },\n  {\n    label: '数学',\n    value: '2',\n  },\n  {\n    label: '英语',\n    value: '3',\n  },\n  {\n    label: '体育',\n    value: '4',\n  },\n];\nconst options = [\n  {\n    label: '计算机学院',\n    value: '1',\n  },\n  {\n    label: '软件学院',\n    value: '2',\n  },\n  {\n    label: '物联网学院',\n    value: '3',\n  },\n];\nexport default function BaseForm() {\n  const [form] = Form.useForm();\n  const onSubmit = ({ validateResult, firstError }) => {\n    if (validateResult === true) {\n      MessagePlugin.success('提交成功');\n    } else {\n      console.log('Errors: ', validateResult);\n      MessagePlugin.warning(firstError);\n    }\n  };\n  const onReset = () => {\n    MessagePlugin.info('重置成功');\n  };\n  const handleClear = () => {\n    form.clearValidate();\n  };\n\n  // 清除指定字段的校验结果\n  const clearFieldsValidateResult = () => {\n    form.clearValidate(['email', 'course', 'content.url']);\n    MessagePlugin.success('已清除邮箱、课程、个人网站等字段校验结果');\n  };\n  return (\n    <Form form={form} rules={rules} onReset={onReset} onSubmit={onSubmit} scrollToFirstError=\"smooth\">\n      <FormItem label=\"用户名\" help=\"这是用户名字段帮助说明\" name=\"account\">\n        <Input />\n      </FormItem>\n      <FormItem label=\"个人简介\" help=\"一句话介绍自己\" name=\"description\" initialData=\"\">\n        <Input />\n      </FormItem>\n      <FormItem label=\"密码\" name=\"password\">\n        <Input type=\"password\" />\n      </FormItem>\n      <FormItem label=\"邮箱\" name=\"email\">\n        <Input />\n      </FormItem>\n      <FormItem label=\"性别\" name=\"gender\">\n        <Radio.Group>\n          <Radio value=\"male\">男</Radio>\n          <Radio value=\"femal\">女</Radio>\n        </Radio.Group>\n      </FormItem>\n      <FormItem label=\"课程\" name=\"course\" initialData={[]}>\n        <Checkbox.Group options={courseOptions}></Checkbox.Group>\n      </FormItem>\n      <FormItem label=\"学院\" name=\"college\">\n        {\n          <Select clearable>\n            {options.map((item, index) => (\n              <Select.Option value={item.value} label={item.label} key={index} />\n            ))}\n          </Select>\n        }\n      </FormItem>\n      <FormItem\n        label=\"入学时间\"\n        name=\"date\"\n        rules={[\n          {\n            date: {\n              delimiters: ['/', '-', '.'],\n            },\n            message: '日期格式有误',\n          },\n        ]}\n      >\n        <Input />\n      </FormItem>\n      <FormItem label=\"个人网站\" name=\"content.url\">\n        <Input />\n      </FormItem>\n      <FormItem\n        style={{\n          marginLeft: 100,\n        }}\n      >\n        <Button\n          theme=\"primary\"\n          type=\"submit\"\n          style={{\n            marginRight: 10,\n          }}\n        >\n          提交\n        </Button>\n        <Button\n          theme=\"default\"\n          variant=\"base\"\n          type=\"reset\"\n          style={{\n            marginRight: 10,\n          }}\n        >\n          重置\n        </Button>\n        <Button\n          theme=\"default\"\n          variant=\"base\"\n          onClick={handleClear}\n          style={{\n            marginRight: 10,\n          }}\n        >\n          清空校验结果\n        </Button>\n        <Button theme=\"default\" variant=\"base\" onClick={clearFieldsValidateResult}>\n          {' '}\n          清除指定字段的校验结果{' '}\n        </Button>\n      </FormItem>\n    </Form>\n  );\n}\n",
        "desc": "在一些复杂的业务场景中，会涉及到自主控制校验结果的显示与否，此时使用实例方法  来清空校验结果。可以清空全部字段的校验结果，也可以清除部分字段的校验结果。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Form, Input, Button, MessagePlugin, Radio, Select, Checkbox, Popup, Space } from 'tdesign-react';\n\nconst { FormItem } = Form;\nconst courseOptions = [\n  {\n    label: '语文',\n    value: '1',\n  },\n  {\n    label: '数学',\n    value: '2',\n  },\n  {\n    label: '英语',\n    value: '3',\n  },\n  {\n    label: '体育',\n    value: '4',\n  },\n];\nconst options = [\n  {\n    label: '计算机学院',\n    value: '1',\n  },\n  {\n    label: '软件学院',\n    value: '2',\n  },\n  {\n    label: '物联网学院',\n    value: '3',\n  },\n];\nconst errorMessage = {\n  date: 'name不正确',\n  url: 'name不正确',\n  required: '请输入name',\n  max: 'name字符长度不能超过validate个字符，一个中文等于两个字符',\n  min: 'name字符长度不能少于 validate 个字符，一个中文等于两个字符',\n  len: 'name字符长度必须是 validate',\n  pattern: 'name不正确',\n  validator: 'name有误',\n};\nconst rules = {\n  account: [\n    {\n      required: true,\n    },\n    // { enum: ['sheep', 'name'] },\n    {\n      min: 2,\n    },\n    {\n      max: 10,\n      type: 'warning',\n    },\n  ],\n  description: [\n    {\n      validator: (val) => val.length >= 5,\n    },\n    {\n      validator: (val) => val.length < 10,\n      message: '不能超过 20 个字，中文长度等于英文长度',\n    },\n  ],\n  password: [\n    {\n      required: true,\n    },\n    {\n      len: 8,\n      message: '请输入 8 位密码',\n    },\n    {\n      pattern: /[A-Z]+/,\n      message: '密码必须包含大写字母',\n    },\n  ],\n  email: [\n    {\n      required: true,\n    },\n    {\n      email: {\n        ignore_max_length: true,\n      },\n    },\n  ],\n  gender: [\n    {\n      required: true,\n    },\n  ],\n  course: [\n    {\n      required: true,\n    },\n    {\n      validator: (val) => val.length <= 2,\n      message: '最多选择 2 门课程',\n      type: 'warning',\n    },\n  ],\n  'content.url': [\n    {\n      required: true,\n    },\n    {\n      url: {\n        protocols: ['http', 'https', 'ftp'],\n        require_protocol: true,\n      },\n    },\n  ],\n};\nexport default function BaseForm() {\n  const [form] = Form.useForm();\n  const [errorConfig, setErrorConfig] = useState('default');\n  const onSubmit = ({ validateResult, firstError }) => {\n    if (validateResult === true) {\n      MessagePlugin.success('提交成功');\n    } else {\n      console.log('Errors: ', validateResult);\n      MessagePlugin.warning(firstError);\n    }\n  };\n  const onReset = () => {\n    MessagePlugin.info('重置成功');\n  };\n  const handleClear = () => {\n    form.clearValidate();\n  };\n  return (\n    <Space direction=\"vertical\">\n      {/* 可以使用全局 ConfigProvider errorMessage 配置规则校验结果描述，而无需给每一个表单都配置校验信息 */}\n      <div>\n        <Radio.Group variant=\"default-filled\" value={errorConfig} onChange={(v) => setErrorConfig(v)}>\n          <Radio.Button value=\"default\">\n            <Popup content=\"Form.errorMessage 为空，使用组件内置校验信息。重置后，点击提交观察校验结果信息\">\n              使用表单默认校验信息\n            </Popup>\n          </Radio.Button>\n          <Radio.Button value=\"config\">\n            <Popup content=\"统一配置 Form.errorMessage，使用自定义配置的校验信息。重置后，点击提交观察校验结果信息\">\n              表单统一配置校验信息\n            </Popup>\n          </Radio.Button>\n        </Radio.Group>\n      </div>\n\n      <Form\n        form={form}\n        rules={rules}\n        error-message={errorConfig === 'default' ? undefined : errorMessage}\n        onReset={onReset}\n        onSubmit={onSubmit}\n        scrollToFirstError=\"smooth\"\n      >\n        <FormItem label=\"用户名\" help=\"这是用户名字段帮助说明\" name=\"account\" initialData=\"\">\n          <Input />\n        </FormItem>\n        <FormItem label=\"个人简介\" help=\"一句话介绍自己\" name=\"description\" initialData=\"\">\n          <Input />\n        </FormItem>\n        <FormItem label=\"密码\" name=\"password\" initialData=\"\">\n          <Input type=\"password\" />\n        </FormItem>\n        <FormItem label=\"邮箱\" name=\"email\" initialData=\"\">\n          <Input />\n        </FormItem>\n        <FormItem label=\"性别\" name=\"gender\" initialData=\"\">\n          <Radio.Group>\n            <Radio value=\"male\">男</Radio>\n            <Radio value=\"femal\">女</Radio>\n          </Radio.Group>\n        </FormItem>\n        <FormItem label=\"课程\" name=\"course\" initialData={[]}>\n          <Checkbox.Group options={courseOptions}></Checkbox.Group>\n        </FormItem>\n        <FormItem label=\"学院\" name=\"college\" initialData=\"\">\n          <Select clearable>\n            {options.map((item, index) => (\n              <Select.Option value={item.value} label={item.label} key={index}>\n                {item.label}\n              </Select.Option>\n            ))}\n          </Select>\n        </FormItem>\n        <FormItem\n          label=\"入学时间\"\n          name=\"date\"\n          rules={[\n            {\n              date: {\n                delimiters: ['/', '-', '.'],\n              },\n              message: '日期格式有误',\n            },\n          ]}\n          initialData=\"\"\n        >\n          <Input />\n        </FormItem>\n        <FormItem label=\"个人网站\" name=\"content.url\" initialData=\"\">\n          <Input />\n        </FormItem>\n        <FormItem\n          style={{\n            marginLeft: 100,\n          }}\n        >\n          <Button\n            theme=\"primary\"\n            type=\"submit\"\n            style={{\n              marginRight: 10,\n            }}\n          >\n            提交\n          </Button>\n          <Button\n            theme=\"default\"\n            variant=\"base\"\n            type=\"reset\"\n            style={{\n              marginRight: 10,\n            }}\n          >\n            重置\n          </Button>\n          <Button theme=\"default\" variant=\"base\" onClick={handleClear}>\n            清空校验结果\n          </Button>\n        </FormItem>\n      </Form>\n    </Space>\n  );\n}\n",
        "desc": "覆盖默认校验信息，也支持全局配置（ConfigProvider）各个规则的校验信息。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Form, Input, Checkbox, Button, MessagePlugin, Radio, Tabs } from 'tdesign-react';\n\nconst { FormItem } = Form;\nlet id = 0;\nfunction getId() {\n  id += 1;\n  return id;\n}\nconst INITIAL_DATA = {\n  school: 1,\n  students: [\n    {\n      id: getId(),\n      label: '学生1',\n      name: 'StudentA',\n      courseType: 'wenke',\n      course: ['1'],\n      status: true,\n    },\n    {\n      id: getId(),\n      label: '学生2',\n      name: 'StudentB',\n      courseType: 'wenke',\n      course: [],\n      status: true,\n    },\n  ],\n  courseType: undefined,\n};\nconst rules = {\n  school: [\n    {\n      required: true,\n      message: '学校必填',\n    },\n  ],\n  name: [\n    {\n      required: true,\n      message: '用户名必填',\n    },\n  ],\n  courseType: [\n    {\n      required: true,\n      message: '选科必填',\n    },\n  ],\n  course: [\n    {\n      required: true,\n      message: '课程必填',\n    },\n  ],\n};\nconst SCHOOL_OPTIONS = [\n  {\n    label: '学校一',\n    value: 1,\n  },\n  {\n    label: '学校二',\n    value: 2,\n  },\n  {\n    label: '学校三',\n    value: 3,\n  },\n];\nconst COURSE_OPTIONS = [\n  {\n    label: '全部',\n    checkAll: true,\n  },\n  {\n    label: '语文',\n    value: '1',\n    courseTypes: ['wenke', 'like'],\n  },\n  {\n    label: '数学',\n    value: '2',\n    courseTypes: ['wenke', 'like'],\n  },\n  {\n    label: '物理',\n    value: '3',\n    courseTypes: ['like'],\n  },\n  {\n    label: '化学',\n    value: '4',\n    courseTypes: ['like'],\n  },\n  {\n    label: '地理',\n    value: '5',\n    courseTypes: ['wenke'],\n  },\n  {\n    label: '历史',\n    value: '6',\n    courseTypes: ['wenke'],\n  },\n];\nexport default function BaseForm() {\n  const [studentTab, setStudentTab] = useState(1);\n  const [formData, setFormData] = useState(INITIAL_DATA);\n  const courseOptions = COURSE_OPTIONS.filter((item) => {\n    if (!formData.courseType || !item.courseTypes) return true;\n    return item.courseTypes.includes(formData.courseType);\n  });\n  const onSubmit = ({ validateResult, firstError }) => {\n    if (validateResult === true) {\n      MessagePlugin.success('提交成功');\n    } else {\n      console.log('Errors: ', validateResult);\n      MessagePlugin.warning(firstError);\n      // 判断错误在第几个 Tab，而后自动切换到第几个\n      for (let i = 0, len = formData.students.length; i < len; i++) {\n        const item = formData.students[i];\n        const keys = Object.keys(item).map((key) => `students[${i}].${key}`);\n        // 数组数据 key 在 validateResult 中存在，则表示校验不通过\n        const isInvalid = keys.find((key) => validateResult[key]);\n        if (isInvalid) {\n          setStudentTab(item.id);\n          return;\n        }\n      }\n    }\n  };\n  const onReset = () => {\n    MessagePlugin.info('重置成功');\n  };\n  const onAddStudent = () => {\n    const id = getId();\n    formData.students.push({\n      id,\n      label: `学生${id}`,\n      name: '',\n      courseType: 'wenke',\n      course: [],\n      status: false,\n    });\n    setFormData(formData);\n    setStudentTab(id);\n  };\n  return (\n    <Form rules={rules} resetType=\"initial\" onReset={onReset} onSubmit={onSubmit}>\n      <FormItem label=\"学校\" name=\"school\" initialData={formData.school}>\n        <Radio.Group options={SCHOOL_OPTIONS} />\n      </FormItem>\n      <Tabs\n        value={studentTab}\n        onChange={(v) => setStudentTab(v)}\n        theme=\"card\"\n        addable\n        onAdd={onAddStudent}\n        style={{\n          marginLeft: 30,\n          border: '1px solid var(--td-component-stroke)',\n        }}\n      >\n        {formData.students.map((student, index) => (\n          <Tabs.TabPanel key={student.id} value={student.id} label={student.label} destroyOnHide={false}>\n            <div\n              style={{\n                padding: '24px 24px 24px 0',\n              }}\n            >\n              <FormItem label=\"姓名\" name={`students[${index}].name`} label-width={80} initialData={student.name}>\n                <Input placeholder=\"请输入内容\" />\n              </FormItem>\n\n              <FormItem label=\"选科\" name={`students[${index}].name`} label-width={80} initialData={student.courseType}>\n                <Radio.Group>\n                  <Radio value=\"wenke\">文科</Radio>\n                  <Radio value=\"like\">理科</Radio>\n                </Radio.Group>\n              </FormItem>\n\n              <FormItem label=\"课程\" name={`students[${index}].name`} label-width={80} initialData={student.course}>\n                <Checkbox.Group>\n                  {courseOptions.map(({ value, label }, index) => (\n                    <Checkbox key={index} value={value} label={label} />\n                  ))}\n                </Checkbox.Group>\n              </FormItem>\n\n              <FormItem\n                style={{\n                  marginLeft: 100,\n                }}\n              >\n                <Button\n                  theme=\"primary\"\n                  type=\"submit\"\n                  style={{\n                    marginRight: 10,\n                  }}\n                >\n                  提交\n                </Button>\n                <Button theme=\"default\" variant=\"base\" type=\"reset\">\n                  重置\n                </Button>\n              </FormItem>\n            </div>\n          </Tabs.TabPanel>\n        ))}\n      </Tabs>\n    </Form>\n  );\n}\n",
        "desc": "很多时候，表单数据的类型往往不仅仅是单纯的对象，还包含着数组、对象数组嵌套等。表单支持这些复杂数据类型的校验。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport {\n  Form,\n  Input,\n  InputNumber,\n  Checkbox,\n  Button,\n  MessagePlugin,\n  Radio,\n  DatePicker,\n  Switch,\n  TreeSelect,\n  Select,\n  Upload,\n  Cascader,\n  Textarea,\n  Space,\n} from 'tdesign-react';\n\nconst { FormItem } = Form;\nconst INITIAL_DATA = {\n  name: '',\n  message: true,\n  gender: '',\n  course: [],\n  college: '',\n  personalProfile: '',\n  address1: 1,\n  address2: 2,\n  gradePoint: 0,\n  date: '',\n  avatar: [\n    {\n      url: 'https://tdesign.gtimg.com/site/avatar.jpg',\n      name: 'avatar.jpg',\n      status: 'success',\n    },\n  ],\n};\nconst COLLEGE_OPTIONS = [\n  {\n    label: '学院 A',\n    value: 1,\n  },\n  {\n    label: '学院 B',\n    value: 2,\n  },\n  {\n    label: '学院 C',\n    value: 3,\n  },\n];\nconst ADDRESS_OPTIONS = [\n  {\n    label: '江苏',\n    value: 1,\n    children: [\n      {\n        label: '南京市',\n        value: 300,\n      },\n    ],\n  },\n  {\n    label: '上海',\n    value: 2,\n    children: [\n      {\n        label: '徐汇区',\n        value: 400,\n      },\n    ],\n  },\n  {\n    label: '四川',\n    value: 3,\n    children: [\n      {\n        label: '成都市',\n        value: 500,\n      },\n    ],\n  },\n];\nexport default function BaseForm() {\n  const [formDisabled, setFormDisabled] = useState(true);\n  const onSubmit = ({ validateResult, firstError }) => {\n    if (validateResult === true) {\n      MessagePlugin.success('提交成功');\n    } else {\n      console.log('Errors: ', validateResult);\n      MessagePlugin.warning(firstError);\n    }\n  };\n  const onReset = (e) => {\n    console.log(e);\n    MessagePlugin.info('重置成功');\n  };\n  const courseOptions = [\n    {\n      label: '语文',\n      value: '1',\n    },\n    {\n      label: '数学',\n      value: '2',\n    },\n    {\n      label: '英语',\n      value: '3',\n    },\n  ];\n  return (\n    <Space direction=\"vertical\">\n      <div\n        style={{\n          marginLeft: 36,\n        }}\n      >\n        <Radio.Group value={formDisabled} onChange={(value) => setFormDisabled(value)} variant=\"default-filled\">\n          <Radio.Button value={false}>启用</Radio.Button>\n          <Radio.Button value={true}>禁用</Radio.Button>\n        </Radio.Group>\n      </div>\n\n      <Form resetType=\"initial\" disabled={formDisabled} colon onReset={onReset} onSubmit={onSubmit}>\n        <FormItem label=\"姓名\" name=\"name\" initialData={INITIAL_DATA.name}>\n          <Input />\n        </FormItem>\n        <FormItem label=\"学院\" name=\"college\" initialData={INITIAL_DATA.college}>\n          <Select options={COLLEGE_OPTIONS} clearable></Select>\n        </FormItem>\n        <FormItem label=\"寄件地址\" name=\"address1\" initialData={INITIAL_DATA.address1}>\n          <TreeSelect data={ADDRESS_OPTIONS} clearable />\n        </FormItem>\n        <FormItem label=\"收件地址\" name=\"address2\" initialData={INITIAL_DATA.address2}>\n          <Cascader options={ADDRESS_OPTIONS} clearable />\n        </FormItem>\n        <FormItem label=\"日期\" name=\"date\" initialData={INITIAL_DATA.date}>\n          <DatePicker mode=\"date\" clearable />\n        </FormItem>\n        <FormItem label=\"个人简介\" name=\"personalProfile\" initialData={INITIAL_DATA.personalProfile}>\n          <Textarea placeholder=\"简单描述自己的经历\" />\n        </FormItem>\n        <FormItem label=\"短信\" name=\"message\" initialData={INITIAL_DATA.message}>\n          <Switch label={['接受', '不接']}></Switch>\n        </FormItem>\n        <FormItem label=\"性别\" name=\"gender\" initialData={INITIAL_DATA.gender}>\n          <Radio.Group>\n            <Radio value=\"1\">男</Radio>\n            <Radio value=\"2\">女</Radio>\n          </Radio.Group>\n        </FormItem>\n        <FormItem label=\"课程\" name=\"course\" initialData={INITIAL_DATA.course}>\n          <Checkbox.Group options={courseOptions} />\n        </FormItem>\n        <FormItem label=\"绩点\" name=\"gradePoint\" initialData={INITIAL_DATA.gradePoint}>\n          <InputNumber theme=\"normal\" placeholder=\"数字\" />\n        </FormItem>\n        <FormItem label=\"头像\" name=\"avatar\" initialData={INITIAL_DATA.avatar}>\n          <Upload\n            action=\"https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n            theme=\"image\"\n            tips=\"请选择单张图片文件上传\"\n            accept=\"image/*\"\n          ></Upload>\n        </FormItem>\n        <FormItem\n          style={{\n            marginLeft: 100,\n          }}\n        >\n          <Button\n            theme=\"primary\"\n            type=\"submit\"\n            style={{\n              marginRight: 10,\n            }}\n          >\n            提交\n          </Button>\n          <Button theme=\"default\" variant=\"base\" type=\"reset\">\n            重置\n          </Button>\n        </FormItem>\n      </Form>\n    </Space>\n  );\n}\n",
        "desc": "可以使用  属性禁用整个表单项。对于自定义组件，可以使用  设置为允许 Form 代理禁用状态。"
      },
      {
        "code": "import React, { useEffect } from 'react';\nimport { Form, Input, Button, MessagePlugin } from 'tdesign-react';\n\nconst { FormItem } = Form;\nconst validateMessage = {\n  account: [\n    {\n      type: 'error',\n      message: '自定义用户名校验信息提示',\n    },\n  ],\n  description: [\n    {\n      type: 'warning',\n      message: '自定义个人简介校验信息提示',\n    },\n  ],\n};\nconst rules = {\n  account: [\n    {\n      required: true,\n    },\n    {\n      min: 2,\n    },\n    {\n      max: 10,\n      type: 'warning',\n    },\n  ],\n  description: [\n    {\n      validator: (val) => val.length < 10,\n      message: '不能超过 20 个字，中文长度等于英文长度',\n    },\n  ],\n  password: [\n    {\n      required: true,\n    },\n    {\n      len: 8,\n      message: '请输入 8 位密码',\n    },\n  ],\n};\nexport default function BaseForm() {\n  const [form] = Form.useForm();\n  const onSubmit = ({ validateResult, firstError }) => {\n    if (validateResult === true) {\n      MessagePlugin.success('提交成功');\n    } else {\n      console.log('Errors: ', validateResult);\n      MessagePlugin.warning(firstError);\n    }\n  };\n  const onReset = () => {\n    MessagePlugin.info('重置成功');\n  };\n  const handleValidateMessage = () => {\n    MessagePlugin.success('设置表单校验信息提示成功');\n    form.setValidateMessage(validateMessage);\n  };\n  const handleValidateOnly = () => {\n    form.validateOnly().then((result) => {\n      console.log('validateOnly: ', result);\n    });\n  };\n  useEffect(() => {\n    form.setValidateMessage(validateMessage);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <Form rules={rules} form={form} onReset={onReset} onSubmit={onSubmit} scrollToFirstError=\"smooth\">\n      <FormItem label=\"用户名\" help=\"这是用户名字段帮助说明\" name=\"account\" initialData=\"\">\n        <Input />\n      </FormItem>\n      <FormItem label=\"个人简介\" help=\"一句话介绍自己\" name=\"description\" initialData=\"\">\n        <Input />\n      </FormItem>\n      <FormItem label=\"密码\" name=\"password\" initialData=\"\">\n        <Input type=\"password\" />\n      </FormItem>\n      <FormItem\n        style={{\n          marginLeft: 100,\n        }}\n      >\n        <Button\n          theme=\"primary\"\n          type=\"submit\"\n          style={{\n            marginRight: 10,\n          }}\n        >\n          提交\n        </Button>\n        <Button\n          theme=\"default\"\n          variant=\"base\"\n          type=\"reset\"\n          style={{\n            marginRight: 10,\n          }}\n        >\n          重置\n        </Button>\n        <Button\n          theme=\"default\"\n          variant=\"base\"\n          style={{\n            marginRight: 10,\n          }}\n          onClick={handleValidateOnly}\n        >\n          仅校验不展示验证信息\n        </Button>\n        <Button theme=\"default\" variant=\"base\" onClick={handleValidateMessage}>\n          设置校验信息提示\n        </Button>\n      </FormItem>\n    </Form>\n  );\n}\n",
        "desc": "使用  属性可以自定义表单校验信息提示，主要用于非组件内部的校验信息呈现，如：表单初次呈现的远程校验结果。如果要启动组件内部的校验功能，该值必须设置为空。"
      },
      {
        "code": "import React from 'react';\nimport { Form, Input, Radio, Checkbox, Button, MessagePlugin, DatePicker } from 'tdesign-react';\nimport { MinusCircleIcon } from 'tdesign-icons-react';\n\nconst { FormItem, FormList } = Form;\nexport default function BaseForm() {\n  const [form] = Form.useForm();\n  const user = Form.useWatch('user', form);\n  console.log('user', user);\n  const onSubmit = (e) => {\n    console.log(e);\n    if (e.validateResult === true) {\n      MessagePlugin.info('提交成功');\n    }\n  };\n  const setData = () => {\n    console.log('getFieldsValue all: ', form.getFieldsValue?.(true));\n    console.log('getFieldsValue: ', form.getFieldsValue?.([['user', 'name']]));\n    console.log('getFieldValue: ', form.getFieldValue?.(['user', 'name']));\n    form.setFieldsValue?.({\n      birthday: '2020-01-01',\n    });\n    form.setFieldsValue?.({\n      user: {\n        gender: 'male',\n      },\n    });\n    form.setFields?.([\n      {\n        name: ['user', 'course'],\n        value: ['la'],\n      },\n    ]);\n  };\n  const onReset = (e) => {\n    console.log(e);\n    MessagePlugin.info('重置成功');\n  };\n  const onValuesChange = (value) => {\n    console.log(value);\n  };\n  return (\n    <Form\n      initialData={{\n        user: {\n          name: 'name',\n          age: 'age',\n        },\n        birthday: '2022-08-08',\n      }}\n      form={form}\n      onSubmit={onSubmit}\n      onReset={onReset}\n      colon\n      labelWidth={100}\n      onValuesChange={onValuesChange}\n    >\n      <FormItem\n        label=\"姓名\"\n        name={['user', 'name']}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input />\n      </FormItem>\n      <FormItem label=\"年龄\" name={['user', 'age']}>\n        <Input />\n      </FormItem>\n      <FormItem label=\"性别\" name={['user', 'gender']}>\n        <Radio.Group>\n          <Radio value=\"male\">男性</Radio>\n          <Radio value=\"female\">女性</Radio>\n        </Radio.Group>\n      </FormItem>\n      <FormItem label=\"课程\" name={['user', 'course']}>\n        <Checkbox.Group>\n          <Checkbox value=\"la\">加辣</Checkbox>\n          <Checkbox value=\"ma\">加麻</Checkbox>\n          <Checkbox value=\"nocong\">不要葱花</Checkbox>\n        </Checkbox.Group>\n      </FormItem>\n      <FormItem label=\"出生日期\" name=\"birthday\">\n        <DatePicker />\n      </FormItem>\n      <FormList name={['user', 'address']}>\n        {(fields, { add, remove }) => (\n          <>\n            {fields.map(({ key, name, ...restField }) => (\n              <FormItem key={key}>\n                <FormItem\n                  {...restField}\n                  name={[name, 'province']}\n                  label=\"省份\"\n                  rules={[\n                    {\n                      required: true,\n                      type: 'error',\n                    },\n                  ]}\n                >\n                  <Input />\n                </FormItem>\n                <FormItem\n                  {...restField}\n                  name={[name, 'area']}\n                  label=\"地区\"\n                  rules={[\n                    {\n                      required: true,\n                      type: 'error',\n                    },\n                  ]}\n                >\n                  <Input />\n                </FormItem>\n                <FormItem>\n                  <MinusCircleIcon\n                    size=\"20px\"\n                    style={{\n                      cursor: 'pointer',\n                    }}\n                    onClick={() => remove(name)}\n                  />\n                </FormItem>\n              </FormItem>\n            ))}\n            <FormItem\n              style={{\n                marginLeft: 100,\n              }}\n            >\n              <Button\n                theme=\"default\"\n                variant=\"dashed\"\n                onClick={() =>\n                  add({\n                    province: 'bj',\n                    area: 'tzmax',\n                  })\n                }\n              >\n                Add field\n              </Button>\n            </FormItem>\n          </>\n        )}\n      </FormList>\n      <FormItem\n        style={{\n          marginLeft: 100,\n        }}\n      >\n        <Button type=\"submit\" theme=\"primary\">\n          提交\n        </Button>\n        <Button\n          theme=\"primary\"\n          onClick={setData}\n          style={{\n            marginLeft: 12,\n          }}\n        >\n          设置信息\n        </Button>\n        <Button\n          type=\"reset\"\n          style={{\n            marginLeft: 12,\n          }}\n        >\n          重置\n        </Button>\n      </FormItem>\n    </Form>\n  );\n}\n",
        "desc": "可给  传入数组整理成对象嵌套数据结构。"
      },
      {
        "code": "import React from 'react';\nimport { Form, Input, Button, Select } from 'tdesign-react';\nimport { MinusCircleIcon } from 'tdesign-icons-react';\n\nconst { FormItem, FormList } = Form;\nconst provinceOptions = [\n  {\n    label: '北京',\n    value: 'bj',\n  },\n  {\n    label: '上海',\n    value: 'sh',\n  },\n  {\n    label: '广州',\n    value: 'gz',\n  },\n  {\n    label: '深圳',\n    value: 'sz',\n  },\n];\nexport default function BaseForm() {\n  const [form] = Form.useForm();\n  function onSubmit() {\n    const allFields = form.getFieldsValue(true);\n    console.log('allFields', allFields);\n  }\n  return (\n    <Form form={form} onSubmit={onSubmit}>\n      <FormList name=\"address\">\n        {(fields, { add, remove }) => (\n          <>\n            {fields.map(({ key, name, ...restField }) => (\n              <FormItem key={key}>\n                <FormItem\n                  {...restField}\n                  name={[name, 'province']}\n                  label=\"省份\"\n                  rules={[\n                    {\n                      required: true,\n                      type: 'error',\n                    },\n                  ]}\n                >\n                  <Select options={provinceOptions}></Select>\n                </FormItem>\n                <FormItem\n                  {...restField}\n                  name={[name, 'area']}\n                  label=\"地区\"\n                  rules={[\n                    {\n                      required: true,\n                      type: 'error',\n                    },\n                  ]}\n                >\n                  <Input />\n                </FormItem>\n\n                <FormItem>\n                  <MinusCircleIcon\n                    size=\"20px\"\n                    style={{\n                      cursor: 'pointer',\n                    }}\n                    onClick={() => remove(name)}\n                  />\n                </FormItem>\n              </FormItem>\n            ))}\n            <FormItem\n              style={{\n                marginLeft: 100,\n              }}\n            >\n              <Button\n                theme=\"default\"\n                variant=\"dashed\"\n                onClick={() =>\n                  add({\n                    province: 'bj',\n                    area: 'tzmax',\n                  })\n                }\n              >\n                Add field\n              </Button>\n            </FormItem>\n          </>\n        )}\n      </FormList>\n      <FormItem\n        style={{\n          marginLeft: 100,\n        }}\n      >\n        <Button type=\"submit\" theme=\"primary\">\n          提交\n        </Button>\n        <Button\n          type=\"reset\"\n          style={{\n            marginLeft: 12,\n          }}\n        >\n          重置\n        </Button>\n      </FormItem>\n    </Form>\n  );\n}\n",
        "desc": "可使用  组件创建动态表单。"
      },
      {
        "code": "import React from 'react';\nimport { Form, Radio, Button } from 'tdesign-react';\n\nconst { FormItem } = Form;\nexport default function FormExample() {\n  const [form] = Form.useForm();\n  const setMessage = () => {\n    form.setFieldsValue({\n      type: 'cold',\n      ice: '1',\n    });\n  };\n  return (\n    <Form form={form} colon labelWidth={100}>\n      <FormItem label=\"类型\" name=\"type\" initialData=\"hot\">\n        <Radio.Group>\n          <Radio value=\"hot\">热饮</Radio>\n          <Radio value=\"cold\">冷饮</Radio>\n        </Radio.Group>\n      </FormItem>\n      <FormItem shouldUpdate={(prev, next) => prev.type !== next.type}>\n        {({ getFieldValue }) => {\n          if (getFieldValue('type') === 'cold') {\n            return (\n              <FormItem label=\"冰量\" key=\"ice\" name=\"ice\">\n                <Radio.Group>\n                  <Radio value=\"0\">正常冰</Radio>\n                  <Radio value=\"1\">少冰</Radio>\n                  <Radio value=\"2\">去冰</Radio>\n                </Radio.Group>\n              </FormItem>\n            );\n          }\n          return null;\n        }}\n      </FormItem>\n\n      <FormItem\n        style={{\n          marginLeft: 100,\n        }}\n      >\n        <Button onClick={setMessage}>选择冷饮-少冰</Button>\n      </FormItem>\n    </Form>\n  );\n}\n",
        "desc": "在某些特定场景，例如修改某个字段值后出现新的字段选项、或者纯粹希望表单任意变化都对某一个区域进行渲染。你可以通过  修改  的更新逻辑。"
      },
      {
        "code": "import React from 'react';\nimport { Form, Input, Button, MessagePlugin, Space, Select } from 'tdesign-react';\n\nconst { FormItem } = Form;\nfunction CourseSelect(props) {\n  const { value, onChange } = props;\n  return (\n    <Space>\n      <Select\n        options={[\n          {\n            label: '数学',\n            value: 'math',\n          },\n          {\n            label: '英语',\n            value: 'english',\n          },\n        ]}\n        value={value?.type}\n        onChange={(v) => {\n          onChange?.({\n            ...value,\n            type: v,\n          });\n        }}\n        placeholder=\"请选择课程类型\"\n      />\n      <Input\n        value={value?.name}\n        onChange={(v) => {\n          onChange?.({\n            ...value,\n            name: v,\n          });\n        }}\n        placeholder=\"请输入课程名称\"\n      />\n    </Space>\n  );\n}\nexport default function BaseForm() {\n  const [form] = Form.useForm();\n  const onSubmit = (e) => {\n    console.log(e);\n    if (e.validateResult === true) {\n      MessagePlugin.info('提交成功');\n    }\n  };\n  return (\n    <Form form={form} onSubmit={onSubmit} colon labelWidth={100}>\n      <FormItem label=\"课程\" name=\"course\">\n        <CourseSelect />\n      </FormItem>\n      <FormItem\n        style={{\n          marginLeft: 100,\n        }}\n      >\n        <Button type=\"submit\" theme=\"primary\">\n          提交\n        </Button>\n      </FormItem>\n    </Form>\n  );\n}\n",
        "desc": "可以使用  包裹自定义组件并在组件中接受  和  的入参，实现自定义表单控件。"
      }
    ]
  },
  {
    "name": "<Input/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { Input, Space } from 'tdesign-react';\n\nexport default function InputExample() {\n  const [value, onChange] = useState('Welcome to TDesign');\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: 500,\n      }}\n    >\n      <Input\n        placeholder=\"请输入内容（无默认值）\"\n        onChange={(value) => {\n          console.log(value);\n        }}\n      />\n      <Input\n        placeholder=\"请输入内容（有默认值）\"\n        value={value}\n        onChange={(value) => {\n          onChange(value);\n        }}\n        onEnter={(value) => {\n          console.log(value);\n        }}\n      />\n    </Space>\n  );\n}\n",
        "desc": "最基础的单行输入框，按状态可分为正常、禁用、错误、带额外提示。通常在需要输入少量内容（20 个字以内）的场景下使用。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Input, InputAdornment, Space } from 'tdesign-react';\n\nexport default function InputExample() {\n  const [value, onChange] = useState('');\n  return (\n    <Space direction=\"vertical\">\n      <InputAdornment prepend=\"http://\">\n        <Input\n          placeholder=\"请输入域名\"\n          value={value}\n          onChange={(value) => {\n            onChange(value);\n          }}\n        />\n      </InputAdornment>\n      <InputAdornment prepend=\"http://\" append=\".com\">\n        <Input\n          placeholder=\"请输入域名\"\n          value={value}\n          onChange={(value) => {\n            onChange(value);\n          }}\n        />\n      </InputAdornment>\n    </Space>\n  );\n}\n",
        "desc": "在输入框前后加入一些特定的纯展示标签，通常在需要提高辨识效率时使用。"
      },
      {
        "code": "import React from 'react';\nimport { Input, Space } from 'tdesign-react';\n\nexport default function InputExample() {\n  return (\n    <Space direction=\"vertical\">\n      <Input.Group separate>\n        <Input\n          defaultValue=\"0731\"\n          style={{\n            width: 100,\n          }}\n        />\n        <Input defaultValue=\"12345677\" />\n      </Input.Group>\n      <Input.Group separate>\n        <Input />\n        <Input />\n      </Input.Group>\n      <Input.Group separate>\n        <Input\n          style={{\n            width: 100,\n          }}\n          defaultValue=\"0731\"\n        />\n        <span\n          style={{\n            lineHeight: '32px',\n          }}\n        >\n          &nbsp;-&nbsp;\n        </span>\n        <Input\n          style={{\n            width: 100,\n          }}\n          defaultValue=\"12345\"\n        />\n        <Input\n          style={{\n            width: 100,\n          }}\n          defaultValue=\"678901\"\n        />\n        <Input\n          style={{\n            width: 100,\n          }}\n        />\n      </Input.Group>\n    </Space>\n  );\n}\n",
        "desc": "多个输入框相组合，或与其他控件（如下拉）相组合，以方便识别。用于一些固定组合或者固定格式输入的场景，如输入电话号码。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Input } from 'tdesign-react';\n\nexport default function InputExample() {\n  const [value, onChange] = useState('Hello TDesign');\n  return (\n    <Input\n      placeholder=\"请输入内容\"\n      value={value}\n      clearable\n      onChange={(value) => {\n        onChange(value);\n      }}\n      onClear={() => {\n        console.log('onClear');\n      }}\n    />\n  );\n}\n",
        "desc": "带清空操作的输入框，可快捷清空输入过的内容。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Input, Space } from 'tdesign-react';\nimport { LockOnIcon } from 'tdesign-icons-react';\n\nexport default function InputExample() {\n  const [value, onChange] = useState('');\n  return (\n    <Space direction=\"vertical\">\n      <Input\n        prefixIcon={<LockOnIcon />}\n        placeholder=\"请输入\"\n        value={value}\n        type=\"password\"\n        onChange={(value) => {\n          onChange(value);\n        }}\n      />\n      <Input\n        prefixIcon={<LockOnIcon />}\n        placeholder=\"请输入\"\n        value={value}\n        type=\"password\"\n        onChange={(value) => {\n          onChange(value);\n        }}\n      />\n    </Space>\n  );\n}\n",
        "desc": "由符号代替输入内容的输入框，并可通过操作展示原文信息。用于强安全信息输入的场景。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Input, Space } from 'tdesign-react';\n\nexport default function InputExample() {\n  const [value, onChange] = useState('');\n  return (\n    <Space size={50}>\n      <Space direction=\"vertical\" size={28}>\n        <Input placeholder=\"禁用状态\" disabled value={value} onChange={onChange} />\n        <Input placeholder=\"只读状态\" readonly value={value} onChange={onChange} />\n      </Space>\n      <Space direction=\"vertical\" size={28}>\n        <Input placeholder=\"成功状态\" value={value} onChange={onChange} status=\"success\" />\n        <Input placeholder=\"警告状态\" value={value} onChange={onChange} status=\"warning\" />\n        <Input placeholder=\"错误状态\" value={value} onChange={onChange} status=\"error\" />\n      </Space>\n      <Space direction=\"vertical\" size={28}>\n        <Input placeholder=\"普通状态\" tips=\"这是普通文本提示\" value={value} onChange={onChange} />\n        <Input placeholder=\"成功状态\" tips=\"校验通过文本提示\" value={value} onChange={onChange} status=\"success\" />\n        <Input placeholder=\"警告状态\" tips=\"校验不通过文本提示\" value={value} onChange={onChange} status=\"warning\" />\n        <Input\n          placeholder=\"错误状态\"\n          tips=\"校验存在严重问题文本提示\"\n          value={value}\n          onChange={onChange}\n          status=\"error\"\n        />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "输入框状态可分为：正常、禁用、异常（带提示）、带额外内容提示、带状态图标提示。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Input, Space } from 'tdesign-react';\n\nexport default function InputExample() {\n  const [value, onChange] = useState(null);\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: 500,\n      }}\n    >\n      <Input\n        placeholder=\"请输入内容\"\n        value={value}\n        onChange={(value) => {\n          onChange(value);\n        }}\n        size=\"small\"\n      />\n      <Input\n        placeholder=\"请输入内容\"\n        value={value}\n        onChange={(value) => {\n          onChange(value);\n        }}\n      />\n      <Input\n        placeholder=\"请输入内容\"\n        value={value}\n        onChange={(value) => {\n          onChange(value);\n        }}\n        size=\"large\"\n      />\n    </Space>\n  );\n}\n",
        "desc": "有大中小三种不同高度、宽度的输入框，以适应不同尺寸布局。设置  实现不同的尺寸。"
      },
      {
        "code": "import React from 'react';\nimport { Input, Space } from 'tdesign-react';\n\nexport default function InputExample() {\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Input defaultValue=\"居左对齐\" align=\"left\" />\n      <Input defaultValue=\"居中对齐\" align=\"center\" />\n      <Input defaultValue=\"居右对齐\" align=\"right\" />\n    </Space>\n  );\n}\n",
        "desc": "输入框共有三种对齐方式：左对齐、局中对齐和右对齐。设置  实现不同的对齐方式。"
      },
      {
        "code": "import React from 'react';\nimport { Input } from 'tdesign-react';\n\nexport default function InputAutoWidth() {\n  return (\n    <div\n      style={{\n        maxWidth: '500px',\n      }}\n    >\n      <Input autoWidth defaultValue=\"宽度自适应\" />\n    </div>\n  );\n}\n",
        "desc": "输入框支持宽度随输入内容变化而变化，设置属性  即可。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Input, Space } from 'tdesign-react';\n\nexport default function InputExample() {\n  const [value1, setValue1] = useState('');\n  const [value2, setValue2] = useState('');\n  const [value3, setValue3] = useState('');\n  const [value4, setValue4] = useState('');\n  const [tips, setTips] = useState('');\n  return (\n    <Space\n      direction=\"vertical\"\n      size={24}\n      style={{\n        width: '500px',\n      }}\n    >\n      <Input\n        value={value1}\n        onChange={setValue1}\n        maxlength={10}\n        showLimitNumber\n        placeholder=\"内置字数限制，最大文本长度为10\"\n      />\n\n      <Input\n        value={value2}\n        onChange={setValue2}\n        maxcharacter={10}\n        showLimitNumber\n        placeholder=\"内置字数限制，最大字符数量限制，一个中文字等于两个字符\"\n      />\n\n      <Input\n        value={value3}\n        onChange={setValue3}\n        maxlength={5}\n        allowInputOverMax\n        showLimitNumber\n        placeholder=\"内置字数限制，字数超出时允许继续输入\"\n        tips={tips}\n        status={tips ? 'error' : 'default'}\n        onValidate={({ error }) => {\n          console.log(error);\n          setTips(error ? '输入内容长度不允许超过 5 个字' : '');\n        }}\n      />\n\n      <Input\n        value={value4}\n        onChange={setValue4}\n        maxlength={5}\n        suffix={`${[...value4].length}/5`}\n        placeholder=\"自定义字数限制文本\"\n      />\n    </Space>\n  );\n}\n",
        "desc": "使用  设置输入框的长度限度，一个中文等于一个计数长度。使用  设置输入框的长度限度，一个中文汉字表示两个字符长度。使用  设置是否允许在输入内容已经超出限制时继续输入。使用  设置是否显示输入框右侧的字数统计。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Input } from 'tdesign-react';\n\nexport default function InputExample() {\n  const [value, setValue] = useState('');\n  function format(val) {\n    const reg = /(\\d)(?=(?:\\d{3})+$)/g;\n    const str = val.replace(reg, '$1,');\n    return str;\n  }\n  const inputStatus = isNaN(+value) ? 'error' : 'default';\n  const tips = inputStatus ? '请输入数字' : '';\n  return (\n    <Input\n      value={value}\n      onChange={setValue}\n      status={inputStatus}\n      format={format}\n      tips={tips}\n      placeholder=\"请输入数字\"\n    />\n  );\n}\n",
        "desc": "可以使用  设置输入框在失焦和聚焦时的不同内容呈现。"
      },
      {
        "code": "import React from 'react';\nimport { Input, Space } from 'tdesign-react';\n\nexport default function BorderlessInputExample() {\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: 500,\n      }}\n    >\n      <Input placeholder=\"please input\" clearable />\n      <Input placeholder=\"borderless input\" borderless={true} clearable />\n    </Space>\n  );\n}\n",
        "desc": "可以使用  来开启无边框模式。"
      }
    ]
  },
  {
    "name": "<InputAdornment/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Input, TagInput, InputAdornment, Space } from 'tdesign-react';\n\nexport default function BaseExample() {\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <InputAdornment prepend=\"http://\">\n        <Input />\n      </InputAdornment>\n\n      <InputAdornment append=\".com\">\n        <TagInput />\n      </InputAdornment>\n\n      <InputAdornment prepend=\"http://\" append=\".com\">\n        <Input />\n      </InputAdornment>\n    </Space>\n  );\n}\n",
        "desc": "在输入框前后加入一些特定的纯展示标签，通常在需要提高辨识效率时使用。"
      },
      {
        "code": "import React from 'react';\nimport { Select, Input, InputAdornment, Space } from 'tdesign-react';\n\nexport default function BaseExample() {\n  const protocolSelect = (\n    <Select\n      autoWidth\n      options={['http://', 'https://'].map((value) => ({\n        label: value,\n        value,\n      }))}\n      defaultValue=\"http://\"\n    />\n  );\n  const tldSelect = (\n    <Select\n      autoWidth\n      options={['.com', '.cn', '.net', '.org'].map((value) => ({\n        label: value,\n        value,\n      }))}\n      defaultValue=\".cn\"\n    />\n  );\n  return (\n    <Space direction=\"vertical\" className=\"adornment-select\">\n      <InputAdornment prepend={protocolSelect}>\n        <Input />\n      </InputAdornment>\n\n      <InputAdornment append={tldSelect}>\n        <Input />\n      </InputAdornment>\n\n      <InputAdornment prepend={protocolSelect} append={tldSelect}>\n        <Select\n          options={['tencent', 'qq', 'cloud.tencent'].map((value) => ({\n            label: value,\n            value,\n          }))}\n          defaultValue=\"tencent\"\n        />\n      </InputAdornment>\n    </Space>\n  );\n}\n",
        "desc": "装饰内容可以是下拉菜单。"
      }
    ]
  },
  {
    "name": "<InputNumber/>",
    "demoCode": [
      {
        "code": "import React, { useState, useMemo } from 'react';\nimport { InputNumber, Space } from 'tdesign-react';\n\nexport default function InputNumberExample() {\n  const [value1, setValue1] = useState('');\n  const [value2, setValue2] = useState(100);\n  const [decimalValue, setDecimalValue] = useState(3.41);\n  const [error, setError] = useState();\n  const tips = useMemo(() => {\n    if (error === 'exceed-maximum') return 'number can not be exceed maximum';\n    if (error === 'below-minimum') return 'number can not be below minimum';\n    return undefined;\n  }, [error]);\n  const handleChange = (v, ctx) => {\n    console.info('change', v, ctx);\n    setValue2(v);\n  };\n  const onValidate = ({ error }) => {\n    setError(error);\n  };\n  const handleFocus = (v, ctx) => {\n    console.info('focus', v, ctx);\n  };\n  const handleBlur = (v, ctx) => {\n    console.info('blur', v, ctx);\n  };\n  const handleKeydown = (v, ctx) => {\n    console.info('keydown', v, ctx);\n  };\n  const handleKeyup = (v, ctx) => {\n    console.info('keyup', v, ctx);\n  };\n  const handleKeypress = (v, ctx) => {\n    console.info('keypress', v, ctx);\n  };\n  const handleEnter = (v, ctx) => {\n    console.info('enter', v, ctx);\n  };\n\n  // inputProps={{ tips }} 和 tips={tips} 均可\n  return (\n    <Space direction=\"vertical\">\n      <InputNumber\n        value={decimalValue}\n        onChange={setDecimalValue}\n        // decimalPlaces={0}\n        max={5}\n        autoWidth\n      />\n\n      <InputNumber\n        value={value1}\n        onChange={setValue1}\n        step={0.18}\n        max={5}\n        allowInputOverLimit={false}\n        style={{\n          width: 250,\n        }}\n      />\n\n      <InputNumber\n        value={value2}\n        max={15}\n        min={-2}\n        inputProps={{\n          tips,\n        }}\n        suffix=\"个\"\n        style={{\n          width: 300,\n        }}\n        onChange={handleChange}\n        onValidate={onValidate}\n        onBlur={handleBlur}\n        onFocus={handleFocus}\n        onEnter={handleEnter}\n        onKeydown={handleKeydown}\n        onKeyup={handleKeyup}\n        onKeypress={handleKeypress}\n      />\n    </Space>\n  );\n}\n",
        "desc": "已输入的值居中展示，用户可直接在输入框内修改数值，还可以使用输入框左右的箭头按钮增大或减小数值。"
      },
      {
        "code": "import React from 'react';\nimport { InputNumber } from 'tdesign-react';\n\nexport default function InputNumberExample() {\n  return <InputNumber defaultValue={5} theme=\"column\" onChange={(v) => console.log(v)} />;\n}\n",
        "desc": "已输入的值居左展示，用户可直接在输入框内修改数值，还可以使用输入框右侧的箭头按钮增大或减小数值。"
      },
      {
        "code": "import React from 'react';\nimport { InputNumber, Space } from 'tdesign-react';\n\nexport default function InputNumberExample() {\n  return (\n    <Space direction=\"vertical\">\n      <InputNumber defaultValue={10} onChange={console.log} theme=\"normal\" max={15} min={-2} />\n      <InputNumber theme=\"normal\" align=\"right\" label=\"机器：\" suffix=\"台\" />\n      <InputNumber\n        theme=\"normal\"\n        align=\"right\"\n        defaultValue={10}\n        onChange={console.log}\n        label={<span>金额：</span>}\n        suffix={<span>元</span>}\n      />\n    </Space>\n  );\n}\n",
        "desc": "仅有输入框，不能用按钮进行数值调整的数字输入框。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { InputNumber } from 'tdesign-react';\n\nexport default function InputNumberExample() {\n  const [value, setValue] = useState(3.2);\n  return <InputNumber max={15} min={-5} step={1.2} decimalPlaces={2} value={value} onChange={setValue} />;\n}\n",
        "desc": "可以通过  来设置小数保留精度，通过  来设置步进。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { InputNumber, Space } from 'tdesign-react';\n\nexport default function InputNumberExample() {\n  const [value, setValue] = useState(0);\n  const [value1, setValue1] = useState(0);\n  return (\n    <Space direction=\"vertical\">\n      <InputNumber\n        max={15}\n        min={-12}\n        step={1.2}\n        format={(value) => `${value} %`}\n        value={value}\n        onChange={setValue}\n        style={{\n          width: 250,\n        }}\n      />\n      <InputNumber\n        decimalPlaces={2}\n        format={(_, { fixedNumber }) => `${fixedNumber} %`}\n        value={value1}\n        onChange={setValue1}\n        style={{\n          width: 250,\n        }}\n      />\n    </Space>\n  );\n}\n",
        "desc": "通过  属性格式化数值内容。"
      },
      {
        "code": "import React from 'react';\nimport { InputNumber, Space } from 'tdesign-react';\n\nexport default function InputNumberExample() {\n  return (\n    <Space>\n      <Space direction=\"vertical\">\n        <InputNumber size=\"small\" max={15} min={-12} defaultValue={3} />\n        <InputNumber max={15} min={-12} defaultValue={6} />\n        <InputNumber size=\"large\" max={15} min={-12} defaultValue={9} />\n      </Space>\n\n      <Space direction=\"vertical\">\n        <InputNumber defaultValue={5} size=\"small\" theme=\"column\" onChange={console.log} />\n        <InputNumber defaultValue={5} theme=\"column\" onChange={console.log} />\n        <InputNumber defaultValue={10} size=\"large\" theme=\"column\" onChange={console.log} />\n      </Space>\n\n      <Space direction=\"vertical\">\n        <InputNumber defaultValue={5} size=\"small\" theme=\"normal\" onChange={console.log} />\n        <InputNumber defaultValue={5} theme=\"normal\" onChange={console.log} />\n        <InputNumber defaultValue={10} size=\"large\" theme=\"normal\" onChange={console.log} />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "提供 大、中（默认）、小 3 种数字输入框。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Form, InputNumber, Space, Radio } from 'tdesign-react';\n\nconst { FormItem } = Form;\nexport default function Status() {\n  const [type, setType] = useState('align-input');\n  return (\n    <Space direction=\"vertical\">\n      <Radio.Group value={type} onChange={(val) => setType(val)} variant=\"default-filled\">\n        <Radio.Button value=\"hide\">隐藏文本提示</Radio.Button>\n        <Radio.Button value=\"align-left\">文本提示左对齐</Radio.Button>\n        <Radio.Button value=\"align-input\">文本提示对齐输入框</Radio.Button>\n      </Radio.Group>\n\n      <Form>\n        {type === 'hide' && (\n          <>\n            <FormItem label=\"禁用\">\n              <InputNumber\n                style={{\n                  width: 300,\n                }}\n                disabled\n              />\n            </FormItem>\n            <FormItem label=\"只读\">\n              <InputNumber\n                style={{\n                  width: 300,\n                }}\n                readonly\n              />\n            </FormItem>\n            <FormItem label=\"正常\">\n              <InputNumber\n                style={{\n                  width: 300,\n                }}\n              />\n            </FormItem>\n            <FormItem label=\"成功\">\n              <InputNumber\n                style={{\n                  width: 300,\n                }}\n                status=\"success\"\n              />\n            </FormItem>\n            <FormItem label=\"警告\">\n              <InputNumber\n                style={{\n                  width: 300,\n                }}\n                status=\"warning\"\n              />\n            </FormItem>\n            <FormItem label=\"错误\">\n              <InputNumber\n                style={{\n                  width: 300,\n                }}\n                status=\"error\"\n              />\n            </FormItem>\n          </>\n        )}\n\n        {type === 'align-left' && (\n          <>\n            <FormItem label=\"正常提示\">\n              <InputNumber\n                style={{\n                  width: 300,\n                }}\n                tips=\"这是普通文本提示\"\n              />\n            </FormItem>\n            <FormItem label=\"成功提示\">\n              <InputNumber\n                style={{\n                  width: 300,\n                }}\n                status=\"success\"\n                tips=\"校验通过文本提示\"\n              />\n            </FormItem>\n            <FormItem label=\"警告提示\">\n              <InputNumber\n                style={{\n                  width: 300,\n                }}\n                status=\"warning\"\n                tips=\"校验不通过文本提示\"\n              />\n            </FormItem>\n            <FormItem label=\"错误提示\">\n              <InputNumber\n                style={{\n                  width: 300,\n                }}\n                status=\"error\"\n                tips=\"校验存在严重问题文本提示\"\n              />\n            </FormItem>\n          </>\n        )}\n\n        {type === 'align-input' && (\n          <>\n            <FormItem label=\"正常提示\">\n              <InputNumber\n                style={{\n                  width: 300,\n                }}\n                tips=\"这是普通文本提示\"\n              />\n            </FormItem>\n            <FormItem label=\"成功提示\">\n              <InputNumber\n                style={{\n                  width: 300,\n                }}\n                status=\"success\"\n                tips=\"校验通过文本提示\"\n              />\n            </FormItem>\n            <FormItem label=\"警告提示\">\n              <InputNumber\n                style={{\n                  width: 300,\n                }}\n                status=\"warning\"\n                tips=\"校验不通过文本提示\"\n              />\n            </FormItem>\n            <FormItem label=\"错误提示\">\n              <InputNumber\n                style={{\n                  width: 300,\n                }}\n                status=\"error\"\n                tips=\"校验存在严重问题文本提示\"\n              />\n            </FormItem>\n          </>\n        )}\n      </Form>\n    </Space>\n  );\n}\n",
        "desc": "除了禁用  和只读  状态之外，提供 正常（默认）、成功 、警告 、错误  4 种状态的输入框设置。"
      },
      {
        "code": "import React from 'react';\nimport { InputNumber, Space } from 'tdesign-react';\n\nexport default function InputNumberExample() {\n  return (\n    <Space>\n      <Space direction=\"vertical\">\n        <InputNumber align=\"left\" defaultValue={100} />\n        <InputNumber align=\"center\" defaultValue={200} />\n        <InputNumber align=\"right\" defaultValue={300} />\n      </Space>\n\n      <Space direction=\"vertical\">\n        <InputNumber align=\"left\" theme=\"normal\" defaultValue={100} />\n        <InputNumber align=\"center\" theme=\"normal\" defaultValue={200} />\n        <InputNumber align=\"right\" theme=\"normal\" defaultValue={300} />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "不同对齐方式的输入框"
      },
      {
        "code": "import React from 'react';\nimport { InputNumber } from 'tdesign-react';\n\nexport default function InputNumberAutoWidthExample() {\n  return <InputNumber autoWidth min={-5} defaultValue={1} />;\n}\n",
        "desc": "自适应宽度的输入框"
      },
      {
        "code": "import React from 'react';\nimport { InputNumber, Space } from 'tdesign-react';\n\nexport default function InputNumberExample() {\n  return (\n    <Space direction=\"vertical\">\n      <InputNumber\n        defaultValue={'19999999999999999'}\n        largeNumber\n        decimalPlaces={2}\n        step={1}\n        style={{\n          width: '350px',\n        }}\n      />\n      <InputNumber\n        defaultValue={'0.8975527383412673418'}\n        largeNumber\n        step={0.888}\n        style={{\n          width: '350px',\n        }}\n      />\n    </Space>\n  );\n}\n",
        "desc": "大数字输入框"
      }
    ]
  },
  {
    "name": "<TagInput/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { TagInput, Space } from 'tdesign-react';\n\nexport default function TagInputBaseExample() {\n  const [tags1, setTags1] = useState(['Vue', 'React', 'Angular']);\n  const [tags2] = useState(['Vue', 'React']);\n  const [tags3] = useState(['Vue', 'React']);\n  const onTagInputEnter = (val, context) => {\n    console.log(val, context);\n  };\n  const onChange = (val, context) => {\n    console.log(val, context);\n    setTags1(val);\n  };\n  const onPaste = (context) => {\n    console.log(context);\n  };\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '80%',\n      }}\n    >\n      <TagInput\n        value={tags1}\n        onChange={onChange}\n        clearable\n        onPaste={onPaste}\n        onEnter={onTagInputEnter}\n        placeholder=\"请输入\"\n      />\n      <TagInput value={tags2} label=\"Controlled: \" placeholder=\"请输入\" clearable />\n      <TagInput defaultValue={tags3} label=\"UnControlled: \" placeholder=\"请输入\" clearable />\n    </Space>\n  );\n}\n",
        "desc": "基础标签输入框"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TagInput, Space } from 'tdesign-react';\n\nexport default function TagInputExcessExample() {\n  const [tags, setTags] = useState(['Vue', 'React']);\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '80%',\n      }}\n    >\n      {/* <!-- 标签数量超出时，滚动显示 --> */}\n      <TagInput\n        value={tags}\n        onChange={setTags}\n        label=\"Scroll: \"\n        excessTagsDisplayType=\"scroll\"\n        placeholder=\"请输入\"\n        clearable\n      />\n\n      {/* <!-- 标签数量超出时，换行显示，默认情况 --> */}\n      <TagInput\n        value={tags}\n        onChange={setTags}\n        label=\"BreakLine: \"\n        placeholder=\"请输入\"\n        excessTagsDisplayType=\"break-line\"\n        clearable\n      />\n    </Space>\n  );\n}\n",
        "desc": "使用  控制标签超出时的呈现方式：横向滚动显示和换行显示，默认为换行显示。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TagInput, Space } from 'tdesign-react';\n\nexport default function TagInputMaxRowExample() {\n  const [tags, setTags] = useState([\n    'Vue',\n    'React',\n    'Angular',\n    'Svelte',\n    'Solid',\n    'MiniProgram',\n    'Flutter',\n    'UniApp',\n    'Html5',\n    'Css3',\n    'JavaScript',\n    'TypeScript',\n    'Node.js',\n    'Python',\n    'Java',\n    'Go',\n    'Rust',\n    'C++',\n  ]);\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '80%',\n      }}\n    >\n      <h3>最大高度为2</h3>\n      <TagInput\n        size=\"small\"\n        maxRows={2}\n        value={tags}\n        onChange={(val) => setTags(val.map(String))}\n        clearable\n        onPaste={(context) => console.log(context)}\n        onEnter={(val, context) => console.log(val, context)}\n        label=\"小尺寸: \"\n        placeholder=\"最大高度为2行，超出部分滚动显示\"\n      />\n\n      <h3>最大高度为3</h3>\n      <TagInput\n        maxRows={3}\n        value={tags}\n        onChange={(val) => setTags(val.map(String))}\n        label=\"中等尺寸: \"\n        clearable\n        placeholder=\"最大高度为3行，超出部分滚动显示\"\n      />\n\n      <h3>最大高度为4</h3>\n      <TagInput\n        size=\"large\"\n        maxRows={4}\n        value={tags}\n        onChange={(val) => setTags(val.map(String))}\n        label=\"大尺寸: \"\n        clearable\n        placeholder=\"最大高度为4行，超出部分换行显示\"\n      />\n    </Space>\n  );\n}\n",
        "desc": "使用 maxRows 控制标签超出时的最大行数，超出会出现滚动条，默认为不限制。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { MessagePlugin, TagInput } from 'tdesign-react';\n\nexport default function TagInputMaxExample() {\n  const [tags] = useState([]);\n  const onEnter = (value, { inputValue }) => {\n    if (value.length >= 3 && inputValue) {\n      MessagePlugin.warning('最多只能输入 3 个标签!');\n    }\n  };\n  return (\n    <div\n      style={{\n        width: '100%',\n      }}\n    >\n      <TagInput defaultValue={tags} placeholder=\"最多只能输入 3 个标签\" max={3} onEnter={onEnter} />\n    </div>\n  );\n}\n",
        "desc": "使用  控制最大标签数量。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TagInput, Space } from 'tdesign-react';\n\nexport default function TagInputSize() {\n  const [tags1, setTags1] = useState(['Vue', 'React']);\n  const [tags2, setTags2] = useState(['Vue', 'React']);\n  const [tags3, setTags3] = useState(['Vue', 'React']);\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '80%',\n      }}\n    >\n      <TagInput value={tags1} onChange={setTags1} size=\"small\" clearable />\n\n      <TagInput value={tags2} onChange={setTags2} clearable />\n\n      <TagInput value={tags3} onChange={setTags3} size=\"large\" clearable />\n    </Space>\n  );\n}\n",
        "desc": "提供大、中（默认）、小三种不同尺寸的的标签输入框。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TagInput, Popup, Tag, Space } from 'tdesign-react';\n\nexport default function TagInputCollapsedExample() {\n  const [tags, setTags] = useState(['Vue', 'React', 'Miniprogram', 'Angular', 'Flutter']);\n  const renderCollapsedItems = ({ collapsedSelectedItems }) => (\n    <Popup\n      key={'tags'}\n      content={collapsedSelectedItems.map((item) => (\n        <Tag\n          key={item}\n          style={{\n            marginRight: '4px',\n          }}\n        >\n          {item}\n        </Tag>\n      ))}\n    >\n      <Tag>More({collapsedSelectedItems?.length})</Tag>\n    </Popup>\n  );\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '80%',\n      }}\n    >\n      <TagInput value={tags} onChange={setTags} minCollapsedNum={1} />\n      <TagInput value={tags} onChange={setTags} minCollapsedNum={3} collapsedItems={renderCollapsedItems}></TagInput>\n    </Space>\n  );\n}\n",
        "desc": "用于控制超出这个数量的标签折叠省略显示。 用于自定义折叠标签呈现方式。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TagInput, Tag, Space } from 'tdesign-react';\n\nexport default function CustomTagExample() {\n  const [tags, setTags] = useState(['StudentA', 'StudentB', 'StudentC']);\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '80%',\n      }}\n    >\n      {/* 方式一：使用 tag 定义标签内部内容  */}\n      <TagInput\n        value={tags}\n        onChange={setTags}\n        clearable\n        minCollapsedNum={2}\n        tag={({ value }) => (\n          <span>\n            <img\n              src=\"https://tdesign.gtimg.com/site/avatar.jpg\"\n              style={{\n                maxWidth: '18px',\n                maxHeight: '18px',\n                borderRadius: '50%',\n                verticalAlign: 'text-top',\n              }}\n            />\n            {value}\n          </span>\n        )}\n      ></TagInput>\n\n      <br />\n      <br />\n\n      {/* 方式二：使用 valueDisplay 定义全部内容 */}\n      <TagInput\n        value={tags}\n        onChange={setTags}\n        valueDisplay={({ value, onClose }) =>\n          value.map((item, index) => (\n            <Tag\n              key={item}\n              closable\n              style={{\n                marginRight: '4px',\n              }}\n              onClose={() => onClose(index)}\n            >\n              <div>\n                <img\n                  src=\"https://tdesign.gtimg.com/site/avatar.jpg\"\n                  style={{\n                    maxWidth: '18px',\n                    maxHeight: '18px',\n                    borderRadius: '50%',\n                    verticalAlign: 'text-top',\n                  }}\n                />\n                {item}\n              </div>\n            </Tag>\n          ))\n        }\n        clearable\n      ></TagInput>\n    </Space>\n  );\n}\n",
        "desc": "用于定义单个标签的内容 用于完全自定义全量标签内容"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TagInput, Space } from 'tdesign-react';\n\nconst style = {\n  width: '500px',\n};\nexport default function TagInputStatusExample() {\n  const [tags1, setTags1] = useState(['Vue', 'React', 'Miniprogram']);\n  const [tags3, setTags3] = useState(['Vue', 'React', 'Miniprogram']);\n  const [tags2, setTags2] = useState(['Vue', 'React', 'Miniprogram']);\n  const [tags4, setTags4] = useState(['Vue', 'React', 'Miniprogram']);\n  const [tags5, setTags5] = useState(['Vue', 'React', 'Miniprogram']);\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n      size=\"32px\"\n    >\n      <Space>\n        <label>禁用状态：</label>\n        <TagInput style={style} value={tags1} onChange={setTags1} disabled />\n      </Space>\n\n      <Space>\n        <label>只读状态：</label>\n        <TagInput style={style} value={tags2} onChange={setTags2} tips=\"这是普通文本提示\" readonly />\n      </Space>\n\n      <Space>\n        <label>成功状态：</label>\n        <TagInput style={style} value={tags3} onChange={setTags3} status=\"success\" tips=\"校验通过文本提示\" clearable />\n      </Space>\n\n      <Space>\n        <label>告警状态：</label>\n        <TagInput\n          style={style}\n          value={tags4}\n          onChange={setTags4}\n          status=\"warning\"\n          tips=\"校验不通过文本提示\"\n          clearable\n        />\n      </Space>\n\n      <Space>\n        <label>错误状态：</label>\n        <TagInput\n          style={style}\n          value={tags5}\n          onChange={setTags5}\n          status=\"error\"\n          tips=\"校验存在严重问题文本提示\"\n          clearable\n        />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "标签输入框状态可分为：正常、只读、禁用、成功、告警、错误等，其中 成功、告警、错误 等状态一般用于表单验证。此特性继承至 Input 输入框组件。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TagInput, Space } from 'tdesign-react';\n\nexport default function TagInputThemeExample() {\n  const [tags, setTags] = useState(['Vue', 'React', 'Miniprogram']);\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '80%',\n      }}\n    >\n      <TagInput\n        value={tags}\n        onChange={setTags}\n        tagProps={{\n          theme: 'primary',\n        }}\n      />\n      <TagInput\n        value={tags}\n        onChange={setTags}\n        tagProps={{\n          theme: 'success',\n        }}\n      />\n      <TagInput\n        value={tags}\n        onChange={setTags}\n        tagProps={{\n          theme: 'warning',\n        }}\n      />\n      <TagInput\n        value={tags}\n        onChange={setTags}\n        tagProps={{\n          theme: 'danger',\n        }}\n      />\n    </Space>\n  );\n}\n",
        "desc": "使用  控制标签的所有属性，如：颜色设置。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TagInput } from 'tdesign-react';\n\nconst TagInputAutoWidth = () => {\n  const [tags, setTags] = useState(['Vue', 'React']);\n  const onChange = (val) => {\n    setTags(val);\n  };\n  return <TagInput value={tags} onChange={onChange} autoWidth clearable />;\n};\nTagInputAutoWidth.displayName = 'TagInputAutoWidth';\nexport default TagInputAutoWidth;\n",
        "desc": "宽度自适应的标签输入框"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TagInput, Space } from 'tdesign-react';\n\nexport default function TagInputBaseExample() {\n  const [tags1, setTags1] = useState(['Vue', 'React', 'Angular']);\n  const [tags2, setTags2] = useState(['Vue', 'React', 'Angular', 'Miniprogram']);\n  const onTagInputEnter = (val, context) => {\n    console.log(val, context);\n  };\n  const onChange = (val, context) => {\n    console.log(val, context);\n    setTags1(val);\n  };\n  const onChange2 = (val, context) => {\n    console.log(val, context);\n    setTags2(val);\n  };\n  const onPaste = (context) => {\n    console.log(context);\n  };\n  const onDragSort = ({ currentIndex, targetIndex }) => {\n    const temp = tags1[currentIndex];\n    tags1[currentIndex] = tags1[targetIndex];\n    tags1[targetIndex] = temp;\n    setTags1([...tags1]);\n  };\n  const onDragSort2 = ({ currentIndex, targetIndex }) => {\n    const temp = tags2[currentIndex];\n    tags2[currentIndex] = tags2[targetIndex];\n    tags2[targetIndex] = temp;\n    setTags2([...tags2]);\n  };\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '80%',\n      }}\n    >\n      <TagInput\n        value={tags1}\n        onChange={onChange}\n        clearable\n        dragSort\n        onPaste={onPaste}\n        onEnter={onTagInputEnter}\n        onDragSort={onDragSort}\n        placeholder=\"请输入\"\n      />\n\n      <TagInput\n        value={tags2}\n        dragSort\n        clearable\n        excessTagsDisplayType=\"break-line\"\n        label=\"Controlled: \"\n        onChange={onChange2}\n        onDragSort={onDragSort2}\n        placeholder=\"请输入\"\n      />\n    </Space>\n  );\n}\n",
        "desc": "可拖拽调整顺序的标签输入框"
      }
    ]
  },
  {
    "name": "<Radio/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Radio, Space } from 'tdesign-react';\n\nexport default function RadioControlledExample() {\n  return (\n    <Space>\n      <Radio checked={false}>未选中</Radio>\n      <Radio allowUncheck={true}>取消选中</Radio>\n      <Radio checked>已选中</Radio>\n      <Radio checked={false} disabled>\n        禁用未选中\n      </Radio>\n      <Radio checked={true} disabled>\n        禁用已选中\n      </Radio>\n    </Space>\n  );\n}\n",
        "desc": "最简单的单选框形式，常用于表单中数据选项的选择。"
      },
      {
        "code": "import React from 'react';\nimport { Radio, Space } from 'tdesign-react';\n\nexport default function RadioControlledExample() {\n  return (\n    <Space direction=\"vertical\">\n      <Space direction=\"vertical\">\n        <h5>普通单选按钮</h5>\n        <Radio.Group defaultValue=\"gz\">\n          <Radio value=\"bj\">选项一</Radio>\n          <Radio value=\"sh\">选项二</Radio>\n          <Radio value=\"gz\">选项三</Radio>\n          <Radio value=\"sz\">选项四</Radio>\n        </Radio.Group>\n      </Space>\n      <Space direction=\"vertical\">\n        <h5>边框型单选按钮</h5>\n        <Radio.Group defaultValue=\"1\">\n          <Radio.Button value=\"1\">选项一</Radio.Button>\n          <Radio.Button value=\"2\">选项二</Radio.Button>\n          <Radio.Button value=\"3\">选项三</Radio.Button>\n          <Radio.Button value=\"1\" disabled>\n            选中禁用态\n          </Radio.Button>\n          <Radio.Button value=\"2\" disabled>\n            未选中禁用态\n          </Radio.Button>\n        </Radio.Group>\n      </Space>\n      <Space direction=\"vertical\">\n        <h5>填充型单选按钮</h5>\n\n        <Radio.Group variant=\"default-filled\" defaultValue=\"gz\">\n          <Radio.Button value=\"bj\">选项一</Radio.Button>\n          <Radio.Button value=\"gz\">选项二</Radio.Button>\n          <Radio.Button value=\"sz\">选项三</Radio.Button>\n          <Radio.Button value=\"fj\">选项四</Radio.Button>\n          <Radio.Button value=\"cd\">选项五</Radio.Button>\n        </Radio.Group>\n\n        <Radio.Group variant=\"primary-filled\" defaultValue=\"gz\">\n          <Radio.Button value=\"bj\">选项一</Radio.Button>\n          <Radio.Button value=\"gz\">选项二</Radio.Button>\n          <Radio.Button value=\"sz\">选项三</Radio.Button>\n          <Radio.Button value=\"fj\">选项四</Radio.Button>\n          <Radio.Button value=\"cd\">选项五</Radio.Button>\n        </Radio.Group>\n\n        <Radio.Group variant=\"default-filled\" defaultValue=\"bj\">\n          <Radio.Button value=\"fj\" disabled>\n            选项一\n          </Radio.Button>\n          <Radio.Button value=\"cd\" disabled>\n            选项二\n          </Radio.Button>\n          <Radio.Button value=\"sz\" disabled>\n            选项三\n          </Radio.Button>\n          <Radio.Button value=\"bj\" disabled>\n            选中禁用态\n          </Radio.Button>\n          <Radio.Button value=\"gz\" disabled>\n            未选中禁用态\n          </Radio.Button>\n        </Radio.Group>\n\n        <Radio.Group variant=\"primary-filled\" defaultValue=\"bj\">\n          <Radio.Button value=\"fj\" disabled>\n            选项一\n          </Radio.Button>\n          <Radio.Button value=\"cd\" disabled>\n            选项二\n          </Radio.Button>\n          <Radio.Button value=\"sz\" disabled>\n            选项三\n          </Radio.Button>\n          <Radio.Button value=\"bj\" disabled>\n            选中禁用态\n          </Radio.Button>\n          <Radio.Button value=\"gz\" disabled>\n            未选中禁用态\n          </Radio.Button>\n        </Radio.Group>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "按钮形式的单选框，选项更明显突出，适合强调选项的场景。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Radio, Space } from 'tdesign-react';\n\nexport default function RadioExample() {\n  const [gender1, setGender1] = useState('bj');\n  const [gender2, setGender2] = useState('sh1');\n  const [gender3, setGender3] = useState('gz2');\n  return (\n    <Space>\n      <Space direction=\"vertical\">\n        <Radio.Group size=\"small\" value={gender1} onChange={(value) => setGender1(value)}>\n          <Radio.Button value=\"bj\">北京</Radio.Button>\n          <Radio.Button value=\"sh\">上海</Radio.Button>\n          <Radio.Button value=\"gz\">广州</Radio.Button>\n          <Radio.Button value=\"sz\">深圳</Radio.Button>\n        </Radio.Group>\n\n        <Radio.Group value={gender2} onChange={(value) => setGender2(value)}>\n          <Radio.Button value=\"bj1\">北京</Radio.Button>\n          <Radio.Button value=\"sh1\">上海</Radio.Button>\n          <Radio.Button value=\"gz1\">广州</Radio.Button>\n          <Radio.Button value=\"sz1\">深圳</Radio.Button>\n        </Radio.Group>\n\n        <Radio.Group size=\"large\" value={gender3} onChange={(value) => setGender3(value)}>\n          <Radio.Button value=\"bj2\">北京</Radio.Button>\n          <Radio.Button value=\"sh2\">上海</Radio.Button>\n          <Radio.Button value=\"gz2\">广州</Radio.Button>\n          <Radio.Button value=\"sz2\">深圳</Radio.Button>\n        </Radio.Group>\n      </Space>\n\n      <Space direction=\"vertical\">\n        <Radio.Group variant=\"default-filled\" size=\"small\" value={gender1} onChange={(value) => setGender1(value)}>\n          <Radio.Button value=\"bj\">北京</Radio.Button>\n          <Radio.Button value=\"sh\">上海</Radio.Button>\n          <Radio.Button value=\"gz\">广州</Radio.Button>\n          <Radio.Button value=\"sz\">深圳</Radio.Button>\n        </Radio.Group>\n\n        <Radio.Group variant=\"default-filled\" value={gender2} onChange={(value) => setGender2(value)}>\n          <Radio.Button value=\"bj1\">北京</Radio.Button>\n          <Radio.Button value=\"sh1\">上海</Radio.Button>\n          <Radio.Button value=\"gz1\">广州</Radio.Button>\n          <Radio.Button value=\"sz1\">深圳</Radio.Button>\n        </Radio.Group>\n\n        <Radio.Group variant=\"default-filled\" size=\"large\" value={gender3} onChange={(value) => setGender3(value)}>\n          <Radio.Button value=\"bj2\">北京</Radio.Button>\n          <Radio.Button value=\"sh2\">上海</Radio.Button>\n          <Radio.Button value=\"gz2\">广州</Radio.Button>\n          <Radio.Button value=\"sz2\">深圳</Radio.Button>\n        </Radio.Group>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "提供大、中（默认）、小三种单选框。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Radio, Space } from 'tdesign-react';\n\nconst objOptions = [\n  {\n    value: 'bj',\n    label: '北京',\n  },\n  {\n    value: 'sh',\n    label: '上海',\n  },\n  {\n    value: 'gz',\n    label: '广州',\n    disabled: true,\n  },\n  {\n    value: 'sz',\n    label: '深圳',\n  },\n];\n// eslint-disable-next-line prefer-const\nlet itemOptions = ['北京', '上海', '广州', '深圳'];\nexport default function RadioExample() {\n  const [city, setCity] = useState('bj');\n  const [city2, setCity2] = useState('sz');\n  const [city3, setCity3] = useState('深圳');\n  return (\n    <Space direction=\"vertical\">\n      <Radio.Group value={city} onChange={(val) => setCity(val)} allowUncheck>\n        <Radio value=\"bj\">北京</Radio>\n        <Radio value=\"sh\">上海</Radio>\n        <Radio value=\"gz\">广州</Radio>\n        <Radio value=\"sz\">深圳</Radio>\n      </Radio.Group>\n\n      <Radio.Group value={city2} options={objOptions} allowUncheck onChange={(val) => setCity2(val)} />\n      <Radio.Group\n        variant=\"default-filled\"\n        theme=\"button\"\n        value={city2}\n        options={objOptions}\n        onChange={(val) => setCity2(val)}\n      />\n\n      <Radio.Group theme=\"button\" value={city3} options={itemOptions} onChange={(val) => setCity3(val)} />\n      <Radio.Group\n        variant=\"primary-filled\"\n        theme=\"button\"\n        value={city3}\n        options={itemOptions}\n        onChange={(val) => setCity3(val)}\n      />\n    </Space>\n  );\n}\n",
        "desc": "将单选框按一定属性组合使用的单选框组。"
      }
    ]
  },
  {
    "name": "<RangeInput/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { RangeInput } from 'tdesign-react';\n\nexport default function BaseExample() {\n  return <RangeInput />;\n}\n",
        "desc": "基础范围输入框"
      },
      {
        "code": "import React from 'react';\nimport { RangeInput, Space } from 'tdesign-react';\n\nexport default function BaseExample() {\n  return (\n    <Space direction=\"vertical\">\n      <RangeInput size=\"small\" />\n      <RangeInput />\n      <RangeInput size=\"large\" />\n    </Space>\n  );\n}\n",
        "desc": "提供大、中（默认）、小三种不同尺寸的的标签输入框。"
      },
      {
        "code": "import React from 'react';\nimport { RangeInput, Space } from 'tdesign-react';\n\nexport default function BaseExample() {\n  return (\n    <Space direction=\"vertical\">\n      <RangeInput status=\"success\" />\n      <RangeInput status=\"warning\" />\n      <RangeInput status=\"error\" />\n    </Space>\n  );\n}\n",
        "desc": "标签输入框状态可分为：正常、只读、禁用、成功、告警、错误等，其中 成功、告警、错误 等状态一般用于表单验证。此特性继承至 Input 输入框组件。"
      },
      {
        "code": "import React from 'react';\nimport { RangeInputPopup } from 'tdesign-react';\n\nexport default function BaseExample() {\n  return <RangeInputPopup panel={<div>hello world</div>} />;\n}\n",
        "desc": "可使用  组件"
      }
    ]
  },
  {
    "name": "<Select/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { Select, Tooltip } from 'tdesign-react';\n\nexport default function SingleSelect() {\n  const [value, setValue] = useState('');\n  const onChange = (value) => {\n    setValue(value);\n  };\n  return (\n    <Select\n      value={value}\n      onChange={onChange}\n      style={{\n        width: '40%',\n      }}\n      clearable\n      options={[\n        {\n          label: '架构云',\n          value: '1',\n          title: '架构云选项',\n        },\n        {\n          label: '大数据',\n          value: '2',\n        },\n        {\n          label: '区块链',\n          value: '3',\n        },\n        {\n          label: '物联网',\n          value: '4',\n          disabled: true,\n        },\n        {\n          label: '人工智能',\n          value: '5',\n          content: (\n            <Tooltip content=\"人工智能\">\n              <span>人工智能（新）</span>\n            </Tooltip>\n          ),\n          title: null,\n        },\n      ]}\n    />\n  );\n}\n",
        "desc": "使用  配置下拉选项时，如果数据字段不是  和 ，可以使用  定义别名。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select, Space } from 'tdesign-react';\n\nconst { Option } = Select;\nconst options1 = [\n  {\n    label: '全选',\n    checkAll: true,\n  },\n  {\n    label: '架构云',\n    value: '1',\n  },\n  {\n    label: '大数据',\n    value: '2',\n  },\n  {\n    label: '区块链',\n    value: '3',\n  },\n  {\n    label: '物联网',\n    value: '4',\n    disabled: true,\n  },\n  {\n    label: '人工智能',\n    value: '5',\n    content: <span>人工智能（新）</span>,\n  },\n  {\n    label: '计算场景',\n    value: '6',\n  },\n];\nconst options2 = [\n  {\n    label: '云服务器',\n    value: '1',\n  },\n  {\n    label: '云数据库',\n    value: '2',\n  },\n  {\n    label: '域名注册',\n    value: '3',\n  },\n  {\n    label: '网站备案',\n    value: '4',\n  },\n  {\n    label: '对象存储',\n    value: '5',\n  },\n  {\n    label: '低代码平台',\n    value: '6',\n    content: <span>低代码平台（新）</span>,\n  },\n];\nconst MultipleSelect = () => {\n  const [value, setValue] = useState(['3', '5']);\n  const handleChange = (v) => {\n    setValue(v);\n  };\n  return (\n    <Space\n      breakLine\n      style={{\n        width: '100%',\n      }}\n    >\n      <Select\n        value={value}\n        onChange={handleChange}\n        filterable\n        multiple\n        options={options1}\n        onRemove={(options) => {\n          console.log('onRemove', options);\n        }}\n      />\n      <Select\n        defaultValue={['1', '2', '3', '4', '5', '6']}\n        placeholder=\"请选择云产品\"\n        multiple\n        onRemove={(options) => {\n          console.log('onRemove', options);\n        }}\n      >\n        <Option value=\"all\" label=\"全选\" checkAll></Option>\n        {options2.map((item) => (\n          <Option value={item.value} label={item.label} key={item.value} content={item.content}></Option>\n        ))}\n      </Select>\n    </Space>\n  );\n};\nexport default MultipleSelect;\n",
        "desc": "提供多选的选择器，通过标签展示多选内容。添加属性  即可设置为多选。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select, Space } from 'tdesign-react';\n\nconst { Option, OptionGroup } = Select;\nconst OptionGroupSelect = () => {\n  const [value, setValue] = useState('');\n  const [value2, setValue2] = useState([1]);\n  const onChange = (value) => {\n    setValue(value);\n  };\n  const onChange2 = (value) => {\n    setValue2(value);\n  };\n  const options1 = [\n    {\n      label: '选项一',\n      value: 1,\n    },\n    {\n      label: '选项二',\n      value: 2,\n    },\n  ];\n  const options2 = [\n    {\n      label: '选项三',\n      value: 4,\n    },\n    {\n      label: '选项四',\n      value: 5,\n    },\n    {\n      label: '选项五',\n      value: 6,\n    },\n  ];\n  const options3 = [\n    {\n      label: '选项六',\n      value: 7,\n    },\n    {\n      label: '选项七',\n      value: 8,\n    },\n    {\n      label: '选项八',\n      value: 9,\n    },\n  ];\n  const groupOptions = [\n    {\n      group: '分组一',\n      children: options1,\n    },\n    {\n      group: '分组二',\n      children: options2,\n    },\n    {\n      group: '分组三',\n      divider: true,\n      children: options3,\n    },\n  ];\n  return (\n    <Space\n      breakLine\n      style={{\n        width: '100%',\n      }}\n    >\n      <Select\n        value={value}\n        onChange={onChange}\n        style={{\n          width: '40%',\n        }}\n        options={groupOptions}\n        filterable\n      />\n      <Select\n        value={value2}\n        onChange={onChange2}\n        style={{\n          width: '40%',\n        }}\n        multiple\n        filterable\n      >\n        <Option value=\"all\" label=\"全选\" checkAll></Option>\n        <OptionGroup label=\"分组一\" divider={true}>\n          {options1.map((item, index) => (\n            <Option label={item.label} value={item.value} key={index} />\n          ))}\n        </OptionGroup>\n        <OptionGroup label=\"分组二\" divider={true}>\n          {options2.map((item, index) => (\n            <Option label={item.label} value={item.value} key={index} />\n          ))}\n        </OptionGroup>\n        <OptionGroup label=\"分组三\" divider={true}>\n          {options3.map((item, index) => (\n            <Option label={item.label} value={item.value} key={index} />\n          ))}\n        </OptionGroup>\n      </Select>\n    </Space>\n  );\n};\nexport default OptionGroupSelect;\n",
        "desc": "对信息进行分组的选择器，能够直观呈现方便用户辨识。在有层级关系，但选项内容较少的场景下使用。"
      },
      {
        "code": "import React from 'react';\nimport { Select, Space } from 'tdesign-react';\n\nfunction Status() {\n  return (\n    <Space>\n      <Select\n        options={[\n          {\n            label: '选项1',\n            value: '1',\n          },\n          {\n            label: '选项2',\n            value: '2',\n          },\n          {\n            label: '选项3',\n            value: '3',\n          },\n        ]}\n      ></Select>\n      <Select\n        options={[\n          {\n            label: '选项1',\n            value: '1',\n          },\n          {\n            label: '选项2',\n            value: '2',\n          },\n          {\n            label: '选项3',\n            value: '3',\n          },\n        ]}\n        disabled\n      ></Select>\n      <Select\n        options={[\n          {\n            label: '选项1',\n            value: '1',\n          },\n          {\n            label: '选项2',\n            value: '2',\n          },\n          {\n            label: '选项3',\n            value: '3',\n          },\n        ]}\n        loading\n      ></Select>\n    </Space>\n  );\n}\nexport default Status;\n",
        "desc": "提供 普通状态、禁用状态、加载状态 三种状态的选择器。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select, Space } from 'tdesign-react';\n\nconst { Option } = Select;\nconst SelectSizes = () => {\n  const [value1, setValue1] = useState('');\n  const onChangeValue1 = (value) => {\n    setValue1(value);\n  };\n  const [value2, setValue2] = useState('');\n  const onChangeValue2 = (value) => {\n    setValue2(value);\n  };\n  const [value3, setValue3] = useState('');\n  const onChangeValue3 = (value) => {\n    setValue3(value);\n  };\n  return (\n    <Space breakLine>\n      <Select value={value1} onChange={onChangeValue1} size=\"small\">\n        <Option key=\"1\" label=\"选项一\" value=\"1\" />\n        <Option key=\"2\" label=\"选项二\" value=\"2\" />\n        <Option key=\"3\" label=\"选项三\" value=\"3\" />\n      </Select>\n\n      <Select value={value2} onChange={onChangeValue2}>\n        <Option key=\"1\" label=\"选项一\" value=\"1\" />\n        <Option key=\"2\" label=\"选项二\" value=\"2\" />\n        <Option key=\"3\" label=\"选项三\" value=\"3\" />\n      </Select>\n\n      <Select value={value3} onChange={onChangeValue3} size=\"large\">\n        <Option key=\"1\" label=\"选项一\" value=\"1\" />\n        <Option key=\"2\" label=\"选项二\" value=\"2\" />\n        <Option key=\"3\" label=\"选项三\" value=\"3\" />\n      </Select>\n    </Space>\n  );\n};\nexport default SelectSizes;\n",
        "desc": "提供大、中（默认）、小三种不同尺寸的的选择器。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select } from 'tdesign-react';\n\nconst { Option } = Select;\nconst options = [\n  {\n    label: '用户一',\n    value: '1',\n    description: '这是一段用户描述信息，可自定义内容',\n  },\n  {\n    label: '用户二',\n    value: '2',\n    description: '这是一段用户描述信息，可自定义内容',\n  },\n  {\n    label: '用户三',\n    value: '3',\n    description: '这是一段用户描述信息，可自定义内容',\n  },\n  {\n    label: '用户四',\n    value: '4',\n    description: '这是一段用户描述信息，可自定义内容',\n  },\n  {\n    label: '用户五',\n    value: '5',\n    description: '这是一段用户描述信息，可自定义内容',\n  },\n  {\n    label: '用户六',\n    value: '6',\n    description: '这是一段用户描述信息，可自定义内容',\n  },\n  {\n    label: '用户七',\n    value: '7',\n    description: '这是一段用户描述信息，可自定义内容',\n  },\n  {\n    label: '用户八',\n    value: '8',\n    description: '这是一段用户描述信息，可自定义内容',\n  },\n  {\n    label: '用户九',\n    value: '9',\n    description: '这是一段用户描述信息，可自定义内容',\n  },\n];\nconst avatarUrl = 'https://tdesign.gtimg.com/site/avatar.jpg';\nexport default function CustomOptions() {\n  const [value, setValue] = useState('1');\n  const onChange = (value) => {\n    setValue(value);\n  };\n  return (\n    <Select\n      value={value}\n      onChange={onChange}\n      style={{\n        width: '300px',\n      }}\n      clearable\n    >\n      {options.map((option, idx) => (\n        <Option\n          style={{\n            height: '60px',\n          }}\n          key={idx}\n          value={option.value}\n          label={option.label}\n        >\n          <div\n            style={{\n              display: 'flex',\n            }}\n          >\n            <img\n              src={avatarUrl}\n              style={{\n                maxWidth: '40px',\n                borderRadius: '50%',\n              }}\n            />\n            <div\n              style={{\n                marginLeft: '16px',\n              }}\n            >\n              <div>{option.label}</div>\n              <div\n                style={{\n                  fontSize: '13px',\n                  color: 'var(--td-gray-color-9)',\n                }}\n              >\n                {option.description}\n              </div>\n            </div>\n          </div>\n        </Option>\n      ))}\n    </Select>\n  );\n}\n",
        "desc": "自定义下拉选项的选择器"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select, Divider, Button, Input, Space } from 'tdesign-react';\n\nconst OPTIONS = [\n  {\n    label: '架构云',\n    value: '1',\n  },\n  {\n    label: '大数据',\n    value: '2',\n  },\n  {\n    label: '区块链',\n    value: '3',\n  },\n  {\n    label: '物联网',\n    value: '4',\n    disabled: true,\n  },\n  {\n    label: '人工智能',\n    value: '5',\n  },\n];\nexport default function PanelExample() {\n  const [topOptions, setTopOptions] = useState(OPTIONS);\n  const [bottomOptions, setBottomOptions] = useState(OPTIONS);\n  const [editOrCreate, toggleEditOrCreate] = useState('edit');\n  const [inputVal, changeInputVal] = useState('');\n  const handleOnSearch = (v) => {\n    const filteredValue = OPTIONS.filter((item) => item.label.indexOf(v) !== -1);\n    setTopOptions(filteredValue);\n  };\n  const handleClickConfirm = () => {\n    const id = Math.round(Math.random() * 100);\n    const newBottomOptions = bottomOptions.concat({\n      label: inputVal,\n      value: id,\n    });\n    setBottomOptions(newBottomOptions);\n    changeInputVal('');\n    toggleEditOrCreate('edit');\n  };\n  return (\n    <Space>\n      <Select\n        clearable\n        placeholder=\"请选择云解决方案\"\n        style={{\n          width: '300px',\n          marginRight: '20px',\n        }}\n        options={topOptions}\n        panelTopContent={\n          <div\n            style={{\n              position: 'sticky',\n              backgroundColor: 'var(--td-bg-color-container)',\n              top: 0,\n              zIndex: 10,\n              paddingTop: 8,\n            }}\n          >\n            <Input\n              placeholder=\"请输入关键词搜索\"\n              onChange={handleOnSearch}\n              style={{\n                width: 'calc(100% - 4px)',\n                margin: '0 auto',\n              }}\n            />\n            <Divider\n              style={{\n                margin: '8px 0 0',\n              }}\n            />\n          </div>\n        }\n      />\n      <Select\n        placeholder=\"请选择云产品\"\n        style={{\n          width: '300px',\n        }}\n        options={bottomOptions}\n        clearable\n        panelBottomContent={\n          <div\n            className=\"select-panel-footer\"\n            style={{\n              position: 'sticky',\n              bottom: 0,\n              backgroundColor: 'var(--td-bg-color-container)',\n              zIndex: 2,\n            }}\n          >\n            {editOrCreate === 'edit' ? (\n              <div\n                style={{\n                  padding: '8px 6px',\n                  borderTop: '1px solid var(--td-border-level-2-color)',\n                }}\n              >\n                <Button theme=\"primary\" size=\"small\" variant=\"text\" onClick={() => toggleEditOrCreate('create')}>\n                  新增选项\n                </Button>\n              </div>\n            ) : (\n              <div\n                style={{\n                  padding: 8,\n                  borderTop: '1px solid var(--td-border-level-2-color)',\n                }}\n              >\n                <Input size=\"small\" autofocus value={inputVal} onChange={(v) => changeInputVal(v)}></Input>\n                <Button\n                  size=\"small\"\n                  style={{\n                    marginTop: '12px',\n                  }}\n                  onClick={handleClickConfirm}\n                >\n                  确认\n                </Button>\n                <Button\n                  theme=\"default\"\n                  size=\"small\"\n                  style={{\n                    marginTop: '12px',\n                    marginLeft: '8px',\n                  }}\n                  onClick={() => toggleEditOrCreate('edit')}\n                >\n                  取消\n                </Button>\n              </div>\n            )}\n          </div>\n        }\n      />\n    </Space>\n  );\n}\n",
        "desc": "可以使用  和  自定义下拉面板的顶部内容和底部内容。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select, Tag, Space } from 'tdesign-react';\n\nconst options = [\n  {\n    label: '选项一',\n    value: '1',\n  },\n  {\n    label: '选项二',\n    value: '2',\n  },\n  {\n    label: '选项三',\n    value: '3',\n  },\n  {\n    label: '选项四',\n    value: '4',\n  },\n  {\n    label: '选项五',\n    value: '5',\n  },\n  {\n    label: '选项六',\n    value: '6',\n  },\n  {\n    label: '选项七',\n    value: '7',\n  },\n  {\n    label: '选项八',\n    value: '8',\n  },\n  {\n    label: '选项九',\n    value: '9',\n  },\n];\nconst CustomSelected = () => {\n  const [value, setValue] = useState(['1', '2', '3']);\n  const onChange = (value) => {\n    setValue(value);\n  };\n  return (\n    <Space>\n      <Select\n        clearable\n        defaultValue={'1'}\n        style={{\n          width: '300px',\n          marginRight: '20px',\n        }}\n        valueDisplay={({ value }) => (value ? `选中${value}` : null)}\n      >\n        {options.map((v, i) => (\n          <Select.Option value={v.value} key={i}>\n            {v.label}\n          </Select.Option>\n        ))}\n      </Select>\n      <Select\n        clearable\n        multiple\n        value={value}\n        onChange={onChange}\n        style={{\n          width: '300px',\n          marginRight: '20px',\n        }}\n        options={[\n          {\n            label: '选项一',\n            value: '1',\n          },\n          {\n            label: '选项二',\n            value: '2',\n          },\n          {\n            label: '选项三',\n            value: '3',\n          },\n          {\n            label: '选项四',\n            value: '4',\n          },\n          {\n            label: '选项五',\n            value: '5',\n          },\n          {\n            label: '选项六',\n            value: '6',\n          },\n          {\n            label: '选项七',\n            value: '7',\n          },\n          {\n            label: '选项八',\n            value: '8',\n          },\n          {\n            label: '选项九',\n            value: '9',\n          },\n        ]}\n        valueDisplay={({ value, onClose }) =>\n          Array.isArray(value) && value.length > 0\n            ? value.map((v, idx) => (\n                <Tag\n                  key={idx}\n                  onClose={(context) => {\n                    context.e && context.e.stopPropagation();\n                    onClose(idx);\n                  }}\n                  closable\n                >{`${v.label}选项`}</Tag>\n              ))\n            : null\n        }\n      />\n    </Space>\n  );\n};\nexport default CustomSelected;\n",
        "desc": "自定义选中项的选择器"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select, Space, RadioGroup, Checkbox, Popup, Tag } from 'tdesign-react';\n\nconst options = [\n  {\n    label: '选项一',\n    value: '1',\n  },\n  {\n    label: '选项二',\n    value: '2',\n  },\n  {\n    label: '选项三',\n    value: '3',\n  },\n];\nconst MultipleSelect = () => {\n  const [value, setValue] = useState(['1', '3']);\n  const [size, setSize] = useState('medium');\n  const [disabled, setDisabled] = useState(false);\n  const [readonly, setReadOnly] = useState(false);\n  const [minCollapsedNum] = useState(1);\n  const onChange = (value) => {\n    setValue(value);\n  };\n  const renderCollapsedItems = ({ collapsedSelectedItems, onClose }) => (\n    <Popup\n      key={'tags'}\n      overlayInnerStyle={{\n        padding: '5px',\n      }}\n      content={\n        <Space size={5} align=\"center\">\n          {collapsedSelectedItems.map((item, index) => (\n            <Tag\n              key={index}\n              size={size}\n              disabled={disabled}\n              closable={!readonly && !disabled}\n              onClose={(context) =>\n                onClose({\n                  e: context.e,\n                  index: minCollapsedNum + index,\n                })\n              }\n            >\n              {item.label}\n            </Tag>\n          ))}\n        </Space>\n      }\n    >\n      <Tag size={size} disabled={disabled}>\n        More({collapsedSelectedItems?.length})\n      </Tag>\n    </Popup>\n  );\n  return (\n    <Space\n      breakLine\n      style={{\n        width: '100%',\n      }}\n    >\n      <h3>default:</h3>\n      <Select\n        value={value}\n        onChange={onChange}\n        multiple\n        style={{\n          width: '40%',\n        }}\n        options={options}\n        minCollapsedNum={1}\n      />\n\n      <h3>use collapsedItems:</h3>\n      <Space align=\"center\">\n        <div>size control:</div>\n        <RadioGroup value={size} options={['small', 'medium', 'large']} onChange={(value) => setSize(value)} />\n      </Space>\n      <Space align=\"center\">\n        <span>disabled control:</span>\n        <Checkbox checked={disabled} onChange={(value) => setDisabled(value)} />\n      </Space>\n      <Space align=\"center\">\n        <span>readonly control:</span>\n        <Checkbox checked={readonly} onChange={(value) => setReadOnly(value)} />\n      </Space>\n      <Select\n        value={value}\n        onChange={onChange}\n        multiple\n        style={{\n          width: '40%',\n        }}\n        options={options}\n        minCollapsedNum={minCollapsedNum}\n        collapsedItems={renderCollapsedItems}\n        size={size}\n        disabled={disabled}\n        readonly={readonly}\n      />\n    </Space>\n  );\n};\nexport default MultipleSelect;\n",
        "desc": "多选情况下，超出该数值的选中项折叠。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select, Space } from 'tdesign-react';\n\nconst { Option } = Select;\nconst FilterableSelect = () => {\n  const [value, setValue] = useState('');\n  const [value2, setValue2] = useState(['1']);\n  const onChange = (value) => {\n    setValue(value);\n  };\n  const onMultipleChange = (value) => {\n    setValue2(value);\n  };\n  const options = [\n    {\n      label: '选项一',\n      value: '1',\n    },\n    {\n      label: '选项二',\n      value: '2',\n    },\n    {\n      label: '选项三',\n      value: '3',\n    },\n  ];\n  const filterMethod = (search, option) => {\n    console.log('search:', search, ', option:', option);\n    return option.label.indexOf(search) !== -1;\n  };\n  const handleBlur = ({ value, e }) => {\n    console.log('handleBlur: ', value, e);\n  };\n  const handleFocus = ({ value, e }) => {\n    console.log('handleFocus: ', value, e);\n  };\n  const handleEnter = (context) => {\n    console.log('handleEnter: ', context);\n  };\n  return (\n    <Space\n      breakLine\n      style={{\n        width: '100%',\n      }}\n    >\n      <Select\n        value={value}\n        onChange={onChange}\n        placeholder=\"-请选择-\"\n        filterable\n        style={{\n          width: '400px',\n          display: 'inline-block',\n        }}\n        onBlur={handleBlur}\n        onFocus={handleFocus}\n        onEnter={handleEnter}\n      >\n        {options.map((option, index) => (\n          <Option key={index} value={option.value} label={option.label}></Option>\n        ))}\n      </Select>\n      <Select\n        value={value2}\n        onChange={onMultipleChange}\n        multiple\n        placeholder=\"-请选择-\"\n        options={options}\n        filterable\n        filter={filterMethod}\n        style={{\n          width: '400px',\n          display: 'inline-block',\n        }}\n        onBlur={handleBlur}\n        onFocus={handleFocus}\n      />\n    </Space>\n  );\n};\nexport default FilterableSelect;\n",
        "desc": "3、仅有时，执行默认过滤 不区分大小写。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select } from 'tdesign-react';\n\nconst RemoteSearchSelect = () => {\n  const [value, setValue] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [options, setOptions] = useState([]);\n  const onChange = (value) => {\n    setValue(value);\n  };\n  const handleRemoteSearch = (search) => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      let options = [];\n      if (search) {\n        options = [\n          {\n            value: `腾讯_test1`,\n            label: `腾讯_test1`,\n          },\n          {\n            value: `腾讯_test2`,\n            label: `腾讯_test2`,\n          },\n          {\n            value: `腾讯_test3`,\n            label: `腾讯_test3`,\n          },\n        ].filter((item) => item.label.includes(search));\n      }\n      setOptions(options);\n    }, 500);\n  };\n  return (\n    <Select\n      filterable\n      value={value}\n      onChange={onChange}\n      style={{\n        width: '40%',\n      }}\n      loading={loading}\n      onSearch={handleRemoteSearch}\n      options={options}\n    />\n  );\n};\nexport default RemoteSearchSelect;\n",
        "desc": "可根据需求定制选择器内容。在有复杂逻辑或有特定诉求的业务场景时使用。 用于  且  时，选中一个选项后保留当前的搜索关键词。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select } from 'tdesign-react';\n\nexport default function SelectCreatable() {\n  const [value, setValue] = useState('');\n  const [options, changeOptions] = useState([\n    {\n      label: '选项一',\n      value: '1',\n    },\n    {\n      label: '选项二',\n      value: '2',\n    },\n    {\n      label: '选项三',\n      value: '3',\n    },\n  ]);\n  const onChange = (value) => {\n    setValue(value);\n  };\n  const handleOnCreate = (value) => {\n    changeOptions(\n      options.concat([\n        {\n          value,\n          label: value,\n        },\n      ]),\n    );\n  };\n  return (\n    <Select\n      value={value}\n      onChange={onChange}\n      style={{\n        width: '40%',\n      }}\n      options={options}\n      filterable\n      creatable\n      onCreate={handleOnCreate}\n    />\n  );\n}\n",
        "desc": "允许用户创建新条目，需配合  使用。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select } from 'tdesign-react';\n\nconst { Option } = Select;\nconst SelectMax = () => {\n  const [value, setValue] = useState(['1']);\n  const onChange = (value) => {\n    setValue(value);\n  };\n  return (\n    <Select\n      value={value}\n      onChange={onChange}\n      multiple\n      style={{\n        width: '40%',\n      }}\n      max={2}\n    >\n      <Option key=\"1\" label=\"选项一\" value=\"1\" />\n      <Option key=\"2\" label=\"选项二\" value=\"2\" />\n      <Option key=\"3\" label=\"选项三\" value=\"3\" />\n    </Select>\n  );\n};\nexport default SelectMax;\n",
        "desc": "限制多选选择器的最大可选数目。通常在需要限制多选可选数目时使用。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select } from 'tdesign-react';\nimport { BrowseIcon } from 'tdesign-icons-react';\n\nconst SelectPrefix = () => {\n  const [value, setValue] = useState('');\n  const onChange = (value) => {\n    setValue(value);\n  };\n  return (\n    <Select\n      value={value}\n      onChange={onChange}\n      style={{\n        width: '40%',\n      }}\n      prefixIcon={\n        <BrowseIcon\n          style={{\n            marginRight: '8px',\n          }}\n        />\n      }\n      options={[\n        {\n          label: '选项一',\n          value: '1',\n        },\n        {\n          label: '选项二',\n          value: '2',\n        },\n        {\n          label: '选项三',\n          value: '3',\n        },\n      ]}\n    />\n  );\n};\nexport default SelectPrefix;\n",
        "desc": "可定制前缀图标。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select } from 'tdesign-react';\n\nconst SelectNoborder = () => {\n  const [value, setValue] = useState('1');\n  const onChange = (value) => {\n    setValue(value);\n  };\n  return (\n    <Select\n      value={value}\n      onChange={onChange}\n      borderless\n      clearable={true}\n      style={{\n        width: '40%',\n      }}\n      options={[\n        {\n          label: '已选择的选项',\n          value: '1',\n        },\n        {\n          label: '短的选项二',\n          value: '2',\n        },\n        {\n          label: '选项内容过长的选择器选项',\n          value: '3',\n        },\n      ]}\n    ></Select>\n  );\n};\nexport default SelectNoborder;\n",
        "desc": "通过文字按钮触发的选择器，用于修改内容。通常在空间受限、并且需要轻量化选择的场景使用。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select, Space } from 'tdesign-react';\n\nconst { Option } = Select;\nconst LabelInValueSelect = () => {\n  const [value, setValue] = useState({\n    label: 'Apple',\n    value: 'apple',\n  });\n  const onChange = (value) => {\n    console.log('Value', value);\n    setValue(value);\n  };\n  const [value2, setValue2] = useState([\n    {\n      text: 'Apple',\n      data: 'apple',\n      type: 'fruit',\n    },\n  ]);\n  const onChange2 = (value) => {\n    console.log('Value', value);\n    setValue2(value);\n  };\n  const [value3, setValue3] = useState({\n    text: 'Apple',\n    data: 'apple',\n    type: 'fruit',\n  });\n  const onChange3 = (value) => {\n    console.log('Value', value);\n    setValue3(value);\n  };\n  return (\n    <Space\n      style={{\n        width: '100%',\n      }}\n    >\n      <Select value={value} onChange={onChange} valueType=\"object\">\n        <Option key=\"apple\" label=\"Apple\" value=\"apple\" />\n        <Option key=\"orange\" label=\"Orange\" value=\"orange\" />\n        <Option key=\"banana\" label=\"Banana\" value=\"banana\" />\n      </Select>\n      <Select\n        value={value3}\n        onChange={onChange3}\n        valueType=\"object\"\n        keys={{\n          label: 'text',\n          value: 'data',\n        }}\n        options={[\n          {\n            text: 'Apple',\n            data: 'apple',\n            type: 'fruit',\n          },\n          {\n            text: 'Orange',\n            data: 'orange',\n            type: 'fruit',\n          },\n          {\n            text: 'Banana',\n            data: 'banana',\n            type: 'fruit',\n          },\n        ]}\n      />\n      <Select\n        value={value2}\n        onChange={onChange2}\n        multiple\n        valueType=\"object\"\n        keys={{\n          label: 'text',\n          value: 'data',\n        }}\n        options={[\n          {\n            text: 'Select All',\n            checkAll: true,\n          },\n          {\n            text: 'Apple',\n            data: 'apple',\n            type: 'fruit',\n          },\n          {\n            text: 'Orange',\n            data: 'orange',\n            type: 'fruit',\n          },\n          {\n            text: 'Banana',\n            data: 'banana',\n            type: 'fruit',\n          },\n        ]}\n      />\n    </Space>\n  );\n};\nexport default LabelInValueSelect;\n",
        "desc": "定制已选项输出值类型。需要输出选中值包含 label 时使用。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select, Space } from 'tdesign-react';\n\nconst SelectPopupProps = () => {\n  const [value, setValue] = useState('1');\n  const onChange = (value) => {\n    setValue(value);\n  };\n  return (\n    <Space>\n      <Select\n        value={value}\n        onChange={onChange}\n        style={{\n          width: '300px',\n          display: 'inline-block',\n        }}\n        options={[\n          {\n            label: '固定300px宽度',\n            value: '1',\n          },\n          {\n            label: '选项内容超长超长超长超长超长超长超长超长超长超长超长的选项',\n            value: '2',\n          },\n        ]}\n      ></Select>\n      <Select\n        value={value}\n        onChange={onChange}\n        style={{\n          width: '300px',\n        }}\n        popupProps={{\n          overlayInnerStyle: {\n            width: '300px',\n          },\n          overlayStyle: {\n            fontWeight: 'normal',\n          },\n          overlayClassName: 'select-custom-overlay-class',\n          overlayInnerClassName: 'select-custom-overlay-inner-class',\n        }}\n        options={[\n          {\n            label: '下拉框强制和输入框同宽',\n            value: '1',\n          },\n          {\n            label: '选项内容超长超长超长超长超长超长超长超长超长超长超长的选项',\n            value: '2',\n          },\n        ]}\n      ></Select>\n    </Space>\n  );\n};\nexport default SelectPopupProps;\n",
        "desc": "下拉框宽度默认和输入框宽度同宽，如果内容宽度超出会自动变宽。可使用  自由控制宽度。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Select } from 'tdesign-react';\n\nconst options = [];\nfor (let i = 0; i < 15; i++) {\n  options.push({\n    label: `选项${i + 1}`,\n    value: String(i),\n  });\n}\nexport default function ScrollBottom() {\n  const [dynamicOptions, changeDynamicOptions] = useState(options);\n\n  // 通过滚动事件自行判断\n  // const handleScroll = ({ e }) => {\n  //   const { scrollTop, clientHeight, scrollHeight } = e.target;\n  //   if (clientHeight + Math.floor(scrollTop) === scrollHeight) {\n  //     console.log('到底部了');\n  //     changeDynamicOptions((dynamicOptions) =>\n  //       dynamicOptions.concat({\n  //         label: `滚动新增选项${dynamicOptions.length}`,\n  //         value: dynamicOptions.length,\n  //       }),\n  //     );\n  //   }\n  // };\n\n  // 直接使用滚动触底事件\n  const handleScrollToBottom = () => {\n    changeDynamicOptions((dynamicOptions) =>\n      dynamicOptions.concat({\n        label: `滚动新增选项${dynamicOptions.length}`,\n        value: dynamicOptions.length,\n      }),\n    );\n  };\n  return (\n    <Select\n      style={{\n        width: '40%',\n      }}\n      clearable\n      options={dynamicOptions}\n      popupProps={{\n        // onScroll: handleScroll,\n        onScrollToBottom: handleScrollToBottom,\n      }}\n    />\n  );\n}\n",
        "desc": "业务中常常有选项通过滚动触底持续加载的需求，通过或，可以快速实现滚动加载选项的能力。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Space, Select, Input, Divider } from 'tdesign-react';\n\nconst { Option } = Select;\nconst options = [];\nfor (let i = 0; i < 10000; i++) {\n  options.push({\n    label: `选项${i + 1}`,\n    value: String(i),\n  });\n}\nfunction VirtualScroll() {\n  const [currentOptions, setCurrentOptions] = useState(options);\n  const handleOnSearch = (v) => {\n    const filteredOptions = options.filter((item) => item.label.indexOf(v) !== -1);\n    setCurrentOptions(filteredOptions);\n  };\n  return (\n    <Space>\n      {/* 开启虚拟滚动 请为select的panel设定好height 通过popupProps进行透传  */}\n      <Select\n        options={currentOptions}\n        style={{\n          width: '300px',\n        }}\n        scroll={{\n          type: 'virtual',\n        }}\n        popupProps={{\n          overlayInnerStyle: {\n            height: '300px',\n          },\n        }}\n        panelTopContent={\n          <div\n            style={{\n              position: 'sticky',\n              backgroundColor: 'var(--td-bg-color-container)',\n              top: 0,\n              zIndex: 10,\n              padding: 6,\n            }}\n          >\n            <Input\n              placeholder=\"请输入关键词搜索\"\n              onChange={handleOnSearch}\n              style={{\n                width: 'calc(100% - 4px)',\n                margin: '0 auto',\n              }}\n            />\n            <Divider\n              style={{\n                margin: '8px 0 0',\n              }}\n            />\n          </div>\n        }\n      />\n      <Select\n        options={options}\n        style={{\n          width: '300px',\n        }}\n        scroll={{\n          type: 'virtual',\n        }}\n        popupProps={{\n          overlayInnerStyle: {\n            height: '300px',\n          },\n        }}\n      >\n        {options.map((item, index) => (\n          <Option key={index} label={item.label} value={item.value}></Option>\n        ))}\n      </Select>\n    </Space>\n  );\n}\nexport default VirtualScroll;\n",
        "desc": "虚拟滚动一般用于数据量较大的场景，设置  即可开启虚拟滚动模式，通过  预设加载过程中提前加载的数据数量。为保证组件收益最大化，当数据量小于  时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动， 默认为 。"
      }
    ]
  },
  {
    "name": "<SelectInput/>",
    "demoCode": [
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { SelectInput } from 'tdesign-react';\nimport { ChevronDownIcon } from 'tdesign-icons-react';\n\nconst classStyles = `\n<style>\n.tdesign-demo__select-input-ul-single {\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  gap: 2px;\n}\n.tdesign-demo__select-input-ul-single > li {\n  display: block;\n  border-radius: 3px;\n  line-height: 22px;\n  cursor: pointer;\n  padding: 3px 8px;\n  color: var(--td-text-color-primary);\n  transition: background-color 0.2s linear;\n  white-space: nowrap;\n  word-wrap: normal;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tdesign-demo__select-input-ul-single > li:hover {\n  background-color: var(--td-bg-color-container-hover);\n}\n</style>\n`;\nconst OPTIONS = [\n  {\n    label: 'tdesign-vue',\n    value: 1,\n  },\n  {\n    label: 'tdesign-react',\n    value: 2,\n  },\n  {\n    label: 'tdesign-miniprogram',\n    value: 3,\n  },\n  {\n    label: 'tdesign-angular',\n    value: 4,\n  },\n  {\n    label: 'tdesign-mobile-vue',\n    value: 5,\n  },\n  {\n    label: 'tdesign-mobile-react',\n    value: 6,\n  },\n];\nexport default function SelectInputSingle() {\n  // const selectValue = useState('tdesign-vue');\n  const [selectValue, setSelectValue] = useState({\n    label: 'tdesign-vue',\n    value: 1,\n  });\n  // const selectValue = useState([{ label: 'tdesign-vue', value: 1 }]);\n\n  const [popupVisible, setPopupVisible] = useState(false);\n  const onOptionClick = (item) => {\n    setSelectValue(item);\n    // 选中后立即关闭浮层\n    setPopupVisible(false);\n  };\n  const onClear = () => {\n    setSelectValue(undefined);\n  };\n  const onPopupVisibleChange = (val, context) => {\n    console.log(context);\n    setPopupVisible(val);\n  };\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  return (\n    <div>\n      <SelectInput\n        value={selectValue}\n        popupVisible={popupVisible}\n        style={{\n          width: '300px',\n        }}\n        placeholder=\"Please Select\"\n        clearable\n        allowInput\n        popupProps={{\n          overlayInnerStyle: {\n            padding: 6,\n          },\n          overlayStyle: {\n            fontWeight: 'normal',\n          },\n          overlayClassName: 'select-custom-overlay-class',\n          overlayInnerClassName: 'select-custom-overlay-inner-class',\n        }}\n        onPopupVisibleChange={onPopupVisibleChange}\n        onClear={onClear}\n        panel={\n          <ul className=\"tdesign-demo__select-input-ul-single\">\n            {OPTIONS.map((item) => (\n              <li key={item.value} onClick={() => onOptionClick(item)}>\n                {item.label}\n              </li>\n            ))}\n          </ul>\n        }\n        suffixIcon={<ChevronDownIcon />}\n      />\n    </div>\n  );\n}\n",
        "desc": "可使用  自由定制任何风格的单选选择器。"
      },
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { SelectInput, Radio, Checkbox } from 'tdesign-react';\nimport { ChevronDownIcon } from 'tdesign-icons-react';\n\nconst classStyles = `\n<style>\n.tdesign-demo__panel-options-multiple {\n  width: 100%;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n}\n.tdesign-demo__panel-options-multiple .t-checkbox {\n  display: flex;\n  border-radius: 3px;\n  line-height: 22px;\n  cursor: pointer;\n  padding: 3px 8px;\n  color: var(--td-text-color-primary);\n  transition: background-color 0.2s linear;\n  white-space: nowrap;\n  word-wrap: normal;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin: 0;\n}\n.tdesign-demo__panel-options-multiple .t-checkbox:hover {\n  background-color: var(--td-bg-color-container-hover);\n}\n</style>\n`;\nconst OPTIONS = [\n  // 全选\n  {\n    label: 'Check All',\n    checkAll: true,\n  },\n  {\n    label: 'tdesign-vue',\n    value: 1,\n  },\n  {\n    label: 'tdesign-react',\n    value: 2,\n  },\n  {\n    label: 'tdesign-miniprogram',\n    value: 3,\n  },\n  {\n    label: 'tdesign-angular',\n    value: 4,\n  },\n  {\n    label: 'tdesign-mobile-vue',\n    value: 5,\n  },\n  {\n    label: 'tdesign-mobile-react',\n    value: 6,\n  },\n];\nexport default function SelectInputMultiple() {\n  const [excessTagsDisplayType, setExcessTagsDisplayType] = useState('break-line');\n  const [allowInput, setAllowInput] = useState(true);\n  const [creatable, setCreatable] = useState(true);\n  const [inputValue, setInputValue] = useState('');\n  // 全量数据\n  const [options, setOptions] = useState([...OPTIONS]);\n  // 仅用作展示的数据（过滤功能需要使用）\n  const [displayOptions, setDisplayOptions] = useState([...OPTIONS]);\n  const [value, setValue] = useState([\n    {\n      label: 'Vue',\n      value: 1,\n    },\n    {\n      label: 'React',\n      value: 2,\n    },\n    {\n      label: 'Miniprogram',\n      value: 3,\n    },\n  ]);\n  const getCheckboxValue = () => {\n    const arr = [];\n    const list = value;\n    // 此处不使用 forEach，减少函数迭代\n    for (let i = 0, len = list.length; i < len; i++) {\n      list[i].value && arr.push(list[i].value);\n    }\n    return arr;\n  };\n  const checkboxValue = getCheckboxValue();\n\n  // 直接 checkboxgroup 组件渲染输出下拉选项，自定义处理可以避免顺序和 tagChange 冲突\n  const onCheckedChange = (val, { current, type }) => {\n    // current 不存在，则表示操作全选\n    if (!current) {\n      const newValue = type === 'check' ? options.slice(1) : [];\n      setValue(newValue);\n      return;\n    }\n    // 普通操作\n    if (type === 'check') {\n      const option = options.find((t) => t.value === current);\n      setValue(value.concat(option));\n    } else {\n      const newValue = value.filter((v) => v.value !== current);\n      setValue(newValue);\n    }\n  };\n\n  // 可以根据触发来源，自由定制标签变化时的筛选器行为\n  const onTagChange = (currentTags, context) => {\n    const { trigger, index } = context;\n    if (trigger === 'clear') {\n      setValue([]);\n    }\n    if (['tag-remove', 'backspace'].includes(trigger)) {\n      const newValue = [...value];\n      newValue.splice(index, 1);\n      setValue(newValue);\n    }\n  };\n  const onInputChange = (val, context) => {\n    setInputValue(val);\n    // 过滤功能\n    console.log(val, context);\n  };\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  const onInputEnter = (_, { inputValue }) => {\n    // 如果允许创建新条目\n    if (creatable) {\n      const current = {\n        label: inputValue,\n        value: inputValue,\n      };\n      const newValue = [...value];\n      setValue(newValue.concat(current));\n      const newOptions = options.concat(current);\n      setOptions(newOptions);\n      setDisplayOptions(newOptions);\n      setInputValue('');\n    }\n  };\n  return (\n    <div\n      className=\"tdesign-demo__select-input-multiple\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <div>\n        <Checkbox checked={allowInput} onChange={setAllowInput}>\n          是否允许输入\n        </Checkbox>\n        <Checkbox checked={creatable} onChange={setCreatable}>\n          允许创建新选项（Enter 创建）\n        </Checkbox>\n      </div>\n      <br />\n      <div>\n        <Radio.Group\n          value={excessTagsDisplayType}\n          onChange={(val) => setExcessTagsDisplayType(val)}\n          options={[\n            {\n              label: '选中项过多横向滚动',\n              value: 'scroll',\n            },\n            {\n              label: '选中项过多换行显示',\n              value: 'break-line',\n            },\n          ]}\n        />\n      </div>\n      <br />\n      <br />\n\n      {/* <!-- :popup-props=\"{ trigger: 'hover' }\" --> */}\n      <SelectInput\n        value={value}\n        allowInput={allowInput}\n        inputValue={inputValue}\n        placeholder={allowInput ? '请选择或输入' : '请选择'}\n        tagInputProps={{\n          excessTagsDisplayType,\n        }}\n        popupProps={{\n          overlayStyle: {\n            maxHeight: '280px',\n            overflow: 'auto',\n          },\n        }}\n        // label={<span>多选：</span>}\n        panel={\n          displayOptions.length ? (\n            <Checkbox.Group\n              value={checkboxValue}\n              options={displayOptions}\n              className=\"tdesign-demo__panel-options-multiple\"\n              onChange={onCheckedChange}\n            />\n          ) : (\n            <div className=\"tdesign-demo__select-empty-multiple\">暂无数据</div>\n          )\n        }\n        suffixIcon={<ChevronDownIcon />}\n        clearable\n        multiple\n        onTagChange={onTagChange}\n        onInputChange={onInputChange}\n        onEnter={onInputEnter}\n      />\n    </div>\n  );\n}\n",
        "desc": "可使用  自由定制任何风格的多选选择器。"
      },
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { SelectInput } from 'tdesign-react';\nimport { SearchIcon } from 'tdesign-icons-react';\n\nconst classStyles = `\n<style>\n.tdesign-demo__select-input-ul-autocomplete {\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n}\n.tdesign-demo__select-input-ul-autocomplete > li {\n  display: block;\n  border-radius: 3px;\n  line-height: 22px;\n  cursor: pointer;\n  padding: 3px 8px;\n  color: var(--td-text-color-primary);\n  transition: background-color 0.2s linear;\n  white-space: nowrap;\n  word-wrap: normal;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tdesign-demo__select-input-ul-autocomplete > li:hover {\n  background-color: var(--td-bg-color-container-hover);\n}\n</style>\n`;\nconst OPTIONS = ['Student A', 'Student B', 'Student C', 'Student D', 'Student E', 'Student F'];\nexport default function SelectInputAutocomplete() {\n  const [popupVisible, setPopupVisible] = useState(false);\n  const [selectValue, setSelectValue] = useState('');\n  const [options, setOptions] = useState(OPTIONS);\n  const onOptionClick = (item) => {\n    setSelectValue(item);\n    setPopupVisible(false);\n  };\n  const onInputChange = (keyword) => {\n    setSelectValue(keyword);\n    const options = new Array(5).fill(null).map((t, index) => `${keyword} Student ${index}`);\n    setOptions(options);\n  };\n  const onPopupVisibleChange = (val) => {\n    setPopupVisible(val);\n  };\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n\n  // 如果需要输入框宽度自适应，可以使用 autoWidth\n  return (\n    <div>\n      <SelectInput\n        value={selectValue}\n        popupVisible={popupVisible}\n        placeholder=\"请输入任意关键词\"\n        allowInput\n        clearable\n        style={{\n          width: '300px',\n        }}\n        onInputChange={onInputChange}\n        onPopupVisibleChange={onPopupVisibleChange}\n        panel={\n          <ul className=\"tdesign-demo__select-input-ul-autocomplete\">\n            {options.map((item) => (\n              <li key={item} onClick={() => onOptionClick(item)}>\n                {item}\n              </li>\n            ))}\n          </ul>\n        }\n        suffixIcon={<SearchIcon />}\n      />\n    </div>\n  );\n}\n",
        "desc": "可使用  自由定制任何风格的自动填充筛选器。"
      },
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { SelectInput } from 'tdesign-react';\nimport { ChevronDownIcon } from 'tdesign-icons-react';\n\nconst classStyles = `\n\n<style>\n.tdesign-demo__select-input-ul-label-suffix {\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n}\n.tdesign-demo__select-input-ul-label-suffix > li {\n  display: block;\n  border-radius: 3px;\n  line-height: 22px;\n  cursor: pointer;\n  padding: 3px 8px;\n  color: var(--td-text-color-primary);\n  transition: background-color 0.2s linear;\n  white-space: nowrap;\n  word-wrap: normal;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tdesign-demo__select-input-ul-label-suffix > li:hover {\n  background-color: var(--td-bg-color-container-hover);\n}\n</style>\n`;\nconst OPTIONS = [\n  {\n    label: 'tdesign-vue',\n    value: 1,\n  },\n  {\n    label: 'tdesign-react',\n    value: 2,\n  },\n  {\n    label: 'tdesign-miniprogram',\n    value: 3,\n  },\n  {\n    label: 'tdesign-angular',\n    value: 4,\n  },\n  {\n    label: 'tdesign-mobile-vue',\n    value: 5,\n  },\n  {\n    label: 'tdesign-mobile-react',\n    value: 6,\n  },\n];\nexport default function SelectInputSingle() {\n  // const selectValue = useState('tdesign-vue');\n  const [selectValue, setSelectValue] = useState({\n    label: 'tdesign-vue',\n    value: 1,\n  });\n  // const selectValue = useState([{ label: 'tdesign-vue', value: 1 }]);\n\n  const [popupVisible, setPopupVisible] = useState(false);\n  const [popupVisible2, setPopupVisible2] = useState(false);\n  const onOptionClick = (item) => {\n    setSelectValue(item);\n    // 选中后立即关闭浮层\n    setPopupVisible(false);\n    setPopupVisible2(false);\n  };\n  const onClear = () => {\n    setSelectValue(undefined);\n  };\n  const onPopupVisibleChange = (val, context) => {\n    console.log(context);\n    setPopupVisible(val);\n  };\n  const onPopupVisibleChange2 = (val) => {\n    setPopupVisible2(val);\n  };\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  return (\n    <div>\n      {/* <!-- :popup-props=\"{ trigger: 'hover' }\" --> */}\n      <SelectInput\n        value={selectValue}\n        popupVisible={popupVisible}\n        style={{\n          width: '300px',\n        }}\n        label={<span>前置内容：</span>}\n        placeholder=\"Please Select\"\n        clearable\n        popupProps={{\n          overlayInnerStyle: {\n            padding: 6,\n          },\n        }}\n        onPopupVisibleChange={onPopupVisibleChange}\n        onClear={onClear}\n        panel={\n          <ul className=\"tdesign-demo__select-input-ul-label-suffix\">\n            {OPTIONS.map((item) => (\n              <li key={item.value} onClick={() => onOptionClick(item)}>\n                {item.label}\n              </li>\n            ))}\n          </ul>\n        }\n        suffixIcon={<ChevronDownIcon />}\n      />\n      <br /> <br />\n      <SelectInput\n        value={selectValue}\n        popupVisible={popupVisible2}\n        style={{\n          width: '300px',\n        }}\n        suffix={<span>单位：元</span>}\n        placeholder=\"Please Select\"\n        clearable\n        popupProps={{\n          overlayInnerStyle: {\n            padding: 6,\n          },\n        }}\n        onPopupVisibleChange={onPopupVisibleChange2}\n        onClear={onClear}\n        panel={\n          <ul className=\"tdesign-demo__select-input-ul-label-suffix\">\n            {OPTIONS.map((item) => (\n              <li key={item.value} onClick={() => onOptionClick(item)}>\n                {item.label}\n              </li>\n            ))}\n          </ul>\n        }\n        suffixIcon={<ChevronDownIcon />}\n      />\n    </div>\n  );\n}\n",
        "desc": "前置内容使用  自定义。后置内容使用  自定义。前置图标使用  自定义。后置图标使用  自定义。"
      },
      {
        "code": "import React, { useEffect } from 'react';\nimport { SelectInput, Space } from 'tdesign-react';\n\nconst classStyles = `\n<style>\n.tdesign-demo__select-empty-status {\n  text-align: center;\n  color: var(--td-text-color-disabled);\n  line-height: 32px;\n}\n.tdesign-demo-select-input-status > div {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.tdesign-demo-select-input-status .t-select-input__wrap {\n  width: 300px;\n  height: 32px;\n}\n</style>\n`;\nconst SelectInputStatus = () => {\n  const selectValue = 'TDesign';\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  return (\n    <Space direction=\"vertical\" size={32}>\n      <Space>\n        <span>禁用状态：</span>\n        <SelectInput\n          value={selectValue}\n          disabled\n          placeholder=\"Please Select\"\n          tips=\"这是禁用状态的文本\"\n          panel={<div className=\"tdesign-demo__select-empty\">暂无数据</div>}\n        />\n      </Space>\n\n      <Space>\n        <span>只读状态：</span>\n        <SelectInput\n          value={selectValue}\n          readonly\n          placeholder=\"Please Select\"\n          tips=\"这是只读状态的文本提示\"\n          panel={<div className=\"tdesign-demo__select-empty-status\">暂无数据</div>}\n        />\n      </Space>\n\n      <Space>\n        <span>成功状态：</span>\n        <SelectInput\n          value={selectValue}\n          status=\"success\"\n          tips=\"校验通过文本提示\"\n          placeholder=\"Please Select\"\n          panel={<div className=\"tdesign-demo__select-empty-status\">暂无数据</div>}\n        />\n      </Space>\n\n      <Space>\n        <span>警告状态：</span>\n        <SelectInput\n          value={selectValue}\n          status=\"warning\"\n          tips=\"校验不通过文本提示\"\n          placeholder=\"Please Select\"\n          panel={<div className=\"tdesign-demo__select-empty-status\">暂无数据</div>}\n        />\n      </Space>\n\n      <Space>\n        <span>错误状态：</span>\n        <SelectInput\n          value={selectValue}\n          status=\"error\"\n          tips=\"校验存在严重问题文本提示\"\n          placeholder=\"Please Select\"\n          panel={<div className=\"tdesign-demo__select-empty-status\">暂无数据</div>}\n        />\n      </Space>\n\n      <Space>\n        <span>加载状态：</span>\n        <SelectInput\n          loading={true}\n          tips=\"处于加载状态的文本提示\"\n          placeholder=\"Please Select\"\n          panel={<div className=\"tdesign-demo__select-empty-status\">加载中...</div>}\n        />\n      </Space>\n    </Space>\n  );\n};\nSelectInputStatus.displayName = 'SelectInputStatus';\nexport default SelectInputStatus;\n",
        "desc": "使用  和  控制状态和提示文案。"
      },
      {
        "code": "import React, { useEffect } from 'react';\nimport { SelectInput } from 'tdesign-react';\n\nconst classStyles = `\n<style>\n.tdesign-demo__select-empty-width {\n  text-align: center;\n  color: var(--td-text-color-disabled);\n  line-height: 32px;\n}\n.tdesign-demo__select-input-width .t-input__wrap {\n  width: 380px;\n  vertical-align: middle;\n  display: inline-flex;\n}\n\n.tdesign-demo__select-input-width .t-demo-normal {\n  width: 380px;\n  vertical-align: middle;\n  display: inline-flex;\n}\n</style>\n`;\nconst SelectInputWidth = () => {\n  const selectValue = 'TDesign';\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  return (\n    <div className=\"tdesign-demo__select-input-width\">\n      <div>\n        <span>下拉框默认宽度：</span>\n        <SelectInput\n          value={selectValue}\n          placeholder=\"Please Select\"\n          className=\"t-demo-normal\"\n          panel={<div className=\"tdesign-demo__select-empty-width\">下拉框宽度和触发元素宽度保持一致（默认）</div>}\n        ></SelectInput>\n      </div>\n      <br />\n\n      <div>\n        <span>下拉框最大宽度：</span>\n        <SelectInput\n          value={selectValue}\n          placeholder=\"Please Select\"\n          className=\"t-demo-normal\"\n          panel={\n            <div className=\"tdesign-demo__select-empty-width\">\n              下拉框宽度和触发元素宽度保持一致，但是当下拉框内容宽度超出时，自动撑开下拉框宽度，最大不超过\n              1000px（默认）\n            </div>\n          }\n        ></SelectInput>\n      </div>\n      <br />\n\n      <div>\n        <span>与内容宽度一致：</span>\n        <SelectInput\n          value={selectValue}\n          popupProps={{\n            overlayInnerStyle: {\n              width: 'auto',\n            },\n          }}\n          placeholder=\"Please Select\"\n          className=\"t-demo-normal\"\n          panel={<div className=\"tdesign-demo__select-empty-width\">宽度随内容宽度自适应</div>}\n        ></SelectInput>\n      </div>\n      <br />\n\n      <div>\n        <span>下拉框固定宽度：</span>\n        <SelectInput\n          value={selectValue}\n          popupProps={{\n            overlayInnerStyle: {\n              width: '360px',\n            },\n          }}\n          placeholder=\"Please Select\"\n          className=\"t-demo-normal\"\n          panel={<div className=\"tdesign-demo__select-empty-width\">固定宽度 360px</div>}\n        ></SelectInput>\n      </div>\n      <br />\n    </div>\n  );\n};\nSelectInputWidth.displayName = 'SelectInputWidth';\nexport default SelectInputWidth;\n",
        "desc": "下拉框宽度规则：下拉框宽度默认和触发元素宽度保持同宽，如果下拉框宽度超出输入框组件会自动撑开下拉框宽度，但最大宽度不超过 。也可以通过  自由设置下拉框宽度。 类型为函数时，可以更灵活地动态控制下拉框宽度。"
      },
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { SelectInput, Checkbox } from 'tdesign-react';\n\nconst classStyles = `\n<style>\n.tdesign-demo__panel-options-excess-tags-display-type {\n  width: 100%;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n}\n.tdesign-demo__panel-options-excess-tags-display-type .t-checkbox {\n  display: flex;\n  border-radius: 3px;\n  line-height: 22px;\n  cursor: pointer;\n  padding: 3px 8px;\n  color: var(--td-text-color-primary);\n  transition: background-color 0.2s linear;\n  white-space: nowrap;\n  word-wrap: normal;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-right: 0;\n}\n\n.tdesign-demo__panel-options-excess-tags-display-type .t-checkbox:hover {\n  background-color: var(--td-bg-color-container-hover);\n}\n</style>\n`;\nconst OPTIONS = [\n  // 全选\n  {\n    label: 'Check All',\n    checkAll: true,\n  },\n  {\n    label: 'tdesign-vue',\n    value: 1,\n  },\n  {\n    label: 'tdesign-react',\n    value: 2,\n  },\n  {\n    label: 'tdesign-miniprogram',\n    value: 3,\n  },\n  {\n    label: 'tdesign-angular',\n    value: 4,\n  },\n  {\n    label: 'tdesign-mobile-vue',\n    value: 5,\n  },\n  {\n    label: 'tdesign-mobile-react',\n    value: 6,\n  },\n];\nexport default function SelectInputExcessTagsDisplayType() {\n  const [options, setOptions] = useState([...OPTIONS]);\n  const [value, setValue] = useState(OPTIONS.slice(1));\n  const checkboxValue = (() => {\n    const arr = [];\n    const list = value;\n    // 此处不使用 forEach，减少函数迭代\n    for (let i = 0, len = list.length; i < len; i++) {\n      list[i].value && arr.push(list[i].value);\n    }\n    return arr;\n  })();\n\n  // 直接 checkboxgroup 组件渲染输出下拉选项，自定义处理可以避免顺序和 tagChange 冲突\n  const onCheckedChange = (val, { current, type }) => {\n    // current 不存在，则表示操作全选\n    if (!current) {\n      const newValue = type === 'check' ? options.slice(1) : [];\n      setValue(newValue);\n      return;\n    }\n    // 普通操作\n    if (type === 'check') {\n      const option = options.find((t) => t.value === current);\n      setValue(value.concat(option));\n    } else {\n      const newValue = value.filter((v) => v.value !== current);\n      setValue(newValue);\n    }\n  };\n\n  // 可以根据触发来源，自由定制标签变化时的筛选器行为\n  const onTagChange = (currentTags, context) => {\n    const { trigger, index, item } = context;\n    if (trigger === 'clear') {\n      setValue([]);\n    }\n    if (['tag-remove', 'backspace'].includes(trigger)) {\n      const newValue = [...value];\n      newValue.splice(index, 1);\n      setValue(newValue);\n    }\n    // 如果允许创建新条目\n    if (trigger === 'enter') {\n      const current = {\n        label: item,\n        value: item,\n      };\n      const newValue = [...value];\n      setValue(newValue.concat(current));\n      setOptions(options.concat(current));\n    }\n  };\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  return (\n    <div\n      className=\"tdesign-demo__select-input-excess-tags-display-type\"\n      style={{\n        width: 'width: 100%',\n      }}\n    >\n      {/* <!-- excessTagsDisplayType: 'scroll'，超出时，滚动显示 --> */}\n      <p>第一种呈现方式：超出时滚动显示</p>\n      <br />\n      <SelectInput\n        value={value}\n        tagInputProps={{\n          excessTagsDisplayType: 'scroll',\n        }}\n        placeholder=\"请选择\"\n        allowInput\n        clearable\n        multiple\n        onTagChange={onTagChange}\n        panel={\n          <Checkbox.Group\n            value={checkboxValue}\n            options={options}\n            className=\"tdesign-demo__panel-options-excess-tags-display-type\"\n            onChange={onCheckedChange}\n          />\n        }\n      />\n\n      <br />\n      <br />\n      <br />\n\n      {/* <!-- excessTagsDisplayType: 'scroll'，超出时，换行显示 --> */}\n      <p>第二种呈现方式：超出时换行显示</p>\n      <br />\n      <SelectInput\n        value={value}\n        tagInputProps={{\n          excessTagsDisplayType: 'break-line',\n        }}\n        placeholder=\"请选择\"\n        allowInput\n        clearable\n        multiple\n        onTagChange={onTagChange}\n        panel={\n          <Checkbox.Group\n            value={checkboxValue}\n            options={options}\n            className=\"tdesign-demo__panel-options-excess-tags-display-type\"\n            onChange={onCheckedChange}\n          />\n        }\n      />\n    </div>\n  );\n}\n",
        "desc": "使用  控制标签超出时的呈现方式：横向滚动显示和换行显示，默认为换行显示。"
      },
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { SelectInput, Checkbox, Tag, Space } from 'tdesign-react';\nimport { ChevronDownIcon } from 'tdesign-icons-react';\n\nconst classStyles = `\n<style>\n.tdesign-demo__panel-options-collapsed-items {\n  width: 100%;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n}\n.tdesign-demo__panel-options-collapsed-items .t-checkbox {\n  display: flex;\n  border-radius: 3px;\n  line-height: 22px;\n  cursor: pointer;\n  padding: 3px 8px;\n  color: var(--td-text-color-primary);\n  transition: background-color 0.2s linear;\n  white-space: nowrap;\n  word-wrap: normal;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin: 0;\n}\n\n.tdesign-demo__panel-options-collapsed-items .t-checkbox:hover {\n  background-color: var(--td-bg-color-container-hover);\n}\n</style>\n`;\nconst OPTIONS = [\n  // 全选\n  {\n    label: 'Check All',\n    checkAll: true,\n  },\n  {\n    label: 'tdesign-vue',\n    value: 1,\n  },\n  {\n    label: 'tdesign-react',\n    value: 2,\n  },\n  {\n    label: 'tdesign-miniprogram',\n    value: 3,\n  },\n  {\n    label: 'tdesign-angular',\n    value: 4,\n  },\n  {\n    label: 'tdesign-mobile-vue',\n    value: 5,\n  },\n  {\n    label: 'tdesign-mobile-react',\n    value: 6,\n  },\n];\nexport default function SelectInputCollapsedItems() {\n  const [options, setOptions] = useState([...OPTIONS]);\n  const [value, setValue] = useState(OPTIONS.slice(1));\n  const getCheckboxValue = () => {\n    const arr = [];\n    const list = value;\n    // 此处不使用 forEach，减少函数迭代\n    for (let i = 0, len = list.length; i < len; i++) {\n      list[i].value && arr.push(list[i].value);\n    }\n    return arr;\n  };\n  const checkboxValue = getCheckboxValue();\n\n  // 直接 checkboxgroup 组件渲染输出下拉选项，自定义处理可以避免顺序和 tagChange 冲突\n  const onCheckedChange = (val, { current, type }) => {\n    // current 不存在，则表示操作全选\n    if (!current) {\n      const newValue = type === 'check' ? options.slice(1) : [];\n      setValue(newValue);\n      return;\n    }\n    // 普通操作\n    if (type === 'check') {\n      const option = options.find((t) => t.value === current);\n      setValue(value.concat(option));\n    } else {\n      const newValue = value.filter((v) => v.value !== current);\n      setValue(newValue);\n    }\n  };\n\n  // 可以根据触发来源，自由定制标签变化时的筛选器行为\n  const onTagChange = (currentTags, context) => {\n    const { trigger, index, item } = context;\n    if (trigger === 'clear') {\n      setValue([]);\n    }\n    if (['tag-remove', 'backspace'].includes(trigger)) {\n      const newValue = [...value];\n      newValue.splice(index, 1);\n      setValue(newValue);\n    }\n    // 如果允许创建新条目\n    if (trigger === 'enter') {\n      const current = {\n        label: item,\n        value: item,\n      };\n      const newValue = [...value];\n      setValue(newValue.concat(current));\n      setOptions(options.concat(current));\n    }\n  };\n  const CheckboxPanel = (\n    <Checkbox.Group\n      value={checkboxValue}\n      options={options}\n      className=\"tdesign-demo__panel-options-collapsed-items\"\n      onChange={onCheckedChange}\n    />\n  );\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  const handleCollapsedItems = ({ collapsedSelectedItems }) => {\n    if (Array.isArray(collapsedSelectedItems)) {\n      return <Tag key={'More'}>More(+{collapsedSelectedItems.length})</Tag>;\n    }\n    return null;\n  };\n  return (\n    <Space direction=\"vertical\" className=\"tdesign-demo__select-input-collapsed-items\">\n      {/* <!-- :popup-props=\"{ trigger: 'hover' }\" --> */}\n      <SelectInput\n        value={value}\n        minCollapsedNum={1}\n        panel={CheckboxPanel}\n        suffixIcon={<ChevronDownIcon key=\"suffixIcon\" />}\n        clearable\n        multiple\n        onTagChange={onTagChange}\n      />\n      <br /> <br />\n      {/* 使用 collapsedItems 自定义折叠标签 */}\n      <SelectInput\n        value={value}\n        minCollapsedNum={2}\n        panel={CheckboxPanel}\n        suffixIcon={<ChevronDownIcon key=\"suffixIcon\" />}\n        collapsedItems={handleCollapsedItems}\n        clearable\n        multiple\n        onTagChange={onTagChange}\n      />\n    </Space>\n  );\n}\n",
        "desc": "选中项数量超过  时会被折叠，可使用  自定义折叠选项中的呈现方式。"
      },
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { SelectInput, Tag } from 'tdesign-react';\nimport { ControlPlatformIcon } from 'tdesign-icons-react';\n\nconst classStyles = `\n<style>\n.tdesign-demo__select-input-ul-single {\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n}\n.tdesign-demo__select-input-ul-single > li {\n  display: block;\n  border-radius: 3px;\n  line-height: 22px;\n  cursor: pointer;\n  padding: 3px 8px;\n  color: var(--td-text-color-primary);\n  transition: background-color 0.2s linear;\n  white-space: nowrap;\n  word-wrap: normal;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tdesign-demo__select-input-ul-single > li:hover {\n  background-color: var(--td-bg-color-container-hover);\n}\n\n.tdesign-demo-select-input-custom-tag .tdesign-demo-select-input__img {\n  font-size: 16px;\n  margin-right: 4px;\n}\n\n.tdesign-demo__select-empty-custom {\n  text-align: center;\n  color: var(--td-text-color-disabled);\n  line-height: 32px;\n}\n.displaySpan {\n  line-height: 24px;\n}\n</style>\n`;\nconst OPTIONS = [\n  {\n    label: 'tdesign-vue',\n    value: 1,\n  },\n  {\n    label: 'tdesign-react',\n    value: 2,\n  },\n  {\n    label: 'tdesign-miniprogram',\n    value: 3,\n  },\n  {\n    label: 'tdesign-angular',\n    value: 4,\n  },\n  {\n    label: 'tdesign-mobile-vue',\n    value: 5,\n  },\n  {\n    label: 'tdesign-mobile-react',\n    value: 6,\n  },\n];\nconst SelectInputCustomTag = () => {\n  const [selectValue1, setSelectValue1] = useState({\n    label: 'tdesign-vue',\n    value: 1,\n  });\n  const [selectValue2, setSelectValue2] = useState(['tdesign-vue', 'tdesign-react']);\n  const [selectValue3, setSelectValue3] = useState(['tdesign-vue', 'tdesign-react', 'tdesign-mobile-vue']);\n  const onOptionClick = (item) => {\n    setSelectValue1(item);\n  };\n  const onClear = () => {\n    setSelectValue1(undefined);\n  };\n  const onTagChange2 = (val) => {\n    setSelectValue2(val);\n  };\n  const onTagChange3 = (val) => {\n    setSelectValue3(val);\n  };\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  return (\n    <div className=\"tdesign-demo-select-input-custom-tag\">\n      {/* <!-- 单选，使用 valueDisplay 定义选中的某一项的内容 --> */}\n      <SelectInput\n        value={selectValue1}\n        placeholder=\"Please Select\"\n        clearable\n        valueDisplay={\n          selectValue1 && (\n            <span className=\"displaySpan\">\n              <ControlPlatformIcon className=\"tdesign-demo-select-input__img\" />\n              {selectValue1.label}\n            </span>\n          )\n        }\n        panel={\n          <ul className=\"tdesign-demo__select-input-ul-single\">\n            {OPTIONS.map((item) => (\n              <li key={item.value} onClick={() => onOptionClick(item)}>\n                {item.label}\n              </li>\n            ))}\n          </ul>\n        }\n        onClear={onClear}\n      />\n\n      <br />\n      <br />\n\n      {/* <!-- 多选，第一种方式：使用 tag 定义选中的某一项的内容 --> */}\n      <SelectInput\n        value={selectValue2}\n        placeholder=\"Please Select\"\n        multiple\n        tag={({ value }) => (\n          <span className=\"displaySpan\">\n            <ControlPlatformIcon /> {value}\n          </span>\n        )}\n        panel={<div className=\"tdesign-demo__select-empty-custom\">暂无示意数据</div>}\n        onTagChange={onTagChange2}\n      />\n\n      <br />\n      <br />\n\n      {/* <!-- 多选，第二种方式：使用 valueDisplay 定义全部选中项的内容 --> */}\n      <SelectInput\n        value={selectValue3}\n        placeholder=\"Please Select\"\n        multiple\n        valueDisplay={({ value, onClose }) =>\n          value.map((item, index) => (\n            <Tag\n              key={item}\n              closable\n              style={{\n                marginRight: '4px',\n              }}\n              onClose={() => onClose(index)}\n            >\n              <span className=\"displaySpan\">\n                <ControlPlatformIcon /> {value}\n              </span>\n            </Tag>\n          ))\n        }\n        panel={<div className=\"tdesign-demo__select-empty-custom\">暂无示意数据</div>}\n        onTagChange={onTagChange3}\n      />\n    </div>\n  );\n};\nSelectInputCustomTag.displayName = 'SelectInputCustomTag';\nexport default SelectInputCustomTag;\n",
        "desc": "使用  或者  自定义选中项。"
      },
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { SelectInput } from 'tdesign-react';\nimport { ChevronDownIcon } from 'tdesign-icons-react';\n\nconst classStyles = `\n<style>\n.tdesign-demo__select-input-ul-borderless {\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n}\n.tdesign-demo__select-input-ul-borderless > li {\n  display: block;\n  border-radius: 3px;\n  line-height: 22px;\n  cursor: pointer;\n  padding: 3px 8px;\n  color: var(--td-text-color-primary);\n  transition: background-color 0.2s linear;\n  white-space: nowrap;\n  word-wrap: normal;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tdesign-demo__select-input-ul-borderless > li:hover {\n  background-color: var(--td-bg-color-container-hover);\n}\n</style>\n`;\nconst OPTIONS = [\n  {\n    label: 'tdesign-vue',\n    value: 1,\n  },\n  {\n    label: 'tdesign-react',\n    value: 2,\n  },\n  {\n    label: 'tdesign-miniprogram',\n    value: 3,\n  },\n  {\n    label: 'tdesign-angular',\n    value: 4,\n  },\n  {\n    label: 'tdesign-mobile-vue',\n    value: 5,\n  },\n  {\n    label: 'tdesign-mobile-react',\n    value: 6,\n  },\n];\nexport default function SelectInputSingle() {\n  // const selectValue = useState('tdesign-vue');\n  const [selectValue, setSelectValue] = useState({\n    label: 'tdesign-vue',\n    value: 1,\n  });\n  // const selectValue = useState([{ label: 'tdesign-vue', value: 1 }]);\n\n  const [popupVisible, setPopupVisible] = useState(false);\n  const onOptionClick = (item) => {\n    setSelectValue(item);\n    // 选中后立即关闭浮层\n    setPopupVisible(false);\n  };\n  const onClear = () => {\n    setSelectValue(undefined);\n  };\n  const onPopupVisibleChange = (val, context) => {\n    console.log(context);\n    setPopupVisible(val);\n  };\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  return (\n    <div\n      style={{\n        width: '60%',\n      }}\n    >\n      {/* <!-- :popup-props=\"{ trigger: 'hover' }\" --> */}\n      <SelectInput\n        value={selectValue}\n        popupVisible={popupVisible}\n        placeholder=\"Please Select\"\n        borderless\n        clearable\n        onPopupVisibleChange={onPopupVisibleChange}\n        onClear={onClear}\n        panel={\n          <ul className=\"tdesign-demo__select-input-ul-borderless\">\n            {OPTIONS.map((item) => (\n              <li key={item.value} onClick={() => onOptionClick(item)}>\n                {item.label}\n              </li>\n            ))}\n          </ul>\n        }\n        suffixIcon={<ChevronDownIcon />}\n      ></SelectInput>\n    </div>\n  );\n}\n",
        "desc": "用于控制是否呈现为无边框模式。"
      },
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { SelectInput, Checkbox } from 'tdesign-react';\nimport { ChevronDownIcon } from 'tdesign-icons-react';\n\nconst classStyles = `\n<style>\n.tdesign-demo__panel-options-borderless-multiple {\n  width: 100%;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n}\n\n.tdesign-demo__panel-options-borderless-multiple .t-checkbox {\n  display: flex;\n  border-radius: 3px;\n  line-height: 22px;\n  cursor: pointer;\n  padding: 3px 8px;\n  color: var(--td-text-color-primary);\n  transition: background-color 0.2s linear;\n  white-space: nowrap;\n  word-wrap: normal;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin: 0;\n}\n\n.tdesign-demo__panel-options-borderless-multiple .t-checkbox:hover {\n  background-color: var(--td-bg-color-container-hover);\n}\n</style>\n`;\nconst OPTIONS = [\n  // 全选\n  {\n    label: 'Check All',\n    checkAll: true,\n  },\n  {\n    label: 'tdesign-vue',\n    value: 1,\n  },\n  {\n    label: 'tdesign-react',\n    value: 2,\n  },\n  {\n    label: 'tdesign-miniprogram',\n    value: 3,\n  },\n  {\n    label: 'tdesign-angular',\n    value: 4,\n  },\n  {\n    label: 'tdesign-mobile-vue',\n    value: 5,\n  },\n  {\n    label: 'tdesign-mobile-react',\n    value: 6,\n  },\n];\nexport default function SelectInputMultiple() {\n  const [options, setOptions] = useState([...OPTIONS]);\n  const [value, setValue] = useState([\n    {\n      label: 'Vue',\n      value: 1,\n    },\n    {\n      label: 'React',\n      value: 2,\n    },\n    {\n      label: 'Miniprogram',\n      value: 3,\n    },\n  ]);\n  const getCheckboxValue = () => {\n    const arr = [];\n    const list = value;\n    // 此处不使用 forEach，减少函数迭代\n    for (let i = 0, len = list.length; i < len; i++) {\n      list[i].value && arr.push(list[i].value);\n    }\n    return arr;\n  };\n  const checkboxValue = getCheckboxValue();\n\n  // 直接 checkboxgroup 组件渲染输出下拉选项，自定义处理可以避免顺序和 tagChange 冲突\n  const onCheckedChange = (val, { current, type }) => {\n    // current 不存在，则表示操作全选\n    if (!current) {\n      const newValue = type === 'check' ? options.slice(1) : [];\n      setValue(newValue);\n      return;\n    }\n    // 普通操作\n    if (type === 'check') {\n      const option = options.find((t) => t.value === current);\n      setValue(value.concat(option));\n    } else {\n      const newValue = value.filter((v) => v.value !== current);\n      setValue(newValue);\n    }\n  };\n\n  // 可以根据触发来源，自由定制标签变化时的筛选器行为\n  const onTagChange = (currentTags, context) => {\n    const { trigger, index, item } = context;\n    if (trigger === 'clear') {\n      setValue([]);\n    }\n    if (['tag-remove', 'backspace'].includes(trigger)) {\n      const newValue = [...value];\n      newValue.splice(index, 1);\n      setValue(newValue);\n    }\n    // 如果允许创建新条目\n    if (trigger === 'enter') {\n      const current = {\n        label: item,\n        value: item,\n      };\n      const newValue = [...value];\n      setValue(newValue.concat(current));\n      setOptions(options.concat(current));\n    }\n  };\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  return (\n    <div\n      style={{\n        width: '60%',\n      }}\n    >\n      <SelectInput\n        allowInput\n        borderless\n        clearable\n        multiple\n        value={value}\n        minCollapsedNum={1}\n        placeholder=\"select frameworks\"\n        suffixIcon={<ChevronDownIcon />}\n        onTagChange={onTagChange}\n        panel={\n          <Checkbox.Group\n            value={checkboxValue}\n            options={options}\n            className=\"tdesign-demo__panel-options-borderless-multiple\"\n            onChange={onCheckedChange}\n          />\n        }\n      />\n    </div>\n  );\n}\n",
        "desc": "无边框模式的多选筛选器"
      },
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { SelectInput } from 'tdesign-react';\nimport { ChevronDownIcon } from 'tdesign-icons-react';\n\nconst classStyles = `\n<style>\n.tdesign-demo__select-input-ul-auto-width {\n  padding: 2px 0;\n  margin: 0 -2px;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n}\n\n.tdesign-demo__select-input-ul-auto-width > li {\n  display: block;\n  border-radius: 3px;\n  line-height: 22px;\n  cursor: pointer;\n  padding: 3px 8px;\n  color: var(--td-text-color-primary);\n  transition: background-color 0.2s linear;\n  white-space: nowrap;\n  word-wrap: normal;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tdesign-demo__select-input-ul-auto-width > li:hover {\n  background-color: var(--td-bg-color-container-hover);\n}\n</style>\n`;\nconst OPTIONS = [\n  {\n    label: 'tdesign-vue',\n    value: 1,\n  },\n  {\n    label: 'tdesign-react',\n    value: 2,\n  },\n  {\n    label: 'tdesign-miniprogram',\n    value: 3,\n  },\n  {\n    label: 'tdesign-angular',\n    value: 4,\n  },\n  {\n    label: 'tdesign-mobile-vue',\n    value: 5,\n  },\n  {\n    label: 'tdesign-mobile-react',\n    value: 6,\n  },\n];\nexport default function SelectInputAutocomplete() {\n  const [popupVisible, setPopupVisible] = useState(false);\n  const [selectValue, setSelectValue] = useState({\n    label: 'tdesign-vue',\n    value: 1,\n  });\n  const onOptionClick = (item) => {\n    setSelectValue(item);\n    setPopupVisible(false);\n  };\n  const onClear = () => {\n    setSelectValue(undefined);\n  };\n  const onPopupVisibleChange = (val) => {\n    setPopupVisible(val);\n  };\n  const onInputChange = (val, context) => {\n    // 过滤功能\n    console.log(val, context);\n  };\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n\n  // 如果需要输入框宽度自适应，可以使用 autoWidth\n  return (\n    <SelectInput\n      value={selectValue}\n      popupVisible={popupVisible}\n      placeholder=\"Please Select\"\n      clearable\n      autoWidth\n      allowInput\n      onPopupVisibleChange={onPopupVisibleChange}\n      onClear={onClear}\n      onInputChange={onInputChange}\n      suffixIcon={<ChevronDownIcon />}\n      panel={\n        <ul className=\"tdesign-demo__select-input-ul-auto-width\">\n          {OPTIONS.map((item) => (\n            <li key={item.value} onClick={() => onOptionClick(item)}>\n              {item.label}\n            </li>\n          ))}\n        </ul>\n      }\n    />\n  );\n}\n",
        "desc": "自动宽度的单选筛选器"
      },
      {
        "code": "import React, { useState, useEffect, useMemo } from 'react';\nimport { SelectInput, Checkbox } from 'tdesign-react';\nimport { ChevronDownIcon } from 'tdesign-icons-react';\n\nconst classStyles = `\n<style>\n.tdesign-demo__panel-options-autowidth-multiple {\n  width: 100%;\n  padding: 2px 0;\n  margin: 0 -2px;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n}\n\n.tdesign-demo__panel-options-autowidth-multiple .t-checkbox {\n  display: flex;\n  border-radius: 3px;\n  line-height: 22px;\n  cursor: pointer;\n  padding: 3px 8px;\n  color: var(--td-text-color-primary);\n  transition: background-color 0.2s linear;\n  white-space: nowrap;\n  word-wrap: normal;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin: 0;\n}\n\n.tdesign-demo__panel-options-autowidth-multiple .t-checkbox:hover {\n  background-color: var(--td-bg-color-container-hover);\n}\n</style>\n`;\nconst OPTIONS = [\n  // 全选\n  {\n    label: 'all frameworks',\n    checkAll: true,\n  },\n  {\n    label: 'tdesign-vue',\n    value: 1,\n  },\n  {\n    label: 'tdesign-react',\n    value: 2,\n  },\n  {\n    label: 'tdesign-miniprogram',\n    value: 3,\n  },\n  {\n    label: 'tdesign-angular',\n    value: 4,\n  },\n  {\n    label: 'tdesign-mobile-vue',\n    value: 5,\n  },\n  {\n    label: 'tdesign-mobile-react',\n    value: 6,\n  },\n];\nexport default function SelectInputAutocomplete() {\n  const [options, setOptions] = useState(OPTIONS);\n  const [value, setValue] = useState([\n    {\n      label: 'Vue',\n      value: 1,\n    },\n    {\n      label: 'React',\n      value: 2,\n    },\n    {\n      label: 'Miniprogram',\n      value: 3,\n    },\n  ]);\n  const checkboxValue = useMemo(() => {\n    const arr = [];\n    // 此处不使用 forEach，减少函数迭代\n    for (let i = 0, len = value.length; i < len; i++) {\n      value[i].value && arr.push(value[i].value);\n    }\n    return arr;\n  }, [value]);\n\n  // 直接 checkboxgroup 组件渲染输出下拉选项\n  const onCheckedChange = (val, { current, type }) => {\n    // current 不存在，则表示操作全选\n    if (!current) {\n      setValue(type === 'check' ? options.slice(1) : []);\n      return;\n    }\n    // 普通操作\n    if (type === 'check') {\n      const option = options.find((t) => t.value === current);\n      setValue(value.concat(option));\n    } else {\n      setValue(value.filter((v) => v.value !== current));\n    }\n  };\n\n  // 可以根据触发来源，自由定制标签变化时的筛选器行为\n  const onTagChange = (currentTags, context) => {\n    console.log(currentTags, context);\n    const { trigger, index, item } = context;\n    if (trigger === 'clear') {\n      setValue([]);\n    }\n    if (['tag-remove', 'backspace'].includes(trigger)) {\n      setValue(value.filter((v, i) => i !== index));\n    }\n    // 如果允许创建新条目\n    if (trigger === 'enter') {\n      const current = {\n        label: item,\n        value: item,\n      };\n      setValue(value.concat(current));\n      setOptions(options.concat(current));\n    }\n  };\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n\n  // 如果需要输入框宽度自适应，可以使用 autoWidth\n  return (\n    <div\n      className=\"tdesign-demo__select-input-autowidth-multiple\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <SelectInput\n        value={value}\n        minCollapsedNum={1}\n        autoWidth\n        allowInput\n        placeholder=\"select frameworks\"\n        clearable\n        multiple\n        onTagChange={onTagChange}\n        suffixIcon={<ChevronDownIcon />}\n        panel={\n          <Checkbox.Group\n            value={checkboxValue}\n            options={options}\n            className=\"tdesign-demo__panel-options-autowidth-multiple\"\n            onChange={onCheckedChange}\n          />\n        }\n      />\n    </div>\n  );\n}\n",
        "desc": "自动宽度的多选筛选器"
      }
    ]
  },
  {
    "name": "<Slider/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { Slider } from 'tdesign-react';\n\nconst BaseSlider = () => {\n  const [value, setValue] = useState(10);\n  const [rangeValue, setRangeValue] = useState([10, 80]);\n  return (\n    <>\n      <Slider\n        label={({ value }) => `${value}%`}\n        style={{\n          marginBottom: 50,\n        }}\n        value={value}\n        onChange={setValue}\n      ></Slider>\n      <Slider value={rangeValue} onChange={setRangeValue} range></Slider>\n    </>\n  );\n};\nexport default BaseSlider;\n",
        "desc": "横向滑块"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Slider } from 'tdesign-react';\n\nconst VerticalSlider = () => {\n  const [value, setValue] = useState(10);\n  const [rangeValue, setRangeValue] = useState([10, 80]);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n      }}\n    >\n      <div\n        style={{\n          height: 300,\n          marginRight: 100,\n        }}\n      >\n        <Slider\n          layout=\"vertical\"\n          style={{\n            marginBottom: 50,\n          }}\n          value={value}\n          onChange={setValue}\n        ></Slider>\n      </div>\n      <div\n        style={{\n          height: 300,\n        }}\n      >\n        <Slider layout=\"vertical\" value={rangeValue} onChange={setRangeValue} range></Slider>\n      </div>\n    </div>\n  );\n};\nexport default VerticalSlider;\n",
        "desc": "纵向滑块："
      },
      {
        "code": "import React from 'react';\nimport { Slider } from 'tdesign-react';\n\nconst DisabledSlider = () => <Slider step={10} disabled value={10}></Slider>;\nexport default DisabledSlider;\n",
        "desc": "提供禁用状态的滑块。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Slider } from 'tdesign-react';\n\nconst MarksSlider = () => {\n  const [value, setValue] = useState(10);\n  const [rangeValue, setRangeValue] = useState([10, 80]);\n  const marks1 = {\n    0: '0°C',\n    12: '12°C',\n    37: '37°C',\n    60: (\n      <button\n        style={{\n          color: '#1989FA',\n        }}\n      >\n        60°C\n      </button>\n    ),\n  };\n  const marks2 = {\n    0: '0°C',\n    8: '8°C',\n    37: '37°C',\n    50: (\n      <strong\n        style={{\n          color: '#1989FA',\n        }}\n      >\n        50°C\n      </strong>\n    ),\n    70: '70°C',\n  };\n  return (\n    <>\n      <Slider\n        marks={marks1}\n        style={{\n          marginBottom: 50,\n        }}\n        value={value}\n        onChange={setValue}\n      ></Slider>\n      <Slider marks={marks2} value={rangeValue} onChange={setRangeValue} range></Slider>\n    </>\n  );\n};\nexport default MarksSlider;\n",
        "desc": "水平带刻度值的滑块"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Slider } from 'tdesign-react';\n\nconst VerticalSlider = () => {\n  const [value, setValue] = useState(10);\n  const [rangeValue, setRangeValue] = useState([10, 80]);\n  const marks1 = {\n    0: '0°C',\n    12: '12°C',\n    37: '37°C',\n    60: (\n      <button\n        style={{\n          color: '#1989FA',\n        }}\n      >\n        60°C\n      </button>\n    ),\n  };\n  const marks2 = {\n    0: '0°C',\n    8: '8°C',\n    37: '37°C',\n    50: (\n      <strong\n        style={{\n          color: '#1989FA',\n        }}\n      >\n        50°C\n      </strong>\n    ),\n    70: '70°C',\n  };\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n      }}\n    >\n      <div\n        style={{\n          height: 400,\n          marginRight: 100,\n        }}\n      >\n        <Slider\n          marks={marks1}\n          layout=\"vertical\"\n          style={{\n            marginBottom: 50,\n          }}\n          value={value}\n          onChange={setValue}\n        ></Slider>\n      </div>\n      <div\n        style={{\n          height: 400,\n        }}\n      >\n        <Slider marks={marks2} layout=\"vertical\" value={rangeValue} onChange={setRangeValue} range></Slider>\n      </div>\n    </div>\n  );\n};\nexport default VerticalSlider;\n",
        "desc": "垂直带刻度值的滑块"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Slider } from 'tdesign-react';\n\nconst InputNumberSlider = () => {\n  const [value, setValue] = useState(10);\n  const [rangeValue, setRangeValue] = useState([10, 80]);\n  const inputNumberProps = {\n    theme: 'row',\n  };\n  return (\n    <>\n      <Slider\n        style={{\n          marginBottom: 50,\n        }}\n        inputNumberProps={inputNumberProps}\n        value={value}\n        onChange={setValue}\n      ></Slider>\n      <Slider value={rangeValue} inputNumberProps={inputNumberProps} onChange={setRangeValue} range></Slider>\n    </>\n  );\n};\nexport default InputNumberSlider;\n",
        "desc": "横向数字输入框"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Slider } from 'tdesign-react';\n\nconst InputNumberVerticalSlider = () => {\n  const [value, setValue] = useState(10);\n  const [rangeValue, setRangeValue] = useState([10, 80]);\n  const inputNumberProps = {\n    theme: 'row',\n  };\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n      }}\n    >\n      <div\n        style={{\n          height: 300,\n          marginRight: 100,\n        }}\n      >\n        <Slider\n          inputNumberProps={inputNumberProps}\n          layout=\"vertical\"\n          style={{\n            marginBottom: 50,\n          }}\n          value={value}\n          onChange={setValue}\n        ></Slider>\n      </div>\n      <div\n        style={{\n          height: 300,\n        }}\n      >\n        <Slider\n          inputNumberProps={inputNumberProps}\n          layout=\"vertical\"\n          value={rangeValue}\n          onChange={setRangeValue}\n          range\n        ></Slider>\n      </div>\n    </div>\n  );\n};\nexport default InputNumberVerticalSlider;\n",
        "desc": "垂直数字输入框"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Slider } from 'tdesign-react';\n\nconst StepSlider = () => {\n  const [value, setValue] = useState(10);\n  const [rangeValue, setRangeValue] = useState([10, 80]);\n  return (\n    <>\n      <Slider\n        style={{\n          marginBottom: 50,\n        }}\n        step={4}\n        value={value}\n        onChange={setValue}\n      ></Slider>\n      <Slider value={rangeValue} step={4} onChange={setRangeValue} range></Slider>\n    </>\n  );\n};\nexport default StepSlider;\n",
        "desc": "设置步长"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Slider } from 'tdesign-react';\n\nconst marks = {\n  10: 'min:10',\n  30: 'max:30',\n};\nconst MinAndMaxSlider = () => {\n  const [value, setValue] = useState(10);\n  const [rangeValue, setRangeValue] = useState([10, 20]);\n  return (\n    <>\n      <Slider\n        min={10}\n        max={30}\n        marks={marks}\n        style={{\n          marginBottom: 50,\n        }}\n        value={value}\n        onChange={setValue}\n      ></Slider>\n      <Slider min={10} max={30} marks={marks} value={rangeValue} onChange={setRangeValue} range></Slider>\n    </>\n  );\n};\nexport default MinAndMaxSlider;\n",
        "desc": "设置最大值最小值"
      }
    ]
  },
  {
    "name": "<Switch/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { Switch, Space } from 'tdesign-react';\n\nexport default function SwitchBasic() {\n  const [checked, setChecked] = useState(true);\n  const onChange = (value) => {\n    console.log('value', value);\n    setChecked(value);\n  };\n  return (\n    <Space>\n      <Switch size=\"large\" />\n      <Switch size=\"large\" value={checked} onChange={onChange} />\n    </Space>\n  );\n}\n",
        "desc": "不带描述，最基础的开关。"
      },
      {
        "code": "import React from 'react';\nimport { Switch, Space } from 'tdesign-react';\nimport { Icon } from 'tdesign-icons-react';\n\nexport default function SwitchBasic() {\n  const renderActiveContent = () => <Icon name=\"check\" />;\n  const renderInactiveContent = () => <Icon name=\"close\" />;\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Switch size=\"large\" label={['开', '关']} />\n        <Switch size=\"large\" defaultValue label={['开', '关']} />\n      </Space>\n      <Space>\n        <Switch size=\"large\" label={[renderActiveContent(), renderInactiveContent()]} />\n        <Switch size=\"large\" defaultValue label={[renderActiveContent(), renderInactiveContent()]} />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "开关内部带有文字或图标等描述，含义对应开关当前状态，切换时文字同步切换。视觉上更加醒目，用于需要描述当前开关对应状态及含义，更直观且方便用户理解。"
      },
      {
        "code": "import React from 'react';\nimport { Switch, Space } from 'tdesign-react';\n\nexport default function SwitchBasic() {\n  return (\n    <Space>\n      <Switch size=\"large\" defaultValue />\n      <Switch size=\"large\" defaultValue loading />\n      <Switch size=\"large\" disabled />\n    </Space>\n  );\n}\n",
        "desc": "提供 normal、loading 和 disabled 3种状态的开关。根据不同场景设置对应状态。"
      },
      {
        "code": "import React from 'react';\nimport { Switch, Space } from 'tdesign-react';\n\nexport default function SwitchBasic() {\n  return (\n    <Space>\n      <Switch size=\"large\" defaultValue />\n      <Switch />\n      <Switch size=\"small\" />\n    </Space>\n  );\n}\n",
        "desc": "提供 大、中（默认）、小 3种开关。"
      }
    ]
  },
  {
    "name": "<Textarea/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { Textarea, Space } from 'tdesign-react';\n\nexport default function InputExample() {\n  const [value, onChange] = useState('');\n  const [value2, onChange2] = useState('');\n  const [value3, onChange3] = useState('');\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Textarea\n        placeholder=\"请输入内容\"\n        value={value}\n        rows={2}\n        onChange={(value) => {\n          console.log(value);\n          onChange(value);\n        }}\n      />\n      <Textarea\n        placeholder=\"请输入内容，高度可自适应，autosize=true\"\n        value={value2}\n        autosize={true}\n        onChange={(value) => {\n          console.log(value);\n          onChange2(value);\n        }}\n      />\n      <Textarea\n        placeholder=\"请输入内容，高度可自适应，最少3行，最多10行，超过会出滚动条\"\n        value={value3}\n        autosize={{\n          minRows: 3,\n          maxRows: 10,\n        }}\n        onChange={(value) => {\n          console.log(value);\n          onChange3(value);\n        }}\n      />\n    </Space>\n  );\n}\n",
        "desc": "用于多行文本的输入。"
      },
      {
        "code": "import React from 'react';\nimport { Textarea, Space } from 'tdesign-react';\n\nexport default function InputExample() {\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Textarea placeholder=\"请输入内容，超出限制无法输入\" tips=\"这里可以放一些提示文字\" maxlength={20} />\n      <Textarea placeholder=\"请输入内容，超出限制可以输入\" maxlength={20} allowInputOverMax />\n      <Textarea placeholder=\"请输入内容，一个中文汉字表示两个字符长度，超出限制无法输入\" maxcharacter={20} />\n      <Textarea\n        placeholder=\"请输入内容，一个中文汉字表示两个字符长度，超出限制可以输入\"\n        maxcharacter={20}\n        allowInputOverMax\n      />\n    </Space>\n  );\n}\n",
        "desc": "限制输入的最大字符数并展示字符数。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Textarea } from 'tdesign-react';\n\nexport default function InputExample() {\n  const [value, onChange] = useState('');\n  const onKeypress = (value, { e }) => {\n    console.log('onKeypress: ', value, e);\n  };\n  const onKeydown = (value, { e }) => {\n    console.log('onKeydown: ', value, e);\n  };\n  const onKeyup = (value, { e }) => {\n    console.log('onKeyup: ', value, e);\n  };\n  const onFocus = (value, { e }) => {\n    console.log('onFocus: ', value, e);\n  };\n  const onBlur = (value, { e }) => {\n    console.log('onBlur: ', value, e);\n  };\n  return (\n    <Textarea\n      placeholder=\"请输入内容\"\n      onKeypress={onKeypress}\n      onKeydown={onKeydown}\n      onKeyup={onKeyup}\n      value={value}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      onChange={(value) => {\n        console.log(value);\n        onChange(value);\n      }}\n    />\n  );\n}\n",
        "desc": "可绑定      等 DOM 原生事件。"
      },
      {
        "code": "import React from 'react';\nimport { Textarea, Space } from 'tdesign-react';\n\nexport default function InputExample() {\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Textarea placeholder=\"请输入内容\" readonly value=\"只读状态\" />\n      <Textarea placeholder=\"请输入内容\" disabled value=\"禁用状态\" />\n\n      <Textarea placeholder=\"normal\" value={'普通状态'} tips={'正常提示'} />\n      <Textarea status=\"success\" placeholder=\"success\" value={'成功状态'} tips={'成功提示'} />\n      <Textarea status=\"warning\" placeholder=\"warning\" value={'警告状态'} tips={'警告提示'} />\n      <Textarea status=\"error\" placeholder=\"error\" value={'错误状态'} tips={'错误提示'} />\n    </Space>\n  );\n}\n",
        "desc": "多行文本框状态可分为：正常、禁用、异常、带额外内容提示。"
      }
    ]
  },
  {
    "name": "<Transfer/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { Transfer } from 'tdesign-react';\n\nconst list = [];\nfor (let i = 0; i < 20; i++) {\n  list.push({\n    value: i.toString(),\n    label: `内容${i + 1}`,\n    disabled: i % 4 < 1,\n  });\n}\nexport default function BaseExample() {\n  const [value, setValue] = useState(['2']);\n  return <Transfer data={list} value={value} onChange={(v) => setValue(v)}></Transfer>;\n}\n",
        "desc": "包含穿梭框最基础的功能和组合元素。需要两框之间的元素迁移时，便于元素的选择。"
      },
      {
        "code": "import React from 'react';\nimport { Transfer } from 'tdesign-react';\n\nconst list = [];\nfor (let i = 0; i < 20; i++) {\n  list.push({\n    value: i.toString(),\n    label: `内容${i + 1}`,\n    disabled: i % 4 < 1,\n  });\n}\nexport default function SearchExample() {\n  return <Transfer data={list} search={true}></Transfer>;\n}\n",
        "desc": "基础穿梭框上支持搜索功能，当穿梭框中数据量较大时，提供给用户更快捷的数据项定位能力。"
      },
      {
        "code": "import React from 'react';\nimport { Transfer } from 'tdesign-react';\n\nconst list = [];\nfor (let i = 0; i < 20; i++) {\n  list.push({\n    value: i.toString(),\n    label: `内容${i + 1}`,\n  });\n}\nexport default function PaginationExample() {\n  const pagination = [\n    {\n      pageSize: 10,\n      onPageChange: (current) => {\n        console.log('current', current);\n      },\n    },\n    {\n      pageSize: 5,\n      defaultCurrent: 1,\n    },\n  ];\n  const handlePageChange = (...args) => {\n    console.log('args', args);\n  };\n  return <Transfer data={list} pagination={pagination} onPageChange={handlePageChange}></Transfer>;\n}\n",
        "desc": "针对数据量较多的场景，可以通过  将选项分页展示。"
      },
      {
        "code": "import React from 'react';\nimport { Transfer } from 'tdesign-react';\n\nconst list = [];\nfor (let i = 0; i < 20; i++) {\n  list.push({\n    value: i.toString(),\n    label: `内容${i + 1}`,\n    disabled: i % 4 < 1,\n  });\n}\nconst customStyle = {\n  padding: 12,\n  borderTop: '1px solid rgb(231, 231, 231)',\n};\nexport default function BaseExample() {\n  return (\n    <Transfer\n      data={list}\n      title={[\n        '来源',\n        <>\n          <div>目标</div>\n        </>,\n      ]}\n      operation={['加入', '移除']}\n      footer={[\n        <>\n          <div style={customStyle}>选中并加入</div>\n        </>,\n        <>\n          <div style={customStyle}>选中并移除</div>\n        </>,\n      ]}\n    ></Transfer>\n  );\n}\n",
        "desc": "穿梭框的标题、底部、操作按钮和数据渲染都可以自定义渲染。"
      },
      {
        "code": "import React from 'react';\nimport { Transfer } from 'tdesign-react';\n\nexport default function BaseExample() {\n  return (\n    <div className=\"tdesign-demo-block-column\">\n      <p>默认暂无数据</p>\n      <Transfer></Transfer>\n      <p>自定义暂无数据</p>\n      <Transfer\n        empty={[\n          'No Source',\n          <div key=\"empty\" className=\"t-transfer__empty\">\n            No Target\n          </div>,\n        ]}\n      ></Transfer>\n    </div>\n  );\n}\n",
        "desc": "当数据为空时会展示暂无数据，也可以根据需求配置空数据展示。"
      },
      {
        "code": "import React from 'react';\nimport { Transfer, Tree } from 'tdesign-react';\n\nconst list = [\n  {\n    value: '1',\n    label: '1',\n    children: [\n      {\n        value: '1.1',\n        label: '1.1',\n      },\n      {\n        value: '1.2',\n        label: '1.2',\n        children: [\n          {\n            value: '1.2.1',\n            label: '1.2.1',\n            children: [\n              {\n                value: '1.2.1.1',\n                label: '1.2.1.1',\n              },\n              {\n                value: '1.2.1.2',\n                label: '1.2.1.2',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: '2',\n    label: '2',\n    children: [\n      {\n        value: '2.1',\n        label: '2.1',\n      },\n      {\n        value: '2.2',\n        label: '2.2',\n      },\n    ],\n  },\n];\nexport default function BaseExample() {\n  const TreeNode = (props) => <Tree {...props} checkable expandAll={true} hover={true} transition={true} />;\n  return <Transfer data={list} tree={TreeNode}></Transfer>;\n}\n",
        "desc": "还支持配合  组件使用。适用于复杂选项的场景。"
      }
    ]
  },
  {
    "name": "<TimePicker/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { TimePicker } from 'tdesign-react';\n\nexport default function BasicTimePicker() {\n  const [value, setValue] = useState('12:00:00');\n  const handleValueChange = (v) => {\n    console.log('change', v);\n    setValue(v);\n  };\n  const handleOnPick = (v, context) => {\n    console.log('onPick', v, context);\n  };\n  const handleClose = () => {\n    console.log('close');\n  };\n  const handleOpen = () => {\n    console.log('open');\n  };\n  return (\n    <TimePicker\n      value={value}\n      onChange={handleValueChange}\n      onPick={handleOnPick}\n      onClose={handleClose}\n      onOpen={handleOpen}\n      popupProps={{\n        overlayInnerStyle: {\n          fontWeight: 'normal',\n        },\n        overlayStyle: {\n          fontWeight: 'normal',\n        },\n        overlayClassName: 'time-picker-custom-overlay-class',\n        overlayInnerClassName: 'time-picker-custom-overlay-inner-class',\n      }}\n    />\n  );\n}\n",
        "desc": "由时、分、秒三部分组成的选择界面。用户需要输入精度到秒的时间时使用。"
      },
      {
        "code": "import React from 'react';\nimport { TimePicker, Space } from 'tdesign-react';\n\nexport default function HmTimePicker() {\n  return (\n    <Space direction=\"vertical\">\n      <h3>时分选择</h3>\n      <TimePicker defaultValue={'12:00'} format=\"HH:mm\" />\n      <h3>毫秒选择</h3>\n      <TimePicker defaultValue={'12:59:59:000'} format=\"HH:mm:ss:SSS\" />\n    </Space>\n  );\n}\n",
        "desc": "如果场景需要自定义格式，可以通过更改时间格式，面板和输入框会跟随格式变化。"
      },
      {
        "code": "import React from 'react';\nimport { TimePicker } from 'tdesign-react';\n\nexport default function ShowStepsTimePicker() {\n  return <TimePicker steps={[1, 5]} format=\"HH:mm\" />;\n}\n",
        "desc": "由时、分两部分组成的选择界面，且分钟刻度步长大于 1。用户对时间精度要求不高的场景，如数据筛选。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TimePicker } from 'tdesign-react';\n\nexport default function TwelveHourTimePicker() {\n  const [value, setValue] = useState(null);\n  const handleValueChange = (v) => {\n    setValue(v);\n  };\n  return <TimePicker format=\"hh:mm:ss A\" value={value} onChange={handleValueChange} />;\n}\n",
        "desc": "12 小时制式的时间格式显示。用户需要以 12 小时制式显示时间时使用。"
      },
      {
        "code": "import React from 'react';\nimport { TimePicker } from 'tdesign-react';\n\nconst { TimeRangePicker } = TimePicker;\nexport default function RangeTimePicker() {\n  return (\n    <TimeRangePicker\n      clearable\n      format=\"HH:mm:ss\"\n      defaultValue={undefined}\n      allowInput\n      placeholder={['开始时间', '结束时间']}\n    />\n  );\n}\n",
        "desc": "用于某一段时间的选择。用户需要输入一段时间区间时使用。"
      },
      {
        "code": "import React from 'react';\nimport { TimePicker } from 'tdesign-react';\n\nexport default function KeyboardTimePicker() {\n  const handleBlur = (param) => {\n    console.log(param, 'onBlur');\n  };\n  const handleInput = (param) => {\n    console.log(param, 'onInput');\n  };\n  const handleFocus = (param) => {\n    console.log(param, 'onFocus');\n  };\n  return (\n    <TimePicker\n      defaultValue=\"12:08:00\"\n      format=\"HH:mm:ss\"\n      onBlur={handleBlur}\n      onInput={handleInput}\n      onFocus={handleFocus}\n      allowInput\n      clearable\n    />\n  );\n}\n",
        "desc": "默认开启改功能，当选中时、分、秒中的某一项时，可通过数字键盘直接输入或方向键进行时、分、秒的修改。"
      },
      {
        "code": "import React from 'react';\nimport { TimePicker, Space } from 'tdesign-react';\n\nexport default function HmTimePicker() {\n  return (\n    <Space direction=\"vertical\">\n      <h3>禁止清空</h3>\n      <TimePicker defaultValue=\"12:00:00\" />\n      <h3>允许清空</h3>\n      <TimePicker defaultValue=\"12:00:00\" clearable={true} />\n    </Space>\n  );\n}\n",
        "desc": "限定组件不具备清空按钮。默认组件将会在具备时间值的时候展示清空按钮。"
      },
      {
        "code": "import React from 'react';\nimport { TimePicker, Space } from 'tdesign-react';\n\nexport default function DisabledTimePicker() {\n  const disableTime = (h) => {\n    const disableHour = [1, 2, 3];\n    if (h > 4) {\n      return {\n        hour: disableHour,\n        minute: [30, 31, 32, 33, 34],\n      };\n    }\n    return {\n      hour: disableHour,\n    };\n  };\n  return (\n    <Space direction=\"vertical\">\n      <h3>禁用整个选择器</h3>\n      <TimePicker disabled={true} />\n\n      <h3>禁用指定时间</h3>\n      <TimePicker disableTime={disableTime} />\n    </Space>\n  );\n}\n",
        "desc": "禁止组件的使用。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TimePicker } from 'tdesign-react';\n\nconst { TimePickerPanel } = TimePicker;\nfunction Panel() {\n  const [value, setValue] = useState('');\n  return <TimePickerPanel value={value} onChange={setValue} />;\n}\nexport default Panel;\n",
        "desc": "如果只需要面板部分，可以通过使用来满足使用场景。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TimePicker, Space } from 'tdesign-react';\n\nconst { TimeRangePicker } = TimePicker;\nexport default function RangeTimePicker() {\n  const [time1, setTime1] = useState('20:22');\n  const [time2, setTime2] = useState(['00:00:00', '23:59:59']);\n  return (\n    <Space direction=\"vertical\">\n      <TimePicker\n        value={time1}\n        onChange={setTime1}\n        presets={{\n          上午十一点: '11:00:00',\n        }}\n        clearable\n      />\n\n      <TimeRangePicker\n        value={time2}\n        onChange={setTime2}\n        style={{\n          marginTop: '20px',\n        }}\n        clearable\n        format=\"HH:mm:ss\"\n        allow-input\n        presets={{\n          下午: ['13:00:00', '18:00:00'],\n        }}\n      />\n    </Space>\n  );\n}\n",
        "desc": "可以通过设置。"
      }
    ]
  },
  {
    "name": "<TreeSelect/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { TreeSelect } from 'tdesign-react';\n\nconst options = [\n  {\n    label: '广东省',\n    value: 'guangdong',\n    children: [\n      {\n        label: '广州市',\n        value: 'guangzhou',\n      },\n      {\n        label: '深圳市',\n        value: 'shenzhen',\n        children: [\n          {\n            label: '南山区海天二路33号腾讯滨海大厦',\n            value: 'Tencent',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    label: '江苏省',\n    value: 'jiangsu',\n    disabled: true,\n    children: [\n      {\n        label: '南京市',\n        value: 'nanjing',\n      },\n      {\n        label: '苏州市',\n        value: 'suzhou',\n      },\n    ],\n  },\n];\nexport default function Example() {\n  const [value, setValue] = useState('guangdong');\n  return (\n    <TreeSelect\n      data={options}\n      clearable\n      value={value}\n      onChange={(val) => {\n        setValue(val);\n        console.log(val);\n      }}\n      style={{\n        width: 300,\n      }}\n    />\n  );\n}\n",
        "desc": "最基本的使用方法，常用于选择省份。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TreeSelect } from 'tdesign-react';\n\nconst options = [\n  {\n    label: '广东省',\n    value: 'guangdong',\n    children: [\n      {\n        label: '广州市',\n        value: 'guangzhou',\n      },\n      {\n        label: '深圳市',\n        value: 'shenzhen',\n      },\n    ],\n  },\n  {\n    label: '江苏省',\n    value: 'jiangsu',\n    children: [\n      {\n        label: '南京市',\n        value: 'nanjing',\n      },\n      {\n        label: '苏州市',\n        value: 'suzhou',\n      },\n    ],\n  },\n];\nexport default function Example() {\n  const [value, setValue] = useState(['guangzhou', 'shenzhen']);\n  return (\n    <TreeSelect\n      data={options}\n      clearable\n      multiple\n      placeholder=\"请选择\"\n      value={value}\n      onChange={(val) => {\n        setValue(val);\n        console.log(val);\n      }}\n      style={{\n        width: 300,\n      }}\n    />\n  );\n}\n",
        "desc": "允许选取多个选项。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TreeSelect, Radio, Space } from 'tdesign-react';\n\nconst options = [\n  {\n    label: '广东省',\n    value: 'guangdong',\n    children: [\n      {\n        label: '广州市',\n        value: 'guangzhou',\n      },\n      {\n        label: '深圳市',\n        value: 'shenzhen',\n      },\n    ],\n  },\n  {\n    label: '江苏省',\n    value: 'jiangsu',\n    children: [\n      {\n        label: '南京市',\n        value: 'nanjing',\n      },\n      {\n        label: '苏州市',\n        value: 'suzhou',\n      },\n    ],\n  },\n];\nexport default function Example() {\n  const [type, setType] = useState('default');\n  const handleEnter = (ctx) => {\n    console.log('onEnter api:', ctx);\n  };\n  const filterFunction = (searchText, node) => node.data.label.indexOf(searchText) >= 0;\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: 300,\n      }}\n    >\n      <Radio.Group value={type} onChange={(v) => setType(v)} variant=\"default-filled\">\n        <Radio.Button value=\"default\">默认</Radio.Button>\n        <Radio.Button value=\"function\">自定义方法</Radio.Button>\n      </Radio.Group>\n      {type === 'default' ? (\n        <>\n          <TreeSelect data={options} clearable filterable placeholder=\"请选择\" onEnter={handleEnter} />\n          <TreeSelect data={options} multiple clearable filterable placeholder=\"请选择\" />\n        </>\n      ) : (\n        <>\n          <TreeSelect data={options} clearable filter={filterFunction} placeholder=\"请选择\" />\n          <TreeSelect data={options} multiple clearable filter={filterFunction} placeholder=\"请选择\" />\n        </>\n      )}\n    </Space>\n  );\n}\n",
        "desc": "树结构支持过滤。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TreeSelect, Space } from 'tdesign-react';\n\nconst options = [\n  {\n    label: '广东省',\n    value: 'guangdong',\n    children: [\n      {\n        label: '广州市',\n        value: 'guangzhou',\n      },\n      {\n        label: '深圳市',\n        value: 'shenzhen',\n      },\n    ],\n  },\n  {\n    label: '江苏省',\n    value: 'jiangsu',\n    children: [\n      {\n        label: '南京市',\n        value: 'nanjing',\n      },\n      {\n        label: '苏州市',\n        value: 'suzhou',\n      },\n    ],\n  },\n];\nexport default function Example() {\n  const [value, setValue] = useState({\n    label: '深圳市',\n    value: 'shenzhen',\n  });\n  const [mulValue, setMulValue] = useState([\n    {\n      label: '广州市',\n      value: 'guangzhou',\n    },\n    {\n      label: '深圳市',\n      value: 'shenzhen',\n    },\n  ]);\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: 300,\n      }}\n    >\n      <TreeSelect\n        data={options}\n        clearable\n        placeholder=\"请选择\"\n        value={value}\n        valueType=\"object\"\n        onChange={(val) => {\n          setValue(val);\n          console.log(val);\n        }}\n      />\n      <TreeSelect\n        data={options}\n        clearable\n        multiple\n        valueType=\"object\"\n        placeholder=\"请选择\"\n        value={mulValue}\n        onChange={(val) => {\n          setMulValue(val);\n          console.log(val);\n        }}\n      />\n    </Space>\n  );\n}\n",
        "desc": "支持控制选中值的类型。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TreeSelect } from 'tdesign-react';\n\nconst options = [\n  {\n    name: '广东省',\n    pinyin: 'guangdong',\n    children: [\n      {\n        name: '广州市',\n        pinyin: 'guangzhou',\n      },\n      {\n        name: '深圳市',\n        pinyin: 'shenzhen',\n      },\n    ],\n  },\n  {\n    name: '江苏省',\n    pinyin: 'jiangsu',\n    children: [\n      {\n        name: '南京市',\n        pinyin: 'nanjing',\n      },\n      {\n        name: '苏州市',\n        pinyin: 'suzhou',\n      },\n    ],\n  },\n];\nexport default function Example() {\n  const [value, setValue] = useState('shenzhen');\n  return (\n    <TreeSelect\n      data={options}\n      clearable\n      placeholder=\"请选择\"\n      value={value}\n      // defaultValue=\"guangdong\"\n      onChange={(val) => {\n        setValue(val);\n        console.log(val);\n      }}\n      style={{\n        width: 300,\n      }}\n      popupProps={{\n        overlayStyle: {\n          width: '500px',\n        },\n        overlayInnerStyle: {\n          fontWeight: 'normal',\n        },\n        overlayClassName: 'tree-select-custom-overlay-class',\n        overlayInnerClassName: 'tree-select-custom-overlay-inner-class',\n      }}\n      treeProps={{\n        keys: {\n          label: 'name',\n          value: 'pinyin',\n          children: 'children',\n        },\n      }}\n    />\n  );\n}\n",
        "desc": "支持透传  和  。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TreeSelect } from 'tdesign-react';\n\nconst options = [\n  {\n    label: '1',\n    value: '1',\n    children: true,\n  },\n  {\n    label: '2',\n    value: '2',\n    children: true,\n  },\n];\nexport default function Example() {\n  const [value, setValue] = useState('');\n  const loadFunc = (node) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        let nodes = [];\n        if (node.getLevel() < 2) {\n          nodes = [\n            {\n              label: `${node.label}.1`,\n              value: `${node.value}.1`,\n              children: true,\n            },\n            {\n              label: `${node.label}.2`,\n              value: `${node.value}.2`,\n              children: true,\n            },\n          ];\n        }\n        resolve(nodes);\n      }, 2000);\n    });\n  return (\n    <div\n      style={{\n        width: 300,\n      }}\n    >\n      <TreeSelect\n        data={options}\n        clearable\n        placeholder=\"请选择\"\n        value={value}\n        treeProps={{\n          load: loadFunc,\n          lazy: true,\n        }}\n        onChange={(val) => {\n          setValue(val);\n          console.log(val);\n        }}\n      />\n    </div>\n  );\n}\n",
        "desc": "通过透传实现异步加载树节点。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TreeSelect, Tag, Tooltip, Space } from 'tdesign-react';\n\nconst options = [\n  {\n    label: '广东省',\n    value: 'guangdong',\n    children: [\n      {\n        label: '广州市',\n        value: 'guangzhou',\n      },\n      {\n        label: '深圳市',\n        value: 'shenzhen',\n      },\n    ],\n  },\n  {\n    label: '江苏省',\n    value: 'jiangsu',\n    children: [\n      {\n        label: '南京市',\n        value: 'nanjing',\n      },\n      {\n        label: '苏州市',\n        value: 'suzhou',\n      },\n    ],\n  },\n];\nexport default function Example() {\n  const [value, setValue] = useState(['guangzhou', 'shenzhen']);\n  const [customizeValue, setCustomizeValue] = useState(['guangzhou', 'shenzhen']);\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: 300,\n      }}\n    >\n      <TreeSelect\n        data={options}\n        multiple\n        clearable\n        placeholder=\"请选择\"\n        minCollapsedNum={1}\n        value={value}\n        onChange={(val) => setValue(val)}\n      />\n      <TreeSelect\n        data={options}\n        multiple\n        clearable\n        placeholder=\"请选择\"\n        minCollapsedNum={1}\n        collapsedItems={({ collapsedSelectedItems }) => (\n          <Tooltip content={collapsedSelectedItems.map((item) => item.label).join('、')}>\n            <Tag>更多...</Tag>\n          </Tooltip>\n        )}\n        value={customizeValue}\n        onChange={(val) => setCustomizeValue(val)}\n      />\n    </Space>\n  );\n}\n",
        "desc": "多选情况下，超出该数值的选中项折叠。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { TreeSelect, Tag, Space } from 'tdesign-react';\n\nconst options = [\n  {\n    label: '广东省',\n    value: 'guangdong',\n    children: [\n      {\n        label: '广州市',\n        value: 'guangzhou',\n      },\n      {\n        label: '深圳市',\n        value: 'shenzhen',\n      },\n    ],\n  },\n  {\n    label: '江苏省',\n    value: 'jiangsu',\n    children: [\n      {\n        label: '南京市',\n        value: 'nanjing',\n      },\n      {\n        label: '苏州市',\n        value: 'suzhou',\n      },\n    ],\n  },\n];\nexport default function Example() {\n  const [value, setValue] = useState('guangzhou');\n  const [mulValue, setMulValue] = useState(['guangzhou', 'shenzhen']);\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: 300,\n      }}\n    >\n      <TreeSelect\n        data={options}\n        clearable\n        placeholder=\"请选择\"\n        value={value}\n        onChange={(val) => setValue(val)}\n        valueDisplay={({ value }) => `${value.label}(${value.value})`}\n      />\n      <TreeSelect\n        data={options}\n        multiple\n        clearable\n        placeholder=\"请选择\"\n        value={mulValue}\n        valueDisplay={({ onClose, value }) =>\n          value.map(({ label, value }, index) => (\n            <Tag key={value} closable onClose={() => onClose(index)}>\n              {label}({value})\n            </Tag>\n          ))\n        }\n        onChange={(val) => setMulValue(val)}\n      />\n    </Space>\n  );\n}\n",
        "desc": "支持自定义选中项展示，常用于组合 label 和 value 展示。"
      },
      {
        "code": "import React from 'react';\nimport { TreeSelect } from 'tdesign-react';\nimport { UserIcon, CaretDownSmallIcon } from 'tdesign-icons-react';\n\nconst options = [\n  {\n    label: '广东省',\n    value: 'guangdong',\n    children: [\n      {\n        label: '广州市',\n        value: 'guangzhou',\n      },\n      {\n        label: '深圳市',\n        value: 'shenzhen',\n        children: [\n          {\n            label: '南山区海天二路33号腾讯滨海大厦',\n            value: 'Tencent',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    label: '江苏省',\n    value: 'jiangsu',\n    disabled: true,\n    children: [\n      {\n        label: '南京市',\n        value: 'nanjing',\n      },\n      {\n        label: '苏州市',\n        value: 'suzhou',\n      },\n    ],\n  },\n];\nexport default function Example() {\n  return (\n    <TreeSelect\n      data={options}\n      clearable\n      placeholder=\"请输入\"\n      prefixIcon={<UserIcon />}\n      suffixIcon={<CaretDownSmallIcon />}\n      style={{\n        width: 300,\n      }}\n    />\n  );\n}\n",
        "desc": "支持自定义选择器的前缀、后缀，也可以使用suffixIcon自定义翻转箭头图标。"
      }
    ]
  },
  {
    "name": "<Upload/>",
    "demoCode": [
      {
        "code": "import React, { useRef, useState, useEffect } from 'react';\nimport { Upload, Space, Radio, Checkbox, Button, MessagePlugin } from 'tdesign-react';\nimport { CloseIcon } from 'tdesign-icons-react';\n\nexport default function UploadExample() {\n  const uploadRef1 = useRef(null);\n  const uploadRef2 = useRef(null);\n  const uploadRef3 = useRef(null);\n  const [files1, setFiles1] = useState([]);\n  const [files2, setFiles2] = useState([\n    {\n      name: '这是一个默认文件',\n      status: 'success',\n      url: 'https://tdesign.gtimg.com/site/source/figma-pc.png',\n      size: 1000,\n    },\n  ]);\n  const [files3, setFiles3] = useState([]);\n  const [multiple, setMultiple] = useState(false);\n  const [uploadInOneRequest, setUploadInOneRequest] = useState(false);\n  const [autoUpload, setAutoUpload] = useState(true);\n  const [isBatchUpload, setIsBatchUpload] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n  useEffect(() => {\n    setFiles3(\n      multiple\n        ? [\n            {\n              name: '这是一个上传成功的文件',\n              status: 'success',\n              url: 'https://tdesign.gtimg.com/site/source/figma-pc.png',\n              size: 1000,\n            },\n            {\n              name: '这是一个上传中的文件',\n              status: 'progress',\n              percent: 30,\n              url: 'https://tdesign.gtimg.com/site/source/figma-pc.png',\n              size: 1000,\n            },\n            {\n              name: '这是一个上传失败的文件',\n              status: 'fail',\n              url: 'https://tdesign.gtimg.com/site/source/figma-pc.png',\n              size: 1000,\n            },\n            {\n              name: '这是一个等待上传的文件',\n              status: 'waiting',\n              url: 'https://tdesign.gtimg.com/site/source/figma-pc.png',\n              size: 1000,\n            },\n          ]\n        : [],\n    );\n  }, [multiple]);\n  const handleFail = ({ file }) => {\n    MessagePlugin.error(`文件 ${file.name} 上传失败`);\n  };\n  const handleSelectChange = (files) => {\n    console.log('onSelectChange', files);\n  };\n  const handleSuccess = (params) => {\n    console.log(params);\n    MessagePlugin.success('上传成功');\n  };\n\n  // 多文件上传，一个文件一个请求场景，每个文件也会单独触发上传成功的事件\n  const onOneFileSuccess = (params) => {\n    console.log('onOneFileSuccess', params);\n  };\n\n  // 有文件数量超出时会触发，文件大小超出限制、文件同名时会触发等场景。注意如果设置允许上传同名文件，则此事件不会触发\n  const onValidate = (params) => {\n    const { files, type } = params;\n    console.log('onValidate', type, files);\n    const messageMap = {\n      FILE_OVER_SIZE_LIMIT: '文件大小超出限制，已自动过滤',\n      FILES_OVER_LENGTH_LIMIT: '文件数量超出限制，仅上传未超出数量的文件',\n      // if you need same name files, setting allowUploadDuplicateFile={true} please\n      FILTER_FILE_SAME_NAME: '不允许上传同名文件',\n      BEFORE_ALL_FILES_UPLOAD: 'beforeAllFilesUpload 方法拦截了文件',\n      CUSTOM_BEFORE_UPLOAD: 'beforeUpload 方法拦截了文件',\n    };\n    // you can also set Upload.tips and Upload.status to show warning message.\n    messageMap[type] && MessagePlugin.warning(messageMap[type]);\n  };\n\n  // 仅自定义文件列表所需\n  // eslint-disable-next-line\n  const outsideRemove = (index) => {\n    const tmpFiles = [...files3];\n    tmpFiles.splice(index, 1);\n    setFiles3(tmpFiles);\n  };\n\n  // eslint-disable-next-line\n  const fileListDisplay = () => (\n    <div>\n      {files3.map((file, index) => (\n        <div key={file.name} className=\"t-upload__single-display-text t-upload__display-text--margin\">\n          {file.name}（{file.size} B）\n          <CloseIcon className=\"t-upload__icon-delete\" onClick={() => outsideRemove(index)} />\n        </div>\n      ))}\n    </div>\n  );\n\n  // 非自动上传文件，需要在父组件单独执行上传请求\n  const uploadFiles = () => {\n    uploadRef1.current.uploadFiles();\n    uploadRef2.current.uploadFiles();\n    uploadRef3.current.uploadFiles();\n  };\n\n  // 非自动上传文件，需保存待上传文件列表\n  const [waitingUploadFiles, setWaitingUploadFiles] = useState([]);\n  const onWaitingUploadFilesChange = ({ files }) => {\n    setWaitingUploadFiles(files);\n    console.log('onWaitingUploadFilesChange', waitingUploadFiles, files);\n  };\n\n  // 用于格式化接口响应值，error 会被用于上传失败的提示文字；url 表示文件/图片地址\n  const formatResponse = (res) => ({\n    ...res,\n    error: '上传失败，请重试',\n    url: res?.url,\n  });\n\n  /** 单个文件校验方法，示例代码有效，勿删 */\n  // const beforeUpload = (file) => {\n  //   MessagePlugin.error(`文件 ${file.name} 不满足条件`);\n  //   return false;\n  // };\n\n  /** 全部文件一次性校验方法，示例代码有效，勿删 */\n  // const beforeAllFilesUpload = () => {\n  //   MessagePlugin.error(`文件不满足条件`);\n  //   return false;\n  // };\n\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Radio.Group value={multiple} onChange={(val) => setMultiple(val)} variant=\"default-filled\">\n          <Radio.Button value={false}>单文件上传</Radio.Button>\n          <Radio.Button value={true}>多文件上传</Radio.Button>\n        </Radio.Group>\n      </Space>\n      <Space>\n        <Checkbox checked={disabled} onChange={setDisabled}>\n          禁用状态\n        </Checkbox>\n        {multiple && (\n          <Checkbox checked={uploadInOneRequest} onChange={setUploadInOneRequest}>\n            多个文件一个请求上传\n          </Checkbox>\n        )}\n        {multiple && (\n          <Checkbox checked={isBatchUpload} onChange={setIsBatchUpload}>\n            整体替换上传\n          </Checkbox>\n        )}\n        <Checkbox checked={autoUpload} onChange={setAutoUpload}>\n          自动上传\n        </Checkbox>\n        {!autoUpload && (\n          <Button\n            variant=\"base\"\n            theme=\"default\"\n            style={{\n              height: '22px',\n            }}\n            onClick={uploadFiles}\n          >\n            点击手动上传\n          </Button>\n        )}\n      </Space>\n\n      <br />\n\n      {/* <!-- 1. formatRequest 用于修改或新增上传请求数据，示例：:formatRequest=\"(obj) => ({ ...obj, other: 123 })\" --> */}\n      <Space>\n        <Upload\n          ref={uploadRef1}\n          files={files1}\n          onChange={(val, ctx) => {\n            console.log(val, ctx);\n            setFiles1(val);\n          }}\n          action=\"https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n          placeholder={multiple ? '文件数量不超过 5 个' : '要求文件大小在 1M 以内'}\n          multiple={multiple}\n          autoUpload={autoUpload}\n          uploadAllFilesInOneRequest={uploadInOneRequest}\n          isBatchUpload={isBatchUpload}\n          sizeLimit={{\n            size: 1,\n            unit: 'MB',\n          }}\n          max={5}\n          disabled={disabled}\n          allowUploadDuplicateFile={true}\n          // formatRequest={(obj) => ({ ...obj, other: 123 })}\n          onSelectChange={handleSelectChange}\n          onFail={handleFail}\n          onSuccess={handleSuccess}\n          onOneFileSuccess={onOneFileSuccess}\n          onValidate={onValidate}\n          onWaitingUploadFilesChange={onWaitingUploadFilesChange}\n        />\n\n        <Upload\n          ref={uploadRef2}\n          files={files2}\n          onChange={setFiles2}\n          multiple={multiple}\n          disabled={disabled}\n          autoUpload={autoUpload}\n          uploadAllFilesInOneRequest={uploadInOneRequest}\n          isBatchUpload={isBatchUpload}\n          triggerButtonProps={{\n            theme: 'primary',\n            variant: 'base',\n          }}\n          placeholder=\"这是一段没有文件时的占位文本\"\n          action=\"//service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n          style={{\n            marginLeft: '40px',\n          }}\n          onFail={handleFail}\n        ></Upload>\n\n        {/* formatResponse 可控制上传成功或者失败 */}\n        <Upload\n          ref={uploadRef3}\n          files={files3}\n          onChange={setFiles3}\n          multiple={multiple}\n          disabled={disabled}\n          autoUpload={autoUpload}\n          uploadAllFilesInOneRequest={uploadInOneRequest}\n          isBatchUpload={isBatchUpload}\n          formatResponse={formatResponse}\n          placeholder=\"文件上传失败示例\"\n          action=\"//service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n          style={{\n            marginLeft: '60px',\n          }}\n          // fileListDisplay={fileListDisplay}\n          onFail={handleFail}\n        />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "表示上传接口地址。 用于格式化上传接口请求参数，可以新增或修改参数。 用于格式化接口响应值，如果响应值中的  字段存在，则会判定本次上传失败。 用于设置文件大小限制，如果超出限制不会触发上传请求。 是否允许上传相同文件名的文件。 会在文件选择之后，上传请求发起之前触发。 会在上传成功后触发。 会在上传失败后触发。"
      },
      {
        "code": "import React, { useState, useRef } from 'react';\nimport { Upload, MessagePlugin, Space, Button, Checkbox } from 'tdesign-react';\n\nconst UploadSingleInput = () => {\n  const uploadRef = useRef(null);\n  const [files, setFiles] = useState([]);\n  const [autoUpload, setAutoUpload] = useState(true);\n  const [disabled, setDisabled] = useState(false);\n  const handleFail = ({ file }) => {\n    MessagePlugin.error(`${file.name} 上传失败`);\n  };\n  const onSuccess = () => {\n    MessagePlugin.success('上传成功');\n  };\n\n  // 非自动上传文件，需要在父组件单独执行上传\n  const uploadFiles = () => {\n    uploadRef.current.uploadFiles();\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Checkbox checked={autoUpload} onChange={setAutoUpload}>\n          自动上传\n        </Checkbox>\n        <Checkbox checked={disabled} onChange={setDisabled}>\n          禁用状态\n        </Checkbox>\n        {!autoUpload && (\n          <Button\n            variant=\"base\"\n            theme=\"default\"\n            size=\"small\"\n            style={{\n              height: '22px',\n            }}\n            onClick={uploadFiles}\n          >\n            点击上传\n          </Button>\n        )}\n      </Space>\n      <br />\n      <Upload\n        ref={uploadRef}\n        style={{\n          width: '350px',\n        }}\n        files={files}\n        onChange={setFiles}\n        abridgeName={[8, 6]}\n        action=\"https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n        theme=\"file-input\"\n        placeholder=\"请选择文件\"\n        autoUpload={autoUpload}\n        disabled={disabled}\n        onFail={handleFail}\n        onSuccess={onSuccess}\n      ></Upload>\n    </Space>\n  );\n};\nUploadSingleInput.displayName = 'UploadSingleInput';\nexport default UploadSingleInput;\n",
        "desc": "设置  即可，这种风格不支持拖拽上传，文档下方有拖拽上传和批量上传示例。"
      },
      {
        "code": "import React, { useRef, useState } from 'react';\nimport { Upload, Space, MessagePlugin, Checkbox, Button } from 'tdesign-react';\nimport { getFileUrlByFileRaw } from '@tdesign/common-js/upload/utils';\n\nexport default function UploadExample() {\n  const uploadRef1 = useRef(null);\n  const uploadRef2 = useRef(null);\n  const uploadRef3 = useRef(null);\n  const [files1, setFiles1] = useState([]);\n  const [files2, setFiles2] = useState([\n    {\n      url: 'https://tdesign.gtimg.com/demo/demo-image-1.png',\n      name: 'default.jpeg',\n      status: 'success',\n    },\n  ]);\n  const [files3, setFiles3] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n  const [uploadInOneRequest, setUploadInOneRequest] = useState(false);\n  const [autoUpload, setAutoUpload] = useState(true);\n  const setFormattedUrlFiles = (files) => {\n    const list = files.map(\n      (file) =>\n        new Promise((resolve) => {\n          getFileUrlByFileRaw(file.raw).then((url) => {\n            resolve({\n              ...file,\n              url,\n            });\n          });\n        }),\n    );\n    Promise.all(list).then((files) => {\n      setFiles3(files);\n    });\n  };\n\n  // 因上传请求始终返回固定的 url，为了让预览效果更加真实，故而将图片转为 base64 进行预览\n  const onSuccess = ({ currentFiles }) => {\n    const files = autoUpload ? files3.concat(currentFiles) : currentFiles;\n    setFormattedUrlFiles(files);\n  };\n\n  // 有文件数量超出时会触发，文件大小超出限制、文件同名时会触发等场景。注意如果设置允许上传同名文件，则此事件不会触发\n  const onValidate = (params) => {\n    const { files, type } = params;\n    console.log('onValidate', params);\n    if (type === 'FILE_OVER_SIZE_LIMIT') {\n      files.map((t) => t.name).join('、');\n      MessagePlugin.warning(`${files.map((t) => t.name).join('、')} 等图片大小超出限制，已自动过滤`, 5000);\n    } else if (type === 'FILES_OVER_LENGTH_LIMIT') {\n      MessagePlugin.warning('文件数量超出限制，仅上传未超出数量的文件');\n    } else if (type === 'FILTER_FILE_SAME_NAME') {\n      // 如果希望支持上传同名图片，请设置 allowUploadDuplicateFile={true}\n      MessagePlugin.warning('不允许上传同名图片');\n    }\n  };\n  const uploadFiles = () => {\n    uploadRef1.current.uploadFiles();\n    uploadRef2.current.uploadFiles();\n    uploadRef3.current.uploadFiles();\n  };\n  const onPreview = (params) => {\n    console.log('点击图片预览时触发', params);\n  };\n  const formatResponse = () => ({\n    name: 'FileName',\n    error: '网络异常，图片上传失败',\n  });\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Checkbox checked={disabled} onChange={setDisabled}>\n          禁用状态\n        </Checkbox>\n        <Checkbox checked={uploadInOneRequest} onChange={setUploadInOneRequest}>\n          多个文件一个请求上传\n        </Checkbox>\n        <Checkbox checked={autoUpload} onChange={setAutoUpload}>\n          自动上传\n        </Checkbox>\n        {!autoUpload && (\n          <Button\n            variant=\"base\"\n            theme=\"default\"\n            size=\"small\"\n            style={{\n              height: '22px',\n            }}\n            onClick={uploadFiles}\n          >\n            点击上传\n          </Button>\n        )}\n      </Space>\n\n      <br />\n      <Space direction=\"vertical\">\n        <Space>\n          <Upload\n            ref={uploadRef1}\n            files={files1}\n            onChange={setFiles1}\n            action=\"//service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n            theme=\"image\"\n            tips=\"请选择单张图片文件上传（上传成功状态演示）\"\n            accept=\"image/*\"\n            disabled={disabled}\n            locale={{\n              triggerUploadText: {\n                image: '请选择图片',\n              },\n            }}\n            autoUpload={autoUpload}\n            formatResponse={() => ({\n              url: 'https://tdesign.gtimg.com/demo/demo-image-1.png',\n            })}\n          />\n\n          <Upload\n            action=\"https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n            theme=\"image\"\n            tips=\"单张图片文件上传（上传失败状态演示）\"\n            accept=\"image/*\"\n            formatResponse={formatResponse}\n          />\n        </Space>\n\n        <Upload\n          ref={uploadRef2}\n          files={files2}\n          onChange={setFiles2}\n          action=\"//service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n          theme=\"image\"\n          accept=\"image/*\"\n          disabled={disabled}\n          autoUpload={autoUpload}\n          // custom UI example\n          // fileListDisplay={UploadUI}\n        />\n\n        <Upload\n          ref={uploadRef3}\n          files={files3}\n          onChange={setFiles3}\n          action=\"//service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n          theme=\"image\"\n          tips=\"允许选择多张图片文件上传，最多只能上传 3 张图片\"\n          accept=\"image/*\"\n          multiple\n          max={3}\n          disabled={disabled}\n          sizeLimit={{\n            size: 2,\n            unit: 'MB',\n          }}\n          autoUpload={autoUpload}\n          abridgeName={[6, 6]}\n          uploadAllFilesInOneRequest={uploadInOneRequest}\n          onSuccess={onSuccess}\n          onValidate={onValidate}\n          onPreview={onPreview}\n        />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "设置属性  即可，这种风格不支持拖拽上传，如果需要拖拽上传请移步文档下方有拖拽上传的示例。上传组件中的全部文本，均可通过  进行修改，也支持全局配置，查看文档。图片预览地址，默认会读取上传接口返回的  字段。如果接口没有返回  字段，可以使用  格式化返回值，在返回值中增加  字段。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Upload, Radio, Switch, Space, MessagePlugin } from 'tdesign-react';\n\nfunction getCurrentDate(needTime = false) {\n  const d = new Date();\n  const month = d.getMonth() + 1;\n  const monthText = month < 10 ? `0${month}` : month;\n  const date = `${d.getFullYear()}-${monthText}-${d.getDate()}`;\n  const time = `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`;\n  if (needTime) return [date, time].join(' ');\n  return date;\n}\nexport default function UploadExample() {\n  const [files, setFiles] = useState([]);\n  const [files2, setFiles2] = useState([\n    {\n      name: '默认文件',\n      url: 'https://tdesign.gtimg.com/site/source/figma-pc.png',\n      status: 'success',\n      size: 1024,\n      // 上传日期，如果接口返回的字段包含 uploadTime，则会以接口返回的为准，默认使用本地电脑时间。\n      // 如果希望使用接口返回的上传日期，但是接口字段名不是 uploadTime，则可以使用函数 formatResponse 格式化接口数据\n      uploadTime: '2022-09-25',\n    },\n  ]);\n  const [autoUpload, setAutoUpload] = React.useState(false);\n  const [theme, setTheme] = React.useState('file');\n  const onFail = () => {\n    MessagePlugin.error('上传失败');\n  };\n  const onSuccess = () => {\n    MessagePlugin.success('上传成功');\n  };\n\n  // res.url 图片地址；res.uploadTime 文件上传时间；res.error 上传失败的原因\n  const formatResponse = (res) => {\n    // 响应结果添加上传时间字段，用于 UI 显示\n    res.uploadTime = getCurrentDate();\n    return res;\n  };\n  const handleChange = (checked) => {\n    setAutoUpload(checked);\n  };\n  const handleTheme = (value) => {\n    setTheme(value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <div>\n        是否自动上传：\n        <Switch value={autoUpload} onChange={handleChange} />\n      </div>\n      <Radio.Group defaultValue=\"file\" onChange={handleTheme} variant=\"default-filled\">\n        <Radio.Button value=\"file\">文件拖拽上传</Radio.Button>\n        <Radio.Button value=\"image\">图片拖拽上传</Radio.Button>\n      </Radio.Group>\n\n      <br />\n\n      {/* 可以使用 trigger 自定义拖拽区域显示的内容 */}\n      {/* <!-- abridgeName 表示省略文件名中间文本，保留两侧。左侧保留的文本数量，右侧保留的文本数量] --> */}\n      <Space>\n        <Upload\n          theme={theme}\n          autoUpload={autoUpload}\n          data={{\n            extraData: 123,\n            fileName: 'certificate',\n          }}\n          draggable\n          action=\"//service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n          files={files}\n          formatResponse={formatResponse}\n          onChange={setFiles}\n          onFail={onFail}\n          onSuccess={onSuccess}\n          // use fileListDisplay to define any file info\n          // fileListDisplay={({ files }) => <div>{JSON.stringify(files)}</div>}\n        />\n\n        <Upload\n          theme={theme}\n          autoUpload={autoUpload}\n          data={{\n            extraData: 123,\n            fileName: 'certificate',\n          }}\n          draggable\n          action=\"//service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n          files={files2}\n          formatResponse={formatResponse}\n          onChange={setFiles2}\n          onFail={onFail}\n          onSuccess={onSuccess}\n        />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "上传组件中的全部文本，均可通过  进行修改，也支持全局配置，查看文档。如果拖拽上传单个文件，设置  和 。如果拖拽上传单张图片，设置  和 。可以使用  自定义文件信息呈现内容。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Upload, MessagePlugin, Space, Checkbox } from 'tdesign-react';\n\nconst ABRIDGE_NAME = [10, 7];\nexport default function FileFlowList() {\n  const [uploadInOneRequest, setUploadInOneRequest] = useState(false);\n  const [autoUpload, setAutoUpload] = useState(false);\n  const [isBatchUpload, setIsBatchUpload] = useState(false);\n  const [allowUploadDuplicateFile, setAllowUploadDuplicateFile] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n  const [showThumbnail, setShowThumbnail] = useState(false);\n  const [fileList, setFileList] = useState([]);\n\n  // 有文件数量超出时会触发，文件大小超出限制、文件同名时会触发等场景。注意如果设置允许上传同名文件，则此事件不会触发\n  const onValidate = (params) => {\n    const { files, type } = params;\n    console.log('onValidate', params);\n    if (type === 'FILE_OVER_SIZE_LIMIT') {\n      files.map((t) => t.name).join('、');\n      MessagePlugin.warning(`${files.map((t) => t.name).join('、')} 等文件大小超出限制，已自动过滤`, 5000);\n    } else if (type === 'FILES_OVER_LENGTH_LIMIT') {\n      MessagePlugin.warning('文件数量超出限制，仅上传未超出数量的文件');\n    } else if (type === 'FILTER_FILE_SAME_NAME') {\n      // 如果希望支持上传同名文件，请设置 allowUploadDuplicateFile={true}\n      MessagePlugin.warning('不允许上传同名文件');\n    }\n  };\n  const formatResponse = (res) => {\n    if (!res) {\n      return {\n        status: 'fail',\n        error: '上传失败，原因：文件过大或网络不通',\n      };\n    }\n    return res;\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Space breakLine>\n        <Checkbox checked={disabled} onChange={setDisabled}>\n          禁用状态\n        </Checkbox>\n        <Checkbox checked={autoUpload} onChange={setAutoUpload}>\n          自动上传\n        </Checkbox>\n        <Checkbox checked={showThumbnail} onChange={setShowThumbnail}>\n          显示文件缩略图\n        </Checkbox>\n        <Checkbox checked={allowUploadDuplicateFile} onChange={setAllowUploadDuplicateFile}>\n          允许上传同名文件\n        </Checkbox>\n        <Checkbox checked={isBatchUpload} onChange={setIsBatchUpload}>\n          整体替换上传\n        </Checkbox>\n        <Checkbox checked={uploadInOneRequest} onChange={setUploadInOneRequest}>\n          多个文件一个请求上传\n        </Checkbox>\n      </Space>\n\n      <br />\n\n      <Upload\n        files={fileList}\n        onChange={setFileList}\n        action=\"https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n        placeholder=\"支持批量上传文件，文件格式不限，最多只能上传 10 份文件\"\n        theme=\"file-flow\"\n        multiple\n        max={10}\n        abridge-name={ABRIDGE_NAME}\n        disabled={disabled}\n        autoUpload={autoUpload}\n        showThumbnail={showThumbnail}\n        uploadAllFilesInOneRequest={uploadInOneRequest}\n        isBatchUpload={isBatchUpload}\n        allowUploadDuplicateFile={allowUploadDuplicateFile}\n        onValidate={onValidate}\n        formatResponse={formatResponse}\n      />\n    </Space>\n  );\n}\n",
        "desc": "批量文件上传，请设置属性  和 。上传组件中的全部文本，均可通过  进行修改，同时也支持全局配置，查看文档。使用  实现多文上传时可重复选择重名文件。使用  与  实现多文件批量合并上传，多文件整体上传，整体替换，不允许追加文件。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Upload, Space, MessagePlugin, Switch, Checkbox, Divider } from 'tdesign-react';\n\nconst ABRIDGE_NAME = [4, 6];\nconst FILE_EXAMPLE = {\n  status: 'success',\n  response: {\n    url: 'https://tdesign.gtimg.com/site/avatar.jpg',\n  },\n};\nexport default function TUploadImageFlow() {\n  const [autoUpload, setAutoUpload] = useState(false);\n  const [showImageFileName, setShowImageFileName] = useState(true);\n  const [showUploadButton, setShowUploadButton] = useState(true);\n  const [files, setFiles] = useState([\n    {\n      url: 'https://tdesign.gtimg.com/demo/demo-image-1.png',\n      status: 'success',\n      name: 'demo-image-1.png',\n    },\n    {\n      url: 'https://tdesign.gtimg.com/site/avatar.jpg',\n      status: 'success',\n      name: 'avatar.jpg',\n    },\n  ]);\n  // eslint-disable-next-line\n  const [files2, setFiles2] = useState([]);\n  const staticFiles = [\n    {\n      url: 'https://tdesign.gtimg.com/demo/demo-image-1.png',\n      name: 'loading.svg',\n      status: 'success',\n    },\n    {\n      url: 'https://tdesign.gtimg.com/demo/demo-image-1.png',\n      name: 'loading.svg',\n      status: 'waiting',\n    },\n    {\n      // url: 'https://tdesign.gtimg.com/demo/demo-image-1.png',\n      name: 'loading.svg',\n      status: 'progress',\n      percent: 10,\n    },\n    {\n      url: 'https://tdesign.gtimg.com/demo/demo-image-1.png',\n      name: 'loading.svg',\n      status: 'fail',\n    },\n  ];\n\n  // 示例代码：自定义上传方法，一个请求上传一个文件\n  // eslint-disable-next-line\n  const requestMethod1 = () => {\n    return new Promise((resolve) => {\n      resolve(FILE_EXAMPLE);\n    });\n  };\n\n  // 示例代码：自定义上传方法，一个请求上传多个文件\n  // eslint-disable-next-line\n  const requestMethod2 = () => {\n    const files = [\n      {\n        name: files2[0].name,\n        status: 'success',\n        url: 'https://tdesign.gtimg.com/site/avatar.jpg',\n      },\n      {\n        name: files2[1].name,\n        status: 'success',\n        url: 'https://avatars.githubusercontent.com/u/11605702?v=4',\n      },\n    ];\n    return new Promise((resolve) => {\n      resolve({\n        status: 'success',\n        response: {\n          files,\n        },\n      });\n    });\n  };\n\n  // 有文件数量超出时会触发，文件大小超出限制、文件同名时会触发等场景。注意如果设置允许上传同名文件，则此事件不会触发\n  const onValidate = (params) => {\n    const { files, type } = params;\n    console.log('onValidate', params);\n    if (type === 'FILE_OVER_SIZE_LIMIT') {\n      files.map((t) => t.name).join('、');\n      MessagePlugin.warning(`${files.map((t) => t.name).join('、')} 等文件大小超出限制，已自动过滤`, 5000);\n    } else if (type === 'FILES_OVER_LENGTH_LIMIT') {\n      MessagePlugin.warning('文件数量超出限制，仅上传未超出数量的文件');\n    } else if (type === 'FILTER_FILE_SAME_NAME') {\n      // 如果希望支持上传同名文件，请设置 allowUploadDuplicateFile={true}\n      MessagePlugin.warning('不允许上传同名文件');\n    }\n  };\n  const handleSwitchChange = (checked) => {\n    setAutoUpload(checked);\n  };\n\n  // 因接口返回的 url 是同一个，所以看到的图片都是一个\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <div>\n          AutoUpload\n          <Switch value={autoUpload} onChange={handleSwitchChange} />\n        </div>\n        <Checkbox value={showImageFileName} onChange={setShowImageFileName}>\n          Show Image Name\n        </Checkbox>\n        <Checkbox value={showUploadButton} onChange={setShowUploadButton}>\n          Show UploadButton Or CancelUploadButton\n        </Checkbox>\n      </Space>\n\n      <br />\n\n      {/* <!-- action 上传地址，使用组件内部上传逻辑，action=\"https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\" --> */}\n      {/* <!-- requestMethod 自定义上传方法，自定义上传逻辑 --> */}\n      <Upload\n        files={files}\n        onChange={setFiles}\n        // action=\"https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n        requestMethod={requestMethod1}\n        placeholder=\"支持批量上传图片文件\"\n        theme=\"image-flow\"\n        accept=\"image/*\"\n        multiple\n        autoUpload={autoUpload}\n        max={8}\n        abridgeName={ABRIDGE_NAME}\n        showImageFileName={showImageFileName}\n        uploadButton={showUploadButton ? {} : null}\n        cancelUploadButton={\n          showUploadButton\n            ? {\n                theme: 'default',\n                content: '取消上传',\n              }\n            : null\n        }\n        onValidate={onValidate}\n      />\n\n      {/* <Upload\n        files={files2}\n        onChange={setFiles2}\n        // action=\"https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n        requestMethod={requestMethod2}\n        placeholder=\"支持批量上传图片文件\"\n        theme=\"image-flow\"\n        accept=\"image/*\"\n        multiple\n        autoUpload={autoUpload}\n        max={8}\n        abridgeName={ABRIDGE_NAME}\n        uploadAllFilesInOneRequest={true}\n        onValidate={onValidate}\n       /> */}\n\n      <br />\n      <Divider align=\"left\">Different Status Images</Divider>\n\n      <Upload\n        files={staticFiles}\n        theme=\"image-flow\"\n        showImageFileName={showImageFileName}\n        className=\"static-image-list\"\n      ></Upload>\n    </Space>\n  );\n}\n",
        "desc": "批量图片上传，请设置属性  和 。上传组件中的全部文本，均可通过  进行修改，同时也支持全局配置，查看文档。"
      },
      {
        "code": "import React, { useCallback, useRef, useState } from 'react';\nimport { Radio, Upload, Space, MessagePlugin } from 'tdesign-react';\n\nconst RequestMethod = () => {\n  const [files, setFiles] = useState([]);\n  const [uploadMethod, setUploadMethod] = useState('requestSuccessMethod');\n  const uploadRef = useRef(null);\n\n  // customize upload `file`, if success, return url\n  const requestSuccessMethod = useCallback(\n    (file) =>\n      new Promise((resolve) => {\n        // 上传进度控制示例\n        let percent = 0;\n        const percentTimer = setInterval(() => {\n          if (percent + 10 < 99) {\n            percent += 10;\n            uploadRef.current.uploadFilePercent({\n              file,\n              percent,\n            });\n          } else {\n            clearInterval(percentTimer);\n          }\n        }, 100);\n\n        //  mock upload progress\n        let timer = setTimeout(() => {\n          // resolve 参数为关键代码\n          resolve({\n            status: 'success',\n            response: {\n              url: 'https://tdesign.gtimg.com/site/avatar.jpg',\n            },\n          });\n          clearTimeout(timer);\n          timer = null;\n        }, 1000);\n      }),\n    [],\n  );\n\n  // customize upload `file`, if fail, return error message\n  const requestFailMethod = useCallback(\n    () =>\n      new Promise((resolve) => {\n        const errorResult = {\n          status: 'fail',\n          // `errorResult.error` is equal to `errorResult.response.error`\n          // error: 'for some reason, upload fail',\n\n          // this is request response, response.url is required for file or image preview\n          response: {\n            url: '',\n            error: 'for some reason, upload fail',\n          },\n        };\n        resolve(errorResult);\n      }),\n    [],\n  );\n  const onChangeUploadMethod = useCallback((value) => {\n    setUploadMethod(value);\n    setFiles([]);\n  }, []);\n  const onSuccess = () => {\n    MessagePlugin.success('上传成功');\n  };\n  const onFail = () => {\n    MessagePlugin.error('上传失败');\n  };\n  return (\n    <Space direction=\"vertical\" size=\"large\">\n      <Radio.Group variant=\"default-filled\" value={uploadMethod} onChange={onChangeUploadMethod}>\n        <Radio.Button value=\"requestSuccessMethod\">上传成功示例</Radio.Button>\n        <Radio.Button value=\"requestFailMethod\">上传失败示例</Radio.Button>\n      </Radio.Group>\n\n      <Upload\n        ref={uploadRef}\n        files={files}\n        onChange={setFiles}\n        requestMethod={uploadMethod === 'requestSuccessMethod' ? requestSuccessMethod : requestFailMethod}\n        placeholder=\"自定义上传方法需要返回成功或失败信息\"\n        onSuccess={onSuccess}\n        onFail={onFail}\n      />\n    </Space>\n  );\n};\nexport default RequestMethod;\n",
        "desc": "可以使用  自定义上传方法，返回 Promise 对象，resolve 参数中的  控制上传成功或失败， 表示上传失败的原因。"
      },
      {
        "code": "import React, { useCallback, useState } from 'react';\nimport { Button, message, Upload, Space } from 'tdesign-react';\n\nexport default function SingleCustom() {\n  const MAX_UPLOAD_SIZE = 1;\n  const [tips, setTips] = useState(`上传文件大小在 ${MAX_UPLOAD_SIZE}M 以内`);\n  const [files, setFiles] = useState([]);\n  const [name, setName] = useState('name');\n  const handleChange = useCallback((files) => {\n    setFiles(files);\n  }, []);\n  const handleFail = useCallback(({ file }) => {\n    message.error(`文件 ${file.name} 上传失败`);\n  }, []);\n  const handleSuccess = useCallback(() => {\n    setTips('');\n    message.success('上传成功');\n  }, []);\n  const beforeUpload = useCallback(\n    () =>\n      new Promise((resolve) => {\n        setName('name2');\n        // 在这里写文件上传前的校验\n        resolve(true);\n      }),\n    [],\n  );\n\n  // 也可以使用 useUpload 自定义上传组件，该 Hook 包含上传组件的所有的逻辑\n  return (\n    <Space direction=\"vertical\">\n      <Upload\n        headers={{\n          name,\n        }}\n        action=\"https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n        tips={tips}\n        files={files}\n        onChange={handleChange}\n        onFail={handleFail}\n        onSuccess={handleSuccess}\n        theme=\"custom\"\n        beforeUpload={beforeUpload}\n        method=\"put\"\n        multiple\n      >\n        <Button theme=\"primary\">自定义上传</Button>\n      </Upload>\n      {files?.length > 0 && (\n        <div\n          style={{\n            fontSize: '13px',\n          }}\n        >\n          <ul\n            style={{\n              padding: 0,\n            }}\n          >\n            {files.map((file, index) => (\n              <li\n                key={index}\n                style={{\n                  listStyleType: 'none',\n                }}\n              >\n                {file.name}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </Space>\n  );\n}\n",
        "desc": "使用  自定义上传的触发元素，文件列表在上传组件外部自定义。"
      },
      {
        "code": "import React, { useCallback, useState } from 'react';\nimport { Button, message, Upload, Space } from 'tdesign-react';\nimport { CloudUploadIcon } from 'tdesign-icons-react';\n\nexport default function CustomDrag() {\n  const [files, setFiles] = useState([]);\n  const [progress, setProgress] = useState(0);\n  const uploadDom = React.useRef(null);\n  const handleChange = useCallback((files) => {\n    setFiles(files.slice(-1));\n  }, []);\n  const handleFail = useCallback(({ file }) => {\n    message.error(`文件 ${file.name} 上传失败`);\n  }, []);\n  const handleSuccess = useCallback(({ file }) => {\n    message.success(`文件 ${file.name} 上传成功`);\n  }, []);\n  const upload = useCallback(() => {\n    uploadDom.current.triggerUpload();\n  }, [uploadDom]);\n  const onProgress = useCallback((val) => {\n    setProgress(val.percent);\n  }, []);\n  const customDraggerRender = useCallback(\n    (triggerContext) => {\n      const { dragActive } = triggerContext;\n      function renderCustomDrag() {\n        if (dragActive) {\n          return <p>释放鼠标</p>;\n        }\n        return progress < 1 ? <Button>自定义拖拽区域</Button> : null;\n      }\n      function renderFiles(files) {\n        return (\n          <ul\n            style={{\n              padding: '0',\n            }}\n          >\n            {files.map((file) => (\n              <li\n                key={file.name}\n                style={{\n                  listStyleType: 'none',\n                }}\n              >\n                {file.name}\n              </li>\n            ))}\n          </ul>\n        );\n      }\n      return (\n        <>\n          {files?.length ? renderFiles(files) : renderCustomDrag()}\n          {files?.length > 0 && (\n            <Button\n              variant=\"base\"\n              style={{\n                marginTop: '16px',\n              }}\n            >\n              更换文件\n            </Button>\n          )}\n          <br />\n          <br />\n        </>\n      );\n    },\n    [files, progress],\n  );\n  return (\n    <Space direction=\"vertical\">\n      <Button variant=\"outline\" icon={<CloudUploadIcon />} onClick={upload}>\n        点击上传\n      </Button>\n      <Upload\n        ref={uploadDom}\n        files={files}\n        action=\"https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo\"\n        draggable\n        theme=\"custom\"\n        dragContent={customDraggerRender}\n        onChange={handleChange}\n        // onTrigger={handleChange}\n        onFail={handleFail}\n        onSuccess={handleSuccess}\n        onProgress={onProgress}\n      />\n    </Space>\n  );\n}\n",
        "desc": "使用  自定义拖拽区域的元素内容，如果需要额外的上传触发元素可以在上传组件外部自定义。"
      }
    ]
  },
  {
    "name": "<Avatar/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Avatar, Space } from 'tdesign-react';\nimport { UserIcon } from 'tdesign-icons-react';\n\nexport default function BasicAvatar() {\n  return (\n    <Space>\n      <Avatar\n        icon={<UserIcon />}\n        style={{\n          marginRight: '40px',\n        }}\n      />\n      <Avatar\n        image=\"https://tdesign.gtimg.com/site/avatar.jpg\"\n        hideOnLoadFailed={false}\n        style={{\n          marginRight: '40px',\n        }}\n      />\n      <Avatar\n        style={{\n          marginRight: '40px',\n        }}\n      >\n        W\n      </Avatar>\n    </Space>\n  );\n}\n",
        "desc": "头像提供了 3 种不同类型的头像：图标头像、图片头像、字符头像"
      },
      {
        "code": "import React from 'react';\nimport { Avatar, Space } from 'tdesign-react';\n\nexport default function ShapeAvatar() {\n  return (\n    <Space>\n      <Avatar\n        style={{\n          marginRight: '40px',\n        }}\n      >\n        W\n      </Avatar>\n      <Avatar\n        shape=\"round\"\n        style={{\n          marginRight: '40px',\n        }}\n      >\n        W\n      </Avatar>\n    </Space>\n  );\n}\n",
        "desc": "头像默认支持两种形状：round、circle，用户也可自定义设置头像形状"
      },
      {
        "code": "import React from 'react';\nimport { Avatar, Space } from 'tdesign-react';\n\nexport default function SizeAvatar() {\n  return (\n    <Space direction=\"vertical\" size=\"large\">\n      <Space align=\"center\">\n        <Avatar\n          size=\"small\"\n          style={{\n            marginRight: '40px',\n          }}\n        >\n          W\n        </Avatar>\n        <Avatar\n          size=\"medium\"\n          style={{\n            marginRight: '40px',\n          }}\n        >\n          W\n        </Avatar>\n        <Avatar\n          size=\"large\"\n          style={{\n            marginRight: '40px',\n          }}\n        >\n          W\n        </Avatar>\n        <Avatar\n          size=\"100px\"\n          style={{\n            marginRight: '40px',\n          }}\n        >\n          W\n        </Avatar>\n      </Space>\n      <Space align=\"center\">\n        <Avatar\n          shape=\"round\"\n          size=\"small\"\n          style={{\n            marginRight: '40px',\n          }}\n        >\n          W\n        </Avatar>\n        <Avatar\n          shape=\"round\"\n          size=\"medium\"\n          style={{\n            marginRight: '40px',\n          }}\n        >\n          W\n        </Avatar>\n        <Avatar\n          shape=\"round\"\n          size=\"large\"\n          style={{\n            marginRight: '40px',\n          }}\n        >\n          W\n        </Avatar>\n        <Avatar\n          shape=\"round\"\n          size=\"100px\"\n          style={{\n            marginRight: '40px',\n          }}\n        >\n          W\n        </Avatar>\n      </Space>\n      <Space align=\"center\">\n        <Avatar\n          alt=\"test\"\n          image=\"https://tdesign.gtimg.com/site/avatar.jpg\"\n          shape=\"round\"\n          size=\"small\"\n          style={{\n            marginRight: '40px',\n          }}\n        ></Avatar>\n        <Avatar\n          image=\"https://tdesign.gtimg.com/site/avatar.jpg\"\n          shape=\"round\"\n          size=\"medium\"\n          style={{\n            marginRight: '40px',\n          }}\n        ></Avatar>\n        <Avatar\n          image=\"https://tdesign.gtimg.com/site/avatar.jpg\"\n          shape=\"round\"\n          size=\"large\"\n          style={{\n            marginRight: '40px',\n          }}\n        ></Avatar>\n        <Avatar\n          image=\"https://tdesign.gtimg.com/site/avatar.jpg\"\n          shape=\"round\"\n          size=\"100px\"\n          style={{\n            marginRight: '40px',\n          }}\n        ></Avatar>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "头像默认支持三种大小：small、medium、large，用户可自定义设置大小"
      },
      {
        "code": "import React from 'react';\nimport { Avatar, Space } from 'tdesign-react';\n\nexport default function AdjustAvatar() {\n  return (\n    <Space>\n      <Avatar\n        style={{\n          marginRight: '40px',\n        }}\n      >\n        王\n      </Avatar>\n      <Avatar\n        style={{\n          marginRight: '40px',\n        }}\n      >\n        王亿\n      </Avatar>\n      <Avatar\n        style={{\n          marginRight: '40px',\n        }}\n      >\n        王亿亿\n      </Avatar>\n    </Space>\n  );\n}\n",
        "desc": "头像支持字符自适应，即字符长度过长时，头像可自动调整字符以便呈现完整内容"
      },
      {
        "code": "import React from 'react';\nimport { Avatar, Space } from 'tdesign-react';\nimport { UserIcon } from 'tdesign-icons-react';\n\nconst { Group: AvatarGroup } = Avatar;\nexport default function GroupAvatar() {\n  return (\n    <Space direction=\"vertical\">\n      <AvatarGroup>\n        <Avatar image=\"https://tdesign.gtimg.com/site/avatar.jpg\"></Avatar>\n        <Avatar>W</Avatar>\n        <Avatar icon={<UserIcon />}></Avatar>\n      </AvatarGroup>\n\n      <AvatarGroup size=\"large\">\n        <Avatar image=\"https://tdesign.gtimg.com/site/avatar.jpg\"></Avatar>\n        <Avatar>W</Avatar>\n        <Avatar icon={<UserIcon />}></Avatar>\n      </AvatarGroup>\n    </Space>\n  );\n}\n",
        "desc": "组合头像展现"
      },
      {
        "code": "import React from 'react';\nimport { Avatar, Space } from 'tdesign-react';\nimport { UserIcon } from 'tdesign-icons-react';\n\nconst { Group: AvatarGroup } = Avatar;\nexport default function GroupCascadingAvatar() {\n  return (\n    <Space direction=\"vertical\">\n      <AvatarGroup>\n        <Avatar image=\"https://tdesign.gtimg.com/site/avatar.jpg\"></Avatar>\n        <Avatar>W</Avatar>\n        <Avatar icon={<UserIcon />}></Avatar>\n      </AvatarGroup>\n\n      <AvatarGroup cascading=\"left-up\">\n        <Avatar image=\"https://tdesign.gtimg.com/site/avatar.jpg\"></Avatar>\n        <Avatar>W</Avatar>\n        <Avatar icon={<UserIcon />}></Avatar>\n      </AvatarGroup>\n    </Space>\n  );\n}\n",
        "desc": "组合头像可控制层叠方向"
      },
      {
        "code": "import React from 'react';\nimport { Avatar, Space } from 'tdesign-react';\nimport { UserIcon, EllipsisIcon } from 'tdesign-icons-react';\n\nconst { Group: AvatarGroup } = Avatar;\nexport default function GroupMaxAvatar() {\n  return (\n    <Space direction=\"vertical\">\n      <AvatarGroup size=\"large\" max={2}>\n        <Avatar image=\"https://tdesign.gtimg.com/site/avatar.jpg\"></Avatar>\n        <Avatar>Avatar</Avatar>\n        <Avatar image=\"https://tdesign.gtimg.com/site/avatar.jpg\"></Avatar>\n      </AvatarGroup>\n\n      <AvatarGroup size=\"large\" max={2} collapseAvatar={<EllipsisIcon />}>\n        <Avatar image=\"https://tdesign.gtimg.com/site/avatar.jpg\"></Avatar>\n        <Avatar>Avatar</Avatar>\n        <Avatar icon={<UserIcon />}></Avatar>\n      </AvatarGroup>\n\n      <AvatarGroup size=\"large\" max={2} collapseAvatar=\"more\">\n        <Avatar image=\"https://tdesign.gtimg.com/site/avatar.jpg\"></Avatar>\n        <Avatar>Avatar</Avatar>\n        <Avatar icon={<UserIcon />}></Avatar>\n      </AvatarGroup>\n    </Space>\n  );\n}\n",
        "desc": "组合头像可设置最大展示个数，超过则隐藏显示"
      }
    ]
  },
  {
    "name": "<Badge/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Badge, Button } from 'tdesign-react';\nimport { UserIcon } from 'tdesign-icons-react';\n\nexport default function BadgeExample() {\n  return (\n    <>\n      <Badge dot count={2}>\n        <Button size=\"large\"> </Button>\n      </Badge>\n      <Badge dot count={99}>\n        解锁新徽章\n      </Badge>\n      <Badge dot count={100}>\n        <UserIcon size={24} />\n      </Badge>\n    </>\n  );\n}\n",
        "desc": "仅显示为圆点的徽标，有图标时位于图标右上角，无图标时位于文字标题后侧。弱提示场景下，不显示数量，需要用户去手动点击查看进行消除。"
      },
      {
        "code": "import React from 'react';\nimport { Badge, Button } from 'tdesign-react';\n\nexport default function BadgeExample() {\n  return (\n    <>\n      <Badge count={2}>\n        <Button size=\"large\"> </Button>\n      </Badge>\n      <Badge count={99}>\n        <Button size=\"large\"> </Button>\n      </Badge>\n      <Badge count={100}>\n        <Button size=\"large\"> </Button>\n      </Badge>\n    </>\n  );\n}\n",
        "desc": "含数字的徽标，适用于需要较强提醒的场景，直接提醒用户相关信息数量。"
      },
      {
        "code": "import React from 'react';\nimport { Badge, Space } from 'tdesign-react';\n\nexport default function BadgeExample() {\n  const badgeBlockStyle = {\n    width: '40px',\n    height: '40px',\n    background: '#EEEEEE',\n    border: '1px solid #DCDCDC',\n    borderRadius: '3px',\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Space size={24}>\n        <Badge count=\"2\" dot>\n          <div style={badgeBlockStyle}></div>\n        </Badge>\n        <Badge count=\"hot\">\n          <div style={badgeBlockStyle}></div>\n        </Badge>\n        <Badge count=\"new\" color=\"var(--td-success-color)\">\n          <div style={badgeBlockStyle}></div>\n        </Badge>\n        <Badge count=\"100\" color=\"var(--brand-main)\" shape=\"round\">\n          <div style={badgeBlockStyle}></div>\n        </Badge>\n      </Space>\n\n      <Space size={24}>\n        <Badge count=\"2\" dot>\n          <div style={badgeBlockStyle}></div>\n        </Badge>\n        <Badge\n          count={\n            <span\n              style={{\n                color: 'var(--td-error-color)',\n              }}\n            >\n              hot\n            </span>\n          }\n          color=\"var(--td-error-color-1)\"\n        >\n          <div style={badgeBlockStyle}></div>\n        </Badge>\n        <Badge\n          count={\n            <span\n              style={{\n                color: 'var(--td-success-color)',\n              }}\n            >\n              new\n            </span>\n          }\n          color=\"var(--td-success-color-1)\"\n        >\n          <div style={badgeBlockStyle}></div>\n        </Badge>\n        <Badge\n          count={\n            <span\n              style={{\n                color: 'var(--td-brand-color)',\n              }}\n            >\n              new\n            </span>\n          }\n          color=\"var(--td-brand-color-1)\"\n        >\n          <div style={badgeBlockStyle}></div>\n        </Badge>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "可对显示信息进行自定义配置，如展示为“热门hot”“最新new”等。"
      },
      {
        "code": "import React from 'react';\nimport { Badge, Button } from 'tdesign-react';\n\nexport default function BadgeExample() {\n  return (\n    <>\n      <h3\n        style={{\n          marginBottom: 16,\n        }}\n      >\n        1.默认大小\n      </h3>\n      <Badge count={2}>\n        <Button>按钮</Button>\n      </Badge>\n      <Badge count={99}>\n        <Button>按钮</Button>\n      </Badge>\n      <Badge count={999}>\n        <Button>按钮</Button>\n      </Badge>\n      <h3\n        style={{\n          marginBottom: 16,\n          marginTop: 32,\n        }}\n      >\n        2.小\n      </h3>\n      <Badge count={2} size=\"small\">\n        <Button>按钮</Button>\n      </Badge>\n      <Badge count={99} size=\"small\">\n        <Button>按钮</Button>\n      </Badge>\n      <Badge count={999} size=\"small\">\n        <Button>按钮</Button>\n      </Badge>\n    </>\n  );\n}\n",
        "desc": "提供标准（默认）、小两种尺寸。"
      },
      {
        "code": "import React from 'react';\nimport { Badge, Button } from 'tdesign-react';\n\nexport default function BadgeExample() {\n  return (\n    <>\n      <Badge shape={'circle'} count={2}>\n        <Button> circle</Button>\n      </Badge>\n      <Badge shape={'round'} count={99}>\n        <Button>round</Button>\n      </Badge>\n    </>\n  );\n}\n",
        "desc": "提供圆形和方形两种不同形状的徽标展示。"
      },
      {
        "code": "import React from 'react';\nimport { Badge, Button } from 'tdesign-react';\n\nexport default function BadgeExample() {\n  return (\n    <>\n      <Badge count={2}>\n        <Button>默认</Button>\n      </Badge>\n      <Badge count={2} offset={[10, 10]}>\n        <Button>[10,10]</Button>\n      </Badge>\n      <Badge count={2} offset={[-10, 10]}>\n        <Button>[-10,10]</Button>\n      </Badge>\n      <Badge count={2} offset={[-10, -10]}>\n        <Button>[-10,-10]</Button>\n      </Badge>\n      <Badge count={2} offset={[10, -10]}>\n        <Button>[10,-10]</Button>\n      </Badge>\n    </>\n  );\n}\n",
        "desc": "控制徽标显示偏移位置"
      }
    ]
  },
  {
    "name": "<Calendar/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Calendar } from 'tdesign-react';\n\nexport default function CalendarExample() {\n  return <Calendar />;\n}\n",
        "desc": "在日期中可显示事项的日期显示容器。常用于有足够空间，且需要承载或显示事项信息时使用。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Calendar, Select, Switch, Space } from 'tdesign-react';\n\nexport default function CalendarExample() {\n  const ref = React.useRef(null);\n  const [theme, setTheme] = React.useState('card');\n  const [fillWithZero, setFillWithZero] = React.useState(false);\n  const toCurrent = React.useCallback(() => {\n    ref.current.toCurrent();\n  }, [ref]);\n  return (\n    <Space direction=\"vertical\" size=\"large\">\n      <Space align=\"center\">\n        <label>请选择风格：</label>\n        <Select\n          style={{\n            width: '200px',\n            display: 'inline-block',\n            margin: '0 10px 0 0',\n          }}\n          value={theme}\n          options={[\n            {\n              label: '卡片风格',\n              value: 'card',\n            },\n            {\n              label: '全屏风格',\n              value: 'full',\n            },\n          ]}\n          onChange={(value) => setTheme(value)}\n        />\n        <Button\n          theme=\"primary\"\n          style={{\n            marginLeft: '12px',\n          }}\n          onClick={toCurrent}\n        >\n          回到今天\n        </Button>\n      </Space>\n      <Space align=\"center\">\n        <label>日期补零：</label>\n        <Switch size=\"large\" value={fillWithZero} onChange={(val) => setFillWithZero(val)}></Switch>\n      </Space>\n      <Calendar ref={ref} theme={theme} isShowWeekendDefault={true} fillWithZero={fillWithZero} />\n    </Space>\n  );\n}\n",
        "desc": "以独立日期为单位，嵌套在空间有限的容器内，用以展示日期等信息。"
      },
      {
        "code": "import React from 'react';\nimport { Calendar } from 'tdesign-react';\n\nexport default function CalendarExample() {\n  const value = '1998-11-11'; // new Date(1998, 10, 11)\n  return <Calendar value={value} />;\n}\n",
        "desc": "通过组件属性自定义指定高亮日期。组件默认高亮“今天”或“当前月份”。使用  属性可以设置这个高亮的日期。"
      },
      {
        "code": "import React from 'react';\nimport { Select, Calendar, Space } from 'tdesign-react';\n\nexport default function CalendarExample() {\n  const [mode, setMode] = React.useState('year');\n  return (\n    <div>\n      <Space\n        align=\"center\"\n        style={{\n          margin: '12px 0',\n        }}\n      >\n        <label>可以在组件外切换成：</label>\n        <Select\n          style={{\n            width: '200px',\n            display: 'inline-block',\n            margin: '0 10px 0 0',\n          }}\n          value={mode}\n          options={[\n            {\n              label: '月历',\n              value: 'year',\n            },\n            {\n              label: '日历',\n              value: 'month',\n            },\n          ]}\n          onChange={(value) => setMode(value)}\n        />\n      </Space>\n      <Calendar mode={mode} />\n    </div>\n  );\n}\n",
        "desc": "通过组件属性指定组件的展示形式。组件默认以日历的形式展示，并提供了 “日历”，“月历” 两种模式切换按钮，开发者可以通过修改  属性切换模式。"
      },
      {
        "code": "import React from 'react';\nimport { Select, Calendar, Space } from 'tdesign-react';\n\nexport default function CalendarExample() {\n  const [firstDayOfWeek, setFirstDayOfWeek] = React.useState(3);\n  return (\n    <div>\n      <Space\n        align=\"center\"\n        style={{\n          margin: '12px 0',\n        }}\n      >\n        <label>日历的第一列为：</label>\n        <Select\n          style={{\n            width: '200px',\n            display: 'inline-block',\n            margin: '0 10px 0 0',\n          }}\n          value={firstDayOfWeek}\n          options={[\n            {\n              label: '周一',\n              value: 1,\n            },\n            {\n              label: '周二',\n              value: 2,\n            },\n            {\n              label: '周三',\n              value: 3,\n            },\n            {\n              label: '周四',\n              value: 4,\n            },\n            {\n              label: '周五',\n              value: 5,\n            },\n            {\n              label: '周六',\n              value: 6,\n            },\n            {\n              label: '周日',\n              value: 7,\n            },\n          ]}\n          onChange={(value) => setFirstDayOfWeek(value)}\n        />\n      </Space>\n      <Calendar firstDayOfWeek={firstDayOfWeek} />\n    </div>\n  );\n}\n",
        "desc": "通过组件属性指定日历首列星期。组件默认第一列为“周一”，可以通过  属性设置成其他星期(只对  为  有效)。"
      },
      {
        "code": "import React, { useEffect } from 'react';\nimport { Calendar, Switch } from 'tdesign-react';\n\nconst classStyles = `\n  <style>\n    .controllerConfig-demo fieldset {\n      border: solid 1px #eee;\n      padding: 10px 20px 10px 0;\n      margin-bottom: 10px;\n    }\n    .controllerConfig-demo fieldset legend {\n      margin-left: 20px;\n      padding: 0 10px;\n    }\n    .controllerConfig-demo fieldset p {\n      margin-bottom: 5px;\n    }\n    .controllerConfig-demo fieldset p label {\n      margin-left: 20px;\n    }\n    .outerWarper {\n      width: 100%;\n      height: 100%;\n      position: relative;\n\n      .shadow {\n        position: absolute;\n        width: 100%;\n        height: 12px;\n        bottom: 0;\n        background: linear-gradient(180deg, rgba(255, 255, 255, 0) 0%, #ffffff 100%);\n      }\n      .number {\n        font-weight: bold;\n        position: absolute;\n        top: 3px;\n        right: 5px;\n        font-size: 14px;\n      }\n      .item {\n        position: relative;\n        display: flex;\n        align-items: center;\n        color: rgba(0, 0, 0, 0.6);\n        span {\n          display: block;\n          left: 1px;\n          width: 5px;\n          height: 5px;\n          border-radius: 10px;\n          margin-right: 4px;\n        }\n      }\n      .error {\n        background: #e34d59;\n      }\n      .warning {\n        background: #ed7b2f;\n      }\n      .success {\n        background: #00a870;\n      }\n\n      .slotWarper {\n        position: absolute;\n        bottom: 2px;\n        left: 5px;\n      }\n    }\n    .cellAppend {\n      margin: 10px;\n      background-color: #ebf2ff;\n      color: #888;\n      border-radius: 3px;\n      padding: 2px 4px;\n    }\n    .cellAppend.belongCurrent {\n      color: #0052d9;\n    }\n    .cellAppend.actived {\n      background-color: #0052d9;\n      color: #ebf2ff;\n    }\n  </style>\n`;\nexport default function CalendarExample() {\n  const [visible, setVisible] = React.useState(true);\n  const [disabled, setDisabled] = React.useState(false);\n  const [modeVisible, setModeVisible] = React.useState(true);\n  const [modeDisabled, setModeDisabled] = React.useState(false);\n  const [yearVisible, setYearVisible] = React.useState(true);\n  const [yearDisabled, setYearDisabled] = React.useState(false);\n  const [monthVisible, setMonthVisible] = React.useState(true);\n  const [monthDisabled, setMonthDisabled] = React.useState(false);\n  const [weekendToggleVisible, setWeekendToggleVisible] = React.useState(true);\n  const [weekendShowButtonDisabled, setWeekendShowButtonDisabled] = React.useState(false);\n  const [weekendHideButtonDisabled, setWeekendHideButtonDisabled] = React.useState(false);\n  const [currentVisible, setCurrentVisible] = React.useState(true);\n  const [currentDayButtonDisabled, setCurrentDayButtonDisabled] = React.useState(false);\n  const [currentMonthButtonDisabled, setCurrentMonthButtonDisabled] = React.useState(false);\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  return (\n    <div className=\"controllerConfig-demo\">\n      <div\n        style={{\n          margin: '12px 0',\n        }}\n      >\n        <fieldset>\n          <legend>控件全局</legend>\n          <p>\n            <label>是否显示（全部控件）：</label>\n            <Switch value={visible} onChange={(val) => setVisible(val)} />\n          </p>\n          <br />\n          <p>\n            <label>是否禁用（全部控件）：</label>\n            <Switch value={disabled} onChange={(val) => setDisabled(val)} />\n          </p>\n          <br />\n        </fieldset>\n        <fieldset>\n          <legend>控件局部</legend>\n          <p>\n            <label>是否显示“模式切换”控件：</label>\n            <Switch value={modeVisible} onChange={(val) => setModeVisible(val)} />\n            <label>是否禁用“模式切换”控件：</label>\n            <Switch value={modeDisabled} onChange={(val) => setModeDisabled(val)} />\n          </p>\n          <br />\n          <p>\n            <label>是否显示“年份选择”控件：</label>\n            <Switch value={yearVisible} onChange={(val) => setYearVisible(val)} />\n            <label>是否禁用“年份选择”控件：</label>\n            <Switch value={yearDisabled} onChange={(val) => setYearDisabled(val)} />\n          </p>\n          <br />\n          <p>\n            <label>是否显示“月份选择”控件：</label>\n            <Switch value={monthVisible} onChange={(val) => setMonthVisible(val)} />\n            <label>是否禁用“月份选择”控件：</label>\n            <Switch value={monthDisabled} onChange={(val) => setMonthDisabled(val)} />\n          </p>\n          <br />\n          <p>\n            <label>是否禁用“隐藏周末”控件：</label>\n            <Switch value={weekendHideButtonDisabled} onChange={(val) => setWeekendHideButtonDisabled(val)} />\n            <label>是否禁用“显示周末”控件：</label>\n            <Switch value={weekendShowButtonDisabled} onChange={(val) => setWeekendShowButtonDisabled(val)} />\n            <label>是否显示“隐藏\\显示周末”控件：</label>\n            <Switch value={weekendToggleVisible} onChange={(val) => setWeekendToggleVisible(val)} />\n          </p>\n          <br />\n          <p>\n            <label>是否显示“今天\\本月”控件：</label>\n            <Switch value={currentVisible} onChange={(val) => setCurrentVisible(val)} />\n            <label>是否禁用“今天”按钮控件：</label>\n            <Switch value={currentDayButtonDisabled} onChange={(val) => setCurrentDayButtonDisabled(val)} />\n            <label>是否禁用“本月”按钮控件：</label>\n            <Switch value={currentMonthButtonDisabled} onChange={(val) => setCurrentMonthButtonDisabled(val)} />\n          </p>\n          <br />\n          <Calendar\n            controllerConfig={\n              visible\n                ? {\n                    disabled,\n                    mode: {\n                      visible: modeVisible,\n                      radioGroupProps: {\n                        disabled: modeDisabled,\n                        variant: 'default-filled',\n                      },\n                    },\n                    year: {\n                      visible: yearVisible,\n                      selectProps: {\n                        disabled: yearDisabled,\n                      },\n                    },\n                    month: {\n                      visible: monthVisible,\n                      selectProps: {\n                        disabled: monthDisabled,\n                      },\n                    },\n                    weekend: {\n                      visible: weekendToggleVisible,\n                      showWeekendButtonProps: {\n                        disabled: weekendShowButtonDisabled,\n                      },\n                      hideWeekendButtonProps: {\n                        disabled: weekendHideButtonDisabled,\n                      },\n                    },\n                    current: {\n                      visible: currentVisible,\n                      currentDayButtonProps: {\n                        disabled: currentDayButtonDisabled,\n                      },\n                      currentMonthButtonProps: {\n                        disabled: currentMonthButtonDisabled,\n                      },\n                    },\n                  }\n                : false\n            }\n          />\n        </fieldset>\n      </div>\n    </div>\n  );\n}\n",
        "desc": "通过组件属性对组件的控件做自定义配置，某些业务场景下可能需要全局隐藏或禁用控件，也可以通过  属性来实现局部的控制。"
      },
      {
        "code": "import React from 'react';\nimport { Calendar } from 'tdesign-react';\n\nexport default function CalendarExample() {\n  const range = [\n    '2018-08',\n    // new Date(2018, 7),\n    '2027-04', // new Date(2027, 3),\n  ];\n  return <Calendar range={range} />;\n}\n",
        "desc": "通过组件属性指定年月份选择框的值范围。组件默认情况下，年份可以选择 ，月份没有限制。可以通过  属性来设置日历的可选范围。"
      },
      {
        "code": "import React from 'react';\nimport { Calendar } from 'tdesign-react';\n\nexport default function CalendarExample() {\n  const getWeekText = React.useCallback((calendarWeek) => {\n    const output = `星期${calendarWeek.day}`;\n    return output;\n  }, []);\n  return <Calendar week={(calendarWeek) => <div>{getWeekText(calendarWeek)}</div>} />;\n}\n",
        "desc": "通过  属性或者插槽自定义周的展示。 默认情况下日历的周我们用 “一” 到 “日” 显示，但有些场景下希望自定义展示。"
      },
      {
        "code": "import React from 'react';\nimport { Switch, Calendar } from 'tdesign-react';\n\nexport default function CalendarExample() {\n  const [preventCellContextmenu, setPreventCellContextmenu] = React.useState(false);\n  const cellClick = (options) => {\n    console.log(`鼠标左键单击单元格 ${options.cell.formattedDate}`);\n  };\n  const cellDoubleClick = (options) => {\n    console.log(`鼠标双击单元格 ${options.cell.formattedDate}`);\n  };\n  const cellRightClick = (options) => {\n    console.log(`鼠标右键点击元格 ${options.cell.formattedDate}`);\n  };\n  const controllerChange = (data) => {\n    console.log('控件值变化', data);\n  };\n  const monthChange = (data) => {\n    console.log('月份变化', data);\n  };\n  return (\n    <div>\n      <div\n        style={{\n          margin: '12px 0',\n        }}\n      >\n        <label>禁用单元格右键菜单：</label>\n        <Switch value={preventCellContextmenu} onChange={(val) => setPreventCellContextmenu(val)} />\n      </div>\n      <Calendar\n        preventCellContextmenu={preventCellContextmenu}\n        onCellClick={cellClick}\n        onCellDoubleClick={cellDoubleClick}\n        onCellRightClick={cellRightClick}\n        onControllerChange={controllerChange}\n        onMonthChange={monthChange}\n      />\n    </div>\n  );\n}\n",
        "desc": "通过  来定义事件的执行逻辑。 开发者可以使用这些事件去实现一些更加定制化的功能。"
      },
      {
        "code": "import React from 'react';\nimport { Calendar } from 'tdesign-react';\n\nexport default function CalendarExample() {\n  return <Calendar head={<div>🗓 TDesign开发计划</div>} />;\n}\n",
        "desc": "在组件左上角展示内容。某些业务场景下，可能需要在组件左上角显示一个标题之类的内容，那么就可以使用  具名插槽了。"
      },
      {
        "code": "import React from 'react';\nimport { Calendar, Tag } from 'tdesign-react';\nimport dayjs from 'dayjs';\n\nexport default function CalendarExample() {\n  const getShow = (data) =>\n    data.mode === 'month'\n      ? dayjs().format('YYYY-MM-DD') === data.formattedDate\n      : data.date.getMonth() === new Date().getMonth();\n  return (\n    <Calendar\n      cellAppend={(cellData) =>\n        getShow(cellData) && (\n          <div className=\"cell-append-demo-outer\">\n            <Tag\n              theme=\"success\"\n              variant=\"light\"\n              size=\"small\"\n              className=\"activeTag\"\n              style={{\n                width: '100%',\n              }}\n            >\n              {cellData.mode === 'month' ? '我们的纪念日' : '我们的纪念月'}\n            </Tag>\n            <Tag\n              theme=\"warning\"\n              variant=\"light\"\n              size=\"small\"\n              className=\"activeTag\"\n              style={{\n                width: '100%',\n              }}\n            >\n              {cellData.mode === 'month' ? '家庭聚会' : '家庭聚会'}\n            </Tag>\n          </div>\n        )\n      }\n    />\n  );\n}\n",
        "desc": "在现有单元格展示内容的基础上追加展示内容。默认情况下日历单元格中会显示当前日期，如果还需要额外显示其他信息，可以通过  具名插槽来实现。"
      },
      {
        "code": "import React from 'react';\nimport { Calendar, Tag, Space } from 'tdesign-react';\nimport dayjs from 'dayjs';\n\nexport default function CalendarExample() {\n  const displayNum = React.useCallback((date) => {\n    if (date.mode === 'month') {\n      return date.date.getDate();\n    }\n    return date.date.getMonth() + 1;\n  }, []);\n  const isShow = (data) =>\n    data.mode === 'month' ? dayjs(data.formattedDate).date() === 15 : dayjs(data.formattedDate).month() === 7;\n  const dataList = [\n    {\n      value: 'danger',\n      label: '错误事件',\n    },\n    {\n      value: 'warning',\n      label: '警告事件',\n    },\n    {\n      value: 'success',\n      label: '正常事件',\n    },\n  ];\n  return (\n    <Calendar\n      cell={(cellData) => (\n        <div\n          style={{\n            width: '100%',\n          }}\n        >\n          <div>{displayNum(cellData)}</div>\n          {isShow(cellData) && (\n            <Space direction=\"vertical\" size={2}>\n              {dataList.map((item, index) => (\n                <Tag key={index} theme={item.value}>\n                  {item.label}\n                </Tag>\n              ))}\n            </Space>\n          )}\n        </div>\n      )}\n    />\n  );\n}\n",
        "desc": "完全重写单元格展示的内容。和  具名插槽不同， 具名插槽可以完全自定义单元格内容。"
      },
      {
        "code": "import React from 'react';\nimport { Calendar, Space, Tag } from 'tdesign-react';\nimport dayjs from 'dayjs';\n\nexport default function CalendarExample() {\n  const displayNum = React.useCallback((date) => {\n    if (date.mode === 'month') {\n      return date.date.getDate();\n    }\n    return date.date.getMonth() + 1;\n  }, []);\n  const isShow = (data) =>\n    data.mode === 'month' ? dayjs(data.formattedDate).date() === 15 : dayjs(data.formattedDate).month() === 7;\n  const dataList = [\n    {\n      value: 'danger',\n      label: '错误事件',\n    },\n    {\n      value: 'warning',\n      label: '警告事件',\n    },\n    {\n      value: 'success',\n      label: '正常事件',\n    },\n  ];\n  const renderHead = (params) => {\n    let title = `${params.filterDate.getFullYear()}`;\n    if (params.mode === 'month') {\n      title += `-${params.filterDate.getMonth() + 1}`;\n    }\n    title += ' 工作安排';\n    return <div>{title}</div>;\n  };\n  return (\n    <Calendar\n      head={renderHead}\n      cell={(cellData) => (\n        <>\n          <div\n            style={{\n              width: '100%',\n            }}\n          >\n            <div>{displayNum(cellData)}</div>\n            {isShow(cellData) && (\n              <Space direction=\"vertical\" size={2}>\n                {dataList.map((item, index) => (\n                  <Tag key={index} theme={item.value}>\n                    {item.label}\n                  </Tag>\n                ))}\n              </Space>\n            )}\n          </div>\n        </>\n      )}\n    />\n  );\n}\n",
        "desc": "通过  来使用插槽。某些场景下可能希望通过  来渲染插槽内容，、、 都有其对应的 ，以下简单演示了 、 的"
      }
    ]
  },
  {
    "name": "<Card/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Card } from 'tdesign-react';\n\nexport default function BorderedCard() {\n  return (\n    <Card\n      bordered\n      style={{\n        width: '400px',\n      }}\n    >\n      仅有内容区域的卡片形式。卡片内容区域可以是文字、图片、表单、表格等形式信息内容。可使用大中小不同的卡片尺寸，按业务需求进行呈现。\n    </Card>\n  );\n}\n",
        "desc": "有边框"
      },
      {
        "code": "import React from 'react';\nimport { Card, MessagePlugin } from 'tdesign-react';\n\nconst clickHandler = () => {\n  MessagePlugin.success('操作');\n};\nexport default function BorderedNoneCard() {\n  return (\n    <div\n      style={{\n        padding: '16px',\n        backgroundColor: 'var(--td-bg-color-container-hover)',\n      }}\n    >\n      <Card\n        title=\"标题\"\n        actions={\n          <a\n            href={null}\n            onClick={clickHandler}\n            style={{\n              cursor: 'pointer',\n            }}\n          >\n            操作\n          </a>\n        }\n        hoverShadow\n        style={{\n          width: '400px',\n        }}\n      >\n        仅有内容区域的卡片形式。卡片内容区域可以是文字、图片、表单、表格等形式信息内容。可使用大中小不同的卡片尺寸，按业务需求进行呈现。\n      </Card>\n    </div>\n  );\n}\n",
        "desc": "无边框"
      },
      {
        "code": "import React from 'react';\nimport { Card, MessagePlugin } from 'tdesign-react';\n\nconst clickHandler = () => {\n  MessagePlugin.success('操作');\n};\nexport default function HeaderCard() {\n  return (\n    <Card\n      title=\"标题\"\n      actions={\n        <a\n          href={null}\n          onClick={clickHandler}\n          style={{\n            cursor: 'pointer',\n          }}\n        >\n          操作\n        </a>\n      }\n      bordered\n      hoverShadow\n      style={{\n        width: '400px',\n      }}\n    >\n      卡片内容，以描述性为主，可以是文字、图片或图文组合的形式。按业务需求进行自定义组合。\n    </Card>\n  );\n}\n",
        "desc": "不带分割线"
      },
      {
        "code": "import React from 'react';\nimport { Card, MessagePlugin } from 'tdesign-react';\n\nconst clickHandler = () => {\n  MessagePlugin.success('操作');\n};\nexport default function HeaderBorderedCard() {\n  return (\n    <Card\n      title=\"标题\"\n      actions={\n        <a\n          href={null}\n          onClick={clickHandler}\n          style={{\n            cursor: 'pointer',\n          }}\n        >\n          操作\n        </a>\n      }\n      bordered\n      headerBordered\n      style={{\n        width: '400px',\n      }}\n    >\n      卡片内容，以描述性为主，可以是文字、图片或图文组合的形式。按业务需求进行自定义组合。\n    </Card>\n  );\n}\n",
        "desc": "带分割线"
      },
      {
        "code": "import React from 'react';\nimport { Card, Tag, Avatar, Row, Col, Button, Divider } from 'tdesign-react';\nimport { UserIcon, ChatIcon, ShareIcon, ThumbUpIcon } from 'tdesign-icons-react';\n\nexport default function FooterCard() {\n  return (\n    <Card\n      actions={<Tag theme=\"success\">默认标签</Tag>}\n      bordered\n      cover=\"https://tdesign.gtimg.com/site/source/card-demo.png\"\n      style={{\n        width: '400px',\n      }}\n      avatar={\n        <Avatar size=\"56px\">\n          <UserIcon></UserIcon>\n        </Avatar>\n      }\n      footer={\n        <Row align=\"middle\" justify=\"center\">\n          <Col flex=\"auto\">\n            <Button variant=\"text\">\n              <ThumbUpIcon></ThumbUpIcon>\n            </Button>\n          </Col>\n          <Divider layout=\"vertical\"></Divider>\n          <Col flex=\"auto\">\n            <Button variant=\"text\">\n              <ChatIcon></ChatIcon>\n            </Button>\n          </Col>\n          <Divider layout=\"vertical\"></Divider>\n          <Col flex=\"auto\">\n            <Button variant=\"text\">\n              <ShareIcon></ShareIcon>\n            </Button>\n          </Col>\n        </Row>\n      }\n    ></Card>\n  );\n}\n",
        "desc": "由极简卡片下方的底部栏组成，可包含标题、图片、操作区、状态等内容。"
      },
      {
        "code": "import React from 'react';\nimport { Card, Avatar, Row, Col, Button, Divider, Dropdown, MessagePlugin, Space } from 'tdesign-react';\nimport { UserIcon, ChatIcon, ShareIcon, ThumbUpIcon, HeartIcon, MoreIcon } from 'tdesign-icons-react';\n\nconst { Group: AvatarGroup } = Avatar;\nconst options = [\n  {\n    content: '操作一',\n    value: 1,\n  },\n  {\n    content: '操作二',\n    value: 2,\n  },\n];\nconst clickHandler = (data) => {\n  MessagePlugin.success(`选中【${data.value}】`);\n};\nexport default function FooterActionsCard() {\n  return (\n    <Space direction=\"vertical\">\n      <Card\n        bordered\n        theme=\"poster2\"\n        cover=\"https://tdesign.gtimg.com/site/source/card-demo.png\"\n        style={{\n          width: '400px',\n        }}\n        footer={\n          <Row align=\"middle\" justify=\"center\">\n            <Col flex=\"auto\">\n              <Button variant=\"text\" shape=\"square\">\n                <ThumbUpIcon></ThumbUpIcon>\n              </Button>\n            </Col>\n            <Divider layout=\"vertical\"></Divider>\n            <Col flex=\"auto\">\n              <Button variant=\"text\" shape=\"square\">\n                <ChatIcon></ChatIcon>\n              </Button>\n            </Col>\n            <Divider layout=\"vertical\"></Divider>\n            <Col flex=\"auto\">\n              <Button variant=\"text\" shape=\"square\">\n                <ShareIcon></ShareIcon>\n              </Button>\n            </Col>\n          </Row>\n        }\n      ></Card>\n      <Card\n        bordered\n        theme=\"poster2\"\n        cover=\"https://tdesign.gtimg.com/site/source/card-demo.png\"\n        style={{\n          width: '400px',\n        }}\n        actions={\n          <Col flex=\"auto\">\n            <Dropdown options={options} onClick={clickHandler}>\n              <Button variant=\"text\" shape=\"square\">\n                <MoreIcon></MoreIcon>\n              </Button>\n            </Dropdown>\n          </Col>\n        }\n        footer={\n          <Row align=\"middle\" justify=\"center\">\n            <Col flex=\"auto\">\n              <Button\n                variant=\"text\"\n                shape=\"square\"\n                style={{\n                  marginRight: '8px',\n                }}\n              >\n                <HeartIcon size={16}></HeartIcon>\n              </Button>\n              <Button variant=\"text\" shape=\"square\">\n                <ShareIcon size={16}></ShareIcon>\n              </Button>\n            </Col>\n          </Row>\n        }\n      ></Card>\n      <Card\n        bordered\n        theme=\"poster2\"\n        cover=\"https://tdesign.gtimg.com/site/source/card-demo.png\"\n        style={{\n          width: '400px',\n        }}\n        actions={\n          <Col flex=\"auto\">\n            <Dropdown options={options} onClick={clickHandler}>\n              <Button variant=\"text\" shape=\"square\">\n                <MoreIcon></MoreIcon>\n              </Button>\n            </Dropdown>\n          </Col>\n        }\n        footer={\n          <AvatarGroup max={2} cascading=\"left-up\">\n            <Avatar image=\"https://tdesign.gtimg.com/site/avatar-boy.jpg\"></Avatar>\n            <Avatar>Q</Avatar>\n            <Avatar>C</Avatar>\n            <Avatar>G</Avatar>\n            <Avatar icon={<UserIcon />}></Avatar>\n          </AvatarGroup>\n        }\n      ></Card>\n    </Space>\n  );\n}\n",
        "desc": "全部为操作内容的底部栏"
      },
      {
        "code": "import React from 'react';\nimport { Card, Comment } from 'tdesign-react';\n\nexport default function FooterContentCard() {\n  return (\n    <Card\n      bordered\n      theme=\"poster2\"\n      cover=\"https://tdesign.gtimg.com/site/source/card-demo.png\"\n      style={{\n        width: '400px',\n      }}\n      footer={\n        <Comment author=\"标题\" content=\"卡片内容\" avatar=\"https://tdesign.gtimg.com/site/avatar-boy.jpg\"></Comment>\n      }\n    ></Card>\n  );\n}\n",
        "desc": "全部为展示内容的底部栏"
      },
      {
        "code": "import React from 'react';\nimport { Card, Button, Dropdown, MessagePlugin, Comment } from 'tdesign-react';\nimport { Icon } from 'tdesign-icons-react';\n\nconst options = [\n  {\n    content: '操作一',\n    value: 1,\n  },\n  {\n    content: '操作二',\n    value: 2,\n  },\n];\nconst clickHandler = (data) => {\n  MessagePlugin.success(`选中【${data.value}】`);\n};\nexport default function FooterContentActionsCard() {\n  return (\n    <Card\n      actions={\n        <Dropdown options={options} onClick={clickHandler} minColumnWidth=\"112\">\n          <Button variant=\"text\" shape=\"square\">\n            <Icon name=\"more\" />\n          </Button>\n        </Dropdown>\n      }\n      bordered\n      theme=\"poster2\"\n      cover=\"https://tdesign.gtimg.com/site/source/card-demo.png\"\n      style={{\n        width: '400px',\n      }}\n      footer={\n        <Comment author=\"标题\" content=\"卡片内容\" avatar=\"https://tdesign.gtimg.com/site/avatar-boy.jpg\"></Comment>\n      }\n    ></Card>\n  );\n}\n",
        "desc": "同时带展示内容与操作内容的底部栏"
      },
      {
        "code": "import React from 'react';\nimport { Card, Row, Col, Button, Divider, Dropdown, MessagePlugin } from 'tdesign-react';\nimport { ChatIcon, ShareIcon, ThumbUpIcon, Icon } from 'tdesign-icons-react';\n\nconst options = [\n  {\n    content: '操作一',\n    value: 1,\n  },\n  {\n    content: '操作二',\n    value: 2,\n  },\n];\nconst clickHandler = (data) => {\n  MessagePlugin.success(`选中【${data.value}】`);\n};\nexport default function HeaderSubtitleFooterActionsCard() {\n  return (\n    <Card\n      title=\"标题\"\n      subtitle=\"副标题\"\n      actions={\n        <Dropdown options={options} onClick={clickHandler} minColumnWidth=\"112\">\n          <Button variant=\"text\" shape=\"square\">\n            <Icon name=\"more\" />\n          </Button>\n        </Dropdown>\n      }\n      bordered\n      cover=\"https://tdesign.gtimg.com/site/source/card-demo.png\"\n      style={{\n        width: '400px',\n      }}\n      footer={\n        <Row align=\"middle\" justify=\"center\">\n          <Col flex=\"auto\">\n            <Button variant=\"text\">\n              <ThumbUpIcon></ThumbUpIcon>\n            </Button>\n          </Col>\n          <Divider layout=\"vertical\"></Divider>\n          <Col flex=\"auto\">\n            <Button variant=\"text\">\n              <ChatIcon></ChatIcon>\n            </Button>\n          </Col>\n          <Divider layout=\"vertical\"></Divider>\n          <Col flex=\"auto\">\n            <Button variant=\"text\">\n              <ShareIcon></ShareIcon>\n            </Button>\n          </Col>\n        </Row>\n      }\n    ></Card>\n  );\n}\n",
        "desc": "由顶部栏、底部栏和极简卡片组成的复杂卡片，三个区域内容可根据需要对内容进行配置。"
      },
      {
        "code": "import React from 'react';\nimport { Card, Row, Col, Button, Divider, Avatar, Dropdown, MessagePlugin } from 'tdesign-react';\nimport { ChatIcon, ShareIcon, ThumbUpIcon, Icon } from 'tdesign-icons-react';\n\nconst options = [\n  {\n    content: '操作一',\n    value: 1,\n  },\n  {\n    content: '操作二',\n    value: 2,\n  },\n];\nconst clickHandler = (data) => {\n  MessagePlugin.success(`选中【${data.value}】`);\n};\nexport default function HeaderFooterActionsCard() {\n  return (\n    <Card\n      title=\"标题\"\n      description=\"卡片内容\"\n      actions={\n        <Dropdown options={options} onClick={clickHandler} minColumnWidth=\"112\">\n          <Button variant=\"text\" shape=\"square\">\n            <Icon name=\"more\" />\n          </Button>\n        </Dropdown>\n      }\n      bordered\n      cover=\"https://tdesign.gtimg.com/site/source/card-demo.png\"\n      style={{\n        width: '400px',\n      }}\n      avatar={<Avatar size=\"40px\" image=\"https://tdesign.gtimg.com/site/avatar-boy.jpg\"></Avatar>}\n      footer={\n        <Row align=\"middle\" justify=\"center\">\n          <Col flex=\"auto\">\n            <Button variant=\"text\">\n              <ThumbUpIcon></ThumbUpIcon>\n            </Button>\n          </Col>\n          <Divider layout=\"vertical\"></Divider>\n          <Col flex=\"auto\">\n            <Button variant=\"text\">\n              <ChatIcon></ChatIcon>\n            </Button>\n          </Col>\n          <Divider layout=\"vertical\"></Divider>\n          <Col flex=\"auto\">\n            <Button variant=\"text\">\n              <ShareIcon></ShareIcon>\n            </Button>\n          </Col>\n        </Row>\n      }\n    ></Card>\n  );\n}\n",
        "desc": "标题副标题"
      },
      {
        "code": "import React from 'react';\nimport { Card } from 'tdesign-react';\n\nexport default function HeaderSubtitleCard() {\n  return (\n    <Card\n      title=\"标题\"\n      subtitle=\"副标题\"\n      actions=\"操作\"\n      bordered\n      hoverShadow\n      style={{\n        width: '400px',\n      }}\n    >\n      卡片内容，以描述性为主，可以是文字、图片或图文组合的形式。按业务需求进行自定义组合。\n    </Card>\n  );\n}\n",
        "desc": "带主副标题的卡片"
      },
      {
        "code": "import React from 'react';\nimport { Card } from 'tdesign-react';\n\nexport default function HeaderDescriptionCard() {\n  return (\n    <Card\n      title=\"标题\"\n      description=\"描述\"\n      actions=\"操作\"\n      bordered\n      hoverShadow\n      style={{\n        width: '400px',\n      }}\n    >\n      卡片内容，以描述性为主，可以是文字、图片或图文组合的形式。按业务需求进行自定义组合。\n    </Card>\n  );\n}\n",
        "desc": "带标题描述的卡片"
      },
      {
        "code": "import React from 'react';\nimport { Card } from 'tdesign-react';\n\nexport default function HeaderAllPropsCard() {\n  return (\n    <Card\n      title=\"标题\"\n      subtitle=\"副标题\"\n      description=\"描述\"\n      actions=\"操作\"\n      bordered\n      hoverShadow\n      style={{\n        width: '400px',\n      }}\n    >\n      卡片内容，以描述性为主，可以是文字、图片或图文组合的形式。按业务需求进行自定义组合。\n    </Card>\n  );\n}\n",
        "desc": "同时带主副标题与标题描述的卡片"
      },
      {
        "code": "import React from 'react';\nimport { Card } from 'tdesign-react';\n\nexport default function CustomLoadingProps() {\n  const customProps = {\n    text: 'TDesign努力加载中...',\n  };\n  return (\n    <Card\n      title=\"自定义loadingProps Card\"\n      loading\n      bordered\n      style={{\n        width: '400px',\n      }}\n      loadingProps={customProps}\n    >\n      仅有内容区域的卡片形式。卡片内容区域可以是文字、图片、表单、表格等形式信息内容。可使用大中小不同的卡片尺寸，按业务需求进行呈现。\n    </Card>\n  );\n}\n",
        "desc": "自定义loadingProps的卡片"
      }
    ]
  },
  {
    "name": "<Collapse/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Collapse, TagInput } from 'tdesign-react';\n\nexport default function CollapseExample() {\n  const { Panel } = Collapse;\n  return (\n    <Collapse defaultValue={['default']}>\n      <Panel header=\"这是一个折叠标题\">\n        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。\n      </Panel>\n      <Panel header=\"设置默认展开项\" value=\"default\">\n        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。\n      </Panel>\n      <Panel header=\"自定义折叠面板内容\">\n        <div\n          style={{\n            width: '80%',\n          }}\n        >\n          <TagInput defaultValue={['Vue', 'React']} clearable />\n        </div>\n      </Panel>\n      <Panel destroyOnCollapse header=\"当前折叠面板折叠时，销毁面板内容\">\n        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。\n      </Panel>\n      <Panel header=\"嵌套使用折叠面板\">\n        <Collapse defaultExpandAll>\n          <Panel header=\"这是一个折叠标题\">\n            这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。\n          </Panel>\n          <Panel header=\"这是一个折叠标题\">\n            这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。\n          </Panel>\n        </Collapse>\n      </Panel>\n    </Collapse>\n  );\n}\n",
        "desc": "基础折叠面板，可自定义面板内容。"
      },
      {
        "code": "import React from 'react';\nimport { Collapse, TagInput } from 'tdesign-react';\n\nexport default function CollapseExample() {\n  const { Panel } = Collapse;\n  return (\n    <Collapse expandMutex>\n      <Panel header=\"这是一个折叠标题\">\n        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。\n      </Panel>\n      <Panel destroyOnCollapse header=\"折叠后自动销毁\">\n        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。\n      </Panel>\n      <Panel header=\"自定义折叠面板内容\">\n        <div\n          className=\"tdesign-demo-block-column\"\n          style={{\n            width: '80%',\n          }}\n        >\n          <TagInput defaultValue={['Vue', 'React']} clearable />\n        </div>\n      </Panel>\n    </Collapse>\n  );\n}\n",
        "desc": "手风琴模式折叠面板，一次只能打开一个面板。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Collapse, TagInput, Radio, Checkbox, Space } from 'tdesign-react';\nimport { StarIcon } from 'tdesign-icons-react';\n\nconst { Panel } = Collapse;\nexport default function CollapseExample() {\n  const [radio, setRadio] = useState(1);\n  const [checked, setChecked] = useState(false);\n  const options = [\n    {\n      value: 1,\n      label: '左边',\n    },\n    {\n      value: 2,\n      label: '右边',\n    },\n  ];\n  return (\n    <Space direction=\"vertical\">\n      <Collapse\n        expandIcon={[1, 2].includes(radio)}\n        expandIconPlacement={radio === 1 ? 'left' : 'right'}\n        expandOnRowClick={!checked}\n      >\n        <Panel header=\"这是一个折叠标题\">\n          这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。\n        </Panel>\n        <Panel destroyOnCollapse header=\"折叠后自动销毁\">\n          这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。\n        </Panel>\n        <Panel header=\"自定义折叠面板内容\">\n          <div\n            className=\"tdesign-demo-block-column\"\n            style={{\n              width: '80%',\n            }}\n          >\n            <TagInput defaultValue={['Vue', 'React']} clearable />\n          </div>\n        </Panel>\n        <Panel header=\"自定义图标\" expandIcon={<StarIcon />}>\n          这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。\n        </Panel>\n      </Collapse>\n      <Space direction=\"vertical\">\n        <Radio.Group value={radio} options={options} onChange={(value) => setRadio(Number(value))} />\n        <div>\n          <Checkbox\n            checked={checked}\n            onChange={() => {\n              setChecked(!checked);\n            }}\n          >\n            仅图标响应点击\n          </Checkbox>\n        </div>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "可设置是否显示展开图标以及图标展示的位置"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Collapse, Button, Checkbox, Space } from 'tdesign-react';\n\nconst { Panel } = Collapse;\nexport default function CollapseExample() {\n  const [disable, setDisable] = useState(false);\n  return (\n    <Collapse>\n      <Panel header=\"这是一个折叠标题\" headerRightContent={<Button size=\"small\">操作</Button>}>\n        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。\n      </Panel>\n      <Panel header=\"这是一个折叠标题\" headerRightContent={<Button size=\"small\">操作</Button>}>\n        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。\n      </Panel>\n      <Panel\n        header=\"这是一个折叠标题\"\n        headerRightContent={\n          <Space>\n            <Checkbox\n              checked={disable}\n              onClick={(ctx) => {\n                setDisable(!disable);\n                ctx.e.stopPropagation();\n              }}\n            >\n              是否禁止\n            </Checkbox>\n            <Button size=\"small\">操作</Button>\n          </Space>\n        }\n        disabled={disable}\n      >\n        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。\n      </Panel>\n    </Collapse>\n  );\n}\n",
        "desc": "可自定义面板右侧操作区域"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Collapse, TagInput, Checkbox, Space } from 'tdesign-react';\n\nconst { Panel } = Collapse;\nexport default function CollapseExample() {\n  const [collapseValue, setCollapseValue] = useState([]);\n  const [disabledAll, setDisabledAll] = useState(false);\n  const [borderless, setBorderless] = useState(false);\n  const [showIcon, setShowIcon] = useState(true);\n  return (\n    <Space direction=\"vertical\">\n      <Collapse\n        expandIcon={showIcon}\n        value={collapseValue}\n        borderless={borderless}\n        disabled={disabledAll}\n        onChange={setCollapseValue}\n      >\n        <Panel header=\"这是一个折叠标题\">\n          这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。\n        </Panel>\n        <Panel destroyOnCollapse header=\"折叠后自动销毁\">\n          这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。\n        </Panel>\n        <Panel header=\"自定义折叠面板内容\">\n          <div\n            className=\"tdesign-demo-block-column\"\n            style={{\n              width: '80%',\n            }}\n          >\n            <TagInput defaultValue={['Vue', 'React']} clearable />\n          </div>\n        </Panel>\n      </Collapse>\n      <Space direction=\"vertical\">\n        <Checkbox\n          checked={disabledAll}\n          onChange={() => {\n            setDisabledAll(!disabledAll);\n          }}\n        >\n          禁止全部\n        </Checkbox>\n        <Checkbox\n          checked={borderless}\n          onChange={() => {\n            setBorderless(!borderless);\n          }}\n        >\n          无边框模式\n        </Checkbox>\n        <Checkbox\n          checked={showIcon}\n          onChange={() => {\n            setShowIcon(!showIcon);\n          }}\n        >\n          显示icon\n        </Checkbox>\n        <div\n          style={{\n            marginTop: 10,\n          }}\n        >\n          当前展开的Collapse Panel: {collapseValue.map((item) => `${item} `)}\n        </div>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "不同模式的折叠面板"
      }
    ]
  },
  {
    "name": "<Comment/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Comment } from 'tdesign-react';\n\nexport default function BasicComment() {\n  return (\n    <Comment\n      avatar=\"https://tdesign.gtimg.com/site/avatar.jpg\"\n      author=\"评论作者名\"\n      datetime=\"今天16:38\"\n      content=\"评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。\"\n    />\n  );\n}\n",
        "desc": "评论最基本的组件，包括头像、作者、时间、评论内容，适用于各种需要进行评论展示的场景。"
      },
      {
        "code": "import React from 'react';\nimport { Comment } from 'tdesign-react';\nimport { ThumbUpIcon, ChatIcon } from 'tdesign-icons-react';\n\nexport default function OperationComment() {\n  const actions = [\n    <React.Fragment key=\"ThumbUp\">\n      <ThumbUpIcon size=\"16px\" />\n      <span>6</span>\n    </React.Fragment>,\n    <React.Fragment key=\"Chat\">\n      <ChatIcon size=\"16px\" />\n      <span>回复</span>\n    </React.Fragment>,\n  ];\n  return (\n    <Comment\n      avatar=\"https://tdesign.gtimg.com/site/avatar.jpg\"\n      author=\"评论作者名\"\n      datetime=\"今天16:38\"\n      content=\"评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。\"\n      actions={actions}\n    />\n  );\n}\n",
        "desc": "可对评论内容进行相关操作的组件，适用于需要自定义操作列的场景。"
      },
      {
        "code": "import React from 'react';\nimport { Comment, List } from 'tdesign-react';\nimport { ThumbUpIcon, ChatIcon } from 'tdesign-icons-react';\n\nconst { ListItem } = List;\nexport default function ListComment() {\n  const actions = [\n    <React.Fragment key=\"ThumbUp\">\n      <ThumbUpIcon size=\"16px\" />\n      <span>6</span>\n    </React.Fragment>,\n    <React.Fragment key=\"Chat\">\n      <ChatIcon size=\"16px\" />\n      <span>回复</span>\n    </React.Fragment>,\n  ];\n  const commentsData = [\n    {\n      id: 'A',\n      avatar: 'https://tdesign.gtimg.com/site/avatar.jpg',\n      author: '评论作者名A',\n      datetime: '今天16:38',\n      content:\n        'A评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。',\n      actions,\n    },\n    {\n      id: 'B',\n      avatar: 'https://tdesign.gtimg.com/site/avatar.jpg',\n      author: '评论作者名B',\n      datetime: '今天16:38',\n      content:\n        'B评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。',\n      actions,\n    },\n    {\n      id: 'C',\n      avatar: 'https://tdesign.gtimg.com/site/avatar.jpg',\n      author: '评论作者名C',\n      datetime: '今天16:38',\n      content:\n        'C评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。',\n      actions,\n    },\n  ];\n  return (\n    <List split={true}>\n      {commentsData.map((item) => (\n        <ListItem key={item.id}>\n          <Comment\n            avatar={item.avatar}\n            author={item.author}\n            datetime={item.datetime}\n            content={item.content}\n            actions={actions}\n          />\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n",
        "desc": "以列表形式展示的评论。"
      },
      {
        "code": "import React from 'react';\nimport { Comment } from 'tdesign-react';\nimport { CaretRightSmallIcon, ThumbUpIcon, ChatIcon } from 'tdesign-icons-react';\n\nconst classStyles = `\n<style>\n.comment-reply > .t-comment__inner > .t-comment__content > .t-comment__actions {\n  margin-right: 24px;\n}\n</style>\n`;\nexport default function ReplyComment() {\n  React.useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  const actions = [\n    <React.Fragment key=\"ThumbUp\">\n      <ThumbUpIcon size=\"16px\" />\n      <span>6</span>\n    </React.Fragment>,\n    <React.Fragment key=\"Chat\">\n      <ChatIcon size=\"16px\" />\n      <span>回复</span>\n    </React.Fragment>,\n  ];\n  const replyAuthor = (\n    <>\n      <span>评论作者名B</span>\n      <CaretRightSmallIcon size=\"small\" />\n      <span>评论作者名A</span>\n    </>\n  );\n  const replyElement = (\n    <Comment\n      avatar=\"https://tdesign.gtimg.com/site/avatar.jpg\"\n      author={replyAuthor}\n      datetime=\"今天16:38\"\n      content=\"B评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。\"\n      actions={actions}\n    />\n  );\n  return (\n    <Comment\n      className=\"comment-reply\"\n      avatar=\"https://tdesign.gtimg.com/site/avatar.jpg\"\n      author=\"评论作者名A\"\n      datetime=\"今天16:38\"\n      content=\"A评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。\"\n      actions={actions}\n      reply={replyElement}\n    />\n  );\n}\n",
        "desc": "展示一条评论的回复内容的组件，适用于对评论进行回复的场景，作者名称后可标明回复对象的名称。"
      },
      {
        "code": "import React from 'react';\nimport { Comment } from 'tdesign-react';\nimport { ThumbUpIcon, ChatIcon } from 'tdesign-icons-react';\n\nexport default function quoteComment() {\n  const actions = [\n    <React.Fragment key=\"ThumbUp\">\n      <ThumbUpIcon size=\"16px\" />\n      <span>6</span>\n    </React.Fragment>,\n    <React.Fragment key=\"Chat\">\n      <ChatIcon size=\"16px\" />\n      <span>回复</span>\n    </React.Fragment>,\n  ];\n  const quoteElement = (\n    <Comment\n      author=\"引用内容标题\"\n      content=\"引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容。\"\n    />\n  );\n  return (\n    <Comment\n      avatar=\"https://tdesign.gtimg.com/site/avatar.jpg\"\n      author=\"评论作者名A\"\n      datetime=\"今天16:38\"\n      content=\"A评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。\"\n      actions={actions}\n      quote={quoteElement}\n    />\n  );\n}\n",
        "desc": "评论可以引用其他内容，表示评论和其他内容的引用关系。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Comment, Textarea, Button, NotificationPlugin, Space } from 'tdesign-react';\n\nexport default function BasicComment() {\n  const [replyData, setReplayData] = useState('');\n  function submitReply() {\n    NotificationPlugin.info({\n      title: '回复内容',\n      content: replyData,\n      duration: 3000,\n    });\n  }\n  const replyForm = (\n    <Space\n      direction=\"vertical\"\n      align=\"end\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Textarea placeholder=\"请输入内容\" value={replyData} onChange={setReplayData} />\n      <Button\n        style={{\n          float: 'right',\n        }}\n        onClick={submitReply}\n      >\n        回复\n      </Button>\n    </Space>\n  );\n  return <Comment avatar=\"https://tdesign.gtimg.com/site/avatar.jpg\" content={replyForm} />;\n}\n",
        "desc": "对评论内容进行回复操作的组件，可在回复框内直接输入内容进行回复。"
      }
    ]
  },
  {
    "name": "<Descriptions/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Descriptions, Space } from 'tdesign-react';\n\n// const { DescriptionsItem } = Descriptions;\n\nexport default function BasicDescriptions() {\n  const items = [\n    {\n      label: 'Name',\n      content: 'TDesign',\n    },\n    {\n      label: 'Telephone Number',\n      content: '139****0609',\n    },\n    {\n      label: 'Area',\n      content: 'China Tencent Headquarters',\n    },\n    {\n      label: 'Address',\n      content: 'Shenzhen Penguin Island D1 4A Mail Center',\n    },\n  ];\n  return (\n    <Space direction=\"vertical\">\n      {/* <h3>推荐：数据写法</h3> */}\n      <Descriptions items={items} title=\"Shipping address\" />\n      {/* <h3>JSX写法</h3>\n       <Descriptions title=\"Shipping address\">\n        <DescriptionsItem label=\"Name\">TDesign</DescriptionsItem>\n        <DescriptionsItem label=\"Telephone Number\">139****0609</DescriptionsItem>\n        <DescriptionsItem label=\"Area\">China Tencent Headquarters</DescriptionsItem>\n        <DescriptionsItem label=\"Address\" content=\"test\">\n          Shenzhen Penguin Island D1 4A Mail Center\n        </DescriptionsItem>\n       </Descriptions> */}\n    </Space>\n  );\n}\n",
        "desc": "基础"
      },
      {
        "code": "import React from 'react';\nimport { Descriptions } from 'tdesign-react';\n\nexport default function Bordered() {\n  const items = [\n    {\n      label: 'Name',\n      content: 'TDesign',\n    },\n    {\n      label: 'Telephone Number',\n      content: '139****0609',\n    },\n    {\n      label: 'Area',\n      content: 'China Tencent Headquarters',\n    },\n    {\n      label: 'Address',\n      content: 'Shenzhen Penguin Island D1 4A Mail Center',\n    },\n  ];\n  return <Descriptions items={items} title=\"Shipping address\" bordered />;\n}\n",
        "desc": "边框"
      },
      {
        "code": "import React from 'react';\nimport { Descriptions, Space, Switch } from 'tdesign-react';\n\nexport default function Colon() {\n  const [checked, setChecked] = React.useState(false);\n  const items = [\n    {\n      label: 'Name',\n      content: 'TDesign',\n    },\n    {\n      label: 'Telephone Number',\n      content: '139****0609',\n    },\n    {\n      label: 'Area',\n      content: 'China Tencent Headquarters',\n    },\n    {\n      label: 'Address',\n      content: 'Shenzhen Penguin Island D1 4A Mail Center',\n    },\n  ];\n  return (\n    <Space direction=\"vertical\">\n      <Space align=\"center\">\n        <Switch size=\"large\" value={checked} onChange={(val) => setChecked(val)} />\n        展示冒号\n      </Space>\n      <Descriptions items={items} title=\"Shipping address\" bordered colon={checked} />\n    </Space>\n  );\n}\n",
        "desc": "标签引号"
      },
      {
        "code": "import React from 'react';\nimport { Descriptions, Space, Row, Col, Radio } from 'tdesign-react';\n\nexport default function Layout() {\n  const [layout, setLayout] = React.useState('horizontal');\n  const [itemLayout, setItemLayout] = React.useState('horizontal');\n  const items = [\n    {\n      label: 'Name',\n      content: 'TDesign',\n    },\n    {\n      label: 'Telephone Number',\n      content: '139****0609',\n    },\n    {\n      label: 'Area',\n      content: 'China Tencent Headquarters',\n    },\n    {\n      label: 'Address',\n      content: 'Shenzhen Penguin Island D1 4A Mail Center',\n    },\n  ];\n  const layoutOptions = ['horizontal', 'vertical'];\n  const itemLayoutOptions = ['horizontal', 'vertical'];\n  return (\n    <Space direction=\"vertical\">\n      <Row align=\"middle\">\n        <Col>\n          <span>layout：</span>\n        </Col>\n        <Col>\n          <Radio.Group\n            variant=\"default-filled\"\n            value={layout}\n            onChange={(val) => setLayout(val)}\n            options={layoutOptions}\n          />\n        </Col>\n      </Row>\n      <Row align=\"middle\">\n        <Col>\n          <span>itemLayout：</span>\n        </Col>\n        <Col>\n          <Radio.Group\n            variant=\"default-filled\"\n            value={itemLayout}\n            onChange={(val) => setItemLayout(val)}\n            options={itemLayoutOptions}\n          />\n        </Col>\n      </Row>\n      <Descriptions items={items} title=\"Shipping address\" bordered layout={layout} itemLayout={itemLayout} />\n    </Space>\n  );\n}\n",
        "desc": "布局方式"
      },
      {
        "code": "import React from 'react';\nimport { Descriptions, Space, Radio } from 'tdesign-react';\n\nexport default function Column() {\n  const [column, setColumn] = React.useState(2);\n  const columnOptions = [2, 3, 4];\n  const items = [\n    {\n      label: 'Name',\n      content: 'TDesign',\n    },\n    {\n      label: 'Telephone Number',\n      content: '139****0609',\n    },\n    {\n      label: 'Area',\n      content: 'China Tencent Headquarters',\n    },\n    {\n      label: 'Address',\n      content: 'Shenzhen Penguin Island D1 4A Mail Center',\n    },\n  ];\n  return (\n    <Space direction=\"vertical\">\n      <Radio.Group options={columnOptions} value={column} onChange={(val) => setColumn(val)} variant=\"default-filled\" />\n      <Descriptions items={items} title=\"Shipping address\" bordered column={column} />\n    </Space>\n  );\n}\n",
        "desc": "自定义列数量"
      },
      {
        "code": "import React from 'react';\nimport { Descriptions, Space, Radio } from 'tdesign-react';\n\nexport default function Column() {\n  const [tableLayout, setTableLayout] = React.useState('fixed');\n  const tableLayoutOptions = ['fixed', 'auto'];\n  const items = [\n    {\n      label: 'Name',\n      content: 'TDesign',\n    },\n    {\n      label: 'Telephone Number',\n      content: '139****0609',\n    },\n    {\n      label: 'Area',\n      content: 'China Tencent Headquarters',\n    },\n    {\n      label: 'Address',\n      content: 'Shenzhen Penguin Island D1 4A Mail Center',\n    },\n  ];\n  return (\n    <Space direction=\"vertical\">\n      <Radio.Group\n        options={tableLayoutOptions}\n        value={tableLayout}\n        onChange={(val) => setTableLayout(val)}\n        variant=\"default-filled\"\n      />\n      <Descriptions items={items} title=\"Shipping address\" bordered tableLayout={tableLayout} />\n    </Space>\n  );\n}\n",
        "desc": ": 使用固定表格布局算法。此模式下，每列的宽度按以下方式确定：使用显示设定的列宽度否则，使用第一行中显示设定的的单元格宽度作为对应列的宽度否则，均分剩余宽度: 使用自动表格布局算法。表格及其单元格的宽度会根据内容进行调整。"
      },
      {
        "code": "import React from 'react';\nimport { Descriptions } from 'tdesign-react';\n\nexport default function CustomStyle() {\n  const customLabelClassName = {\n    width: '100px',\n    textAlign: 'left',\n  };\n  const customContentClassName = {\n    textAlign: 'center',\n  };\n  const items = [\n    {\n      label: 'Name',\n      content: 'TDesign',\n    },\n    {\n      label: 'Telephone Number',\n      content: '139****0609',\n    },\n    {\n      label: 'Area',\n      content: 'China Tencent Headquarters',\n    },\n    {\n      label: 'Address',\n      content: 'Shenzhen Penguin Island D1 4A Mail Center',\n    },\n  ];\n  return (\n    <Descriptions\n      items={items}\n      title=\"Shipping address\"\n      bordered\n      labelStyle={customLabelClassName}\n      contentStyle={customContentClassName}\n    />\n  );\n}\n",
        "desc": "自定义样式"
      },
      {
        "code": "import React from 'react';\nimport { Descriptions, Space } from 'tdesign-react';\n\n// const { DescriptionsItem } = Descriptions;\n\nexport default function Nest() {\n  const itemsContent = [\n    {\n      label: 'City',\n      content: 'Shenzhen',\n    },\n    {\n      label: 'Detail',\n      content: 'Penguin Island D1 4A Mail Center',\n    },\n  ];\n  const items = [\n    {\n      label: 'Name',\n      content: 'TDesign',\n    },\n    {\n      label: 'Telephone Number',\n      content: '139****0609',\n    },\n    {\n      label: 'Area',\n      content: 'China Tencent Headquarters',\n    },\n    {\n      label: 'Address',\n      content: (\n        <Descriptions\n          items={itemsContent}\n          labelStyle={{\n            background: '#f4f4f4',\n          }}\n          colon\n        />\n      ),\n    },\n  ];\n  return (\n    <Space direction=\"vertical\">\n      <Descriptions items={items} title=\"Shipping address\" bordered />\n      {/* <Descriptions title=\"Shipping address\" bordered>\n        <DescriptionsItem label=\"Name\">TDesign</DescriptionsItem>\n        <DescriptionsItem label=\"Telephone Number\">139****0609</DescriptionsItem>\n        <DescriptionsItem label=\"Area\">China Tencent Headquarters</DescriptionsItem>\n        <DescriptionsItem label=\"Address\">\n          <Descriptions labelStyle={{ background: '#f4f4f4' }} colon>\n            <DescriptionsItem label=\"City\">Shenzhen</DescriptionsItem>\n            <DescriptionsItem label=\"Detail\">Penguin Island D1 4A Mail Center</DescriptionsItem>\n          </Descriptions>\n        </DescriptionsItem>\n       </Descriptions> */}\n    </Space>\n  );\n}\n",
        "desc": "嵌套使用"
      }
    ]
  },
  {
    "name": "<Empty/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Empty } from 'tdesign-react';\n\nexport default function BasicGrid() {\n  return <Empty />;\n}\n",
        "desc": "基础的空状态"
      },
      {
        "code": "import React from 'react';\nimport { Empty, Button } from 'tdesign-react';\n\nexport default function Operation() {\n  function goToIndex() {\n    console.log('go to index');\n    location.href = '/';\n  }\n  return <Empty action={<Button onClick={goToIndex}>返回首页</Button>} description=\"description\" />;\n}\n",
        "desc": "带描述的空状态"
      },
      {
        "code": "import React from 'react';\nimport { Empty, Button } from 'tdesign-react';\n\nexport default function Operation() {\n  function goToIndex() {\n    console.log('go to index');\n    location.href = '/';\n  }\n  return <Empty action={<Button onClick={goToIndex}>返回首页</Button>} />;\n}\n",
        "desc": "带操作的空状态"
      },
      {
        "code": "import React from 'react';\nimport { Empty, Row, Col } from 'tdesign-react';\n\nexport default function StatusExample() {\n  return (\n    <Row gutter={40}>\n      <Col>\n        <Empty type=\"empty\" />\n      </Col>\n      <Col>\n        <Empty type=\"maintenance\" />\n      </Col>\n      <Col>\n        <Empty type=\"network-error\" />\n      </Col>\n      <Col>\n        <Empty type=\"success\" />\n      </Col>\n      <Col>\n        <Empty type=\"fail\" />\n      </Col>\n    </Row>\n  );\n}\n",
        "desc": "自带的状态类型"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Empty, Row, Col, Space, Radio } from 'tdesign-react';\n\nconst options = [\n  {\n    label: 'small',\n    value: 'small',\n  },\n  {\n    label: 'medium',\n    value: 'medium',\n  },\n  {\n    label: 'large',\n    value: 'large',\n  },\n];\nexport default function StatusExample() {\n  const [size, setSize] = useState('medium');\n  return (\n    <Space direction=\"vertical\">\n      <Radio.Group variant=\"default-filled\" options={options} value={size} onChange={(value) => setSize(value)} />\n      <div\n        style={{\n          marginTop: '20px',\n          height: '100px',\n        }}\n      >\n        <Row gutter={40}>\n          <Col>\n            <Empty type=\"empty\" size={size} />\n          </Col>\n          <Col>\n            <Empty type=\"maintenance\" size={size} />\n          </Col>\n          <Col>\n            <Empty type=\"network-error\" size={size} />\n          </Col>\n          <Col>\n            <Empty type=\"success\" size={size} />\n          </Col>\n          <Col>\n            <Empty type=\"fail\" size={size} />\n          </Col>\n        </Row>\n      </div>\n    </Space>\n  );\n}\n",
        "desc": "不同尺寸的空状态"
      },
      {
        "code": "import React from 'react';\nimport { Empty, Row, Col } from 'tdesign-react';\nimport { ErrorCircleIcon } from 'tdesign-icons-react';\n\nexport default function BasicGrid() {\n  const CustomImageContainer = (\n    <div\n      style={{\n        width: '64px',\n        height: '64px',\n        backgroundImage: 'url(https://tdesign.gtimg.com/demo/demo-image-1.png)',\n        backgroundSize: '100% 100%',\n      }}\n    />\n  );\n  return (\n    <Row gutter={40}>\n      <Col>\n        <Empty image={<ErrorCircleIcon size={64} color=\"var(--td-text-color-placeholder)\" />} description=\"暂无数据\" />\n      </Col>\n      <Col>\n        <Empty description=\"暂无数据\" image={CustomImageContainer} />\n      </Col>\n    </Row>\n  );\n}\n",
        "desc": "自定义内容的空状态"
      }
    ]
  },
  {
    "name": "<Image/>",
    "demoCode": [
      {
        "code": "import React, { useEffect, useState } from 'react';\nimport { Image, Space } from 'tdesign-react';\n\nexport default function FillModeImage() {\n  const [src, setSrc] = useState('');\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setSrc('https://tdesign.gtimg.com/demo/demo-image-1.png');\n    }, 100);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n  return (\n    <Space breakLine size={16}>\n      {['fill', 'contain', 'cover', 'none', 'scale-down'].map((item) => (\n        <Space direction=\"vertical\" align=\"start\" key={item}>\n          <Image\n            src={src}\n            fit={item}\n            // fallback='https://tdesign.gtimg.com/demo/demo-image-1.png'\n            style={{\n              width: 120,\n              height: 120,\n            }}\n          />\n          {item}\n        </Space>\n      ))}\n    </Space>\n  );\n}\n",
        "desc": "提供 fill、contain、cover、none、scale-down 5 种填充类型。"
      },
      {
        "code": "import React from 'react';\nimport { Image, Space } from 'tdesign-react';\n\nexport default function FillPositionImage() {\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Space breakLine>\n        <Space direction=\"vertical\" align=\"start\">\n          <Image\n            src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n            fit=\"cover\"\n            position=\"center\"\n            style={{\n              width: 120,\n              height: 120,\n            }}\n          />\n          cover center\n        </Space>\n        <Space direction=\"vertical\" align=\"start\">\n          <Image\n            src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n            fit=\"cover\"\n            style={{\n              width: 120,\n              height: 120,\n            }}\n            position=\"left\"\n          />\n          cover left\n        </Space>\n        <Space direction=\"vertical\" align=\"start\">\n          <Image\n            src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n            fit=\"cover\"\n            style={{\n              width: 120,\n              height: 120,\n            }}\n            position=\"right\"\n          />\n          cover right\n        </Space>\n      </Space>\n      <Space\n        style={{\n          marginTop: 20,\n        }}\n        breakLine\n      >\n        <Space direction=\"vertical\" align=\"start\">\n          <Image\n            src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n            fit=\"cover\"\n            style={{\n              width: 280,\n              height: 120,\n            }}\n            position=\"top\"\n          />\n          cover top\n        </Space>\n        <Space direction=\"vertical\" align=\"start\">\n          <Image\n            src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n            fit=\"cover\"\n            style={{\n              width: 280,\n              height: 120,\n            }}\n            position=\"bottom\"\n          />\n          cover bottom\n        </Space>\n      </Space>\n      <Space\n        style={{\n          marginTop: 20,\n        }}\n        breakLine\n      >\n        <Space direction=\"vertical\" align=\"start\">\n          <Image\n            src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n            fit=\"contain\"\n            style={{\n              width: 120,\n              height: 200,\n            }}\n            position=\"top\"\n          />\n          contain top\n        </Space>\n        <Space direction=\"vertical\" align=\"start\">\n          <Image\n            src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n            fit=\"contain\"\n            style={{\n              width: 120,\n              height: 200,\n            }}\n            position=\"bottom\"\n          />\n          contain bottom\n        </Space>\n        <Space direction=\"vertical\" align=\"start\">\n          <Image\n            src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n            fit=\"contain\"\n            style={{\n              width: 120,\n              height: 200,\n            }}\n            position=\"center\"\n          />\n          contain center\n        </Space>\n        <Space\n          style={{\n            marginTop: 20,\n          }}\n          breakLine\n        >\n          <Space direction=\"vertical\" align=\"start\">\n            <Image\n              src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n              fit=\"contain\"\n              style={{\n                width: 280,\n                height: 120,\n              }}\n              position=\"left\"\n            />\n            contain left\n          </Space>\n          <Space direction=\"vertical\" align=\"start\">\n            <Image\n              src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n              fit=\"contain\"\n              style={{\n                width: 280,\n                height: 120,\n              }}\n              position=\"right\"\n            />\n            contain right\n          </Space>\n        </Space>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "图片相对于容器的位置。当图片过大时，提供显示图片的局部左侧对齐、或右侧对齐的不同位置。"
      },
      {
        "code": "import React from 'react';\nimport { Image, Space } from 'tdesign-react';\n\nexport default function ShapeImage() {\n  return (\n    <Space>\n      <Space direction=\"vertical\" align=\"center\">\n        <Image\n          src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n          shape=\"square\"\n          style={{\n            width: 160,\n            height: 160,\n          }}\n          fit=\"cover\"\n        />\n        square\n      </Space>\n      <Space direction=\"vertical\" align=\"center\">\n        <Image\n          src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n          style={{\n            width: 160,\n            height: 160,\n          }}\n          fit=\"cover\"\n          shape=\"round\"\n        />\n        round\n      </Space>\n      <Space direction=\"vertical\" align=\"center\">\n        <Image\n          src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n          style={{\n            width: 160,\n            height: 160,\n          }}\n          shape=\"circle\"\n          fit=\"cover\"\n        />\n        circle\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "当图片长宽不相等时，无法使用 circle 展示一个正圆。"
      },
      {
        "code": "import React from 'react';\nimport { Image, Tag } from 'tdesign-react';\n\nexport default function AlbumCoverImage() {\n  const label = (\n    <Tag\n      shape=\"mark\"\n      theme=\"warning\"\n      style={{\n        margin: 8,\n        borderRadius: 3,\n        background: 'rgba(236,242,254,1)',\n        color: 'rgba(0,82,217,1)',\n      }}\n    >\n      标签一\n    </Tag>\n  );\n  return (\n    <Image\n      src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n      style={{\n        width: 284,\n        height: 160,\n      }}\n      gallery\n      overlayContent={label}\n    />\n  );\n}\n",
        "desc": "图片呈现图集样式的效果。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Image, Space, Button } from 'tdesign-react';\nimport { RefreshIcon, ImageErrorIcon } from 'tdesign-icons-react';\n\nexport default function PlaceholderImage() {\n  const [loadingCount, setLoadingCount] = useState(0);\n  const handleReload = () => {\n    setLoadingCount(loadingCount + 1);\n  };\n  const [errorCount, setErrorCount] = useState(0);\n  const handleReplayError = () => {\n    setErrorCount(errorCount + 1);\n  };\n  return (\n    <Space size={24} direction=\"vertical\">\n      <div>\n        <h3\n          style={{\n            marginBottom: 15,\n          }}\n        >\n          加载中的图片\n        </h3>\n        <Space>\n          <Space direction=\"vertical\">\n            默认占位\n            <Image\n              src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n              key={loadingCount}\n              style={{\n                width: 284,\n                height: 160,\n              }}\n            />\n            <Button variant=\"outline\" icon={<RefreshIcon />} onClick={handleReload}>\n              重演 loading\n            </Button>\n          </Space>\n          <Space direction=\"vertical\">\n            自定义占位\n            <Image\n              key={loadingCount}\n              src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n              style={{\n                width: 284,\n                height: 160,\n              }}\n              loading={<ImageErrorIcon size={24} />}\n            />\n          </Space>\n        </Space>\n      </div>\n      <div>\n        <h3\n          style={{\n            marginBottom: 15,\n          }}\n        >\n          加载失败的图片\n        </h3>\n        <Space>\n          <Space direction=\"vertical\">\n            默认错误\n            <Image\n              src=\"error url\"\n              key={errorCount}\n              style={{\n                width: 284,\n                height: 160,\n              }}\n              onError={(e) => {\n                console.log(e);\n              }}\n            />\n            <Button variant=\"outline\" icon={<RefreshIcon />} onClick={handleReplayError}>\n              重演 error\n            </Button>\n          </Space>\n          <Space direction=\"vertical\">\n            自定义错误\n            <Image\n              src=\"error url\"\n              key={errorCount}\n              style={{\n                width: 284,\n                height: 160,\n              }}\n              error={<ImageErrorIcon size={24} />}\n            />\n          </Space>\n        </Space>\n      </div>\n    </Space>\n  );\n}\n",
        "desc": "显示加载的不同状态，提供默认、自定义两种占位样式。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Image, Space, Button, Loading } from 'tdesign-react';\nimport { RefreshIcon } from 'tdesign-icons-react';\n\nexport default function LazySingleImage() {\n  const [loadCount, setLoadCount] = useState(0);\n  const handleReload = () => {\n    setLoadCount(loadCount + 1);\n  };\n  const loading = (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '100%',\n        height: '100%',\n        background: 'rgba(255,255,255,.4)',\n        backdropFilter: 'blur(10px)',\n      }}\n    >\n      <Loading\n        delay={0}\n        fullscreen={false}\n        indicator\n        inheritColor={false}\n        loading\n        preventScrollThrough\n        showOverlay\n        size=\"small\"\n      />\n    </div>\n  );\n  return (\n    <Space direction=\"vertical\">\n      <Image\n        src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n        style={{\n          width: 284,\n          height: 160,\n        }}\n        lazy\n        placeholder={<img width=\"100%\" height=\"100%\" src=\"https://tdesign.gtimg.com/demo/demo-image-5.png\" />}\n        loading={loading}\n        key={loadCount}\n      />\n      <Button variant=\"outline\" icon={<RefreshIcon />} onClick={handleReload}>\n        重演 lazy load\n      </Button>\n    </Space>\n  );\n}\n",
        "desc": "placeholder 在图像加载时占位显示。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Image, Space, Button } from 'tdesign-react';\nimport { RefreshIcon } from 'tdesign-icons-react';\n\nexport default function LazyListImage() {\n  const [loadCount, setLoadCount] = useState(0);\n  const handleReload = () => {\n    setLoadCount(loadCount + 1);\n  };\n  return (\n    <Space direction=\"vertical\" key={loadCount}>\n      <Space\n        breakLine\n        style={{\n          height: 240,\n          overflowY: 'scroll',\n        }}\n      >\n        {Array.from({\n          length: 24,\n        }).map((_, index) => (\n          <Image\n            key={index}\n            src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n            style={{\n              width: 230,\n              height: 120,\n            }}\n            lazy\n          />\n        ))}\n      </Space>\n      <Button variant=\"outline\" icon={<RefreshIcon />} onClick={handleReload}>\n        重演 lazy load\n      </Button>\n    </Space>\n  );\n}\n",
        "desc": "多张图片滚动下拉时，尚未出现的图片会用占位图表示，呈现懒加载的效果。"
      },
      {
        "code": "import React from 'react';\nimport { Image, Space, Tag } from 'tdesign-react';\nimport { PrintIcon } from 'tdesign-icons-react';\n\nexport default function ExtraAlwaysImage() {\n  const mask = (\n    <div\n      style={{\n        background: 'rgba(0,0,0,.4)',\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: 14,\n        lineHeight: 22,\n      }}\n    >\n      <Tag\n        shape=\"mark\"\n        theme=\"warning\"\n        style={{\n          borderRadius: 3,\n          background: 'transparent',\n          color: '#fff',\n        }}\n      >\n        <PrintIcon size={16} /> 高清\n      </Tag>\n    </div>\n  );\n  const button = (\n    <Tag\n      shape=\"mark\"\n      theme=\"warning\"\n      style={{\n        position: 'absolute',\n        right: 8,\n        bottom: 8,\n        borderRadius: 3,\n        background: 'rgba(236,242,254,1)',\n        color: 'rgba(0,82,217,1)',\n      }}\n    >\n      <PrintIcon size={16} /> 高清\n    </Tag>\n  );\n  return (\n    <Space size={32}>\n      <Space direction=\"vertical\">\n        <strong\n          style={{\n            fontSize: 20,\n          }}\n        >\n          有遮罩\n        </strong>\n        <Image\n          src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n          style={{\n            width: 284,\n            height: 160,\n          }}\n          overlayContent={mask}\n        />\n      </Space>\n      <Space direction=\"vertical\">\n        <strong\n          style={{\n            fontSize: 20,\n          }}\n        >\n          无遮罩\n        </strong>\n        <Image\n          src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n          style={{\n            width: 284,\n            height: 160,\n          }}\n          overlayContent={button}\n        />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "悬浮层常驻显示，不因用户操作出现或消失。"
      },
      {
        "code": "import React from 'react';\nimport { Image } from 'tdesign-react';\n\nexport default function ExtraHoverImage() {\n  const mask = (\n    <div\n      style={{\n        background: 'rgba(0,0,0,.4)',\n        color: '#fff',\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      预览\n    </div>\n  );\n  return (\n    <Image\n      src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\"\n      style={{\n        width: 284,\n        height: 160,\n      }}\n      overlayContent={mask}\n      overlayTrigger=\"hover\"\n    />\n  );\n}\n",
        "desc": "默认不显示悬浮层，鼠标悬浮到图片区域后悬浮层出现。"
      },
      {
        "code": "import React from 'react';\nimport { Image } from 'tdesign-react';\n\nexport default function AvifImage() {\n  return (\n    <Image\n      src=\"https://tdesign.gtimg.com/img/tdesign-image.avif\"\n      srcset={{\n        'image/avif': 'https://tdesign.gtimg.com/img/tdesign-image.avif',\n        'image/webp': 'https://tdesign.gtimg.com/img/tdesign-image.webp',\n      }}\n      shape=\"square\"\n      style={{\n        maxWidth: '100%',\n      }}\n      fit=\"scale-down\"\n    />\n  );\n}\n",
        "desc": "支持使用  设置特殊格式的图片渲染，如  和 。图片转码为 AVIF/WEBP 推荐使用腾讯云数据万象图片压缩服务。"
      }
    ]
  },
  {
    "name": "<ImageViewer/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { ImageViewer, Image, Space } from 'tdesign-react';\nimport { BrowseIcon } from 'tdesign-icons-react';\n\nconst img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';\nexport default function BasicImageViewer() {\n  const trigger = ({ open }) => {\n    const mask = (\n      <div\n        style={{\n          background: 'rgba(0,0,0,.6)',\n          color: '#fff',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n        onClick={open}\n      >\n        <span>\n          <BrowseIcon size=\"16px\" name={'browse'} /> 预览\n        </span>\n      </div>\n    );\n    return (\n      <Image\n        alt={'test'}\n        src={img}\n        overlayContent={mask}\n        overlayTrigger=\"hover\"\n        fit=\"contain\"\n        style={{\n          width: 160,\n          height: 160,\n          border: '4px solid var(--td-bg-color-secondarycontainer)',\n          borderRadius: 'var(--td-radius-medium)',\n          backgroundColor: '#fff',\n        }}\n      />\n    );\n  };\n  return (\n    <Space breakLine size={16}>\n      <ImageViewer trigger={trigger} images={[img]} />\n\n      {/* TODO: fix visible=true can not show image previewer */}\n      {/* <ImageViewer images={[img]} visible={true} /> */}\n    </Space>\n  );\n}\n",
        "desc": "通过图片缩略图，查看完整图片。"
      },
      {
        "code": "import React from 'react';\nimport { ImageViewer, Image, Space } from 'tdesign-react';\nimport { BrowseIcon } from 'tdesign-icons-react';\n\nconst img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';\nexport default function BasicImageViewer() {\n  const trigger = ({ open }) => {\n    const mask = (\n      <div\n        style={{\n          background: 'rgba(0,0,0,.6)',\n          color: '#fff',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n        onClick={open}\n      >\n        <span>\n          <BrowseIcon size=\"16px\" name={'browse'} /> 预览\n        </span>\n      </div>\n    );\n    return (\n      <Image\n        alt={'test'}\n        src={img}\n        overlayContent={mask}\n        overlayTrigger=\"hover\"\n        fit=\"contain\"\n        style={{\n          width: 160,\n          height: 160,\n          border: '4px solid var(--td-bg-color-secondarycontainer)',\n          borderRadius: 'var(--td-radius-medium)',\n          backgroundColor: '#fff',\n        }}\n      />\n    );\n  };\n  return (\n    <Space breakLine size={16}>\n      <ImageViewer draggable mode=\"modeless\" title=\"预览单张图片\" trigger={trigger} images={[img]} />\n    </Space>\n  );\n}\n",
        "desc": "通过图片缩略图，查看完整图片。支持移动的小窗口展示。"
      },
      {
        "code": "import React from 'react';\nimport { ImageViewer, Button } from 'tdesign-react';\n\nconst img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';\nexport default function BasicImageViewer() {\n  const trigger = ({ open }) => <Button onClick={open}>预览单张图片</Button>;\n  return <ImageViewer trigger={trigger} images={[img]} />;\n}\n",
        "desc": "通过点击文字按钮，查看图片。"
      },
      {
        "code": "import React from 'react';\nimport { Image, ImageViewer, Space } from 'tdesign-react';\nimport { BrowseIcon } from 'tdesign-icons-react';\n\nconst imgH = 'https://tdesign.gtimg.com/demo/demo-image-3.png';\nconst imgV = 'https://tdesign.gtimg.com/demo/demo-image-2.png';\nconst img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';\nexport default function BasicImageViewer() {\n  const images = [\n    img,\n    {\n      mainImage: imgH,\n      download: true,\n      thumbnail: imgH,\n    },\n    imgV,\n  ];\n  return (\n    <Space breakLine size={16}>\n      {images.map((imgSrc, index) => {\n        const trigger = ({ open }) => {\n          const mask = (\n            <div\n              style={{\n                background: 'rgba(0,0,0,.6)',\n                color: '#fff',\n                height: '100%',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n              }}\n              onClick={open}\n            >\n              <span>\n                <BrowseIcon size=\"16px\" name={'browse'} /> 预览\n              </span>\n            </div>\n          );\n          return (\n            <Image\n              alt={'test'}\n              src={typeof imgSrc === 'string' ? imgSrc : imgSrc.mainImage}\n              overlayContent={mask}\n              overlayTrigger=\"hover\"\n              fit=\"contain\"\n              style={{\n                width: 160,\n                height: 160,\n                border: '4px solid var(--td-bg-color-secondarycontainer)',\n                borderRadius: 'var(--td-radius-medium)',\n                backgroundColor: '#fff',\n              }}\n            />\n          );\n        };\n        return <ImageViewer key={index} trigger={trigger} images={images} defaultIndex={index} />;\n      })}\n    </Space>\n  );\n}\n",
        "desc": "当有多个图片时，在查看器内可以展开预览所有图片。"
      },
      {
        "code": "import React from 'react';\nimport { Image, ImageViewer, Space } from 'tdesign-react';\nimport { BrowseIcon } from 'tdesign-icons-react';\n\nconst imgH = 'https://tdesign.gtimg.com/demo/demo-image-3.png';\nconst imgV = 'https://tdesign.gtimg.com/demo/demo-image-2.png';\nconst img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';\nexport default function BasicImageViewer() {\n  const trigger = ({ open }) => {\n    const mask = (\n      <div\n        style={{\n          background: 'rgba(0,0,0,.6)',\n          color: '#fff',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n        onClick={open}\n      >\n        <span>\n          <BrowseIcon size=\"16px\" name={'browse'} /> 预览\n        </span>\n      </div>\n    );\n    return (\n      <div\n        style={{\n          position: 'relative',\n          overflow: 'hidden',\n          boxSizing: 'content-box',\n          border: '4px solid var(--td-bg-color-secondarycontainer)',\n          borderRadius: 'var(--td-radius-medium)',\n        }}\n      >\n        <Image\n          alt={'test'}\n          src={img}\n          overlayContent={mask}\n          overlayTrigger=\"hover\"\n          fit=\"contain\"\n          style={{\n            width: 240,\n            height: 240,\n            backgroundColor: '#fff',\n          }}\n        />\n        <div\n          style={{\n            width: '100%',\n            height: '56px',\n            padding: '0 16px',\n            lineHeight: '56px',\n            position: 'absolute',\n            bottom: '0',\n            color: 'var(--td-text-color-anti)',\n            backgroundImage: 'linear-gradient(0deg, rgba(0, 0, 0, .4) 0%, rgba(0, 0, 0, 0) 100%)',\n            boxSizing: 'border-box',\n            zIndex: 1,\n          }}\n        >\n          <span>相册封面标题</span>\n        </div>\n      </div>\n    );\n  };\n  const images = [img, imgV, imgH];\n  return (\n    <Space breakLine size={16}>\n      <ImageViewer trigger={trigger} images={images} title=\"相册封面标题\" />\n    </Space>\n  );\n}\n",
        "desc": "通过相册封面图，触发预览多张图片。"
      },
      {
        "code": "import React from 'react';\nimport { Image, Space, ImageViewer } from 'tdesign-react';\nimport { BrowseIcon } from 'tdesign-icons-react';\n\nconst imgV = 'https://tdesign.gtimg.com/demo/demo-image-2.png';\nconst img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';\nexport default function BasicImageViewer() {\n  const trigger = ({ open }) => {\n    const mask = (\n      <div\n        style={{\n          background: 'rgba(0,0,0,.6)',\n          color: '#fff',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n        onClick={open}\n      >\n        <span>\n          <BrowseIcon size=\"16px\" name={'browse'} /> 预览\n        </span>\n      </div>\n    );\n    return (\n      <Image\n        alt={'test'}\n        src={img}\n        overlayContent={mask}\n        overlayTrigger=\"hover\"\n        fit=\"contain\"\n        style={{\n          width: 160,\n          height: 160,\n          border: '4px solid var(--td-bg-color-secondarycontainer)',\n          borderRadius: 'var(--td-radius-medium)',\n          backgroundColor: '#fff',\n        }}\n      />\n    );\n  };\n  const images = [\n    {\n      mainImage: imgV,\n      thumbnail: img,\n    },\n  ];\n  return (\n    <Space breakLine size={16}>\n      <ImageViewer trigger={trigger} images={images} />\n      <ImageViewer trigger={trigger} images={[images[0].mainImage]} />\n    </Space>\n  );\n}\n",
        "desc": "在原图未成功加载之前，渐进显示加载状态。"
      },
      {
        "code": "import React from 'react';\nimport { Image, ImageViewer, Space } from 'tdesign-react';\nimport { BrowseIcon } from 'tdesign-icons-react';\n\nconst img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';\nexport default function BasicImageViewer() {\n  const images = [\n    img,\n    'https://tdesign.gtimg.com/demo/demo-image-error1.png',\n    'https://tdesign.gtimg.com/demo/demo-image-error2.png',\n    'https://tdesign.gtimg.com/demo/demo-image-error3.png',\n  ];\n  return (\n    <Space>\n      {images.map((imgSrc, index) => {\n        const trigger = ({ open }) => {\n          const mask = (\n            <div\n              style={{\n                background: 'rgba(0,0,0,.6)',\n                color: '#fff',\n                height: '100%',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n              }}\n              onClick={open}\n            >\n              <span>\n                <BrowseIcon size=\"16px\" name={'browse'} /> 预览\n              </span>\n            </div>\n          );\n          return (\n            <Image\n              alt={'test'}\n              src={imgSrc}\n              overlayContent={mask}\n              overlayTrigger=\"hover\"\n              fit=\"contain\"\n              style={{\n                width: 160,\n                height: 160,\n                border: '4px solid var(--td-bg-color-secondarycontainer)',\n                borderRadius: 'var(--td-radius-medium)',\n                backgroundColor: '#fff',\n              }}\n            />\n          );\n        };\n        return <ImageViewer key={imgSrc} trigger={trigger} images={images} defaultIndex={index} />;\n      })}\n    </Space>\n  );\n}\n",
        "desc": "加载失败的图片，用占位图显示，并提供相应的失败说明。可使用默认占位图，或自定义占位图。"
      },
      {
        "code": "import React from 'react';\nimport { Image, ImageViewer, Popup, Space } from 'tdesign-react';\nimport { BrowseIcon, EllipsisIcon } from 'tdesign-icons-react';\n\nconst imgH = 'https://tdesign.gtimg.com/demo/demo-image-3.png';\nconst imgV = 'https://tdesign.gtimg.com/demo/demo-image-2.png';\nconst img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';\nconst listItemStyle = {\n  display: 'block',\n  borderRadius: 'var(--td-radius-default)',\n  height: '28px',\n  lineHeight: '20px',\n  cursor: 'pointer',\n  padding: '3px 5px',\n  color: 'var(--td-text-color-primary)',\n  transition: 'background-color .2s cubic-bezier(.38,0,.24,1)',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  '--ripple-color': 'var(--td-bg-color-container-active)',\n};\nconst ImageViewerIconList = ({ list, onClick }) => (\n  <ul\n    style={{\n      padding: '2px',\n    }}\n  >\n    {list.map((it, index) => (\n      <li key={index} style={listItemStyle} onClick={() => onClick(it, index)}>\n        <span>{it.label}</span>\n      </li>\n    ))}\n  </ul>\n);\nexport default function BasicImageViewer() {\n  const images = [img, imgH, imgV];\n  const trigger = ({ open }) => {\n    const listCommon = (\n      <ImageViewerIconList\n        onClick={open}\n        list={images.map((i, index) => ({\n          label: `图片${index}`,\n        }))}\n      />\n    );\n    const mask = (\n      <div\n        style={{\n          background: 'rgba(0,0,0,.6)',\n          color: '#fff',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n        onClick={open}\n      >\n        <span>\n          <BrowseIcon size=\"16px\" name={'browse'} /> 预览\n        </span>\n      </div>\n    );\n    return (\n      <div\n        style={{\n          position: 'relative',\n          overflow: 'hidden',\n          boxSizing: 'content-box',\n          border: '4px solid var(--td-bg-color-secondarycontainer)',\n          borderRadius: 'var(--td-radius-medium)',\n        }}\n      >\n        <Image\n          alt={'test'}\n          src={img}\n          overlayContent={mask}\n          overlayTrigger=\"hover\"\n          fit=\"contain\"\n          style={{\n            width: 240,\n            height: 240,\n            backgroundColor: '#fff',\n          }}\n        />\n        <div\n          style={{\n            width: '100%',\n            height: '56px',\n            padding: '0 16px',\n            lineHeight: '56px',\n            position: 'absolute',\n            bottom: '0',\n            color: 'var(--td-text-color-anti)',\n            backgroundImage: 'linear-gradient(0deg, rgba(0, 0, 0, .4) 0%, rgba(0, 0, 0, 0) 100%)',\n            display: 'flex',\n            boxSizing: 'border-box',\n            zIndex: 1,\n          }}\n        >\n          <span\n            style={{\n              flex: 1,\n            }}\n          >\n            相册封面标题\n          </span>\n          <span\n            style={{\n              cursor: 'pointer',\n            }}\n          >\n            <BrowseIcon size={16} onClick={open} />\n            <Popup\n              trigger=\"click\"\n              content={listCommon}\n              placement=\"right-bottom\"\n              overlayStyle={{\n                width: '140px',\n                padding: '6px',\n              }}\n              destroyOnClose\n            >\n              <EllipsisIcon size={16} />\n            </Popup>\n          </span>\n        </div>\n      </div>\n    );\n  };\n  return (\n    <Space breakLine size={16}>\n      <ImageViewer trigger={trigger} images={images} title=\"相册封面标题\" />\n    </Space>\n  );\n}\n",
        "desc": "通过操作栏相关按钮，点击查看图片。"
      },
      {
        "code": "import React from 'react';\nimport { ImageViewer, Image } from 'tdesign-react';\nimport { BrowseIcon } from 'tdesign-icons-react';\n\nconst img = [\n  {\n    mainImage: 'https://tdesign.gtimg.com/demo/tdesign-logo.svg',\n    isSvg: true,\n  },\n  {\n    mainImage: 'https://tdesign.gtimg.com/demo/demo-image-1.png',\n  },\n];\nconst Svg = () => {\n  const trigger = ({ open }) => {\n    const mask = (\n      <div\n        style={{\n          background: 'rgba(0,0,0,.6)',\n          color: '#fff',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n        onClick={open}\n      >\n        <span>\n          <BrowseIcon size=\"16px\" name={'browse'} /> 预览\n        </span>\n      </div>\n    );\n    return (\n      <Image\n        alt={'test'}\n        src={img[0].mainImage}\n        overlayContent={mask}\n        overlayTrigger=\"hover\"\n        fit=\"contain\"\n        style={{\n          width: 160,\n          height: 160,\n          border: '4px solid var(--td-bg-color-secondarycontainer)',\n          borderRadius: 'var(--td-radius-medium)',\n          backgroundColor: '#fff',\n        }}\n      />\n    );\n  };\n  return (\n    <div>\n      <ImageViewer trigger={trigger} images={img} />\n    </div>\n  );\n};\nexport default Svg;\n",
        "desc": "开启  配置，可将SVG插入Shadow不受外部样式干扰，可以支持到SVG内的链接等交互，有些SVG图片背景会是完全透明，使用时再展示的盒子处理即可"
      }
    ]
  },
  {
    "name": "<List/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { List, Link, Space } from 'tdesign-react';\n\nconst { ListItem } = List;\nexport default function BasicList() {\n  return (\n    <List>\n      <ListItem\n        action={\n          <Space>\n            <Link theme=\"primary\" hover=\"color\">\n              操作1\n            </Link>\n            <Link theme=\"primary\" hover=\"color\">\n              操作2\n            </Link>\n            <Link theme=\"primary\" hover=\"color\">\n              操作3\n            </Link>\n          </Space>\n        }\n      >\n        列表内容的描述性文字\n      </ListItem>\n      <ListItem\n        action={\n          <Space>\n            <Link theme=\"primary\" hover=\"color\">\n              操作1\n            </Link>\n            <Link theme=\"primary\" hover=\"color\">\n              操作2\n            </Link>\n            <Link theme=\"primary\" hover=\"color\">\n              操作3\n            </Link>\n          </Space>\n        }\n      >\n        列表内容的描述性文字\n      </ListItem>\n    </List>\n  );\n}\n",
        "desc": "仅包含简单文字的列表。对较简单的信息进行陈列时使用。"
      },
      {
        "code": "import React from 'react';\nimport { List } from 'tdesign-react';\n\nconst { ListItem, ListItemMeta } = List;\nexport default function BasicList() {\n  const listData = [\n    {\n      id: 1,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 2,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 3,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 4,\n      content: '列表内容列表内容列表内容',\n    },\n  ];\n  return (\n    <List>\n      {listData.map((item) => (\n        <ListItem key={item.id}>\n          <ListItemMeta title=\"列表主内容\" description={item.content} />\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n",
        "desc": "仅包含主要文字及描述性文字的列表。对较复杂的，包含多个字段或内容的信息进行展示时使用。"
      },
      {
        "code": "import React from 'react';\nimport { List } from 'tdesign-react';\n\nconst { ListItem, ListItemMeta } = List;\nexport default function BasicList() {\n  const avatarUrl = 'https://tdesign.gtimg.com/list-icon.png';\n  const listData = [\n    {\n      id: 1,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 2,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 3,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 4,\n      content: '列表内容列表内容列表内容',\n    },\n  ];\n  return (\n    <List size=\"small\">\n      {listData.map((item) => (\n        <ListItem key={item.id}>\n          <ListItemMeta image={avatarUrl} title=\"列表主内容\" description=\"列表内容列表内容列表内容\" />\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n",
        "desc": "包含简单图文的列表。需使用图片和文字结合展示信息。"
      },
      {
        "code": "import React from 'react';\nimport { List, Space, Link, Button } from 'tdesign-react';\nimport { EditIcon, DownloadIcon } from 'tdesign-icons-react';\n\nconst { ListItem, ListItemMeta } = List;\nconst avatarUrl = 'https://tdesign.gtimg.com/site/avatar.jpg';\nexport default function BasicList() {\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <List>\n        <ListItem\n          action={\n            <Space>\n              <Link theme=\"primary\" hover=\"color\">\n                操作1\n              </Link>\n              <Link theme=\"primary\" hover=\"color\">\n                操作2\n              </Link>\n              <Link theme=\"primary\" hover=\"color\">\n                操作3\n              </Link>\n            </Space>\n          }\n        >\n          <ListItemMeta image={avatarUrl} title=\"列表主内容\" description=\"列表内容列表内容\" />\n        </ListItem>\n        <ListItem\n          action={\n            <Space>\n              <Link theme=\"primary\" hover=\"color\">\n                操作1\n              </Link>\n              <Link theme=\"primary\" hover=\"color\">\n                操作2\n              </Link>\n              <Link theme=\"primary\" hover=\"color\">\n                操作3\n              </Link>\n            </Space>\n          }\n        >\n          <ListItemMeta image={avatarUrl} title=\"列表主内容\" description=\"列表内容列表内容\" />\n        </ListItem>\n      </List>\n\n      <List split>\n        <ListItem\n          action={\n            <Space>\n              <Button variant=\"text\" shape=\"square\">\n                <EditIcon />\n              </Button>\n              <Button variant=\"text\" shape=\"square\">\n                <DownloadIcon />\n              </Button>\n            </Space>\n          }\n        >\n          <ListItemMeta image={avatarUrl} title=\"列表主内容\" description=\"列表内容列表内容\" />\n        </ListItem>\n        <ListItem\n          action={\n            <Space>\n              <Button variant=\"text\" shape=\"square\">\n                <EditIcon />\n              </Button>\n              <Button variant=\"text\" shape=\"square\">\n                <DownloadIcon />\n              </Button>\n            </Space>\n          }\n        >\n          <ListItemMeta image={avatarUrl} title=\"列表主内容\" description=\"列表内容列表内容\" />\n        </ListItem>\n      </List>\n    </Space>\n  );\n}\n",
        "desc": "包含操作的列表。需要对所在列进行操作时使用。"
      },
      {
        "code": "import React from 'react';\nimport { List } from 'tdesign-react';\n\nconst { ListItem } = List;\nexport default function BasicList() {\n  const listData = [\n    {\n      id: 1,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 2,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 3,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 4,\n      content: '列表内容列表内容列表内容',\n    },\n  ];\n  return (\n    <div className=\"tdesign-demo-item__body tdesign-demo-item__body--list\">\n      <h4>尺寸-小</h4>\n      <List size=\"small\">\n        {listData.map((item) => (\n          <ListItem key={item.id}>{item.content}</ListItem>\n        ))}\n      </List>\n\n      <h4\n        style={{\n          marginTop: 32,\n        }}\n      >\n        尺寸-中（默认）\n      </h4>\n      <List>\n        {listData.map((item) => (\n          <ListItem key={item.id}>{item.content}</ListItem>\n        ))}\n      </List>\n\n      <h4\n        style={{\n          marginTop: 32,\n        }}\n      >\n        尺寸-大\n      </h4>\n      <List size=\"large\">\n        {listData.map((item) => (\n          <ListItem key={item.id}>{item.content}</ListItem>\n        ))}\n      </List>\n    </div>\n  );\n}\n",
        "desc": "提供大、中（默认）、小三种尺寸。"
      },
      {
        "code": "import React from 'react';\nimport { List } from 'tdesign-react';\n\nconst { ListItem } = List;\nexport default function BasicList() {\n  const listData = [\n    {\n      id: 1,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 2,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 3,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 4,\n      content: '列表内容列表内容列表内容',\n    },\n  ];\n  return (\n    <List stripe={true} split={false}>\n      {listData.map((item) => (\n        <ListItem key={item.id}>{item.content}</ListItem>\n      ))}\n    </List>\n  );\n}\n",
        "desc": "当列表内容较多时，可以使用斑马纹样式，便于用户获取信息。"
      },
      {
        "code": "import React from 'react';\nimport { List } from 'tdesign-react';\n\nconst { ListItem } = List;\nexport default function BasicList() {\n  const listData = [\n    {\n      id: 1,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 2,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 3,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 4,\n      content: '列表内容列表内容列表内容',\n    },\n  ];\n  return (\n    <>\n      <List header=\"这里是 Header\" footer=\"这里是 Footer\">\n        {listData.map((item) => (\n          <ListItem key={item.id}>{item.content}</ListItem>\n        ))}\n      </List>\n      <div\n        style={{\n          marginBottom: '16px',\n        }}\n      ></div>\n      <List header={<p>通过 TNode 插入的 Header</p>} footer={<p>通过 TNode 插入的 Footer</p>}>\n        {listData.map((item) => (\n          <ListItem key={item.id}>{item.content}</ListItem>\n        ))}\n      </List>\n    </>\n  );\n}\n",
        "desc": "当列表需要展示头部或尾部信息时，可以通过或来配置。"
      },
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { List } from 'tdesign-react';\n\nconst { ListItem, ListItemMeta } = List;\nexport default function BasicList() {\n  const [listData, setListData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [pageNum, setPageNum] = useState(1);\n  const pageSize = 5;\n  const dataSource = [];\n  const total = 30;\n  for (let i = 0; i < total; i++) {\n    dataSource.push({\n      id: i,\n      content: '列表内容列表内容列表内容',\n      icon: 'https://tdesign.gtimg.com/list-icon.png',\n      title: '列表主内容',\n    });\n  }\n  const height = 300;\n  const style = {\n    height: `${height}px`,\n    overflow: 'auto',\n  };\n\n  // 模拟请求\n  const fetchData = async (pageInfo) => {\n    if (isLoading) return;\n    setIsLoading(true);\n    try {\n      setTimeout(() => {\n        const { pageNum, pageSize } = pageInfo;\n        const newDataSource = dataSource.slice((pageNum - 1) * pageSize, pageNum * pageSize);\n        setListData(listData.concat(newDataSource));\n        setPageNum(pageNum);\n        setIsLoading(false);\n      }, 300);\n    } catch (err) {\n      setListData([]);\n    }\n  };\n  const handleScroll = ({ scrollBottom }) => {\n    if (!scrollBottom && listData.length < total) {\n      fetchData({\n        pageNum: pageNum + 1,\n        pageSize,\n      });\n    }\n  };\n  useEffect(() => {\n    fetchData({\n      pageNum,\n      pageSize,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <List asyncLoading={isLoading ? 'loading' : ''} size=\"small\" style={style} onScroll={handleScroll}>\n      {listData.map((item) => (\n        <ListItem key={item.id}>\n          <ListItemMeta image={item.icon} title={item.title} description={item.content} />\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n",
        "desc": "当列表较长时，可以配置滚动条及事件来进行滚动处理"
      },
      {
        "code": "import React, { useEffect, useRef, useState } from 'react';\nimport { List, Space, Button } from 'tdesign-react';\n\nconst { ListItem, ListItemMeta } = List;\nconst imageUrl = 'https://tdesign.gtimg.com/site/avatar.jpg';\nconst VirtualScroll = () => {\n  const [data, setData] = useState([]); // 存储列表数据\n  const listRef = useRef(null);\n  const handleScroll = () => {\n    // scroll 属性需要设置 rowHeight 参数\n    listRef.current?.scrollTo({\n      // list 不存在嵌套，key 与 index 相同\n      index: 30,\n      behavior: 'smooth',\n    });\n  };\n  useEffect(() => {\n    const list = [];\n    for (let i = 0; i < 3000; i++) {\n      list.push({\n        content: `第${i + 1}个列表内容的描述性文字`,\n      });\n    }\n    setData(list);\n  }, []);\n  return (\n    <Space\n      style={{\n        width: '100%',\n      }}\n      direction=\"vertical\"\n    >\n      <List\n        ref={listRef}\n        style={{\n          height: '300px',\n        }}\n        scroll={{\n          type: 'virtual',\n          rowHeight: 80,\n          bufferSize: 10,\n          threshold: 10,\n        }}\n      >\n        {data.map((item, index) => (\n          <ListItem key={index}>\n            <ListItemMeta image={imageUrl} title=\"列表标题\" description={item.content} />\n          </ListItem>\n        ))}\n      </List>\n      <Space>\n        <Button onClick={handleScroll}>滚动到指定节点</Button>\n      </Space>\n    </Space>\n  );\n};\nexport default VirtualScroll;\n",
        "desc": "支持开启虚拟滚动，适用于一次性加载长列表的场景"
      },
      {
        "code": "import React from 'react';\nimport { List } from 'tdesign-react';\n\nconst { ListItem } = List;\nexport default function BasicList() {\n  const listData = [\n    {\n      id: 1,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 2,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 3,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 4,\n      content: '列表内容列表内容列表内容',\n    },\n  ];\n  return (\n    <List stripe={true} split={false}>\n      {listData.map((item) => (\n        <ListItem key={item.id}>{item.content}</ListItem>\n      ))}\n    </List>\n  );\n}\n",
        "desc": "斑马纹区分列表"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { List, Radio } from 'tdesign-react';\n\nconst { ListItem } = List;\nexport default function BasicList() {\n  const [asyncLoading, setAsyncLoading] = useState('');\n  const listData = [\n    {\n      id: 1,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 2,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 3,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 4,\n      content: '列表内容列表内容列表内容',\n    },\n  ];\n  const handleAsyncLoading = (val) => {\n    if (val === 'loading-custom') {\n      setAsyncLoading(\n        <div\n          style={{\n            textAlign: 'center',\n            marginTop: 12,\n          }}\n        >\n          {' '}\n          没有更多数据了{' '}\n        </div>,\n      );\n    } else {\n      setAsyncLoading(val);\n    }\n  };\n  const onLoadMore = ({ e }) => {\n    console.log(e);\n    handleAsyncLoading('loading');\n  };\n  return (\n    <>\n      <Radio.Group size=\"large\" onChange={(value) => handleAsyncLoading(value)}>\n        <Radio.Button value=\"load-more\">加载更多</Radio.Button>\n        <Radio.Button value=\"loading\">加载中</Radio.Button>\n        <Radio.Button value=\"loading-custom\">自定义加载更多</Radio.Button>\n        <Radio.Button value=\"\">加载完成</Radio.Button>\n      </Radio.Group>\n      <div\n        style={{\n          marginBottom: '16px',\n        }}\n      ></div>\n      <List\n        asyncLoading={asyncLoading}\n        onLoadMore={({ e }) =>\n          onLoadMore({\n            e,\n          })\n        }\n      >\n        {listData.map((item) => (\n          <ListItem key={item.id}>{item.content}</ListItem>\n        ))}\n      </List>\n    </>\n  );\n}\n",
        "desc": "异步加载的列表"
      },
      {
        "code": "import React from 'react';\nimport { List } from 'tdesign-react';\n\nconst { ListItem } = List;\nexport default function BasicList() {\n  const listData = [\n    {\n      id: 1,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 2,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 3,\n      content: '列表内容列表内容列表内容',\n    },\n    {\n      id: 4,\n      content: '列表内容列表内容列表内容',\n    },\n  ];\n  return (\n    <>\n      <List header=\"这里是 Header\" footer=\"这里是 Footer\">\n        {listData.map((item) => (\n          <ListItem key={item.id}>{item.content}</ListItem>\n        ))}\n      </List>\n      <div\n        style={{\n          marginBottom: '16px',\n        }}\n      ></div>\n      <List header={<p>通过 TNode 插入的 Header</p>} footer={<p>通过 TNode 插入的 Footer</p>}>\n        {listData.map((item) => (\n          <ListItem key={item.id}>{item.content}</ListItem>\n        ))}\n      </List>\n    </>\n  );\n}\n",
        "desc": "带头部及尾部的列表"
      },
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { List } from 'tdesign-react';\n\nconst { ListItem, ListItemMeta } = List;\nexport default function BasicList() {\n  const [listData, setListData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [pageNum, setPageNum] = useState(1);\n  const pageSize = 5;\n  const dataSource = [];\n  const total = 30;\n  for (let i = 0; i < total; i++) {\n    dataSource.push({\n      id: i,\n      content: '列表内容列表内容列表内容',\n      icon: 'https://tdesign.gtimg.com/list-icon.png',\n      title: '列表主内容',\n    });\n  }\n  const height = 300;\n  const style = {\n    height: `${height}px`,\n    overflow: 'auto',\n  };\n\n  // 模拟请求\n  const fetchData = async (pageInfo) => {\n    if (isLoading) return;\n    setIsLoading(true);\n    try {\n      setTimeout(() => {\n        const { pageNum, pageSize } = pageInfo;\n        const newDataSource = dataSource.slice((pageNum - 1) * pageSize, pageNum * pageSize);\n        setListData(listData.concat(newDataSource));\n        setPageNum(pageNum);\n        setIsLoading(false);\n      }, 300);\n    } catch (err) {\n      setListData([]);\n    }\n  };\n  const handleScroll = ({ scrollBottom }) => {\n    if (!scrollBottom && listData.length < total) {\n      fetchData({\n        pageNum: pageNum + 1,\n        pageSize,\n      });\n    }\n  };\n  useEffect(() => {\n    fetchData({\n      pageNum,\n      pageSize,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <List asyncLoading={isLoading ? 'loading' : ''} size=\"small\" style={style} onScroll={handleScroll}>\n      {listData.map((item) => (\n        <ListItem key={item.id}>\n          <ListItemMeta image={item.icon} title={item.title} description={item.content} />\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n",
        "desc": "带滚动事件的列表"
      }
    ]
  },
  {
    "name": "<Loading/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Loading } from 'tdesign-react';\n\nexport default function BaseLoadingExample() {\n  return <Loading></Loading>;\n}\n",
        "desc": "加载过程中只有图标显示。适用于打开页面或操作完成后模块内等待刷新的加载场景。"
      },
      {
        "code": "import React from 'react';\nimport { Loading } from 'tdesign-react';\n\nexport default function TextExample() {\n  return <Loading loading={true} text=\"静态文字加载中...\" indicator={false}></Loading>;\n}\n",
        "desc": "加载过程中有文字显示。适用于打开页面或操作完成后模块内等待刷新的加载场景。"
      },
      {
        "code": "import React from 'react';\nimport { Loading } from 'tdesign-react';\n\nexport default function IconTextExample() {\n  return <Loading loading={true} text=\"拼命加载中...\" size=\"small\"></Loading>;\n}\n",
        "desc": "加载过程中有文字和图标共同显示。适用于打开页面或操作完成后页面内等待刷新的加载场景。"
      },
      {
        "code": "import React from 'react';\nimport { Loading, Space } from 'tdesign-react';\n\nexport default function LoadingSize() {\n  return (\n    <Space direction=\"vertical\">\n      <Loading text=\"加载中...（小）\" loading size=\"small\"></Loading>\n      <Loading text=\"加载中...（中）\" loading size=\"medium\"></Loading>\n      <Loading text=\"加载中...（大）\" loading size=\"large\"></Loading>\n    </Space>\n  );\n}\n",
        "desc": "小尺寸适用于组件内加载场景，中尺寸适用于容器如卡片、表格等区域的加载场景，大尺寸适用于页面全屏加载场景。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Loading, Button, Space } from 'tdesign-react';\n\nexport default function WrapLoading() {\n  const [loading, setLoading] = useState(true);\n  return (\n    <Space direction=\"vertical\">\n      <div\n        style={{\n          width: 170,\n        }}\n      >\n        <Loading size=\"small\" loading={loading} showOverlay>\n          <div>this is loading component</div>\n          <div>this is loading component</div>\n          <div>this is loading component</div>\n          <div>this is loading component</div>\n          <div>this is loading component</div>\n        </Loading>\n      </div>\n      <Space>\n        <Button size=\"small\" onClick={() => setLoading(true)}>\n          加载中\n        </Button>\n        <Button size=\"small\" onClick={() => setLoading(false)}>\n          加载完成\n        </Button>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "Loading 组件可以作为容器包裹需要显示加载状态的内容。"
      },
      {
        "code": "import React, { useEffect, useState } from 'react';\nimport { Loading, Button, Space } from 'tdesign-react';\n\nexport default function LoadingDelay() {\n  const [data, setData] = useState('');\n  const [loading, setLoading] = useState(false);\n  const loadingData = (time) => {\n    setLoading(true);\n    setData('');\n    const timer = setTimeout(() => {\n      setLoading(false);\n      setData('数据加载完成，短时间的数据加载并未出现 loading');\n      clearTimeout(timer);\n    }, time || 100);\n  };\n  useEffect(() => {\n    loadingData();\n  }, []);\n  return (\n    <Space direction=\"vertical\">\n      <div>\n        <Loading delay={500} size=\"small\" loading={loading}></Loading>\n        {data ? <div>{`loading 作为独立元素：${data}`}</div> : null}\n      </div>\n\n      <div>\n        <Loading loading={loading} delay={500} size=\"small\" showOverlay>\n          <div>{data ? `loading 作为包裹元素：${data}` : ''}</div>\n        </Loading>\n      </div>\n\n      <div className=\"tdesign-demo-block-row\">\n        <Button onClick={() => loadingData()} size=\"small\">\n          快速重新加载数据（无loading）\n        </Button>\n        <Button onClick={() => loadingData(1000)} size=\"small\">\n          慢速重新加载数据\n        </Button>\n      </div>\n    </Space>\n  );\n}\n",
        "desc": "设置最短延迟响应时间，低于响应时间的操作不显示加载状态，在作为包裹元素场景有效。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Switch, Loading } from 'tdesign-react';\n\nexport default function LoadingFullscreen() {\n  const [checked, setChecked] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const onChange = (value) => {\n    setChecked(value);\n    setLoading(value);\n    if (value)\n      setTimeout(() => {\n        setChecked(false);\n        setLoading(false);\n      }, 2000);\n  };\n  return (\n    <>\n      <Loading loading={loading} fullscreen preventScrollThrough={true} text=\"加载中\"></Loading>\n      Loading state:\n      <Switch value={checked} onChange={onChange} />\n    </>\n  );\n}\n",
        "desc": "全屏展示加载状态，阻止用户操作。"
      },
      {
        "code": "import React from 'react';\nimport { loading, Button } from 'tdesign-react';\n\nexport default function Service() {\n  const handleFullscreen = () => {\n    const loadInstance = loading(true);\n    setTimeout(() => loadInstance.hide(), 1000);\n  };\n  const handleAttach = () => {\n    const loadInstance = loading({\n      attach: () => document.querySelector('#loading-service'),\n    });\n    setTimeout(() => loadInstance.hide(), 1000);\n  };\n  return (\n    <>\n      <div\n        id=\"loading-service\"\n        style={{\n          width: '100%',\n          height: '60px',\n          textAlign: 'center',\n          lineHeight: '60px',\n          position: 'relative',\n        }}\n      >\n        我是service的容器\n      </div>\n\n      <div>\n        <Button\n          onClick={handleFullscreen}\n          style={{\n            marginRight: 20,\n          }}\n        >\n          服务加载方式（全屏）\n        </Button>\n        <Button onClick={handleAttach}>服务加载方式（局部）</Button>\n      </div>\n    </>\n  );\n}\n",
        "desc": "函数方式调用"
      }
    ]
  },
  {
    "name": "<Progress/>",
    "demoCode": [
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { Progress, Space } from 'tdesign-react';\n\nexport default function LineProgress() {\n  const [percent, setPercent] = useState(0);\n  useEffect(() => {\n    const timer = setInterval(() => setPercent((percent) => (percent % 100) + 10), 1000);\n    return () => clearInterval(timer);\n  }, []);\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <h3>默认在线形外展示进度和状态</h3>\n      <div>默认样式</div>\n      <Progress percentage={percent}></Progress>\n\n      <div>进度被中断</div>\n      <Progress status={'warning'} percentage={percent}></Progress>\n\n      <div>进度状态发生重大错误</div>\n      <Progress status={'error'} percentage={percent}></Progress>\n\n      <div>进度正常更新</div>\n      <Progress status={'active'} percentage={percent}></Progress>\n\n      <div>不显示数字</div>\n      <Progress label={false} percentage={percent}></Progress>\n\n      <div>自定义内容</div>\n      <Progress label={<div>自定义文本</div>} percentage={percent}></Progress>\n\n      <div>自定义颜色与高度</div>\n      <Progress strokeWidth={30} color={'#00f'} trackColor={'#0f0'} percentage={percent}></Progress>\n\n      <div>进度条渐变色</div>\n      <Progress color={['#f00', '#0ff', '#f0f']} percentage={percent}></Progress>\n      <Progress\n        color={{\n          '0%': '#f00',\n          '100%': '#0ff',\n        }}\n        trackColor={'#0f0'}\n        percentage={percent}\n      ></Progress>\n      <Progress\n        strokeWidth={30}\n        color={{\n          direction: 'to right',\n          from: '#f00',\n          to: '#0ff',\n        }}\n        percentage={percent}\n      ></Progress>\n\n      <h3>可以在线形内展示进度信息</h3>\n      <Space\n        direction=\"vertical\"\n        style={{\n          width: '100%',\n        }}\n      >\n        <div>默认样式</div>\n        <Progress theme=\"plump\" percentage={30} />\n        <div>进度0-10%时数字数字位置出现在目前进度的右边区域</div>\n        <Progress theme=\"plump\" percentage={5} />\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "以线形表示进度的组件，可以选择性地配有文字或图标补充显示进度和状态。多用于信息量较为丰富的情况。"
      },
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { Progress, Space } from 'tdesign-react';\n\nconst commonStyle = {\n  textAlign: 'center',\n};\nexport default function LineProgress() {\n  const [percent, setPercent] = useState(0);\n  useEffect(() => {\n    const timer = setInterval(() => setPercent((percent) => (percent % 100) + 10), 1000);\n    return () => clearInterval(timer);\n  }, []);\n  return (\n    <Space direction=\"vertical\" size=\"large\">\n      <Space style={commonStyle}>\n        <Space direction=\"vertical\">\n          <div>默认样式</div>\n          <Progress theme={'circle'} percentage={percent}></Progress>\n        </Space>\n        <Space direction=\"vertical\">\n          <div>不显示数字</div>\n          <Progress theme={'circle'} label={false} percentage={percent}></Progress>\n        </Space>\n        <Space direction=\"vertical\">\n          <div>自定义内容</div>\n          <Progress theme={'circle'} label={<div>75 day</div>} percentage={percent}></Progress>\n        </Space>\n      </Space>\n\n      <Space style={commonStyle}>\n        <Space direction=\"vertical\">\n          <div>进度完成</div>\n          <Progress theme={'circle'} status={'success'} percentage={100}></Progress>\n        </Space>\n        <Space direction=\"vertical\">\n          <div>进度发生错误</div>\n          <Progress theme={'circle'} status={'error'} percentage={percent}></Progress>\n        </Space>\n        <Space direction=\"vertical\">\n          <div>进度被中断</div>\n          <Progress theme={'circle'} status={'warning'} percentage={percent}></Progress>\n        </Space>\n        <Space direction=\"vertical\">\n          <div>自定义颜色</div>\n          <Progress\n            theme={'circle'}\n            status={'error'}\n            color={'#00f'}\n            trackColor={'#0f0'}\n            percentage={percent}\n          ></Progress>\n        </Space>\n      </Space>\n\n      <Space align=\"center\" style={commonStyle}>\n        <Space direction=\"vertical\">\n          <div>小尺寸</div>\n          <Progress theme={'circle'} size={'small'} percentage={percent}></Progress>\n        </Space>\n        <Space direction=\"vertical\">\n          <div>默认尺寸</div>\n          <Progress theme={'circle'} percentage={percent}></Progress>\n        </Space>\n        <Space direction=\"vertical\">\n          <div>大尺寸</div>\n          <Progress theme={'circle'} size={'large'} percentage={percent}></Progress>\n        </Space>\n        <Space direction=\"vertical\">\n          <div>自定义尺寸</div>\n          <Progress theme={'circle'} percentage={percent} strokeWidth={50}></Progress>\n        </Space>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "以线形表示进度的组件，环内可选择性地配有文字或图标补充显示进度和状态。多用于需要强调进度百分比的情况。"
      }
    ]
  },
  {
    "name": "<Skeleton/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { Skeleton, Switch } from 'tdesign-react';\n\nconst style = {\n  'mb-20': {\n    marginBottom: '20px',\n  },\n  't-skeleton-demo-paragraph': {\n    lineHeight: '25px',\n  },\n};\nexport default function BasicSkeleton() {\n  const [checked, setChecked] = useState(true);\n  const onChange = (value) => {\n    console.log('value', value);\n    setChecked(value);\n  };\n  return (\n    <div>\n      <div>\n        <Switch style={style['mb-20']} value={checked} onChange={onChange}></Switch>\n      </div>\n      <div>\n        <Skeleton loading={checked}>\n          <div style={style['t-skeleton-demo-paragraph']}>\n            <p>\n              骨架屏组件，是指当网络较慢时，在页面真实数据加载之前，给用户展示出页面的大致结构。\n              一方面让用户对页面有一定的心理预期，另一方面可以改善长期停留在空白屏给用户带来的枯燥和不适感。它可以为用户提供更好视觉效果和使用体验。\n            </p>\n          </div>\n        </Skeleton>\n      </div>\n    </div>\n  );\n}\n",
        "desc": "最简单的骨架屏效果。"
      },
      {
        "code": "import React from 'react';\nimport { Skeleton } from 'tdesign-react';\n\nconst animations = [\n  {\n    label: '渐变加载动画',\n    value: 'gradient',\n  },\n  {\n    label: '闪烁加载动画',\n    value: 'flashed',\n  },\n];\nexport default function AnimationSkeleton() {\n  return (\n    <div className=\"t-skeleton-demo\">\n      {animations.map((animation, index) => (\n        <div className=\"t-skeleton-demo-card\" key={`animation-${index}`}>\n          <div className=\"header\">{animation.label}</div>\n          <div className=\"content\">\n            <Skeleton animation={animation.value}></Skeleton>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n",
        "desc": "提供渐变和闪烁两种动画效果。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Skeleton, Switch } from 'tdesign-react';\n\nconst style = {\n  'mb-20': {\n    marginBottom: '20px',\n  },\n  't-skeleton-demo-paragraph': {\n    lineHeight: '25px',\n  },\n};\nexport default function BasicSkeleton() {\n  const [checked, setChecked] = useState(true);\n  const onChange = (value) => {\n    console.log('value', value);\n    setChecked(value);\n  };\n  return (\n    <div>\n      <div>\n        <Switch style={style['mb-20']} value={checked} onChange={onChange}></Switch>\n      </div>\n      <div>\n        <Skeleton loading={checked} delay={1500} animation=\"flashed\">\n          <div style={style['t-skeleton-demo-paragraph']}>\n            <p>设置最短延迟响应时间，低于响应时间的操作不显示加载状态。</p>\n          </div>\n        </Skeleton>\n      </div>\n    </div>\n  );\n}\n",
        "desc": "设置最短延迟响应时间，低于响应时间的操作不显示加载状态。"
      },
      {
        "code": "import React from 'react';\nimport { Skeleton } from 'tdesign-react';\n\nconst themes = [\n  {\n    label: '文本',\n    value: 'text',\n  },\n  {\n    label: '头像',\n    value: 'avatar',\n  },\n  {\n    label: '段落',\n    value: 'paragraph',\n  },\n  {\n    label: '头像描述',\n    value: 'avatar-text',\n  },\n  {\n    label: '选项卡',\n    value: 'tab',\n  },\n  {\n    label: '文章',\n    value: 'article',\n  },\n];\nexport default function ThemeSkeleton() {\n  return (\n    <div className=\"t-skeleton-demo\">\n      {themes.map((theme, index) => (\n        <div className=\"t-skeleton-demo-card\" key={`animation-${index}`}>\n          <div className=\"header\">{theme.label}</div>\n          <div className=\"content\">\n            <Skeleton theme={theme.value}></Skeleton>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n",
        "desc": "可以通过  属性快速定义不同主题风格的骨架屏。"
      },
      {
        "code": "import React from 'react';\nimport { Skeleton } from 'tdesign-react';\n\nconst style = {\n  't-skeleton-demo': {\n    width: '100%',\n  },\n  't-skeleton-demo-list-li': {\n    padding: '16px 0',\n    display: 'flex',\n  },\n  't-skeleton-demo-list-avatar': {\n    display: 'inline-block',\n    height: '56px',\n    margin: '6px 16px 6px 0px',\n    flexShrink: '0',\n  },\n  't-skeleton-demo-list-paragraph': {\n    display: 'inline-block',\n    width: '90%',\n  },\n  'row-col-content': {\n    width: '100%',\n    textAlign: 'center',\n  },\n  'row-col-content__header': {\n    padding: '10px',\n    borderBottom: '1px solid #ccc',\n  },\n  'row-col-content__content': {\n    padding: '10px',\n    height: '200px',\n  },\n};\nconst rowCol = [\n  [1, 1, 1].map(() => ({\n    type: 'rect',\n    content: 'image',\n    width: '33%',\n    height: '180px',\n  })),\n  [\n    {\n      type: 'circle',\n      size: '50px',\n    },\n    {\n      type: 'rect',\n      margin: '20px 0',\n      width: 'calc(100% - 170px)',\n      height: '30px',\n    },\n    {\n      type: 'rect',\n      marginLeft: '20px',\n      width: '80px',\n      height: '30px',\n      content: '确定',\n    },\n  ],\n  1,\n  1,\n  {\n    type: 'text',\n    width: '70%',\n    margin: '0 0 16px 0',\n  },\n  {\n    type: 'rect',\n    width: '100%',\n    height: '300px',\n    content: (\n      <div className=\"row-col-content\">\n        <h3 className=\"row-col-content__header\">标题</h3>\n        <div className=\"row-col-content__content\">内容</div>\n      </div>\n    ),\n  },\n];\nexport default function AdvanceSkeleton() {\n  return (\n    <div style={style['t-skeleton-demo']}>\n      <div className=\"t-skeleton-demo-card\">\n        <div className=\"header\">组合成网页效果</div>\n        <div className=\"content\">\n          <Skeleton rowCol={rowCol}></Skeleton>\n        </div>\n      </div>\n\n      <div className=\"t-skeleton-demo-card\">\n        <div className=\"header\">组合成列表效果</div>\n        <div className=\"content\">\n          <ul style={style['t-skeleton-demo-list']}>\n            {new Array(3).fill(0).map((_, index) => (\n              <li key={index} style={style['t-skeleton-demo-list-li']}>\n                <Skeleton style={style['t-skeleton-demo-list-avatar']} theme={'avatar'}></Skeleton>\n                <Skeleton style={style['t-skeleton-demo-list-paragraph']} theme={'paragraph'}></Skeleton>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
        "desc": "包含图片、文字、按钮、输入框、头像、标签等多种元素组合在一起的占位效果。"
      }
    ]
  },
  {
    "name": "<Statistic/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Space, Statistic } from 'tdesign-react';\n\nconst BaseStatistic = () => (\n  <Space size={100}>\n    <Statistic title=\"Total Assets\" value={82.76} unit=\"%\" trend=\"increase\" />\n    <Statistic title=\"Total Assets\" value={82.76} unit=\"USD\" trend=\"increase\" />\n  </Space>\n);\nexport default BaseStatistic;\n",
        "desc": "当需要突出某个或某组数字或展示带描述的统计类数据时使用。"
      },
      {
        "code": "import React from 'react';\nimport { Space, Statistic } from 'tdesign-react';\n\nconst TrendStatistic = () => (\n  <Space size={100}>\n    <Statistic title=\"Total Assets\" value={82.76} unit=\"%\" trend=\"increase\" />\n    <Statistic title=\"Total Assets\" value={82.76} unit=\"%\" trend=\"decrease\" />\n    <Statistic title=\"Total Assets\" value={82.76} unit=\"%\" trend=\"decrease\" trendPlacement=\"right\" />\n  </Space>\n);\nexport default TrendStatistic;\n",
        "desc": "通过  设置组件的趋势状态，配合  控制趋势展示的位置。"
      },
      {
        "code": "import React from 'react';\nimport { Space, Statistic } from 'tdesign-react';\n\nconst ColorStatistic = () => (\n  <Space>\n    <Statistic title=\"Total Assets\" value={82.76} unit=\"%\" trend=\"increase\" color=\"black\" />\n    <Statistic title=\"Total Assets\" value={82.76} unit=\"%\" trend=\"increase\" color=\"blue\" />\n    <Statistic title=\"Total Assets\" value={82.76} unit=\"%\" trend=\"increase\" color=\"red\" />\n    <Statistic title=\"Total Assets\" value={82.76} unit=\"%\" trend=\"increase\" color=\"orange\" />\n    <Statistic title=\"Total Assets\" value={82.76} unit=\"%\" trend=\"increase\" color=\"green\" />\n  </Space>\n);\nexport default ColorStatistic;\n",
        "desc": "颜色风格默认提供 TDesign 风格的五种颜色值，也可以使用自定义色值。"
      },
      {
        "code": "import React from 'react';\nimport { Space, Statistic } from 'tdesign-react';\nimport { ControlPlatformIcon, ArrowTriangleDownFilledIcon } from 'tdesign-icons-react';\n\nconst SlotStatistic = () => (\n  <Space size={32}>\n    <Statistic title=\"Total Assets\" value={56.32} unit=\"%\" prefix={<ControlPlatformIcon />}></Statistic>\n    <Statistic title=\"Total Assets\" value={176059} prefix=\"$\" unit=\"%\" trend=\"increase\" />\n\n    <Statistic\n      title=\"Total Assets\"\n      value={62.58}\n      unit=\"%\"\n      suffix={\n        <ArrowTriangleDownFilledIcon\n          style={{\n            color: '#ee4d38',\n          }}\n        />\n      }\n    ></Statistic>\n  </Space>\n);\nexport default SlotStatistic;\n",
        "desc": "通过 prefix 和 suffix 插槽自定义。"
      },
      {
        "code": "import React from 'react';\nimport { Space, Button, Statistic } from 'tdesign-react';\n\nconst AnimationStatistic = () => {\n  const [start, setStart] = React.useState(false);\n  const [value, setValue] = React.useState(56.32);\n  const statisticRef = React.useRef(null);\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Button onClick={() => setStart(true)}>Start</Button>\n        <Button onClick={() => setValue(98.12)}>Update value</Button>\n        <Button onClick={() => statisticRef.current?.start()}>refs</Button>\n      </Space>\n      <Statistic\n        ref={statisticRef}\n        title=\"Total Assets\"\n        suffix=\"%\"\n        value={value}\n        animation={{\n          valueFrom: 0,\n          duration: 2000,\n        }}\n        decimalPlaces={2}\n        animationStart={start}\n      />\n    </Space>\n  );\n};\nexport default AnimationStatistic;\n",
        "desc": "通过  配置动画的初始值和持续时间。使用 属性可以控制动画开始时刻。 如果有特殊需求时也可以通过 ref 获取实例，调用进行控制。"
      },
      {
        "code": "import React from 'react';\nimport { Space, Switch, Statistic } from 'tdesign-react';\n\nconst LoadingStatistic = () => {\n  const [loading, setLoading] = React.useState(true);\n  return (\n    <Space direction=\"vertical\">\n      <Switch value={loading} onChange={(value) => setLoading(value)} size=\"large\" />\n      <Statistic title=\"Downloads\" value={123456} loading={loading} />\n    </Space>\n  );\n};\nexport default LoadingStatistic;\n",
        "desc": "通过  可以控制数值的加载状态。"
      },
      {
        "code": "import React from 'react';\nimport { Space, Statistic, Card, Divider } from 'tdesign-react';\nimport { IconFont } from 'tdesign-icons-react';\n\nconst CombinationStatistic = () => {\n  const iconStyle = {\n    fontSize: '32px',\n    color: 'var(--td-brand-color)',\n    background: 'var(--td-brand-color-light)',\n    borderRadius: 'var(--td-radius-medium)',\n    padding: '12px',\n  };\n  const separator = (\n    <Divider\n      layout=\"vertical\"\n      style={{\n        height: '100%',\n      }}\n    />\n  );\n  return (\n    <Space size={100} breakLine>\n      <Space align=\"center\">\n        <IconFont name=\"chart\" style={iconStyle} />\n        <Statistic title=\"Total Assets\" value={82.76} unit=\"%\" trend=\"increase\" trendPlacement=\"right\" />\n      </Space>\n\n      <Space align=\"center\">\n        <Statistic title=\"Total Assets\" value={52.18} unit=\"%\" trend=\"decrease\" />\n        <IconFont\n          name=\"internet\"\n          style={{\n            ...iconStyle,\n            borderRadius: '50%',\n          }}\n        />\n      </Space>\n\n      <Card title=\"Yesterday traffic\" headerBordered hoverShadow>\n        <Space separator={separator}>\n          <Statistic title=\"Voice duration\" value={789} unit=\"minute\" extra=\"the day before 9%\" />\n          <Statistic\n            title=\"Total number of voice DAUs\"\n            value={188}\n            color=\"red\"\n            extra={\n              <Space direction=\"vertical\" size={0}>\n                <Space align=\"center\" size={7}>\n                  <div\n                    style={{\n                      width: '120px',\n                    }}\n                  >\n                    the day before\n                  </div>\n                  <IconFont\n                    name=\"arrow-up\"\n                    style={{\n                      color: '#d54941',\n                      fontSize: 'var(--td-font-size-body-large)',\n                    }}\n                  />\n                  9%\n                </Space>\n                <Space align=\"center\" size={7}>\n                  <div\n                    style={{\n                      width: '120px',\n                    }}\n                  >\n                    last week\n                  </div>\n                  <IconFont\n                    name=\"arrow-down\"\n                    style={{\n                      color: '#2ba471',\n                      fontSize: 'var(--td-font-size-body-large)',\n                    }}\n                  />\n                  9%\n                </Space>\n              </Space>\n            }\n          ></Statistic>\n          <Statistic title=\"Total Assets\" value={52.18} unit=\"%\" trend=\"decrease\" color=\"green\" />\n        </Space>\n      </Card>\n    </Space>\n  );\n};\nexport default CombinationStatistic;\n",
        "desc": "组合使用"
      }
    ]
  },
  {
    "name": "<Swiper/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Swiper } from 'tdesign-react';\n\nconst { SwiperItem } = Swiper;\nexport default function BasicSwiper() {\n  return (\n    <div className=\"tdesign-demo-block--swiper\">\n      <Swiper duration={300} interval={2000}>\n        <SwiperItem>\n          <div className=\"demo-item\">1</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">2</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">3</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">4</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">5</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">6</div>\n        </SwiperItem>\n      </Swiper>\n    </div>\n  );\n}\n",
        "desc": "轮播框组件最基本的使用"
      },
      {
        "code": "import React from 'react';\nimport { Swiper } from 'tdesign-react';\n\nconst { SwiperItem } = Swiper;\nexport default function BasicSwiper() {\n  return (\n    <div className=\"tdesign-demo-block--swiper\">\n      <Swiper\n        direction={'vertical'}\n        navigation={{\n          showSlideBtn: 'never',\n        }}\n        height={280}\n      >\n        <SwiperItem>\n          <div className=\"demo-item\">1</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">2</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">3</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">4</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">5</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">6</div>\n        </SwiperItem>\n      </Swiper>\n    </div>\n  );\n}\n",
        "desc": "通过设置为使轮播框在垂直方向上轮播，默认为。"
      },
      {
        "code": "import React from 'react';\nimport { Swiper } from 'tdesign-react';\n\nconst { SwiperItem } = Swiper;\nexport default function BasicSwiper() {\n  return (\n    <div className=\"tdesign-demo-block--swiper\">\n      <Swiper\n        navigation={{\n          placement: 'outside',\n        }}\n      >\n        <SwiperItem>\n          <div className=\"demo-item\">1</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">2</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">3</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">4</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">5</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">6</div>\n        </SwiperItem>\n      </Swiper>\n    </div>\n  );\n}\n",
        "desc": "通过设置中的属性值来控制导航器位置，可设置位于主体的内侧或是外侧。"
      },
      {
        "code": "import React from 'react';\nimport { Swiper } from 'tdesign-react';\n\nconst { SwiperItem } = Swiper;\nexport default function BasicSwiper() {\n  return (\n    <div className=\"tdesign-demo-block--swiper\">\n      <Swiper\n        navigation={{\n          type: 'fraction',\n        }}\n      >\n        <SwiperItem>\n          <div className=\"demo-item\">1</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">2</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">3</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">4</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">5</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">6</div>\n        </SwiperItem>\n      </Swiper>\n    </div>\n  );\n}\n",
        "desc": "通过设置中的属性值为来控制导航器以分式的样式展示，默认为。"
      },
      {
        "code": "import React from 'react';\nimport { Swiper } from 'tdesign-react';\n\nconst { SwiperItem } = Swiper;\nexport default function BasicSwiper() {\n  return (\n    <div className=\"tdesign-demo-block--swiper\">\n      <Swiper animation={'fade'} height={280}>\n        <SwiperItem>\n          <div className=\"demo-item\">1</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">2</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">3</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">4</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">5</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">6</div>\n        </SwiperItem>\n      </Swiper>\n    </div>\n  );\n}\n",
        "desc": "通过设置属性值为来控制轮播框以渐隐的样式展示，默认为。"
      },
      {
        "code": "import React from 'react';\nimport { Swiper } from 'tdesign-react';\n\nconst { SwiperItem } = Swiper;\nexport default function BasicSwiper() {\n  return (\n    <div className=\"tdesign-demo-block--swiper\">\n      <Swiper type={'card'} height={280}>\n        <SwiperItem>\n          <div className=\"demo-item\">1</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">2</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">3</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">4</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">5</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">6</div>\n        </SwiperItem>\n      </Swiper>\n    </div>\n  );\n}\n",
        "desc": "通过设置属性值为来控制导航器以卡片的样式展示。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Swiper, Button, Space } from 'tdesign-react';\n\nconst { SwiperItem } = Swiper;\nexport default function BasicSwiper() {\n  const [current, setCurrent] = useState(0);\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n      className=\"tdesign-demo-block--swiper\"\n    >\n      <Swiper\n        current={current}\n        navigation={{\n          showSlideBtn: 'never',\n        }}\n      >\n        <SwiperItem>\n          <div className=\"demo-item\">1</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">2</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">3</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">4</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">5</div>\n        </SwiperItem>\n        <SwiperItem>\n          <div className=\"demo-item\">6</div>\n        </SwiperItem>\n      </Swiper>\n\n      <Button\n        size={'small'}\n        onClick={() => {\n          setCurrent(current + 2 > 6 ? 0 : current + 1);\n        }}\n      >\n        跳转到第 {current + 2 >= 7 ? 1 : current + 2} 项\n      </Button>\n    </Space>\n  );\n}\n",
        "desc": "通过设置属性值来控制轮播框播放哪一项，起始值为。"
      },
      {
        "code": "import React from 'react';\nimport { Swiper } from 'tdesign-react';\n\nconst { SwiperItem } = Swiper;\nexport default function BasicSwiper() {\n  return (\n    <>\n      <div\n        className=\"tdesign-demo-block--swiper\"\n        style={{\n          width: '1000px',\n        }}\n      >\n        <h3>large</h3>\n        <Swiper\n          navigation={{\n            size: 'large',\n          }}\n        >\n          <SwiperItem>\n            <div className=\"demo-item demo-large\">1</div>\n          </SwiperItem>\n          <SwiperItem>\n            <div className=\"demo-item demo-large\">2</div>\n          </SwiperItem>\n          <SwiperItem>\n            <div className=\"demo-item demo-large\">3</div>\n          </SwiperItem>\n          <SwiperItem>\n            <div className=\"demo-item demo-large\">4</div>\n          </SwiperItem>\n          <SwiperItem>\n            <div className=\"demo-item demo-large\">5</div>\n          </SwiperItem>\n          <SwiperItem>\n            <div className=\"demo-item demo-large\">6</div>\n          </SwiperItem>\n        </Swiper>\n      </div>\n      <div\n        className=\"tdesign-demo-block--swiper\"\n        style={{\n          width: '500px',\n          marginTop: '20px',\n        }}\n      >\n        <h3>small</h3>\n        <Swiper\n          navigation={{\n            size: 'small',\n          }}\n        >\n          <SwiperItem>\n            <div className=\"demo-item demo-small\">1</div>\n          </SwiperItem>\n          <SwiperItem>\n            <div className=\"demo-item demo-small\">2</div>\n          </SwiperItem>\n          <SwiperItem>\n            <div className=\"demo-item demo-small\">3</div>\n          </SwiperItem>\n          <SwiperItem>\n            <div className=\"demo-item demo-small\">4</div>\n          </SwiperItem>\n          <SwiperItem>\n            <div className=\"demo-item demo-small\">5</div>\n          </SwiperItem>\n          <SwiperItem>\n            <div className=\"demo-item demo-small\">6</div>\n          </SwiperItem>\n        </Swiper>\n      </div>\n    </>\n  );\n}\n",
        "desc": "通过设置中的属性值来控制轮播框导航器的大小。"
      }
    ]
  },
  {
    "name": "<Table/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Checkbox, Radio, Space, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst RadioButton = Radio.Button;\nconst RadioGroup = Radio.Group;\nconst data = [];\nconst total = 28;\nfor (let i = 0; i < total; i++) {\n  data.push({\n    index: i + 1,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nexport default function TableBasic() {\n  const [stripe, setStripe] = useState(false);\n  const [bordered, setBordered] = useState(false);\n  const [hover, setHover] = useState(false);\n  const [tableLayout, setTableLayout] = useState(false);\n  const [size, setSize] = useState('medium');\n  const [showHeader, setShowHeader] = useState(true);\n\n  // <!-- 当数据为空需要占位时，会显示 cellEmptyContent -->\n  const table = (\n    <Table\n      data={data}\n      columns={[\n        {\n          colKey: 'applicant',\n          title: '申请人',\n          width: '100',\n        },\n        {\n          colKey: 'status',\n          title: '申请状态',\n          cell: ({ row }) => (\n            <Tag\n              shape=\"round\"\n              theme={statusNameListMap[row.status].theme}\n              variant=\"light-outline\"\n              icon={statusNameListMap[row.status].icon}\n            >\n              {statusNameListMap[row.status].label}\n            </Tag>\n          ),\n        },\n        {\n          colKey: 'channel',\n          title: '签署方式',\n        },\n        {\n          colKey: 'detail.email',\n          title: '邮箱地址',\n          ellipsis: true,\n        },\n        {\n          colKey: 'createTime',\n          title: '申请时间',\n        },\n      ]}\n      rowKey=\"index\"\n      verticalAlign=\"top\"\n      size={size}\n      bordered={bordered}\n      hover={hover}\n      stripe={stripe}\n      showHeader={showHeader}\n      tableLayout={tableLayout ? 'auto' : 'fixed'}\n      rowClassName={({ rowIndex }) => `${rowIndex}-class`}\n      cellEmptyContent={'-'}\n      resizable\n      // 与pagination对齐\n      pagination={{\n        defaultCurrent: 2,\n        defaultPageSize: 5,\n        total,\n        showJumper: true,\n        onChange(pageInfo) {\n          console.log(pageInfo, 'onChange pageInfo');\n        },\n        onCurrentChange(current, pageInfo) {\n          console.log(current, pageInfo, 'onCurrentChange current');\n        },\n        onPageSizeChange(size, pageInfo) {\n          console.log(size, pageInfo, 'onPageSizeChange size');\n        },\n      }}\n      onPageChange={(pageInfo) => {\n        console.log(pageInfo, 'onPageChange');\n      }}\n      onRowClick={({ row, index, e }) => {\n        console.log('onRowClick', {\n          row,\n          index,\n          e,\n        });\n      }}\n    />\n  );\n  return (\n    <Space direction=\"vertical\">\n      <RadioGroup value={size} variant=\"default-filled\" onChange={(size) => setSize(size)}>\n        <RadioButton value=\"small\">小尺寸</RadioButton>\n        <RadioButton value=\"medium\">中尺寸</RadioButton>\n        <RadioButton value=\"large\">大尺寸</RadioButton>\n      </RadioGroup>\n      <Space>\n        <Checkbox value={stripe} onChange={setStripe}>\n          显示斑马纹\n        </Checkbox>\n        <Checkbox value={bordered} onChange={setBordered}>\n          显示表格边框\n        </Checkbox>\n        <Checkbox value={hover} onChange={setHover}>\n          显示悬浮效果\n        </Checkbox>\n        <Checkbox value={tableLayout} onChange={setTableLayout}>\n          宽度自适应\n        </Checkbox>\n        <Checkbox value={showHeader} onChange={setShowHeader}>\n          显示表头\n        </Checkbox>\n      </Space>\n\n      {table}\n    </Space>\n  );\n}\n",
        "desc": "表格宽度模式有两种： 和 ，MDN 详细解释，组件默认为 。"
      },
      {
        "code": "import React, { useEffect } from 'react';\nimport { Table, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst classStyles = `\n<style>\n.t-demo__style .t-table .custom-third-class-name > td {\n  color: green;\n  font-weight: bold;\n}\n\n.t-demo__style .t-table td.last-column-class-name {\n  color: orange;\n  font-weight: bold;\n}\n\n.t-table td.custom-cell-class-name {\n  color: orange;\n  font-size: 18px;\n  font-weight: bold;\n}\n</style>\n`;\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nexport default function TableStyle() {\n  const data = [];\n  const total = 5;\n  for (let i = 0; i < total; i++) {\n    data.push({\n      applicant: ['贾明', '张三', '王芳'][i % 3],\n      status: i % 3,\n      channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n      detail: {\n        email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n      },\n      matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n      time: [2, 10, 1][i % 3],\n      createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n    });\n  }\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  const columns = [\n    {\n      colKey: 'applicant',\n      title: '申请人',\n      width: 100,\n    },\n    {\n      colKey: 'status',\n      title: '审批状态',\n      width: 120,\n      cell: ({ row }) => (\n        <Tag\n          shape=\"round\"\n          theme={statusNameListMap[row.status].theme}\n          variant=\"light-outline\"\n          icon={statusNameListMap[row.status].icon}\n        >\n          {statusNameListMap[row.status].label}\n        </Tag>\n      ),\n    },\n    {\n      colKey: 'time',\n      title: '申请耗时(天)',\n      width: 120,\n      align: 'center',\n      // 设置单元格类名\n      className: ({ row }) => {\n        if (row.time >= 9) {\n          return 'custom-cell-class-name';\n        }\n        return '';\n      },\n      attrs: ({ row }) => {\n        if (row.time >= 9) {\n          return {\n            style: {\n              fontWeight: 600,\n              backgroundColor: 'var(--td-warning-color-light)',\n            },\n          };\n        }\n      },\n    },\n    {\n      colKey: 'channel',\n      title: '签署方式',\n      width: 120,\n      align: 'right',\n      className: () => 'custom-cell-class-name',\n    },\n    {\n      colKey: 'detail.email',\n      title: '邮箱地址',\n      width: 160,\n      ellipsis: true,\n    },\n    {\n      colKey: 'createTime',\n      title: '申请时间',\n    },\n  ];\n  const getRowClassName = ({ rowIndex }) => {\n    //  console.log(row, rowIndex);\n    if (rowIndex === 2) return 'custom-third-class-name';\n    return '';\n  };\n  return (\n    <div className=\"t-demo__style\">\n      {/* rowClassName 设置行类名 */}\n      <Table\n        rowKey=\"id\"\n        data={data}\n        columns={columns}\n        rowClassName={getRowClassName}\n        footerSummary={<div className=\"t-table__row-filter-inner\">汇总：近期数据波动较大</div>}\n      ></Table>\n    </div>\n  );\n}\n",
        "desc": "使用表格属性  设置行类名。使用列属性  设置列类名，或具体的某一个或某一些单元格类名。使用列属性  设置列内联样式，或具体的某一个或某一些单元格内联样式。"
      },
      {
        "code": "import React from 'react';\nimport { MessagePlugin, Table, Tag } from 'tdesign-react';\nimport { FileCopyIcon, ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n// thanks to https://www.zhangxinxu.com/wordpress/2021/10/js-copy-paste-clipboard/\nfunction copyToClipboard(text) {\n  if (navigator.clipboard) {\n    navigator.clipboard.writeText(text);\n  } else {\n    const textarea = document.createElement('textarea');\n    document.body.appendChild(textarea);\n    textarea.style.position = 'fixed';\n    textarea.style.clip = 'rect(0 0 0 0)';\n    textarea.style.top = '10px';\n    textarea.value = text;\n    textarea.select();\n    document.execCommand('copy', true);\n    document.body.removeChild(textarea);\n  }\n  MessagePlugin.success('文本复制成功');\n}\nexport default function TableEllipsis() {\n  const data = [];\n  const total = 5;\n  for (let i = 0; i < total; i++) {\n    data.push({\n      id: i + 1,\n      applicant: ['贾明（kyrieJia）', '张三（threeZhang)', '王芳（fangWang)'][i % 3],\n      status: i % 3,\n      channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n      desc: ['单元格文本超出省略设置', '这是普通文本的超出省略'][i % 2],\n      link: '点击查看审批详情',\n      something: '仅标题省略',\n      // 透传 Tooltip Props 到浮层组件\n      ellipsisProps: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n      // 完全自定义超出省略的 Tips 内容\n      ellipsisContent: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n      propsAndContent1: ['2021-11-01', '2021-12-01', '2022-01-01', '2022-02-01', '2022-03-01'][i % 4],\n      propsAndContent2: [2, 3, 1, 4][i % 4],\n    });\n  }\n  const statusNameListMap = {\n    0: {\n      label: '审批通过',\n      theme: 'success',\n      icon: <CheckCircleFilledIcon />,\n    },\n    1: {\n      label: '审批失败',\n      theme: 'danger',\n      icon: <CloseCircleFilledIcon />,\n    },\n    2: {\n      label: '审批过期',\n      theme: 'warning',\n      icon: <ErrorCircleFilledIcon />,\n    },\n  };\n  const columns = [\n    {\n      colKey: 'applicant',\n      title: '申请人',\n      ellipsis: true,\n    },\n    {\n      colKey: 'status',\n      title: '审批状态',\n      width: 120,\n      cell: ({ row }) => (\n        <Tag\n          shape=\"round\"\n          theme={statusNameListMap[row.status].theme}\n          variant=\"light-outline\"\n          icon={statusNameListMap[row.status].icon}\n        >\n          {statusNameListMap[row.status].label}\n        </Tag>\n      ),\n    },\n    {\n      title: '签署方式（超长标题示例）',\n      colKey: 'channel',\n      width: 120,\n      ellipsisTitle: true,\n    },\n    {\n      title: '邮箱地址',\n      colKey: 'ellipsisProps',\n      // 浮层浅色背景，方向默认朝下出现\n      ellipsis: {\n        theme: 'light',\n        placement: 'bottom',\n      },\n    },\n    {\n      title: '申请事项',\n      colKey: 'ellipsisContent',\n      // ellipsis 定义超出省略的浮层内容，cell 定义单元格内容\n      ellipsis: ({ row }) => (\n        <div>\n          {row.ellipsisContent}\n          <FileCopyIcon\n            style={{\n              cursor: 'pointer',\n              marginLeft: '4px',\n            }}\n            onClick={() => copyToClipboard(row.ellipsisContent)}\n          />\n        </div>\n      ),\n    },\n    {\n      title: '审核时间',\n      colKey: 'propsAndContent1',\n      // 支持同时设置 tooltipProps 和 浮层内容,\n      width: 100,\n      ellipsis: {\n        props: {\n          theme: 'light',\n          placement: 'bottom-right',\n        },\n        content: ({ row }) => (\n          <div>\n            <p>\n              <b>创建日期:</b> {row.propsAndContent1}\n            </p>\n            <p>\n              <b>审核时长(天):</b> {row.propsAndContent2}\n            </p>\n          </div>\n        ),\n      },\n    },\n    {\n      title: '操作',\n      colKey: 'link',\n      // 超出省略的内容显示纯文本，不带任何样式和元素\n      ellipsis: ({ row }) => row.link,\n      // 注意这种 JSX 写法需设置 <script lang=\"jsx\" setup>\n      cell: ({ row }) => (\n        <a href=\"/vue-next/components/table\" target=\"_blank\">\n          {row.link}\n        </a>\n      ),\n    },\n  ];\n  return (\n    <div>\n      <Table rowKey=\"index\" data={data} columns={columns} lazyLoad />\n    </div>\n  );\n}\n",
        "desc": "使用  设置列文本超出省略显示，默认会同时控制表头的超出省略显示；只要  为真，无论是何种数据类型都会出现超出省略。使用  单独设置表头超出省略显示，优先级高于 。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Radio, Checkbox, Space, Tag, Link } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst RadioGroup = Radio.Group;\nconst RadioButton = Radio.Button;\nconst data = [];\nfor (let i = 0; i < 20; i++) {\n  data.push({\n    index: i + 1,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\nexport default function TableFixHeader() {\n  const [tableLayout, setTableLayout] = useState('fixed');\n  const [fixedTopAndBottomRows, setFixedTopAndBottomRows] = useState(false);\n  // 如果希望表格列宽自适应，设置 `table-layout: auto` 即可。如果列字段过多超出表格宽度，还需同时设置 table-content-width\n  // fixedRows: [2, 2] 表示冻结表格的头两行和尾两行\n  // footData 可以是多行，均支持固定在底部，用法同 data\n  const table = (\n    <Table\n      data={data}\n      footData={[{}]}\n      tableLayout={tableLayout}\n      maxHeight={fixedTopAndBottomRows ? 500 : 300}\n      fixedRows={fixedTopAndBottomRows ? [2, 2] : undefined}\n      bordered\n      columns={[\n        {\n          colKey: 'applicant',\n          title: '申请人',\n          width: 100,\n          foot: '-',\n        },\n        {\n          colKey: 'status',\n          title: '审批状态',\n          width: 120,\n          foot: '-',\n          cell: ({ rowIndex }) => {\n            const status = rowIndex % 3;\n            return (\n              <Tag\n                shape=\"round\"\n                theme={statusNameListMap[status].theme}\n                variant=\"light-outline\"\n                icon={statusNameListMap[status].icon}\n              >\n                {statusNameListMap[status].label}\n              </Tag>\n            );\n          },\n        },\n        {\n          colKey: 'matters',\n          title: '申请事项',\n          width: 150,\n          foot: '-',\n        },\n        {\n          colKey: 'detail.email',\n          title: '邮箱地址',\n          width: 160,\n          foot: '-',\n          ellipsis: true,\n        },\n        {\n          colKey: 'createTime',\n          title: '申请日期',\n          width: 120,\n          foot: '-',\n        },\n        {\n          colKey: 'operation',\n          title: '操作',\n          width: 120,\n          foot: '-',\n          cell: ({ row }) => (\n            <Link theme=\"primary\" hover=\"color\">\n              {row.status === 0 ? '查看详情' : '再次申请'}\n            </Link>\n          ),\n        },\n      ]}\n      rowKey=\"index\"\n      lazyLoad\n    />\n  );\n  return (\n    <Space direction=\"vertical\" size=\"large\">\n      <RadioGroup value={tableLayout} variant=\"default-filled\" onChange={(val) => setTableLayout(val)}>\n        <RadioButton value=\"fixed\">table-layout: fixed</RadioButton>\n        <RadioButton value=\"auto\">table-layout: auto</RadioButton>\n      </RadioGroup>\n      <Checkbox value={fixedTopAndBottomRows} onChange={setFixedTopAndBottomRows}>\n        是否冻结首尾两行\n      </Checkbox>\n\n      {table}\n    </Space>\n  );\n}\n",
        "desc": "刷新表格 DOM 元素请使用组件实例方法 。"
      },
      {
        "code": "import React, { useRef, useState } from 'react';\nimport { Table, Radio, Checkbox, Space, Tag, Link } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst data = [];\nfor (let i = 0; i < 5; i++) {\n  data.push({\n    index: i + 1,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nexport default function TableFixedColumn() {\n  const [tableLayout, setTableLayout] = useState('fixed');\n  const [emptyData, setEmptyData] = useState(false);\n  const [leftFixedColumn, setLeftFixedColumn] = useState(2);\n  const [rightFixedColumn, setReftFixedColumn] = useState(1);\n  const tableRef = useRef(null);\n  // eslint-disable-next-line\n  const scrollToCreateTime = () => {\n    // 横向滚动到指定列，一般用于列数量较多的场景\n    tableRef.current.scrollColumnIntoView('createTime');\n  };\n  const table = (\n    <Table\n      ref={tableRef}\n      bordered\n      rowKey=\"index\"\n      data={emptyData ? [] : data}\n      tableLayout={tableLayout}\n      tableContentWidth={tableLayout === 'fixed' ? undefined : '1200px'}\n      resizable={true}\n      lazyLoad\n      columns={[\n        {\n          colKey: 'applicant',\n          title: '申请人',\n          width: 100,\n          fixed: 'left',\n        },\n        {\n          colKey: 'status',\n          title: '审批状态',\n          width: 150,\n          fixed: leftFixedColumn >= 2 ? 'left' : undefined,\n          cell: ({ row }) => (\n            <Tag\n              shape=\"round\"\n              theme={statusNameListMap[row.status].theme}\n              variant=\"light-outline\"\n              icon={statusNameListMap[row.status].icon}\n            >\n              {statusNameListMap[row.status].label}\n            </Tag>\n          ),\n        },\n        {\n          colKey: 'detail.email',\n          title: '邮箱地址',\n          width: 180,\n        },\n        {\n          colKey: 'matters',\n          title: '申请事项',\n          width: 200,\n        },\n        {\n          colKey: 'createTime',\n          title: '申请日期',\n          width: 120,\n          fixed: rightFixedColumn >= 2 ? 'right' : undefined,\n        },\n        {\n          colKey: 'operation',\n          title: '操作',\n          width: 100,\n          fixed: 'right',\n          cell: ({ row }) => (\n            <Link theme=\"primary\" hover=\"color\">\n              {row.status === 0 ? '查看详情' : '再次申请'}\n            </Link>\n          ),\n        },\n      ]}\n    />\n  );\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Radio.Group value={leftFixedColumn} variant=\"default-filled\" onChange={(val) => setLeftFixedColumn(val)}>\n        <Radio.Button value={1}>左侧固定一列</Radio.Button>\n        <Radio.Button value={2}>左侧固定两列</Radio.Button>\n      </Radio.Group>\n\n      <Radio.Group value={rightFixedColumn} variant=\"default-filled\" onChange={(val) => setReftFixedColumn(val)}>\n        <Radio.Button value={1}>右侧固定一列</Radio.Button>\n        <Radio.Button value={2}>右侧固定两列</Radio.Button>\n      </Radio.Group>\n\n      <div>\n        <Radio.Group value={tableLayout} variant=\"default-filled\" onChange={(val) => setTableLayout(val)}>\n          <Radio.Button value=\"fixed\">table-layout: fixed</Radio.Button>\n          <Radio.Button value=\"auto\">table-layout: auto</Radio.Button>\n        </Radio.Group>\n        <Checkbox\n          value={emptyData}\n          onChange={setEmptyData}\n          style={{\n            marginLeft: '16px',\n            verticalAlign: 'middle',\n          }}\n        >\n          空数据\n        </Checkbox>\n      </div>\n\n      {table}\n    </Space>\n  );\n}\n",
        "desc": "⚠️ Windows 操作系统横向滚动操作：按下 Shift 键的同时，鼠标操作滚轮进行滚动。纵向滚动操作：直接鼠标操作滚轮进行滚动。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Radio, Checkbox, Space, Tag, Link } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst RadioGroup = Radio.Group;\nconst RadioButton = Radio.Button;\nconst data = [];\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nfor (let i = 0; i < 20; i++) {\n  data.push({\n    index: i,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\nexport default function TableFixedColumn() {\n  const [tableLayout, setTableLayout] = useState('auto');\n  const [fixedTopAndBottomRows, setFixedTopAndBottomRows] = useState(false);\n  // <!-- 如果希望表格列宽自适应，设置 `table-layout: auto` 即可。需同时设置 table-content-width -->\n  // <!-- fixedRows: [2, 2] 表示冻结表格的头两行和尾两行 -->\n  // <!-- footData 可以是多行，均支持固定在底部 -->\n  const table = (\n    <Table\n      bordered\n      data={data}\n      footData={[{}]}\n      tableLayout={tableLayout}\n      tableContentWidth={tableLayout === 'fixed' ? undefined : '1600px'}\n      maxHeight={fixedTopAndBottomRows ? 500 : 300}\n      fixedRows={fixedTopAndBottomRows ? [2, 2] : undefined}\n      columns={[\n        {\n          colKey: 'applicant',\n          title: '申请人',\n          width: '100',\n          foot: '共20条',\n          fixed: 'left',\n        },\n        {\n          colKey: 'status',\n          title: '审批状态',\n          width: '150',\n          foot: '-',\n          cell: ({ rowIndex }) => {\n            const status = rowIndex % 3;\n            return (\n              <Tag\n                shape=\"round\"\n                theme={statusNameListMap[status].theme}\n                variant=\"light-outline\"\n                icon={statusNameListMap[status].icon}\n              >\n                {statusNameListMap[status].label}\n              </Tag>\n            );\n          },\n        },\n        {\n          colKey: 'channel',\n          title: '签署方式',\n        },\n        {\n          colKey: 'matters',\n          title: '申请事项',\n          width: '150',\n          foot: '-',\n        },\n        {\n          colKey: 'detail.email',\n          title: '邮箱地址',\n        },\n        {\n          colKey: 'createTime',\n          title: '申请日期',\n          width: '120',\n          foot: '-',\n        },\n        {\n          colKey: 'operation',\n          title: '操作',\n          width: '150',\n          foot: '-',\n          fixed: 'right',\n          cell: ({ row }) => (\n            <Link theme=\"primary\" hover=\"color\">\n              {row.status === 0 ? '查看详情' : '再次申请'}\n            </Link>\n          ),\n        },\n      ]}\n      rowKey=\"index\"\n      lazyLoad\n    />\n  );\n  return (\n    <Space\n      direction=\"vertical\"\n      size=\"large\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <RadioGroup value={tableLayout} variant=\"default-filled\" onChange={(val) => setTableLayout(val)}>\n        <RadioButton value=\"fixed\">table-layout: fixed</RadioButton>\n        <RadioButton value=\"auto\">table-layout: auto</RadioButton>\n      </RadioGroup>\n      <Checkbox value={fixedTopAndBottomRows} onChange={setFixedTopAndBottomRows}>\n        是否冻结首尾两行\n      </Checkbox>\n\n      {table}\n    </Space>\n  );\n}\n",
        "desc": "多级表头中的固定列，必须指定每一个固定列的  和  属性。"
      },
      {
        "code": "import React from 'react';\nimport { Table, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, UserIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst data = [];\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nfor (let i = 0; i < 5; i++) {\n  data.push({\n    index: i + 1,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\nconst columns = [\n  {\n    colKey: 'applicant',\n    width: 120,\n    title: () => (\n      <span\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <UserIcon\n          style={{\n            marginRight: 5,\n          }}\n        ></UserIcon>\n        申请人\n      </span>\n    ),\n  },\n  {\n    title: '审批状态',\n    // 没有 cell 的情况下， platform 会被用作自定义单元格的插槽名称\n    colKey: 'status',\n    width: 120,\n    cell: ({ row }) => (\n      <Tag\n        shape=\"round\"\n        theme={statusNameListMap[row.status].theme}\n        variant=\"light-outline\"\n        icon={statusNameListMap[row.status].icon}\n      >\n        {statusNameListMap[row.status].label}\n      </Tag>\n    ),\n  },\n  {\n    colKey: 'matters',\n    title: '申请事项',\n    // 使用 cell 方法自定义单元格：\n    cell: ({ col, row }) => <div>{row[col.colKey]}</div>,\n  },\n  {\n    title: '邮箱地址',\n    colKey: 'email',\n    // render 即可渲染表头，也可以渲染单元格。但 cell 只能渲染单元格，title 只能渲染表头\n    render(context) {\n      const { type, row, col } = context;\n      if (type === 'title') return '邮箱地址';\n      return <div>{row[col.colKey]}</div>;\n    },\n  },\n  {\n    colKey: 'createTime',\n    title: '申请时间',\n  },\n];\nexport default function TableFixHeader() {\n  return <Table bordered data={data} columns={columns} rowKey=\"property\" />;\n}\n",
        "desc": "使用  作为渲染函数，函数参数为：。对于有插槽特性的框架，支持插槽，使用  的值作为插槽名称；如果  值为空，则默认取  作为插槽名称。注意插槽名称保持 kebab-case 或 camelCase 命名。【不推荐使用】使用  渲染函数，函数参数为：，其中  的值为 。"
      },
      {
        "code": "import React from 'react';\nimport { Table, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst data = [];\nfor (let i = 0; i < 5; i++) {\n  data.push({\n    index: i + 1,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\nconst columns = [\n  {\n    colKey: 'applicant',\n    title: '申请人',\n    width: 120,\n  },\n  {\n    colKey: 'matters',\n    title: ({ colIndex }) => (\n      <b\n        style={{\n          fontWeight: 'bold',\n        }}\n      >\n        {['', '申请事项'][colIndex]}\n      </b>\n    ),\n  },\n  {\n    title: '审批状态',\n    colKey: 'status',\n    // 使用 cell 方法自定义单元格：\n    cell: ({ row }) => (\n      <Tag\n        shape=\"round\"\n        theme={statusNameListMap[row.status].theme}\n        variant=\"light-outline\"\n        icon={statusNameListMap[row.status].icon}\n      >\n        {statusNameListMap[row.status].label}\n      </Tag>\n    ),\n  },\n  {\n    title: '邮箱地址',\n    colKey: 'detail.email',\n    width: 200,\n  },\n  {\n    colKey: 'createTime',\n    // render 可以渲染表头，也可以渲染单元格。但 title 只能渲染表头，cell 只能渲染单元格\n    render(context) {\n      const { type, row, col } = context;\n      return {\n        title: '申请时间',\n        cell: row && row[col.colKey],\n      }[type];\n    },\n  },\n];\nexport default function TableFixHeader() {\n  return <Table bordered data={data} columns={columns} rowKey=\"index\" />;\n}\n",
        "desc": "使用  作为渲染函数，函数参数为：。对于有插槽特性的框架，支持插槽，使用  的值作为插槽名称。注意插槽名称保持 kebab-case 或 camelCase 命名。【不推荐使用】使用  作为渲染函数，函数参数为：，其中  值为 。使用排序、过滤等功能时不能使用该方法。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Radio, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst columns = [\n  {\n    align: 'left',\n    colKey: 'applicant',\n    title: '申请人',\n    foot: () => (\n      <b\n        style={{\n          fontWeight: 'bold',\n        }}\n      >\n        表尾信息\n      </b>\n    ),\n    width: '120',\n  },\n  {\n    title: '审批状态',\n    colKey: 'status',\n    width: '150',\n    // 使用 cell 方法自定义单元格：\n    cell: ({ row }) => (\n      <Tag\n        shape=\"round\"\n        theme={statusNameListMap[row.status].theme}\n        variant=\"light-outline\"\n        icon={statusNameListMap[row.status].icon}\n      >\n        {statusNameListMap[row.status].label}\n      </Tag>\n    ),\n    foot: () => (\n      <div\n        style={{\n          width: '100%',\n        }}\n      >\n        表尾信息{' '}\n      </div>\n    ),\n  },\n  {\n    colKey: 'channel',\n    title: '签署方式',\n    foot: '表尾信息',\n  },\n  {\n    colKey: 'detail.email',\n    title: '邮箱地址',\n    ellipsis: true,\n    foot: () => <div>表尾信息</div>,\n  },\n  {\n    colKey: 'createTime',\n    title: '申请时间',\n    foot: () => (\n      <div\n        style={{\n          textAlign: 'left',\n        }}\n      >\n        表尾信息\n      </div>\n    ),\n  },\n];\nconst data = [];\nfor (let i = 0; i < 3; i++) {\n  data.push({\n    index: i + 1,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\n\n// 表尾有一行数据\nconst footData = [\n  {\n    index: '123',\n    type: '全部类型',\n    default: '',\n    description: '-',\n    required: '未知',\n  },\n];\nexport default function TableFixHeader() {\n  // 自定义表尾方式一：普通表尾\n  const [footerType, setFooterType] = useState('normal');\n\n  // 自定义表尾方式二：通栏表尾\n  const footerSummary = <div className=\"t-table__row-filter-inner\">通栏总结行信息</div>;\n\n  // 自定义表尾方式三：自定义合并单元格表尾\n  const rowspanAndColspanInFooter = ({ rowIndex, colIndex }) => {\n    console.log(rowIndex, colIndex);\n    // 中间列合并，收尾两列不合并\n    if (rowIndex === 0 && colIndex === 1)\n      return {\n        colspan: columns.length - 2,\n      };\n    return {};\n  };\n  return (\n    <div className=\"tdesign-demo-block-column-large tdesign-demo__table\">\n      <div>\n        {/* <!-- 表尾有 3 种方式 --> */}\n        <Radio.Group value={footerType} onChange={(val) => setFooterType(val)} variant=\"default-filled\">\n          <Radio.Button value=\"normal\">普通表尾</Radio.Button>\n          <Radio.Button value=\"full\">通栏表尾</Radio.Button>\n          <Radio.Button value=\"custom\">自定义表尾合并列</Radio.Button>\n        </Radio.Group>\n      </div>\n      <Table\n        bordered\n        data={data}\n        columns={columns}\n        rowKey=\"index\"\n        footData={['normal', 'custom'].includes(footerType) ? footData : []}\n        footerSummary={footerType === 'full' ? footerSummary : null}\n        rowspanAndColspanInFooter={footerType === 'custom' ? rowspanAndColspanInFooter : undefined}\n      />\n    </div>\n  );\n}\n",
        "desc": "默认输出  字符串，如果  类型为函数，则作为表尾渲染函数自定义表尾内容。对于有插槽特性的框架，支持插槽，使用  值作为插槽名称。注意插槽名称保持 kebab-case 或 camelCase 命名。如果想定义通栏表尾，请使用 如果想自定义表尾合并单元格信息，请使用 ，类似表格内容的合并单元格方法 。"
      },
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { Table, Checkbox, Space, Link, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst classStyles = `\n<style>\n/*\n * table-layout: auto 模式下，table 元素的宽度设置很重要很重要。\n * 如果不设置，列多了之后会挤在一起\n * **/\n.tdesign-demo__table-affix table {\n  width: 1200px;\n}\n\n.tdesign-demo__table-affix .t-table {\n  max-width: 800px;\n}\n</style>\n`;\nfunction getData(count) {\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    data.push({\n      index: i + 1,\n      applicant: ['贾明', '张三', '王芳'][i % 3],\n      status: i % 3,\n      channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n      detail: {\n        email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n      },\n      matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n      time: [2, 3, 1, 4][i % 4],\n      createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n    });\n  }\n  return data;\n}\nconst TOTAL = 38;\nconst getColumns = ({ fixedLeftColumn, fixedRightColumn }) => [\n  {\n    align: 'left',\n    colKey: 'applicant',\n    title: '申请人',\n    foot: () => (\n      <b\n        style={{\n          fontWeight: 'bold',\n        }}\n      >\n        表尾信息\n      </b>\n    ),\n    width: '120',\n    fixed: fixedLeftColumn ? 'left' : undefined,\n  },\n  {\n    colKey: 'status',\n    title: '申请状态',\n    width: '150',\n    cell: ({ row }) => (\n      <Tag\n        shape=\"round\"\n        theme={statusNameListMap[row.status].theme}\n        variant=\"light-outline\"\n        icon={statusNameListMap[row.status].icon}\n      >\n        {statusNameListMap[row.status].label}\n      </Tag>\n    ),\n  },\n  {\n    colKey: 'channel',\n    title: '签署方式',\n    width: '120',\n  },\n  {\n    colKey: 'detail.email',\n    title: '邮箱地址',\n    ellipsis: true,\n  },\n  {\n    colKey: 'matters',\n    title: '申请事项',\n    ellipsis: true,\n  },\n  {\n    colKey: 'createTime',\n    title: '申请时间',\n  },\n  {\n    colKey: 'operation',\n    title: '操作',\n    cell: ({ row }) => (\n      <Link hover=\"color\" theme=\"primary\">\n        {row.status === 0 ? '查看详情' : '再次申请'}\n      </Link>\n    ),\n    width: 120,\n    foot: '-',\n    fixed: fixedRightColumn ? 'right' : undefined,\n  },\n];\nconst TableAffixDemo = () => {\n  const data = getData(TOTAL);\n  // 表尾有一行数据\n  const footData = [\n    {\n      channel: 'footer-row-1',\n      applicant: '全部类型',\n      createTime: '-',\n    },\n  ];\n  const [columns, setColumns] = useState([]);\n\n  // 重要：如果在预渲染场景下，初次渲染的表格宽度和最终呈现宽度不一样，请异步设置表头吸顶\n  const [headerAffixedTop, setHeaderAffixedTop] = useState(true);\n  const [footerAffixedBottom, setFooterAffixedBottom] = useState(true);\n  const [fixedLeftColumn, setFixedLeftColumn] = useState(true);\n  const [fixedRightColumn, setFixedRightColumn] = useState(true);\n  const [horizontalScrollAffixedBottom, setHorizontalScrollAffixedBottom] = useState(false);\n  const [paginationAffixedBottom, setPaginationAffixedBottom] = useState(false);\n\n  // type 可选值：foot 和 body\n  const rowClassName = ({ type }) => {\n    if (type === 'foot') return 't-tdesign__custom-footer-tr';\n    return 't-tdesign__custom-body-tr';\n  };\n  const onDragSortChange = ({ newData }) => {\n    setColumns(newData);\n  };\n\n  // 表尾吸顶和底部滚动条，二选一即可，也只能二选一\n  useEffect(() => {\n    horizontalScrollAffixedBottom && setFooterAffixedBottom(false);\n  }, [horizontalScrollAffixedBottom]);\n\n  // 表尾吸顶和底部滚动条，二选一即可，也只能二选一\n  useEffect(() => {\n    footerAffixedBottom && setHorizontalScrollAffixedBottom(false);\n  }, [footerAffixedBottom]);\n\n  // 左侧固定列或者右侧固定列发生变化时\n  useEffect(() => {\n    const tmp = getColumns({\n      fixedLeftColumn,\n      fixedRightColumn,\n    });\n    setColumns(tmp);\n  }, [fixedLeftColumn, fixedRightColumn]);\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  const marginStyle = {\n    marginLeft: '32px',\n  };\n  return (\n    <Space\n      direction=\"vertical\"\n      size=\"large\"\n      className=\"tdesign-demo__table-affix\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <div>\n        <Checkbox checked={headerAffixedTop} onChange={setHeaderAffixedTop}>\n          表头吸顶\n        </Checkbox>\n        <Checkbox checked={footerAffixedBottom} onChange={setFooterAffixedBottom} style={marginStyle}>\n          表尾吸底\n        </Checkbox>\n        <Checkbox\n          checked={horizontalScrollAffixedBottom}\n          onChange={setHorizontalScrollAffixedBottom}\n          style={marginStyle}\n        >\n          滚动条吸底\n        </Checkbox>\n        <Checkbox checked={paginationAffixedBottom} onChange={setPaginationAffixedBottom} style={marginStyle}>\n          分页器吸底\n        </Checkbox>\n        <Checkbox checked={fixedLeftColumn} onChange={setFixedLeftColumn} style={marginStyle}>\n          固定左侧列\n        </Checkbox>\n        <Checkbox checked={fixedRightColumn} onChange={setFixedRightColumn} style={marginStyle}>\n          固定右侧列\n        </Checkbox>\n      </div>\n      <Table\n        rowKey=\"index\"\n        data={data}\n        columns={columns}\n        footData={footData}\n        rowClassName={rowClassName}\n        pagination={{\n          defaultCurrent: 1,\n          defaultPageSize: 5,\n          total: TOTAL,\n        }}\n        headerAffixedTop={{\n          offsetTop: 87,\n          zIndex: 1000,\n        }}\n        footerAffixedBottom={\n          footerAffixedBottom\n            ? {\n                offsetBottom: paginationAffixedBottom ? 60 : 0,\n                zIndex: 1000,\n              }\n            : false\n        }\n        horizontalScrollAffixedBottom={\n          horizontalScrollAffixedBottom\n            ? {\n                offsetBottom: paginationAffixedBottom ? 61 : 0,\n                zIndex: 1000,\n              }\n            : false\n        }\n        paginationAffixedBottom={paginationAffixedBottom}\n        tableLayout=\"fixed\"\n        dragSort=\"col\"\n        bordered\n        resizable\n        onDragSort={onDragSortChange}\n        lazyLoad\n      ></Table>\n    </Space>\n  );\n};\nTableAffixDemo.displayName = 'TableAffixDemo';\nexport default TableAffixDemo;\n",
        "desc": "表头吸顶，设置  即可。如果需要调整吸顶位置及更多配置，使用 。表尾吸底，设置  即可。如果需要调整吸底位置及更多配置，使用 。滚动条吸底，设置  即可。如果需要调整吸底位置及更多配置，使用 。分页器吸底，设置  即可。如果需要调整吸底位置及更多配置，使用 。"
      },
      {
        "code": "import React, { useState, useEffect } from 'react';\nimport { Table, Radio, Checkbox, Space, Tag, Link } from 'tdesign-react';\nimport {\n  ChevronRightCircleIcon,\n  ChevronRightIcon,\n  CheckCircleFilledIcon,\n  ErrorCircleFilledIcon,\n  CloseCircleFilledIcon,\n} from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst classStyles = `\n<style>\n.more-detail > p {\n  display: inline-block;\n  margin: 4px 0;\n}\n.more-detail > p.title {\n  width: 120px;\n}\n</style>\n`;\nexport default function TableExpandable() {\n  const getColumns = (isFixedColumn) => [\n    isFixedColumn\n      ? {\n          colKey: 'applicant',\n          title: '申请人',\n          width: '80',\n          fixed: 'left',\n        }\n      : {\n          colKey: 'applicant',\n          title: '申请人',\n          width: '80',\n        },\n    {\n      colKey: 'status',\n      title: '申请状态',\n      cell: ({ row }) => (\n        <Tag\n          shape=\"round\"\n          theme={statusNameListMap[row.status].theme}\n          variant=\"light-outline\"\n          icon={statusNameListMap[row.status].icon}\n        >\n          {statusNameListMap[row.status].label}\n        </Tag>\n      ),\n    },\n    {\n      colKey: 'channel',\n      title: '签署方式',\n    },\n    {\n      colKey: 'detail.email',\n      title: '邮箱地址',\n      ellipsis: true,\n    },\n    {\n      colKey: 'createTime',\n      title: '申请时间',\n    },\n    isFixedColumn\n      ? {\n          colKey: 'operation',\n          title: '操作',\n          fixed: 'right',\n          cell: ({ row }) => (\n            <Link theme=\"primary\" hover=\"color\">\n              {row.status === 0 ? '查看详情' : '再次申请'}\n            </Link>\n          ),\n        }\n      : {\n          colKey: 'operation',\n          title: '操作',\n          cell: ({ row }) => (\n            <Link theme=\"primary\" hover=\"color\">\n              {row.status === 0 ? '查看详情' : '再次申请'}\n            </Link>\n          ),\n        },\n  ];\n  const initialData = new Array(5).fill(null).map((item, i) => ({\n    index: i + 1,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  }));\n  const [data] = useState(initialData);\n  const [expandControl, setExpandControl] = useState('true');\n  const [expandIcon, setExpandIcon] = useState(true);\n  const [expandOnRowClick, setExpandOnRowClick] = useState(true);\n  const [expandedRowKeys, setExpandedRowKeys] = useState(['2']);\n  const [fixedColumns, setFixedColumns] = useState(false);\n  const [emptyData, setEmptyData] = useState(false);\n  const columns = getColumns(fixedColumns);\n  const expandedRow = ({ row }) => (\n    <div className=\"more-detail\">\n      <p className=\"title\">\n        <b>申请人:</b>\n      </p>\n      <p className=\"content\">{row.applicant}</p>\n      <br />\n      <p className=\"title\">\n        <b>邮箱地址:</b>\n      </p>\n      <p className=\"content\">{row.detail.email}</p>\n      <br />\n      <p className=\"title\">\n        <b>签署方式:</b>\n      </p>\n      <p className=\"content\">{row.channel}</p>\n    </div>\n  );\n  const rehandleExpandChange = (value, params) => {\n    setExpandedRowKeys(value);\n    console.log('rehandleExpandChange', value, params);\n  };\n\n  // 完全自由控制表格的每一行是否显示展开图标，以及显示什么内容\n  const tmpExpandIcon = ({ index }) => {\n    // 第一行不显示展开图标\n    if (index === 0) return false;\n    // 第三行，使用自定义展开图标\n    if (index === 3) return <ChevronRightIcon />;\n    // 其他行，使用表格同款展开图标\n    return <ChevronRightCircleIcon />;\n  };\n  useEffect(() => {\n    const val = expandControl;\n    if (val === 'true') {\n      // expandIcon 默认为 true，表示显示默认展开图标\n      setExpandIcon(true);\n    } else if (val === 'false') {\n      // expandIcon 值为 false，则表示隐藏全部展开图标\n      setExpandIcon(false);\n    } else if (val === 'custom') {\n      setExpandIcon(val);\n    }\n  }, [expandControl]);\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      {/* <!-- expanded-row-keys 为受控属性 --> */}\n      {/* <!-- default-expanded-row-keys 为非受控属性 --> */}\n      <div>\n        <Radio.Group value={expandControl} onChange={(val) => setExpandControl(val)} variant=\"default-filled\">\n          <Radio.Button value=\"true\"> 显示展开图标 </Radio.Button>\n          <Radio.Button value=\"false\"> 隐藏展开图标 </Radio.Button>\n          <Radio.Button value=\"custom\"> 自由控制展开图标 </Radio.Button>\n        </Radio.Group>\n      </div>\n\n      <div>\n        <Checkbox checked={expandOnRowClick} onChange={setExpandOnRowClick}>\n          允许点击行之后展开/收起\n        </Checkbox>\n        <Checkbox\n          checked={fixedColumns}\n          onChange={setFixedColumns}\n          style={{\n            marginLeft: '32px',\n          }}\n        >\n          固定列\n        </Checkbox>\n        <Checkbox\n          checked={emptyData}\n          onChange={setEmptyData}\n          style={{\n            marginLeft: '32px',\n          }}\n        >\n          空数据\n        </Checkbox>\n      </div>\n\n      {/* <!-- :defaultExpandedRowKeys=\"defaultExpandedRowKeys\" --> */}\n      <Table\n        rowKey=\"index\"\n        columns={columns}\n        data={emptyData ? [] : data}\n        expandedRowKeys={expandedRowKeys}\n        expandedRow={expandedRow}\n        expandOnRowClick={expandOnRowClick}\n        expandIcon={expandIcon === 'custom' ? tmpExpandIcon : expandIcon}\n        tableContentWidth=\"1200\"\n        onExpandChange={rehandleExpandChange}\n        lazyLoad\n        resizable\n      ></Table>\n    </Space>\n  );\n}\n",
        "desc": "用于存储展开行的值，支持非受控属性 。 用于定义展开行显示的具体内容，参数有 。 用于自定义展开图标，值为 true 显示默认图标，值为 false 不显示图标，值为函数则表示完全自定义图标。 表示是否允许点击表格行时展开。展开行发生变化时会触发展开行变化事件。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Radio, Checkbox, Space, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nexport default function TableCustomColButton() {\n  const [placement, setPlacement] = useState('top-right');\n  const [bordered, setBordered] = useState(true);\n  const [customText, setCustomText] = useState(false);\n  const initialData = [];\n  for (let i = 0; i < 100; i++) {\n    initialData.push({\n      index: i,\n      applicant: ['贾明', '张三', '王芳'][i % 3],\n      status: i % 3,\n      channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n      detail: {\n        email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n      },\n      matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n      time: [2, 3, 1, 4][i % 4],\n      createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n    });\n  }\n  const [data] = useState([...initialData]);\n  const staticColumn = ['applicant', 'status'];\n  const [displayColumns, setDisplayColumns] = useState(staticColumn.concat(['channel', 'detail.email', 'createTime']));\n  const columns = [\n    {\n      colKey: 'applicant',\n      title: '申请人',\n      width: '100',\n    },\n    {\n      colKey: 'status',\n      title: '申请状态',\n      width: '150',\n      cell: ({ row }) => {\n        const statusNameListMap = {\n          0: {\n            label: '审批通过',\n            theme: 'success',\n            icon: <CheckCircleFilledIcon />,\n          },\n          1: {\n            label: '审批失败',\n            theme: 'danger',\n            icon: <CloseCircleFilledIcon />,\n          },\n          2: {\n            label: '审批过期',\n            theme: 'warning',\n            icon: <ErrorCircleFilledIcon />,\n          },\n        };\n        return (\n          <Tag\n            shape=\"round\"\n            theme={statusNameListMap[row.status].theme}\n            variant=\"light-outline\"\n            icon={statusNameListMap[row.status].icon}\n          >\n            {statusNameListMap[row.status].label}\n          </Tag>\n        );\n      },\n    },\n    {\n      colKey: 'channel',\n      title: '签署方式',\n      width: '120',\n    },\n    {\n      colKey: 'detail.email',\n      title: '邮箱地址',\n      ellipsis: true,\n    },\n    {\n      colKey: 'createTime',\n      title: '申请时间',\n    },\n  ];\n  const onColumnChange = (params) => {\n    console.log(params);\n  };\n  const tableNode = (\n    <Table\n      // defaultDisplayColumns={displayColumns}\n      displayColumns={displayColumns}\n      onDisplayColumnsChange={setDisplayColumns}\n      rowKey=\"index\"\n      data={data}\n      columns={columns}\n      columnController={{\n        placement,\n        fields: ['channel', 'detail.email', 'createTime'],\n        dialogProps: {\n          preventScrollThrough: true,\n        },\n        buttonProps: customText\n          ? {\n              content: '显示列控制',\n              theme: 'primary',\n              variant: 'base',\n            }\n          : undefined,\n      }}\n      pagination={{\n        defaultPageSize: 5,\n        defaultCurrent: 1,\n        total: 100,\n      }}\n      bordered={bordered}\n      tableLayout=\"auto\"\n      onColumnChange={onColumnChange}\n      stripe\n      lazyLoad\n    ></Table>\n  );\n  return (\n    <Space direction=\"vertical\" size=\"large\">\n      <Radio.Group value={placement} onChange={(val) => setPlacement(val)} variant=\"default-filled\">\n        <Radio.Button value=\"top-left\">左上角</Radio.Button>\n        <Radio.Button value=\"top-right\">右上角</Radio.Button>\n        <Radio.Button value=\"bottom-left\">左下角</Radio.Button>\n        <Radio.Button value=\"bottom-right\">右下角</Radio.Button>\n      </Radio.Group>\n      <Space direction=\"horizontal\" align=\"center\">\n        <Checkbox checked={bordered} onChange={setBordered}>\n          是否显示边框\n        </Checkbox>\n        <Checkbox checked={customText} onChange={setCustomText}>\n          自定义列配置按钮\n        </Checkbox>\n      </Space>\n\n      {tableNode}\n    </Space>\n  );\n}\n",
        "desc": "示例一：包含配置按钮的列配置功能示例"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Button, Space, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nexport default function TableCustomCol() {\n  const initialData = [];\n  for (let i = 0; i < 100; i++) {\n    initialData.push({\n      index: i,\n      applicant: ['贾明', '张三', '王芳'][i % 3],\n      status: i % 3,\n      channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n      detail: {\n        email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n      },\n      matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n      time: [2, 3, 1, 4][i % 4],\n      createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n    });\n  }\n  const [data] = useState([...initialData]);\n  const staticColumn = ['applicant', 'status'];\n  const [displayColumns, setDisplayColumns] = useState(staticColumn.concat(['channel', 'detail.email', 'createTime']));\n  const [columnControllerVisible, setColumnControllerVisible] = useState(false);\n  const columns = [\n    {\n      colKey: 'applicant',\n      title: '申请人',\n      width: '100',\n    },\n    {\n      colKey: 'status',\n      title: '申请状态',\n      width: '150',\n      cell: ({ row }) => {\n        const statusNameListMap = {\n          0: {\n            label: '审批通过',\n            theme: 'success',\n            icon: <CheckCircleFilledIcon />,\n          },\n          1: {\n            label: '审批失败',\n            theme: 'danger',\n            icon: <CloseCircleFilledIcon />,\n          },\n          2: {\n            label: '审批过期',\n            theme: 'warning',\n            icon: <ErrorCircleFilledIcon />,\n          },\n        };\n        return (\n          <Tag\n            shape=\"round\"\n            theme={statusNameListMap[row.status].theme}\n            variant=\"light-outline\"\n            icon={statusNameListMap[row.status].icon}\n          >\n            {statusNameListMap[row.status].label}\n          </Tag>\n        );\n      },\n    },\n    {\n      colKey: 'channel',\n      title: '签署方式',\n      width: '120',\n    },\n    {\n      colKey: 'detail.email',\n      title: '邮箱地址',\n      ellipsis: true,\n    },\n    {\n      colKey: 'createTime',\n      title: '申请时间',\n    },\n  ];\n  const onColumnChange = (params) => {\n    console.log(params);\n  };\n\n  // Do not use `resizable` and `tableLayout=auto` at the same time !\n  return (\n    <Space\n      direction=\"vertical\"\n      size=\"large\"\n      style={{\n        maxWidth: '100%',\n      }}\n    >\n      <Button onClick={() => setColumnControllerVisible(true)}>显示列配置弹窗</Button>\n      <Table\n        displayColumns={displayColumns}\n        onDisplayColumnsChange={setDisplayColumns}\n        columnControllerVisible={columnControllerVisible}\n        onColumnControllerVisibleChange={setColumnControllerVisible}\n        rowKey=\"index\"\n        data={data}\n        columns={columns}\n        columnController={{\n          fields: ['channel', 'detail.email', 'createTime'],\n          dialogProps: {\n            preventScrollThrough: true,\n          },\n          hideTriggerButton: true,\n        }}\n        pagination={{\n          defaultPageSize: 5,\n          defaultCurrent: 1,\n          total: 100,\n        }}\n        stripe\n        resizable\n        onColumnChange={onColumnChange}\n      ></Table>\n    </Space>\n  );\n}\n",
        "desc": "使用  控制是否显示列配置弹框， 用于监听相关变化。一般应用于需要完全自定义列配置按钮内容和位置的场景。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Checkbox, Space, Tag } from 'tdesign-react';\nimport { CheckCircleFilledIcon, ErrorCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst columns = [\n  {\n    colKey: 'applicant',\n    title: '申请人',\n    width: '100',\n  },\n  {\n    colKey: 'status',\n    title: '申请状态',\n    width: '150',\n    sortType: 'all',\n    sorter: true,\n    cell: ({ rowIndex }) => {\n      const status = rowIndex % 3;\n      return (\n        <Tag\n          shape=\"round\"\n          theme={statusNameListMap[status].theme}\n          variant=\"light-outline\"\n          icon={statusNameListMap[status].icon}\n        >\n          {statusNameListMap[status].label}\n        </Tag>\n      );\n    },\n  },\n  {\n    colKey: 'time',\n    title: '申请耗时(天)',\n    width: '140',\n    align: 'center',\n    sortType: 'all',\n    sorter: true,\n  },\n  {\n    colKey: 'channel',\n    title: '签署方式',\n    width: '120',\n  },\n  {\n    colKey: 'createTime',\n    title: '申请时间',\n  },\n];\nconst initialData = new Array(4).fill(null).map((_, i) => ({\n  index: i + 1,\n  applicant: ['贾明', '张三', '王芳'][i % 3],\n  status: i % 3,\n  channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n  detail: {\n    email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n  },\n  matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n  time: [2, 3, 1, 4][i % 4],\n  createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n}));\nexport default function TableSingleSort() {\n  const [data, setData] = useState([...initialData]);\n  const [sort, setSort] = useState({\n    // 按照 status 字段进行排序\n    sortBy: 'status',\n    // 是否按照降序进行排序\n    descending: true,\n  });\n  const [hideSortTips, setHideSortTips] = useState(false);\n  const request = (sort) => {\n    // 模拟异步请求，进行数据排序\n    const timer = setTimeout(() => {\n      if (!sort || !sort.sortBy) {\n        setData([...initialData]);\n        return;\n      }\n      const dataNew = initialData\n        .concat()\n        .sort((a, b) => (sort.descending ? b[sort.sortBy] - a[sort.sortBy] : a[sort.sortBy] - b[sort.sortBy]));\n      setData([...dataNew]);\n      clearTimeout(timer);\n    }, 100);\n  };\n  const onSortChange = (sort) => {\n    setSort(sort);\n    request(sort);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <div>\n        <Checkbox checked={hideSortTips} onChange={setHideSortTips}>\n          隐藏排序文本提示\n        </Checkbox>\n        <span\n          style={{\n            paddingLeft: '16px',\n            verticalAlign: 'top',\n          }}\n        >\n          排序方式：{JSON.stringify(sort)}\n        </span>\n      </div>\n\n      <Table\n        rowKey=\"index\"\n        data={data}\n        columns={columns}\n        sort={sort}\n        hideSortTips={hideSortTips}\n        showSortColumnBgColor={true}\n        onSortChange={onSortChange}\n        lazyLoad\n      />\n    </Space>\n  );\n}\n",
        "desc": "提供列属性 ，用于自定义支持排序方式。可选值有 //，分别表示只能降序徘、只能升序徘、降序和升序。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Space, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst columns = [\n  {\n    colKey: 'applicant',\n    title: '申请人',\n    width: '100',\n  },\n  {\n    colKey: 'status',\n    title: '申请状态',\n    width: '150',\n    sortType: 'all',\n    sorter: true,\n    cell: ({ rowIndex }) => {\n      const status = rowIndex % 3;\n      return (\n        <Tag\n          shape=\"round\"\n          theme={statusNameListMap[status].theme}\n          variant=\"light-outline\"\n          icon={statusNameListMap[status].icon}\n        >\n          {statusNameListMap[status].label}\n        </Tag>\n      );\n    },\n  },\n  {\n    colKey: 'time',\n    title: '申请耗时(天)',\n    align: 'center',\n    width: '140',\n    sortType: 'all',\n    sorter: true,\n  },\n  {\n    colKey: 'channel',\n    title: '签署方式',\n    width: '120',\n  },\n  {\n    colKey: 'detail.email',\n    title: '邮箱地址',\n    ellipsis: true,\n  },\n  {\n    colKey: 'createTime',\n    title: '申请时间',\n  },\n];\nconst initialData = [];\nfor (let i = 0; i < 5; i++) {\n  initialData.push({\n    index: i + 1,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\nexport default function TableSingleSort() {\n  const [sort, setSort] = useState([\n    {\n      sortBy: 'status',\n      descending: true,\n    },\n    {\n      sortBy: 'survivalTime',\n      descending: false,\n    },\n  ]);\n  function onSortChange(sort) {\n    setSort(sort);\n    // Request: 发起远程请求进行排序\n    console.log('发起远程请求进行排序（未模拟请求数据）');\n  }\n  return (\n    <Space direction=\"vertical\">\n      <div>排序方式：{JSON.stringify(sort)}</div>\n      <Table\n        rowKey=\"index\"\n        data={initialData}\n        columns={columns}\n        sort={sort}\n        multipleSort\n        onSortChange={onSortChange}\n        lazyLoad\n      />\n    </Space>\n  );\n}\n",
        "desc": "设置表格属性  为 true。将需要排序的列属性  设置为 true，可以设置多个列，示例：。设置表格排序属性  的值为"
      },
      {
        "code": "import React, { useEffect, useState } from 'react';\nimport { Table, Checkbox, Space, Tag } from 'tdesign-react';\nimport { CheckCircleFilledIcon, ErrorCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst columns = [\n  {\n    colKey: 'applicant',\n    title: '申请人',\n    width: '100',\n  },\n  {\n    colKey: 'status',\n    title: '申请状态',\n    width: '150',\n    sortType: 'all',\n    sorter: (a, b) => a.status - b.status,\n    cell: ({ row }) => (\n      <Tag\n        shape=\"round\"\n        theme={statusNameListMap[row.status].theme}\n        variant=\"light-outline\"\n        icon={statusNameListMap[row.status].icon}\n      >\n        {statusNameListMap[row.status].label}\n      </Tag>\n    ),\n  },\n  {\n    title: '申请耗时(天)',\n    colKey: 'time',\n    width: '140',\n    align: 'center',\n    sortType: 'all',\n    sorter: (a, b) => a.time - b.time,\n  },\n  {\n    colKey: 'channel',\n    title: '签署方式',\n    width: '120',\n  },\n  {\n    colKey: 'detail.email',\n    title: '邮箱地址',\n    ellipsis: true,\n  },\n  {\n    colKey: 'createTime',\n    title: '申请时间',\n  },\n];\nconst initialData = [];\nfor (let i = 0; i < 5; i++) {\n  initialData.push({\n    index: i + 1,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\nconst SINGLE_SORT = {\n  sortBy: 'status',\n  descending: true,\n};\nconst MULTIPLE_SORT = [\n  {\n    sortBy: 'status',\n    descending: true,\n  },\n];\nexport default function TableSingleSort() {\n  const [data, setData] = useState(initialData);\n  const [sortInfo, setSortInfo] = useState(SINGLE_SORT);\n  const [multipleSort, setMultipleSort] = useState(false);\n  const onSortChange = (sort, options) => {\n    console.log(sort, options);\n    setSortInfo(sort);\n    // 默认不存在排序时，也可以在这里设置 data 的值\n    // setData(options.currentDataSource);\n  };\n\n  // 默认存在排序时，必须在这里给 data 赋值\n  const onDataChange = (newData) => {\n    setData(newData);\n  };\n  useEffect(() => {\n    setSortInfo(multipleSort ? MULTIPLE_SORT : SINGLE_SORT);\n  }, [multipleSort]);\n  return (\n    <Space direction=\"vertical\">\n      <Checkbox\n        style={{\n          marginBottom: 16,\n        }}\n        value={multipleSort}\n        onChange={setMultipleSort}\n      >\n        是否允许多字段排序\n      </Checkbox>\n      <Table\n        rowKey=\"index\"\n        data={data}\n        columns={columns}\n        sort={sortInfo}\n        multipleSort={multipleSort}\n        onSortChange={onSortChange}\n        onDataChange={onDataChange}\n        lazyLoad\n      />\n    </Space>\n  );\n}\n",
        "desc": "将需要排序的列属性  设置为排序函数，示例：。设置表格排序属性  的值为 。排序发生变化时，监听事件 ，在事件处理程序中添加业务逻辑。排序发生变化时，因为是本地数据排序，因此数据也会发生变化，需要监听 ，事件处理受控数据。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst initData = [];\nfor (let i = 0; i < 5; i++) {\n  initData.push({\n    index: i + 1,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\nconst columns = [\n  {\n    // title: '单选',\n    // align: 'center',\n    colKey: 'row-select',\n    type: 'single',\n    // 允许单选(Radio)取消行选中\n    checkProps: {\n      allowUncheck: true,\n    },\n    // 禁用行选中方式一：使用 disabled 禁用行（示例代码有效，勿删，随时需要测试）。disabled 参数：{row: RowData; rowIndex: number })\n    // 这种方式禁用行选中，当前行会添加行类名 t-table__row--disabled，禁用行文字变灰\n    disabled: ({ rowIndex }) => rowIndex === 1 || rowIndex === 3,\n    // 禁用行选中方式二：使用 checkProps 禁用行（示例代码有效，勿删，随时需要测试）\n    // 这种方式禁用行选中，行文本不会变灰，不会添加类名 t-table__row--disabled\n    // checkProps: ({ rowIndex }) => ({ disabled: rowIndex % 2 !== 0 }),\n    width: 50,\n  },\n  {\n    colKey: 'applicant',\n    title: '申请人',\n    width: '100',\n  },\n  {\n    colKey: 'status',\n    title: '申请状态',\n    width: '150',\n    cell: ({ rowIndex }) => {\n      const status = rowIndex % 3;\n      return (\n        <Tag\n          shape=\"round\"\n          theme={statusNameListMap[status].theme}\n          variant=\"light-outline\"\n          icon={statusNameListMap[status].icon}\n        >\n          {statusNameListMap[status].label}\n        </Tag>\n      );\n    },\n  },\n  {\n    colKey: 'channel',\n    title: '签署方式',\n    width: '120',\n  },\n  {\n    colKey: 'detail.email',\n    title: '邮箱地址',\n    ellipsis: true,\n  },\n  {\n    colKey: 'createTime',\n    title: '申请时间',\n  },\n];\nexport default function TableSingleSort() {\n  const [data] = useState([...initData]);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const onSelectChange = (value, { selectedRowData }) => {\n    console.log(value, selectedRowData);\n    setSelectedRowKeys(value);\n  };\n  return (\n    <Table\n      rowKey=\"index\"\n      data={data}\n      columns={columns}\n      selectOnRowClick={true}\n      selectedRowKeys={selectedRowKeys}\n      onSelectChange={onSelectChange}\n      lazyLoad\n    />\n  );\n}\n",
        "desc": "表示当前选中行的唯一标识数组，支持非受控属性  会在选中行发生变化时触发设置  可以将任意列定义为行选中操作列。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst columns = [\n  {\n    colKey: 'row-select',\n    type: 'multiple',\n    // 禁用行选中方式一：使用 disabled 禁用行（示例代码有效，勿删）。disabled 参数：{row: RowData; rowIndex: number })\n    // 这种方式禁用行选中，当前行会添加行类名 t-table__row--disabled，禁用行文字变灰\n    // disabled: ({ rowIndex }) => rowIndex === 1 || rowIndex === 3,\n\n    // 禁用行选中方式二：使用 checkProps 禁用行（示例代码有效，勿删）\n    // 这种方式禁用行选中，行文本不会变灰\n    checkProps: ({ rowIndex }) => ({\n      disabled: rowIndex % 2 !== 0,\n      title: rowIndex % 2 !== 0 ? '不可选' : null,\n    }),\n    width: 50,\n  },\n  {\n    colKey: 'applicant',\n    title: '申请人',\n    width: '100',\n  },\n  {\n    colKey: 'status',\n    title: '申请状态',\n    width: '150',\n    cell: ({ rowIndex }) => {\n      const status = rowIndex % 3;\n      return (\n        <Tag\n          shape=\"round\"\n          theme={statusNameListMap[status].theme}\n          variant=\"light-outline\"\n          icon={statusNameListMap[status].icon}\n        >\n          {statusNameListMap[status].label}\n        </Tag>\n      );\n    },\n  },\n  {\n    colKey: 'channel',\n    title: '签署方式',\n    width: '120',\n  },\n  {\n    colKey: 'detail.email',\n    title: '邮箱地址',\n    ellipsis: true,\n  },\n  {\n    colKey: 'createTime',\n    title: '申请时间',\n  },\n];\nconst initData = [];\nfor (let i = 0; i < 5; i++) {\n  initData.push({\n    index: i + 100,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\nexport default function TableSingleSort() {\n  const [data] = useState([...initData]);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const onSelectChange = (value, { selectedRowData }) => {\n    console.log(value, selectedRowData);\n    setSelectedRowKeys(value);\n  };\n  return (\n    <Table\n      rowKey=\"index\"\n      data={data}\n      columns={columns}\n      selectOnRowClick={true}\n      selectedRowKeys={selectedRowKeys}\n      onSelectChange={onSelectChange}\n      lazyLoad\n    />\n  );\n}\n",
        "desc": "表示当前选中行的唯一标识数组，支持非受控属性  会在选中行发生变化时触发设置  可以将任意列定义为行选中操作列。分页场景下的行选中，默认允许跨分页选中，即翻页时，上一页选中结果依然保存。如果希望每一页单独控制选中，互不影响，可设置 注意：如果发现点击某一行便选中了全部，说明  设置不正确，或者没有设置，请确保  的值为  中的字段。"
      },
      {
        "code": "import React, { useEffect, useState } from 'react';\nimport { Table, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst columns = [\n  {\n    colKey: 'row-select',\n    type: 'multiple',\n    width: 46,\n  },\n  {\n    width: 200,\n    colKey: 'name',\n    title: '姓名',\n    render({ type, row: { name } }) {\n      if (type === 'title') return '申请人';\n      return name ? `${name.first} ${name.last}` : 'UNKNOWN_USER';\n    },\n  },\n  {\n    colKey: 'status',\n    title: '申请状态',\n    width: '150',\n    cell: ({ rowIndex }) => {\n      const status = rowIndex % 3;\n      return (\n        <Tag\n          shape=\"round\"\n          theme={statusNameListMap[status].theme}\n          variant=\"light-outline\"\n          icon={statusNameListMap[status].icon}\n        >\n          {statusNameListMap[status].label}\n        </Tag>\n      );\n    },\n  },\n  {\n    width: 200,\n    colKey: 'phone',\n    title: '联系方式',\n    render({ row: { phone } }) {\n      return phone;\n    },\n  },\n  {\n    colKey: 'email',\n    title: '邮箱',\n    width: 180,\n    ellipsis: true,\n  },\n];\nexport default function TableBasic() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [data, setData] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [current, setCurrent] = useState(1);\n  const [pageSize, setPageSize] = useState(5);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n\n  // 分页数据变化\n  async function rehandleChange(pageInfo) {\n    const { current, pageSize } = pageInfo;\n    setCurrent(current);\n    setPageSize(pageSize);\n    await fetchData(pageInfo);\n  }\n\n  // 模拟远程请求\n  async function fetchData(pageInfo) {\n    setIsLoading(true);\n    try {\n      const { current, pageSize } = pageInfo;\n      // 请求可能存在跨域问题\n      const url = new URL('https://randomuser.me/api');\n      const params = {\n        page: current,\n        results: pageSize,\n      };\n      Object.keys(params).forEach((key) => url.searchParams.append(key, params[key]));\n      const response = await fetch(url.toString()).then((x) => x.json());\n      setData(response.results);\n      setTotal(120);\n      setIsLoading(false);\n    } catch (err) {\n      setData([]);\n      setTotal(120);\n      setIsLoading(false);\n    }\n  }\n  const onSelectChange = (value, { selectedRowData }) => {\n    setSelectedRowKeys(value);\n    console.log(value, selectedRowData);\n  };\n  useEffect(() => {\n    fetchData({\n      current,\n      pageSize,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <Table\n      data={data}\n      columns={columns}\n      rowKey=\"phone\"\n      loading={isLoading}\n      pagination={{\n        current,\n        pageSize,\n        // 支持非受控用法\n        // defaultCurrent: 1,\n        // defaultPageSize: 5,\n        total,\n        showJumper: true,\n        onChange(pageInfo) {\n          console.log(pageInfo, 'onChange pageInfo');\n          rehandleChange(pageInfo);\n        },\n      }}\n      onPageChange={(pageInfo) => {\n        console.log(pageInfo, 'onPageChange pageInfo');\n      }}\n      selectedRowKeys={selectedRowKeys}\n      onSelectChange={onSelectChange}\n      // reserveSelectedRowOnPaginate={false}\n      lazyLoad\n    />\n  );\n}\n",
        "desc": "远程数据分页，表示组件内部不会对参数  进行分页。只输出分页信息，以供远程请求进行分页。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Space, Radio, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst data = [];\nconst total = 59;\nfor (let i = 0; i < total; i++) {\n  data.push({\n    index: i,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\nconst columns = [\n  {\n    colKey: 'serial-number',\n    width: 80,\n    title: '序号',\n  },\n  {\n    colKey: 'applicant',\n    title: '申请人',\n    width: '100',\n  },\n  {\n    colKey: 'status',\n    title: '申请状态',\n    width: '150',\n    cell: ({ rowIndex }) => {\n      const status = rowIndex % 3;\n      return (\n        <Tag\n          shape=\"round\"\n          theme={statusNameListMap[status].theme}\n          variant=\"light-outline\"\n          icon={statusNameListMap[status].icon}\n        >\n          {statusNameListMap[status].label}\n        </Tag>\n      );\n    },\n  },\n  {\n    colKey: 'channel',\n    title: '签署方式',\n    width: '120',\n  },\n  // { colKey: 'detail.email', title: '邮箱地址', ellipsis: true },\n  {\n    colKey: 'createTime',\n    title: '申请时间',\n  },\n  {\n    colKey: 'row-select',\n    type: 'multiple',\n    width: 46,\n  },\n];\nexport default function TableBasic() {\n  const [reserveSelectedRowOnPaginate, setReserveSelectedRowOnPaginate] = useState(true);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  // const [current, setCurrent] = useState(2);\n  // const [pageSize, setPageSize] = useState(5);\n\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Radio.Group\n        variant=\"default-filled\"\n        value={reserveSelectedRowOnPaginate}\n        onChange={(val) => setReserveSelectedRowOnPaginate(val)}\n      >\n        <Radio.Button value={true}>跨分页选中</Radio.Button>\n        <Radio.Button value={false}>当前页选中</Radio.Button>\n      </Radio.Group>\n\n      <Table\n        // todo(type): fix id props\n        // @ts-ignore\n        id=\"pagination-table\"\n        data={data}\n        columns={columns}\n        rowKey=\"index\"\n        // 非受控写法\n        pagination={{\n          defaultCurrent: 2,\n          defaultPageSize: 5,\n          total,\n          showJumper: true,\n          onChange(pageInfo) {\n            console.log(pageInfo, 'onChange pageInfo');\n          },\n          onCurrentChange(current, pageInfo) {\n            console.log(current, 'onCurrentChange current');\n            console.log(pageInfo, 'onCurrentChange pageInfo');\n          },\n          onPageSizeChange(size, pageInfo) {\n            console.log(size, 'onPageSizeChange size');\n            console.log(pageInfo, 'onPageSizeChange pageInfo');\n          },\n          selectProps: {\n            popupProps: {\n              attach: () => document.getElementById('pagination-table'),\n              overlayInnerStyle: {\n                fontWeight: 'normal',\n              },\n              overlayStyle: {\n                fontWeight: 'normal',\n              },\n              overlayClassName: 'table-pagination-custom-overlay-class',\n              overlayInnerClassName: 'table-pagination-custom-overlay-inner-class',\n            },\n          },\n        }}\n        // 受控用法：与分页组件对齐\n        // pagination={{\n        //   current,\n        //   pageSize,\n        //   showJumper: true,\n        //   total,\n        //   onChange(pageInfo) {\n        //     console.log(pageInfo, 'onChange pageInfo');\n        //     setCurrent(pageInfo.current);\n        //     setPageSize(pageInfo.pageSize);\n        //   },\n        // }}\n        onPageChange={(pageInfo, newDataSource) => {\n          console.log(pageInfo, 'onPageChange pageInfo');\n          console.log(newDataSource, 'onPageChange newDataSource');\n        }}\n        selectedRowKeys={selectedRowKeys}\n        onSelectChange={(val, context) => {\n          setSelectedRowKeys(val);\n          console.log(val, context);\n        }}\n        reserveSelectedRowOnPaginate={reserveSelectedRowOnPaginate}\n      />\n    </Space>\n  );\n}\n",
        "desc": "当  长度超过 ，单页已无法完整地显示数据，此时会自动开启本地数据分页，组件内部会对  进行分页。 如果希望禁用组件内部分页，可以设置 。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { isNumber } from 'lodash-es';\nimport { Table, Button, DateRangePickerPanel, Space, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst columns = [\n  {\n    colKey: 'applicant',\n    title: '申请人',\n    width: 100,\n    foot: '-',\n  },\n  {\n    title: '申请状态',\n    colKey: 'status',\n    // 单选过滤配置\n    filter: {\n      type: 'single',\n      list: [\n        {\n          label: '审批通过',\n          value: 0,\n        },\n        {\n          label: '已过期',\n          value: 1,\n        },\n        {\n          label: '审批失败',\n          value: 2,\n        },\n      ],\n      // 透传浮层全部属性，示例代码\n      // popupProps: {\n      //   placement: 'right',\n      //   attach: () => document.body\n      // },\n    },\n    cell: ({ row }) => (\n      <Tag\n        shape=\"round\"\n        theme={statusNameListMap[row.status].theme}\n        variant=\"light-outline\"\n        icon={statusNameListMap[row.status].icon}\n      >\n        {statusNameListMap[row.status].label}\n      </Tag>\n    ),\n  },\n  {\n    title: '签署方式',\n    colKey: 'channel',\n    // 多选过滤配置\n    filter: {\n      type: 'multiple',\n      resetValue: [],\n      list: [\n        {\n          label: 'All',\n          checkAll: true,\n        },\n        {\n          label: '电子签署',\n          value: '电子签署',\n        },\n        {\n          label: '纸质签署',\n          value: '纸质签署',\n        },\n      ],\n      // 是否显示重置取消按钮，一般情况不需要显示\n      showConfirmAndReset: true,\n    },\n  },\n  {\n    title: 'Email',\n    colKey: 'email',\n    // 输入框过滤配置\n    filter: {\n      type: 'input',\n      // 文本域搜索\n      // component: Textarea,\n\n      resetValue: '',\n      // 按下 Enter 键时也触发确认搜索\n      confirmEvents: ['onEnter'],\n      props: {\n        placeholder: '输入关键词过滤',\n      },\n      // 是否显示重置取消按钮，一般情况不需要显示\n      showConfirmAndReset: true,\n    },\n  },\n  {\n    title: 'Date',\n    colKey: 'createTime',\n    // 用于查看同时存在排序和过滤时的图标显示是否正常\n    sorter: true,\n    // 自定义过滤组件：日期过滤配置，请确保自定义组件包含 value 和 onChange 属性\n    filter: {\n      // todo(type): 类型缺陷\n      type: 'custom',\n      component: DateRangePickerPanel,\n      props: {\n        firstDayOfWeek: 7,\n      },\n      style: {\n        fontSize: '14px',\n      },\n      classNames: 'custom-class-name',\n      attrs: {\n        'data-type': 'DateRangePickerPanel',\n      },\n      // 是否显示重置取消按钮，一般情况不需要显示\n      showConfirmAndReset: true,\n      // 日期范围是一个组件，重置时需赋值为 []\n      resetValue: [],\n    },\n  },\n];\n\n// eslint-disable-next-line\n// function IconText(props = {}) {\n//   // 根据不同的 Props，允许定义不同的筛选图标（col, colIndex 在 Table 组件内部已经注入）\n//   const { col, colIndx } = props;\n//   console.log(col, colIndx);\n//   if (col.colKey === 'email') return <div>EmailIcon</div>;\n//   return <i>Icon</i>;\n// }\n\nconst initData = new Array(5).fill(null).map((_, i) => ({\n  key: String(i + 1),\n  applicant: ['贾明', '张三', '王芳'][i % 3],\n  status: i % 3,\n  channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n  email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n  matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n  time: [2, 3, 1, 4][i % 4],\n  createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n}));\nexport default function TableSingleSort() {\n  const [data, setData] = useState([...initData]);\n  //  survivalTime: [300, 500]\n  const [filterValue, setFilterValue] = useState({\n    lastName: [],\n  });\n  const request = (filters) => {\n    const timer = setTimeout(() => {\n      clearTimeout(timer);\n      const newData = initData.filter((item) => {\n        let result = true;\n        if (isNumber(filters.status)) {\n          result = item.status === filters.status;\n        }\n        if (result && filters.channel && filters.channel.length) {\n          result = filters.channel.includes(item.channel);\n        }\n        if (result && filters.email) {\n          result = item.email.indexOf(filters.email) !== -1;\n        }\n        if (result && filters.createTime && filters.createTime.length) {\n          result = item.createTime === filters.createTime;\n        }\n        return result;\n      });\n      setData(newData);\n    }, 100);\n  };\n  const onFilterChange = (filters, col) => {\n    console.log(filters, col);\n    setFilterValue({\n      ...filters,\n      createTime: filters.createTime || [],\n      lastName: filters.lastName || [],\n    });\n    // 在此处理过滤数据效果，以达到更真实的过滤效果\n    request(filters);\n  };\n  const onChange = (info, context) => {\n    console.log('onChange', info, context);\n  };\n\n  // 受控方式，打开模拟排序（可用，勿删）\n  // useEffect(() => {\n  //   request(filterValue);\n  // }, [filterValue]);\n\n  // 模拟异步请求，进行数据排序（可用，勿删）\n  // function request(filterVal) {\n  //   const timer = setTimeout(() => {\n  //     if (!filterVal) {\n  //       setData([...initData]);\n  //       return;\n  //     }\n  //     let dataNew = initData;\n  //     for (const k in filterVal) {\n  //       if (typeof filterVal?.[k] === 'string') {\n  //         dataNew = dataNew.filter((item) => item?.[k].indexOf(filterVal?.[k]) != -1);\n  //       }\n  //       if (typeof filterVal?.[k] === 'object' && filterVal?.[k].length > 0) {\n  //         dataNew = dataNew\n  //           .filter((item) => filterVal?.[k].indexOf(item?.[k]) != -1)\n  //           .map((item) => ({ ...item, instance: `${item.instance}_TDesign_Filter` }));\n  //       }\n  //     }\n  //     setData([...dataNew]);\n  //     clearTimeout(timer);\n  //   }, 100);\n  // }\n  return (\n    <Space direction=\"vertical\">\n      <Space direction=\"horizontal\" align=\"center\">\n        <Button\n          onClick={() => {\n            setFilterValue({});\n            setData([...initData]);\n          }}\n        >\n          清空已筛选\n        </Button>\n        <span>已选筛选条件：{JSON.stringify(filterValue)}</span>\n      </Space>\n      <Table\n        rowKey=\"key\"\n        data={data}\n        columns={columns}\n        // filterIcon={<IconText />}\n        filterValue={filterValue}\n        // defaultFilterValue={filterValue}\n        onFilterChange={onFilterChange}\n        onChange={onChange}\n        // filterRow={() => null}\n        // 非受控写法\n        pagination={{\n          defaultCurrent: 1,\n          defaultPageSize: 5,\n          showJumper: true,\n          pageSizeOptions: [1, 3, 5, 10],\n        }}\n        lazyLoad\n      />\n    </Space>\n  );\n}\n",
        "desc": "表格属性  用于设置过滤功能默认值，示例：。表格属性  用于设置自定义过滤图标。筛选器值发生变化时，会触发  事件。列配置  决定使用哪一种筛选器，可选值有：，分别表示：单选按钮筛选器、复选框筛选器、输入框筛选器。也可以使用  自定义筛选组件。列配置  用于配置当前筛选器可选值有哪些，仅当  等于 single 或 multiple 时有效。列配置  用于透传筛选器属性，可以对筛选器进行任何原组件支持的属性配置.列配置  用于自定义筛选器，只要保证自定义筛选器包含  属性 和  事件，即可像内置筛选器一样正常使用。列配置  用于控制是否显示“确认”“重置”按钮.列配置  用于设置点击“重置”按钮时的重置值，并非每个场景都会重置为  或  ，默认重置为 。表格属性  可完全自定义过滤结果行显示内容，设置  隐藏过滤行。更多功能属性请查看 API 文档中的"
      },
      {
        "code": "import React from 'react';\nimport { Table, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst data = new Array(6).fill(null).map((_, i) => ({\n  i,\n  status: i % 3,\n  applicant: ['贾明', '张三', '王芳'][i % 3],\n  channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n  type: ['审批通过', '已过期', '审批失败', '审批中'][i % 4],\n  detail: {\n    email: [\n      'w.cezkdudy@lhll.au',\n      'r.nmgw@peurezgn.sl',\n      'p.cumx@rampblpa.ru',\n      'b.nmgw@peurezgn.sl',\n      'd.cumx@rampblpa.ru',\n    ][i % 5],\n  },\n  needed: ['Y', 'N'][i % 1],\n  description: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n  createTime: '2021-11-01',\n}));\nconst columns = [\n  {\n    colKey: 'applicant',\n    title: '申请人',\n    width: '100',\n  },\n  {\n    colKey: 'status',\n    title: '申请状态',\n    width: '150',\n    cell: ({ rowIndex }) => {\n      const status = rowIndex % 3;\n      return (\n        <Tag\n          shape=\"round\"\n          theme={statusNameListMap[status].theme}\n          variant=\"light-outline\"\n          icon={statusNameListMap[status].icon}\n        >\n          {statusNameListMap[status].label}\n        </Tag>\n      );\n    },\n  },\n  {\n    colKey: 'description',\n    title: '审批事项',\n    width: 150,\n  },\n  {\n    colKey: 'detail.email',\n    title: '邮箱地址',\n  },\n  {\n    colKey: 'channel',\n    // 多行表头合并请参考「多级表头示例」\n    title: '其他信息',\n    // 仅适用于单行表头合并列\n    colspan: 2,\n    // 设置列样式，注释的示例代码有效\n    // attrs: ({ type, col, row, colIndex, rowIndex }) => ({\n    //   style: {\n    //     color: 'blue',\n    //   },\n    // }),\n  },\n  {\n    colKey: 'createTime',\n    title: '创建时间',\n  },\n];\nexport default function TableExample() {\n  const rowspanAndColspan = ({ col, rowIndex, colIndex }) => {\n    if (colIndex === 0 && rowIndex % 2 === 0) {\n      return {\n        rowspan: 2,\n      };\n    }\n    if (col.colKey === 'description' && rowIndex === 1) {\n      return {\n        colspan: 2,\n        rowspan: 2,\n      };\n    }\n    if (col.colKey === 'email' && rowIndex === 4) {\n      return {\n        colspan: 2,\n        rowspan: 2,\n      };\n    }\n  };\n  return (\n    <Table data={data} bordered={true} columns={columns} rowKey=\"i\" rowspanAndColspan={rowspanAndColspan} lazyLoad />\n  );\n}\n",
        "desc": "使用表格属性  设置表格内容合并元格。使用表格属性  设置表尾合并单元格。使用列属性  设置表头合并。如果是多行表头，请参考下方「多级表头」示例。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Checkbox, Space, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst initialData = [];\nfor (let i = 0; i < 20; i++) {\n  initialData.push({\n    index: i + 1,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    time: [3, 2, 4, 1][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n    property: ['组长审批', '部门审批', '财务审批'][i % 3],\n    default: i,\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n      position: `读取 ${i} 个数据的嵌套信息值`,\n    },\n    needed: i % 4 === 0 ? '是' : '否',\n    type_default: '-',\n    description: '数据源',\n    field1: [100, 200, 400, 500][i % 4],\n    field2: [100, 200, 400, 500][i % 4],\n    field3: [100, 200, 400, 500][i % 4],\n    field4: [100, 200, 400, 500][i % 4],\n    field5: '字段5',\n    field6: '字段6',\n    field7: `审批单号00${i + 1}`,\n  });\n}\nexport default function TableExample() {\n  const [data, setData] = useState([...initialData]);\n  const [bordered, setBordered] = useState(true);\n  const [fixedHeader, setFixedHeader] = useState(true);\n  const [fixedLeftCol, setFixedLeftCol] = useState(false);\n  const [fixedRightCol, setFixedRightCol] = useState(false);\n  const [headerAffixedTop, setHeaderAffixedTop] = useState(false);\n  const [sort, setSort] = useState({\n    sortBy: 'default',\n    descending: false,\n  });\n  const onSortChange = (sortInfo, context) => {\n    setSort(sortInfo);\n    setData([...context.currentDataSource]);\n    console.log(context);\n  };\n  const columns = [\n    {\n      title: '申请人',\n      colKey: 'applicant',\n      fixed: fixedLeftCol ? 'left' : undefined,\n      width: 100,\n    },\n    {\n      title: '申请汇总',\n      fixed: fixedLeftCol ? 'left' : undefined,\n      width: 100,\n      colKey: 'total_info',\n      children: [\n        {\n          align: 'left',\n          colKey: 'platform',\n          title: '申请状态',\n          fixed: fixedLeftCol ? 'left' : undefined,\n          width: 120,\n          sorter: (a, b) => a.default - b.default,\n          cell: ({ rowIndex }) => {\n            const status = rowIndex % 3;\n            return (\n              <Tag\n                shape=\"round\"\n                theme={statusNameListMap[status].theme}\n                variant=\"light-outline\"\n                icon={statusNameListMap[status].icon}\n              >\n                {statusNameListMap[status].label}\n              </Tag>\n            );\n          },\n        },\n        {\n          title: '申请渠道和金额',\n          colKey: 'type_default',\n          fixed: fixedLeftCol ? 'left' : undefined,\n          width: 100,\n          children: [\n            {\n              align: 'left',\n              colKey: 'channel',\n              title: '类型',\n              fixed: fixedLeftCol ? 'left' : undefined,\n              width: 110,\n            },\n            {\n              align: 'center',\n              colKey: 'time',\n              title: '申请耗时(天)',\n              fixed: fixedLeftCol ? 'left' : undefined,\n              width: 150,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      colKey: 'field1',\n      title: '住宿费',\n      width: 100,\n    },\n    {\n      colKey: 'field3',\n      title: '交通费',\n      width: 100,\n    },\n    {\n      colKey: 'field4',\n      title: '物料费',\n      width: 100,\n    },\n    {\n      colKey: 'field2',\n      title: '奖品激励费',\n      width: 120,\n    },\n    {\n      title: '审批汇总',\n      colKey: 'instruction',\n      fixed: fixedRightCol ? 'right' : undefined,\n      width: 100,\n      children: [\n        {\n          align: 'left',\n          colKey: 'property',\n          title: '审批状态',\n          fixed: fixedRightCol ? 'right' : undefined,\n          width: 120,\n          filter: {\n            type: 'single',\n            list: [\n              {\n                label: '所有状态',\n                value: '',\n              },\n              {\n                label: '组长审批',\n                value: '组长审批',\n              },\n              {\n                label: '部门审批',\n                value: '部门审批',\n              },\n              {\n                label: '财务审批',\n                value: '财务审批',\n              },\n            ],\n          },\n        },\n        {\n          align: 'left',\n          ellipsis: true,\n          colKey: 'description',\n          title: '说明',\n          fixed: fixedRightCol ? 'right' : undefined,\n          width: 100,\n          children: [\n            {\n              colKey: 'field7',\n              title: '审批单号',\n              fixed: fixedRightCol ? 'right' : undefined,\n              width: 120,\n            },\n            {\n              colKey: 'detail.email',\n              title: '邮箱地址',\n              fixed: fixedRightCol ? 'right' : undefined,\n              ellipsis: true,\n              width: 150,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      colKey: 'createTime',\n      title: '申请时间',\n      fixed: fixedRightCol ? 'right' : undefined,\n      width: '120',\n    },\n  ];\n  return (\n    <Space\n      direction=\"vertical\"\n      size=\"large\"\n      style={{\n        width: '100%',\n      }}\n    >\n      {/* <!-- 按钮操作区域 --> */}\n      <Space>\n        <Checkbox checked={bordered} onChange={setBordered}>\n          显示表格边框\n        </Checkbox>\n        <Checkbox checked={fixedHeader} onChange={setFixedHeader}>\n          显示固定表头\n        </Checkbox>\n        <Checkbox checked={fixedLeftCol} onChange={setFixedLeftCol}>\n          固定左侧列\n        </Checkbox>\n        <Checkbox checked={fixedRightCol} onChange={setFixedRightCol}>\n          固定右侧列\n        </Checkbox>\n        <Checkbox checked={headerAffixedTop} onChange={setHeaderAffixedTop}>\n          表头吸顶\n        </Checkbox>\n      </Space>\n\n      <Table\n        data={data}\n        bordered={bordered}\n        columns={columns}\n        rowKey=\"index\"\n        maxHeight={fixedHeader ? 380 : undefined}\n        headerAffixProps={{\n          offsetTop: 0,\n        }}\n        headerAffixedTop={headerAffixedTop}\n        columnController={{\n          displayType: 'auto-width',\n        }}\n        sort={sort}\n        onSortChange={onSortChange}\n        lazyLoad\n      />\n    </Space>\n  );\n}\n",
        "desc": "多级表头的配置只需要在列配置中添加  子列配置即可。多级表头中的固定列，必须指定每一个固定列的  和  属性。多级表表头中的列宽设置，只需指定最后一层表头宽度。"
      },
      {
        "code": "import React from 'react';\nimport { Table } from 'tdesign-react';\nimport { LoadingIcon } from 'tdesign-icons-react';\n\nexport default function EmptyTable() {\n  const columns = [\n    {\n      colKey: 'instance',\n      title: '集群名称',\n    },\n    {\n      colKey: 'status',\n      title: '状态',\n    },\n    {\n      colKey: 'owner',\n      title: '管理员',\n    },\n    {\n      colKey: 'description',\n      title: '描述',\n    },\n  ];\n  return (\n    <div>\n      <Table data={[]} columns={columns} rowKey=\"id\" loading={true}></Table>\n\n      <Table data={[]} columns={columns} rowKey=\"id\" loading={'自定义加载状态文本'}></Table>\n\n      <Table\n        data={[]}\n        columns={columns}\n        rowKey=\"id\"\n        loadingProps={{\n          indicator: false,\n        }}\n        loading={\n          <div>\n            <LoadingIcon name=\"loading\" size=\"20px\" />\n            &nbsp;&nbsp;<span>渲染函数自定义加载中（可单独去除内置加载图标）</span>\n          </div>\n        }\n        lazyLoad\n      ></Table>\n    </div>\n  );\n}\n",
        "desc": "显示默认加载状态； 不显示加载状态；值类型为函数，则表示自定义加载状态文本内容，对于支持插槽的框架还支持同名插槽（不包含加载图标）。 用于透传加载组件全部属性，可以使用该特性定制化更多个性加载状态。"
      },
      {
        "code": "import React, { useMemo, useState } from 'react';\nimport { Table, Radio, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst data = [];\nfor (let i = 0; i < 5; i++) {\n  data.push({\n    index: i + 1,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\nconst columns = [\n  {\n    colKey: 'applicant',\n    title: '申请人',\n    width: '100',\n  },\n  {\n    colKey: 'status',\n    title: '申请状态',\n    width: '150',\n    cell: ({ row }) => (\n      <Tag\n        shape=\"round\"\n        theme={statusNameListMap[row.status].theme}\n        variant=\"light-outline\"\n        icon={statusNameListMap[row.status].icon}\n      >\n        {statusNameListMap[row.status].label}\n      </Tag>\n    ),\n  },\n  {\n    colKey: 'channel',\n    title: '签署方式',\n    width: '120',\n  },\n  {\n    colKey: 'detail.email',\n    title: '邮箱地址',\n    ellipsis: true,\n  },\n  {\n    colKey: 'createTime',\n    title: '申请时间',\n  },\n];\nexport default function EmptyTable() {\n  const [asyncLoading, setAsyncLoading] = useState('loading');\n  const loadingNode = useMemo(\n    () =>\n      asyncLoading === 'loading-custom' ? (\n        <>\n          <div\n            className={`t-table--loading-progressbar`}\n            style={{\n              width: '50%',\n            }}\n          />\n          <div className=\"t-table__async-loading\">这是自定义加载状态和内容</div>\n        </>\n      ) : (\n        asyncLoading\n      ),\n    [asyncLoading],\n  );\n  function onAsyncLoadingClick({ status }) {\n    console.log('status', status);\n    if (status === 'load-more') {\n      setAsyncLoading('loading');\n    }\n  }\n  return (\n    <div>\n      <Radio.Group value={asyncLoading} onChange={(val) => setAsyncLoading(val)}>\n        <Radio.Button value=\"load-more\">加载更多</Radio.Button>\n        <Radio.Button value=\"loading\">加载中</Radio.Button>\n        <Radio.Button value=\"loading-custom\">自定义加载更多</Radio.Button>\n        <Radio.Button value=\"\">加载完成</Radio.Button>\n      </Radio.Group>\n\n      <Table\n        data={data}\n        columns={columns}\n        rowKey=\"index\"\n        asyncLoading={loadingNode}\n        onAsyncLoadingClick={onAsyncLoadingClick}\n      ></Table>\n    </div>\n  );\n}\n",
        "desc": "表示非加载状态或加载完成状态； 表格底部显示“加载更多”； 表格底部显示“正在加载中，请稍后”； 值类型为函数，则表示完全自定义底部异步加载内容。"
      },
      {
        "code": "import React from 'react';\nimport { Table } from 'tdesign-react';\n\nexport default function EmptyTable() {\n  const TableData = [];\n  return (\n    <>\n      <Table\n        data={TableData}\n        columns={[\n          {\n            colKey: 'project',\n            title: '项目名称',\n            width: '150px',\n            cell: ({ row }) => row.projectName,\n          },\n          {\n            colKey: 'member',\n            title: '管理员',\n            width: '300px',\n            cell: ({ row }) => row.manager.join(','),\n          },\n          {\n            colKey: 'company',\n            title: '所属公司',\n            width: '150px',\n            cell: ({ row }) => row.company,\n          },\n        ]}\n        rowKey=\"projectName\"\n      />\n      <Table\n        data={TableData}\n        empty={\n          <span\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              height: 100,\n            }}\n          >\n            😄 it is empty. 😁\n          </span>\n        }\n        columns={[\n          {\n            colKey: 'project',\n            title: '项目名称',\n            width: '150px',\n            cell: ({ row }) => row.projectName,\n          },\n          {\n            colKey: 'member',\n            title: '管理员',\n            width: '300px',\n            cell: ({ row }) => row.manager.join(','),\n          },\n          {\n            colKey: 'company',\n            title: '所属公司',\n            width: '150px',\n            cell: ({ row }) => row.company,\n          },\n        ]}\n        rowKey=\"projectName\"\n      />\n    </>\n  );\n}\n",
        "desc": "使用默认空表格样式。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst columns = [\n  {\n    colKey: 'applicant',\n    title: '申请人',\n    width: '100',\n  },\n  {\n    colKey: 'status',\n    title: '申请状态',\n    width: '150',\n    cell: ({ row }) => (\n      <Tag\n        shape=\"round\"\n        theme={statusNameListMap[row.status].theme}\n        variant=\"light-outline\"\n        icon={statusNameListMap[row.status].icon}\n      >\n        {statusNameListMap[row.status].label}\n      </Tag>\n    ),\n  },\n  {\n    colKey: 'channel',\n    title: '签署方式',\n    width: '120',\n  },\n  {\n    colKey: 'detail.email',\n    title: '邮箱地址',\n    ellipsis: true,\n  },\n  {\n    colKey: 'createTime',\n    title: '申请时间',\n  },\n];\nconst initialData = [];\nfor (let i = 0; i < 5; i++) {\n  initialData.push({\n    index: i + 1,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\nexport default function TableDragSort() {\n  const [data, setData] = useState(initialData);\n\n  // currentData is going to be deprecated.\n  const onDragSort = ({ currentIndex, targetIndex, current, target, data, newData, e }) => {\n    console.log('交换行', currentIndex, targetIndex, current, target, data, newData, e);\n    // 数据受控实现\n    setData(newData);\n  };\n\n  // 拖拽排序涉及到 data 的变更，相对比较慎重，因此仅支持受控用法\n  return <Table rowKey=\"index\" data={data} columns={columns} dragSort=\"row\" onDragSort={onDragSort} lazyLoad />;\n}\n",
        "desc": "设置参数  即可。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Checkbox, Space, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon, MoveIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst columns = [\n  {\n    colKey: 'drag',\n    // 列拖拽排序必要参数\n    title: '排序',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    cell: (h) => (\n      <span>\n        <MoveIcon />\n      </span>\n    ),\n    width: 46,\n  },\n  {\n    colKey: 'applicant',\n    title: '申请人',\n    width: '100',\n  },\n  {\n    colKey: 'status',\n    title: '申请状态',\n    width: '150',\n    cell: ({ row }) => (\n      <Tag\n        shape=\"round\"\n        theme={statusNameListMap[row.status].theme}\n        variant=\"light-outline\"\n        icon={statusNameListMap[row.status].icon}\n      >\n        {statusNameListMap[row.status].label}\n      </Tag>\n    ),\n  },\n  {\n    colKey: 'channel',\n    title: '签署方式',\n    width: '120',\n  },\n  {\n    colKey: 'detail.email',\n    title: '邮箱地址',\n    ellipsis: true,\n  },\n  {\n    colKey: 'createTime',\n    title: '申请时间',\n  },\n];\nconst initialData = [];\nfor (let i = 0; i < 5; i++) {\n  initialData.push({\n    index: i + 1,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\nexport default function TableDragSort() {\n  const [data, setData] = useState([...initialData]);\n  const [loading, setLoading] = useState(false);\n\n  // { currentIndex, targetIndex, current, target, data, newData, e }\n  const onDragSort = (params) => {\n    console.log('交换行', params);\n    // 数据受控实现\n    setData(params.newData);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Checkbox value={loading} onChange={setLoading}>\n        加载状态\n      </Checkbox>\n      {/* 拖拽排序涉及到 data 的变更，相对比较慎重，因此仅支持受控用法 */}\n      <Table\n        rowKey=\"index\"\n        data={data}\n        columns={columns}\n        dragSort=\"row-handler\"\n        loading={loading}\n        onDragSort={onDragSort}\n        lazyLoad\n      />\n    </Space>\n  );\n}\n",
        "desc": "设置参数  的同时，还需要添加手柄列：。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst initialColumns = [\n  {\n    colKey: 'applicant',\n    title: '申请人',\n    width: '100',\n    fixed: 'left',\n  },\n  {\n    colKey: 'status',\n    title: '申请状态',\n    width: '150',\n    cell: ({ row }) => (\n      <Tag\n        shape=\"round\"\n        theme={statusNameListMap[row.status].theme}\n        variant=\"light-outline\"\n        icon={statusNameListMap[row.status].icon}\n      >\n        {statusNameListMap[row.status].label}\n      </Tag>\n    ),\n  },\n  {\n    colKey: 'channel',\n    title: '签署方式',\n    width: '120',\n  },\n  {\n    colKey: 'detail.email',\n    title: '邮箱地址',\n    ellipsis: true,\n  },\n  {\n    colKey: 'createTime',\n    title: '申请时间',\n  },\n];\nconst initData = [];\nfor (let i = 0; i < 5; i++) {\n  initData.push({\n    index: i + 1,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    detail: {\n      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    },\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  });\n}\nexport default function TableDragSort() {\n  const [data] = useState(initData);\n  const [columns, setColumns] = useState(initialColumns);\n\n  // { currentIndex, targetIndex, current, target, data, newData, e, sort }\n  const onDragSort = (params) => {\n    console.log('交换行', params);\n    // 数据受控实现\n    if (params.sort === 'col') {\n      setColumns(params.newData);\n    }\n  };\n\n  // 拖拽排序涉及到 data 的变更，相对比较慎重，因此仅支持受控用法\n  return <Table rowKey=\"index\" data={data} columns={columns} dragSort=\"col\" onDragSort={onDragSort} lazyLoad />;\n}\n",
        "desc": "【持续完善中】调整列顺序。设置参数  即可。列拖拽排序场景中，必须指定列唯一标识 。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Table, Button, Space, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nexport default function TableLazy() {\n  const columns = [\n    {\n      colKey: 'applicant',\n      title: '申请人',\n      width: '100',\n    },\n    {\n      colKey: 'status',\n      title: '申请状态',\n      width: '150',\n      cell: ({ rowIndex }) => {\n        const status = rowIndex % 3;\n        return (\n          <Tag\n            shape=\"round\"\n            theme={statusNameListMap[status].theme}\n            variant=\"light-outline\"\n            icon={statusNameListMap[status].icon}\n          >\n            {statusNameListMap[status].label}\n          </Tag>\n        );\n      },\n    },\n    {\n      colKey: 'matters',\n      title: '申请事项',\n      width: '140',\n    },\n    {\n      colKey: 'detail.email',\n      title: '邮箱地址',\n    },\n    {\n      colKey: 'createTime',\n      title: '申请时间',\n    },\n  ];\n\n  // 本地数据排序，表示组件内部会对参数 data 进行数据排序。如果 data 数据为 10 条，就仅对这 10 条数据进行排序。\n  const initialData = [];\n  for (let i = 0; i < 10; i++) {\n    initialData.push({\n      id: i + 1,\n      applicant: ['贾明', '张三', '王芳'][i % 3],\n      channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n      detail: {\n        email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n      },\n      matters: ['部分宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n      time: [2, 3, 1, 4][i % 4],\n      createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n    });\n  }\n  const times = Array.from(new Array(1000), () => ''); // 测试共计1k条数据\n  const testData = [];\n  times.forEach((item, i) => {\n    const k = i % 10;\n    testData[i] = {\n      ...initialData[k],\n      id: i + 1,\n    };\n  });\n  const [data, setData] = useState([...testData]);\n  const reset = () => {\n    setData([]);\n    setTimeout(() => {\n      setData(testData);\n    });\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Button\n        theme=\"default\"\n        style={{\n          marginTop: '10px',\n        }}\n        onClick={reset}\n      >\n        列表恢复初始状态\n      </Button>\n      <Table\n        rowKey=\"id\"\n        columns={columns}\n        data={data}\n        height={300}\n        scroll={{\n          type: 'lazy',\n          bufferSize: 10,\n        }}\n        bordered\n      />\n    </Space>\n  );\n}\n",
        "desc": "懒加载一般用于数据量较大的场景，设置  即可开启懒加载模式，通过  预设加载过程中提前加载的数据数量。"
      },
      {
        "code": "import React, { useRef, useState } from 'react';\nimport { Table, Space, Button, Checkbox, Tag } from 'tdesign-react';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nfunction getTableData() {\n  const initialData = [];\n  for (let i = 0; i < 10; i++) {\n    initialData.push({\n      id: i + 1,\n      applicant: ['贾明', '张三', '王芳'][i % 3],\n      channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n      detail: {\n        email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n      },\n      matters: ['部分宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n      time: [2, 3, 1, 4][i % 4],\n      createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n    });\n  }\n  const times = Array.from(new Array(1000), () => '');\n  const testData = [];\n  times.forEach((item, i) => {\n    const k = i % 10;\n    testData[i] = {\n      ...initialData[k],\n      id: i + 1,\n    };\n  });\n  return testData;\n}\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\n\n/**\n * Start Here\n */\nconst TableVirtualScroll = () => {\n  const tableRef = useRef(null);\n  const [bordered, setBordered] = useState(true);\n  const [data] = useState([...getTableData()]);\n  const scrollToElement = () => {\n    tableRef.current.scrollToElement({\n      // 跳转元素下标（第 256 个元素位置）\n      index: 255,\n      // 滚动元素距离顶部的距离（如表头高度）\n      top: 47,\n      // 高度动态变化场景下，即 isFixedRowHeight = false。延迟设置元素位置，一般用于依赖不同高度异步渲染等场景，单位：毫秒。（固定高度不需要这个）\n      time: 60,\n    });\n  };\n  const columns = [\n    {\n      colKey: 'serial-number',\n      width: 70,\n      title: '序号',\n    },\n    {\n      colKey: 'applicant',\n      title: '申请人',\n      width: '100',\n    },\n    {\n      colKey: 'status',\n      title: '申请状态',\n      width: '150',\n      cell: ({ rowIndex }) => {\n        const status = rowIndex % 3;\n        return (\n          <Tag\n            shape=\"round\"\n            theme={statusNameListMap[status].theme}\n            variant=\"light-outline\"\n            icon={statusNameListMap[status].icon}\n          >\n            {statusNameListMap[status].label}\n          </Tag>\n        );\n      },\n    },\n    {\n      colKey: 'matters',\n      title: '申请事项',\n      width: '140',\n    },\n    {\n      colKey: 'detail.email',\n      title: '邮箱地址',\n    },\n    {\n      colKey: 'createTime',\n      title: '申请时间',\n    },\n  ];\n  const height = 300;\n  // const [height, setHeight] = useState(300);\n\n  // const setLowerHeight = () => {\n  //   setHeight(150);\n  // };\n\n  // const setHigherHeight = () => {\n  //   setHeight(600);\n  // };\n\n  return (\n    <Space direction=\"vertical\">\n      <Space align=\"center\">\n        <Button onClick={scrollToElement}>滚动到指定元素</Button>\n        <Checkbox checked={bordered} onChange={setBordered}>\n          是否显示边框\n        </Checkbox>\n        {/* 高度变化代码保留；用于测试 Table 高度变化时，是否表现正常 */}\n        {/* <Button onClick={setLowerHeight}>Lower Height</Button> */}\n        {/* <Button onClick={setHigherHeight}>Higher Height</Button> */}\n      </Space>\n\n      <Table\n        ref={tableRef}\n        rowKey=\"id\"\n        data={data}\n        columns={columns}\n        bordered={bordered}\n        height={height}\n        scroll={{\n          type: 'virtual',\n          rowHeight: 48,\n          bufferSize: 10,\n        }}\n        lazyLoad\n      ></Table>\n    </Space>\n  );\n};\nTableVirtualScroll.displayName = 'TableVirtualScroll';\nexport default TableVirtualScroll;\n",
        "desc": "虚拟滚动一般用于超大数据渲染的场景，以提供更优的前端性能表现，设置  即可开启虚拟滚动模式。为保证组件收益最大化，当数据量小于  时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动， 默认为 。"
      },
      {
        "code": "import React, { useState, useMemo } from 'react';\nimport { Table, Input, Select, DatePicker, MessagePlugin } from 'tdesign-react';\nimport dayjs from 'dayjs';\n\nexport default function EditableCellTable() {\n  const initData = new Array(5).fill(null).map((_, i) => ({\n    key: String(i + 1),\n    firstName: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    email: [\n      'espinke0@apache.org',\n      'gpurves1@issuu.com',\n      'hkment2@nsw.gov.au',\n      'lskures3@apache.org',\n      'zcroson5@virginia.edu',\n    ][i % 4],\n    letters: [\n      ['宣传物料制作费用'],\n      ['宣传物料制作费用'],\n      ['宣传物料制作费用'],\n      ['宣传物料制作费用', 'algolia 服务报销'],\n    ][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n  }));\n  const STATUS_OPTIONS = [\n    {\n      label: '审批通过',\n      value: 0,\n    },\n    {\n      label: '审批过期',\n      value: 1,\n    },\n    {\n      label: '审批失败',\n      value: 2,\n    },\n  ];\n  const [data, setData] = useState([...initData]);\n  const [relationSelect, setRelationSelect] = useState({});\n  const editableCellState = (cellParams) =>\n    // 第一行不允许编辑\n    // return cellParams.status !== 2;\n    cellParams.rowIndex !== 2;\n  const columns = useMemo(\n    () => [\n      {\n        title: '申请人',\n        colKey: 'firstName',\n        align: 'left',\n        // 编辑状态相关配置，全部集中在 edit\n        edit: {\n          // 1. 支持任意组件。需保证组件包含 `value` 和 `onChange` 两个属性，且 onChange 的第一个参数值为 new value。\n          // 2. 如果希望支持校验，组件还需包含 `status` 和 `tips` 属性。具体 API 含义参考 Input 组件\n          component: Input,\n          // props, 透传全部属性到 Input 组件\n          props: {\n            clearable: true,\n            autofocus: true,\n          },\n          // 触发校验的时机（when to validate)\n          validateTrigger: 'change',\n          // 透传给 component: Input 的事件（也可以在 edit.props 中添加）\n          on: (editContext) => ({\n            onBlur: () => {\n              console.log('失去焦点', editContext);\n            },\n            onEnter: (ctx) => {\n              ctx?.e?.preventDefault();\n              console.log('onEnter', ctx);\n            },\n          }),\n          // 除了点击非自身元素退出编辑态之外，还有哪些事件退出编辑态\n          abortEditOnEvent: ['onEnter'],\n          // 编辑完成，退出编辑态后触发\n          onEdited: (context) => {\n            data.splice(context.rowIndex, 1, context.newRowData);\n            setData([...data]);\n            console.log('Edit firstName:', context);\n            MessagePlugin.success('Success');\n          },\n          // 校验规则，此处同 Form 表单\n          rules: [\n            {\n              required: true,\n              message: '不能为空',\n            },\n            {\n              max: 10,\n              message: '字符数量不能超过 10',\n              type: 'warning',\n            },\n          ],\n        },\n        // 默认是否为编辑状态\n        defaultEditable: true,\n      },\n      {\n        title: '申请状态',\n        colKey: 'status',\n        cell: ({ row }) => STATUS_OPTIONS.find((t) => t.value === row.status)?.label,\n        edit: {\n          component: Select,\n          // props, 透传全部属性到 Select 组件\n          props: {\n            clearable: true,\n            options: STATUS_OPTIONS,\n          },\n          // 除了点击非自身元素退出编辑态之外，还有哪些事件退出编辑态\n          // abortEditOnEvent: ['onChange'],\n          // 编辑完成，退出编辑态后触发\n          onEdited: (context) => {\n            data.splice(context.rowIndex, 1, context.newRowData);\n            setData([...data]);\n            console.log('Edit Framework:', context);\n            MessagePlugin.success('Success');\n            // 记录编辑结果\n            const { newRowData } = context;\n            setRelationSelect({\n              ...relationSelect,\n              [newRowData.key]: newRowData.framework,\n            });\n          },\n        },\n      },\n      {\n        title: '申请事项',\n        colKey: 'letters',\n        cell: ({ row }) => row?.letters?.join('、'),\n        width: 280,\n        edit: {\n          keepEditMode: true,\n          component: Select,\n          // props, 透传全部属性到 Select 组件\n          // props 为函数时，参数有：col, row, rowIndex, colIndex, editedRow。一般用于实现编辑组件之间的联动\n          props: ({ editedRow }) => ({\n            multiple: true,\n            minCollapsedNum: 1,\n            options: [\n              {\n                label: '宣传物料制作费用',\n                value: '宣传物料制作费用',\n              },\n              {\n                label: 'algolia 服务报销',\n                value: 'algolia 服务报销',\n              },\n              // 如果状态选择了 已过期，则 Letters 隐藏 G 和 H\n              {\n                label: '相关周边制作费',\n                value: '相关周边制作费',\n                show: () => editedRow.status !== 0,\n              },\n              {\n                label: '激励奖品快递费',\n                value: '激励奖品快递费',\n                show: () => editedRow.status !== 0,\n              },\n            ].filter((t) => (t.show === undefined ? true : t.show())),\n          }),\n          // abortEditOnEvent: ['onChange'],\n          onEdited: (context) => {\n            data.splice(context.rowIndex, 1, context.newRowData);\n            setData([...data]);\n            console.log('Edit Letters:', context);\n            MessagePlugin.success('Success');\n          },\n          rules: [\n            {\n              validator: (val) => val.length > 0,\n              message: '至少选择一种',\n            },\n          ],\n        },\n      },\n      {\n        title: '创建日期',\n        colKey: 'createTime',\n        // props, 透传全部属性到 DatePicker 组件\n        edit: {\n          component: DatePicker,\n          props: {\n            mode: 'date',\n          },\n          // 除了点击非自身元素退出编辑态之外，还有哪些事件退出编辑态\n          abortEditOnEvent: ['onChange'],\n          onEdited: (context) => {\n            data.splice(context.rowIndex, 1, context.newRowData);\n            setData([...data]);\n            console.log('Edit Date:', context);\n            MessagePlugin.success('Success');\n          },\n          // 校验规则，此处同 Form 表单\n          rules: () => [\n            {\n              validator: (val) => dayjs(val).isAfter(dayjs()),\n              message: '只能选择今天以后日期',\n            },\n          ],\n        },\n      },\n    ],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [data, relationSelect],\n  );\n\n  // 当前示例包含：输入框、单选、多选、日期 等场景\n  return <Table rowKey=\"key\" columns={columns} data={data} editableCellState={editableCellState} bordered lazyLoad />;\n}\n",
        "desc": "表示进行编辑的组件，示例：Input、Select、DatePicker。需保证组件包含  和  两个属性。如果还需要支持校验规则，则组件还需实现  和  两个 API，实现规则可参考  组件。 表示传给编辑组件  的参数。 表示编辑完成后，退出编辑模式时触发。 指校验规则，和表单的校验规则配置一样 。 表示除了点击非自身元素退出编辑态之外，还有哪些事件退出编辑态。如：单选框值变化事件 ，一般情况无需配置。 默认状态是否为编辑态。 表格全局属性，用于控制单元格是否允许编辑。返回值为  则表示可编辑；返回值为  则表示不可编辑，只读状态"
      },
      {
        "code": "import React, { useState, useMemo, useRef, useEffect } from 'react';\nimport { Table, Input, Radio, Select, DatePicker, MessagePlugin, Button, Link } from 'tdesign-react';\nimport dayjs from 'dayjs';\n\nconst classStyles = `\n<style>\n.t-table-demo__editable-row .table-operations > .t-link {\n  padding: 0 8px;\n  line-height: 22px;\n  height: 22px;\n}\n.t-table-demo__editable-row .t-demo-col__datepicker .t-date-picker {\n  width: 120px;\n}\n</style>\n`;\nconst initData = new Array(5).fill(null).map((_, i) => ({\n  key: String(i + 1),\n  firstName: ['贾明', '张三', '王芳'][i % 3],\n  status: i % 3,\n  email: [\n    'espinke0@apache.org',\n    'gpurves1@issuu.com',\n    'hkment2@nsw.gov.au',\n    'lskures3@apache.org',\n    'zcroson5@virginia.edu',\n  ][i % 4],\n  letters: [\n    ['激励奖品快递费'],\n    ['相关周边制作费', '激励奖品快递费'],\n    ['相关周边制作费'],\n    ['激励奖品快递费', '相关周边制作费'],\n  ][i % 4],\n  createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n}));\nconst STATUS_OPTIONS = [\n  {\n    label: '审批通过',\n    value: 0,\n  },\n  {\n    label: '审批过期',\n    value: 1,\n  },\n  {\n    label: '审批失败',\n    value: 2,\n  },\n];\nexport default function EditableRowTable() {\n  const tableRef = useRef(null);\n  const [data, setData] = useState([...initData]);\n  const [editableRowKeys, setEditableRowKeys] = useState(['1']);\n  let currentSaveId = '';\n  // 保存变化过的行信息\n  const editMap = {};\n  const [openCheckAll, setOpenCheckAll] = useState(false);\n  const onEdit = (e) => {\n    const { id } = e.currentTarget.dataset;\n    // 如果rowKey本身是number类型，在这里进行number转换,保证功能正常\n    // id = Number(id);\n    if (!editableRowKeys.includes(id)) {\n      setEditableRowKeys(editableRowKeys.concat(id));\n    }\n  };\n\n  // 更新 editableRowKeys\n  const updateEditState = (id) => {\n    const index = editableRowKeys.findIndex((t) => t === id);\n    editableRowKeys.splice(index, 1);\n    setEditableRowKeys([...editableRowKeys]);\n  };\n  const onCancel = (e) => {\n    const { id } = e.currentTarget.dataset;\n    // 如果rowKey本身是number类型，在这里进行number转换,保证功能正常\n    // id = Number(id);\n    updateEditState(id);\n    tableRef.current.clearValidateData();\n  };\n  const onSave = (e) => {\n    const { id } = e.currentTarget.dataset;\n    // 如果rowKey本身是number类型，在这里进行number转换,保证功能正常\n    // id = Number(id);\n    currentSaveId = id;\n    // 触发内部校验，可异步接收校验结果，也可在 onRowValidate 中接收异步校验结果\n    tableRef.current.validateRowData(id).then((params) => {\n      console.log('Promise Row Validate:', params);\n      if (params.result.length) {\n        const r = params.result[0];\n        MessagePlugin.error(`${r.col.title} ${r.errorList[0].message}`);\n        return;\n      }\n      // 如果是 table 的父组件主动触发校验\n      if (params.trigger === 'parent' && !params.result.length) {\n        const current = editMap[currentSaveId];\n        // 单行数据校验：校验通过再保存数据\n        if (current) {\n          data.splice(current.rowIndex, 1, current.editedRow);\n          setData([...data]);\n          MessagePlugin.success('保存成功');\n        }\n        updateEditState(currentSaveId);\n      }\n    });\n  };\n  const onRowValidate = (params) => {\n    console.log('Event Row Validate:', params);\n  };\n\n  // 行数据编辑时触发，返回最新输入结果\n  const onRowEdit = (params) => {\n    const { row, rowIndex, col, value } = params;\n    const oldRowData = editMap[row.key]?.editedRow || row;\n    const editedRow = {\n      ...oldRowData,\n      [col.colKey]: value,\n    };\n    editMap[row.key] = {\n      ...params,\n      editedRow,\n    };\n\n    // 以下内容应用于全量数据校验（单独的行校验不需要）\n    if (openCheckAll) {\n      data[rowIndex] = editedRow;\n      setData([...data]);\n    }\n  };\n  function onValidateTableData() {\n    // 执行结束后触发事件 validate\n    tableRef.current.validateTableData().then((params) => {\n      console.log('Promise Table Date Validate:', params);\n      const cellKeys = Object.keys(params.result);\n      const firstError = params.result[cellKeys[0]];\n      if (firstError) {\n        MessagePlugin.warning(firstError[0].message);\n      }\n    });\n  }\n\n  // 表格全量数据校验反馈事件，tableRef.current.validateTableData() 执行结束后触发\n  const onValidate = (params) => {\n    console.log('Event Table Data Validate:', params);\n  };\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  const columns = useMemo(\n    () => [\n      {\n        title: '申请人',\n        colKey: 'firstName',\n        align: 'left',\n        width: 120,\n        // 编辑状态相关配置，全部集中在 edit\n        edit: {\n          // 1. 支持任意组件。需保证组件包含 `value` 和 `onChange` 两个属性，且 onChange 的第一个参数值为 new value。\n          // 2. 如果希望支持校验，组件还需包含 `status` 和 `tips` 属性。具体 API 含义参考 Input 组件\n          component: Input,\n          // props, 透传全部属性到 Input 组件\n          props: {\n            clearable: true,\n            autofocus: true,\n            autoWidth: true,\n          },\n          // 校验规则，此处同 Form 表单\n          rules: [\n            {\n              required: true,\n              message: '不能为空',\n            },\n            {\n              max: 10,\n              message: '字符数量不能超过 10',\n              type: 'warning',\n            },\n          ],\n          showEditIcon: false,\n        },\n      },\n      {\n        title: '申请状态',\n        colKey: 'status',\n        cell: ({ row }) => STATUS_OPTIONS.find((t) => t.value === row.status)?.label,\n        width: 150,\n        edit: {\n          component: Select,\n          // props, 透传全部属性到 Select 组件\n          props: {\n            clearable: true,\n            autoWidth: true,\n            options: STATUS_OPTIONS,\n          },\n          showEditIcon: false,\n          // 校验规则，此处同 Form 表单\n          rules: [\n            {\n              required: true,\n              message: '不能为空',\n            },\n          ],\n        },\n      },\n      {\n        title: '申请事项',\n        colKey: 'letters',\n        cell: ({ row }) => row?.letters?.join('、'),\n        width: 200,\n        edit: {\n          component: Select,\n          // props, 透传全部属性到 Select 组件\n          // props 为函数时，参数有：col, row, rowIndex, colIndex, editedRow。一般用于实现编辑组件之间的联动\n          props: ({ editedRow }) => ({\n            multiple: true,\n            minCollapsedNum: 1,\n            autoWidth: true,\n            options: [\n              {\n                label: '宣传物料制作费用',\n                value: '宣传物料制作费用',\n              },\n              {\n                label: 'algolia 服务报销',\n                value: 'algolia 服务报销',\n              },\n              // 如果状态选择了 已过期，则 Letters 隐藏 G 和 H\n              {\n                label: '相关周边制作费',\n                value: '相关周边制作费',\n                show: () => editedRow.status !== 1,\n              },\n              {\n                label: '激励奖品快递费',\n                value: '激励奖品快递费',\n                show: () => editedRow.status !== 1,\n              },\n            ].filter((t) => (t.show === undefined ? true : t.show())),\n          }),\n          showEditIcon: false,\n          // 校验规则，此处同 Form 表单\n          rules: [\n            {\n              validator: (val) => val && val.length < 3,\n              message: '数量不能超过 2 个',\n            },\n          ],\n        },\n      },\n      {\n        title: '创建日期',\n        colKey: 'createTime',\n        width: 150,\n        className: 't-demo-col__datepicker',\n        // props, 透传全部属性到 DatePicker 组件\n        edit: {\n          component: DatePicker,\n          showEditIcon: false,\n          // 校验规则，此处同 Form 表单\n          rules: [\n            {\n              validator: (val) => dayjs(val).isAfter(dayjs()),\n              message: '只能选择今天以后日期',\n            },\n          ],\n        },\n      },\n      {\n        title: '操作栏',\n        colKey: 'operate',\n        cell: ({ row }) => {\n          const editable = editableRowKeys.includes(row.key);\n          return (\n            <div className=\"table-operations\">\n              {!editable && (\n                <Link theme=\"primary\" hover=\"color\" data-id={row.key} onClick={onEdit}>\n                  编辑\n                </Link>\n              )}\n              {editable && (\n                <Link theme=\"primary\" hover=\"color\" data-id={row.key} onClick={onSave}>\n                  保存\n                </Link>\n              )}\n              {editable && (\n                <Link theme=\"primary\" hover=\"color\" data-id={row.key} onClick={onCancel}>\n                  取消\n                </Link>\n              )}\n            </div>\n          );\n        },\n      },\n    ],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [data, editableRowKeys],\n  );\n\n  // 当前示例包含：输入框、单选、多选、日期 等场景\n  return (\n    <div className=\"t-table-demo__editable-row\">\n      <div>\n        <Radio.Group value={openCheckAll} onChange={(val) => setOpenCheckAll(val)}>\n          <Radio.Button value={true}>全量校验</Radio.Button>\n          <Radio.Button value={false}>单行校验</Radio.Button>\n        </Radio.Group>\n      </div>\n      <br />\n      {openCheckAll && (\n        <div>\n          <Button onClick={onValidateTableData}>校验全部</Button>\n        </div>\n      )}\n\n      <br />\n      <Table\n        ref={tableRef}\n        rowKey=\"key\"\n        columns={columns}\n        data={data}\n        editableRowKeys={editableRowKeys}\n        onRowEdit={onRowEdit}\n        onRowValidate={onRowValidate}\n        onValidate={onValidate}\n        table-layout=\"auto\"\n        bordered\n        lazyLoad\n      />\n    </div>\n  );\n}\nEditableRowTable.displayName = 'EditableRowTable';\n",
        "desc": "用于控制处于编辑状态的行。 会在行编辑时触发。实例方法  用于进行表格行数据校验， 在行编辑校验完成时触发。实例方法  用于进行表格全部数据校验， 在全部数据校验完成时触发。"
      },
      {
        "code": "import React, { useState, useRef, useMemo } from 'react';\nimport { EnhancedTable, MessagePlugin, Button, Popconfirm, Checkbox, Space, Loading, Link } from 'tdesign-react';\nimport { ChevronRightIcon, ChevronDownIcon, MoveIcon, AddRectangleIcon, MinusRectangleIcon } from 'tdesign-icons-react';\n\nfunction getObject(i, currentPage) {\n  return {\n    id: i,\n    key: `申请人 ${i}_${currentPage} 号`,\n    platform: i % 2 === 0 ? '电子签署' : '纸质签署',\n    type: ['String', 'Number', 'Array', 'Object'][i % 4],\n    default: ['-', '0', '[]', '{}'][i % 4],\n    detail: {\n      position: `读取 ${i} 个数据的嵌套信息值`,\n    },\n    needed: i % 4 === 0 ? '是' : '否',\n    description: '数据源',\n    list: [],\n  };\n}\nfunction getData(currentPage = 1) {\n  const data = [];\n  const pageInfo = `第 ${currentPage} 页`;\n  for (let i = 0; i < 5; i++) {\n    const obj = getObject(i, currentPage);\n    // 第一行不设置子节点\n    obj.list = new Array(2).fill(null).map((t, j) => {\n      const secondIndex = 100 * j + (i + 1) * 10;\n      const secondObj = {\n        ...obj,\n        id: secondIndex,\n        key: `申请人 ${secondIndex}_${currentPage} 号（${pageInfo}）`,\n      };\n      secondObj.list = new Array(3).fill(null).map((m, n) => {\n        const thirdIndex = secondIndex * 1000 + 100 * m + (n + 1) * 10;\n        return {\n          ...obj,\n          id: thirdIndex,\n          key: `申请人 ${thirdIndex}_${currentPage} 号（${pageInfo}）`,\n          // 子节点懒加载\n          list: true,\n        };\n      });\n      return secondObj;\n    });\n    // 第一行不设置子节点\n    if (i === 0) {\n      obj.list = [];\n    }\n    data.push(obj);\n  }\n  // 懒加载1\n  data.push({\n    ...getObject(66666, currentPage),\n    /** 如果子节点为懒加载，则初始值设置为 true */\n    list: true,\n    key: '申请人懒加载节点 66666，点我体验',\n  });\n  // 懒加载2\n  data.push({\n    ...getObject(88888, currentPage),\n    /** 如果子节点为懒加载，则初始值设置为 true */\n    list: true,\n    key: '申请人懒加载节点 88888，点我体验 ',\n  });\n  return data;\n}\nexport default function TableTree() {\n  const tableRef = useRef(null);\n  const [data, setData] = useState(getData());\n  const [lazyLoadingData, setLazyLoadingData] = useState(null);\n  const [expandAll, setExpandAll] = useState(false);\n  const [customTreeExpandAndFoldIcon, setCustomTreeExpandAndFoldIcon] = useState(false);\n  const [pagination, setPagination] = useState({\n    current: 1,\n    pageSize: 10,\n    total: 100,\n  });\n  const [expandedTreeNodes, setExpandedTreeNodes] = useState([]);\n  const resetData = () => {\n    const data = getData();\n    // 方式一\n    setData(data);\n    setExpandedTreeNodes([]);\n\n    // 方式二\n    // tableRef.current.resetData(data);\n  };\n  const onEditClick = (row) => {\n    const newData = {\n      ...row,\n      platform: '电子签署',\n      type: 'Symbol',\n      default: 'undefined',\n    };\n    tableRef.current.setData(row.key, newData);\n    MessagePlugin.success('数据已更新');\n  };\n  const onDeleteConfirm = (row) => {\n    tableRef.current.remove(row.key);\n    // tableRef.current.removeChildren(row.key);\n    MessagePlugin.success('删除成功');\n  };\n  const onLookUp = (row) => {\n    const allRowData = tableRef.current.getData(row.key);\n    const message = '当前行全部数据，包含节点路径、父节点、子节点、是否展开、是否禁用等';\n    MessagePlugin.success(`打开控制台查看${message}`);\n    console.log(`${message}：`, allRowData);\n  };\n  const appendTo = (row) => {\n    const randomKey1 = Math.round(Math.random() * Math.random() * 1000) + 10000;\n    tableRef.current.appendTo(row.key, {\n      id: randomKey1,\n      key: `申请人 ${randomKey1} 号`,\n      platform: '电子签署',\n      type: 'Number',\n    });\n    MessagePlugin.success(`已插入子节点申请人 ${randomKey1} 号，请展开查看`);\n\n    // 一次性添加多个子节点。示例代码有效，勿删！!!\n    // appendMultipleDataTo(row);\n  };\n  function appendMultipleDataTo(row) {\n    const randomKey1 = Math.round(Math.random() * Math.random() * 1000) + 10000;\n    const randomKey2 = Math.round(Math.random() * Math.random() * 1000) + 10000;\n    const appendList = [\n      {\n        id: randomKey1,\n        key: `申请人 ${randomKey1} 号`,\n        platform: '电子签署',\n        type: 'Number',\n      },\n      {\n        id: randomKey2,\n        key: `申请人 ${randomKey2} 号`,\n        platform: '纸质签署',\n        type: 'Number',\n      },\n    ];\n    tableRef.current.appendTo(row?.key, appendList);\n    MessagePlugin.success(`已插入子节点申请人 ${randomKey1} 和 ${randomKey2} 号，请展开查看`);\n  }\n\n  // 当前节点之前，新增兄弟节前\n  const insertBefore = (row) => {\n    const randomKey = Math.round(Math.random() * Math.random() * 1000) + 10000;\n    tableRef.current.insertBefore(row.key, {\n      id: randomKey,\n      key: `申请人 ${randomKey} 号`,\n      platform: '纸质签署',\n      type: 'Number',\n    });\n    MessagePlugin.success(`已插入子节点申请人 ${randomKey} 号，请展开查看`);\n  };\n\n  // 当前节点之后，新增兄弟节前\n  const insertAfter = (row) => {\n    const randomKey = Math.round(Math.random() * Math.random() * 1000) + 10000;\n    tableRef.current.insertAfter(row.key, {\n      id: randomKey,\n      key: `申请人 ${randomKey} 号`,\n      platform: '纸质签署',\n      type: 'Number',\n    });\n    MessagePlugin.success(`已插入子节点申请人 ${randomKey} 号，请展开查看`);\n  };\n  const columns = [\n    // 实验中\n    {\n      // 列拖拽排序必要参数\n      colKey: 'drag',\n      title: '排序',\n      cell: () => <MoveIcon />,\n      width: 46,\n      align: 'center',\n    },\n    {\n      colKey: 'id',\n      title: '编号',\n      ellipsis: true,\n      width: 80,\n    },\n    {\n      width: 180,\n      colKey: 'key',\n      title: '名称',\n      ellipsis: true,\n    },\n    {\n      colKey: 'platform',\n      title: '签署方式',\n      width: 100,\n    },\n    {\n      colKey: 'operate',\n      width: 340,\n      title: '操作',\n      align: 'center',\n      // 增、删、改、查 等操作\n      cell: ({ row }) => (\n        <div className=\"tdesign-table-demo__table-operations\">\n          <Link\n            hover=\"color\"\n            style={{\n              padding: '0 8px',\n            }}\n            onClick={() => appendTo(row)}\n          >\n            插入\n          </Link>\n          <Link\n            hover=\"color\"\n            style={{\n              padding: '0 8px',\n            }}\n            onClick={() => insertBefore(row)}\n          >\n            前插\n          </Link>\n          <Link\n            hover=\"color\"\n            style={{\n              padding: '0 8px',\n            }}\n            onClick={() => insertAfter(row)}\n          >\n            后插\n          </Link>\n          <Link\n            hover=\"color\"\n            style={{\n              padding: '0 8px',\n            }}\n            onClick={() => onEditClick(row)}\n          >\n            更新\n          </Link>\n          <Link\n            hover=\"color\"\n            style={{\n              padding: '0 8px',\n            }}\n            onClick={() => onLookUp(row)}\n          >\n            查看\n          </Link>\n          <Popconfirm content=\"确认删除吗\" onConfirm={() => onDeleteConfirm(row)}>\n            <Link\n              hover=\"color\"\n              style={{\n                padding: '0 8px',\n              }}\n            >\n              删除\n            </Link>\n          </Popconfirm>\n        </div>\n      ),\n    },\n  ];\n  const onRowToggle = () => {\n    const rowIds = ['申请人 1_1 号', '申请人 2_1 号', '申请人 3_1 号', '申请人 4_1 号'];\n    rowIds.forEach((id) => {\n      // getData 参数为行唯一标识，lodash.get(row, rowKey)\n      const rowData = tableRef.current.getData(id);\n      tableRef.current.toggleExpandData(rowData);\n      // 或者\n      // tableRef.current.toggleExpandData({ rowIndex: rowData.rowIndex, row: rowData.row });\n    });\n  };\n  const appendToRoot = () => {\n    const key = Math.round(Math.random() * 10010);\n    tableRef.current.appendTo('', {\n      id: key,\n      key: `申请人 ${key}_${1} 号`,\n      platform: key % 2 === 0 ? '电子签署' : '纸质签署',\n      type: ['String', 'Number', 'Array', 'Object'][key % 4],\n      default: ['-', '0', '[]', '{}'][key % 4],\n      detail: {\n        position: `读取 ${key} 个数据的嵌套信息值`,\n      },\n      needed: key % 4 === 0 ? '是' : '否',\n      description: '数据源',\n    });\n\n    // 同时添加多个元素，示例代码有效勿删\n    // appendMultipleDataTo();\n  };\n  const onExpandAllToggle = () => {\n    setExpandAll(!expandAll);\n    !expandAll ? tableRef.current.expandAll() : tableRef.current.foldAll();\n  };\n  const getTreeNode = () => {\n    // 查看树形结构平铺数据\n    // tableRef.current.dataSource\n    const treeData = tableRef.current.getTreeNode();\n    console.log(treeData);\n    MessagePlugin.success('树形结构获取成功，请打开控制台查看');\n  };\n  const renderTreeExpandAndFoldIcon = ({ type, row }) => {\n    if (lazyLoadingData?.key === row?.key) {\n      return <Loading size=\"14px\" />;\n    }\n    return type === 'expand' ? <ChevronRightIcon /> : <ChevronDownIcon />;\n  };\n  const onPageChange = (pageInfo) => {\n    setPagination({\n      ...pagination,\n      ...pageInfo,\n    });\n    setData(getData(pageInfo.current));\n  };\n\n  // 懒加载图标渲染\n  function lazyLoadingTreeIconRender(params) {\n    const { type, row } = params;\n    if (lazyLoadingData?.key === row?.key) {\n      return <Loading size=\"14px\" />;\n    }\n    return type === 'expand' ? <AddRectangleIcon /> : <MinusRectangleIcon />;\n  }\n  const treeExpandIconRender = useMemo(() => {\n    // 自定义展开图标\n    if (customTreeExpandAndFoldIcon) {\n      return renderTreeExpandAndFoldIcon;\n    }\n    return lazyLoadingTreeIconRender;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [lazyLoadingData, customTreeExpandAndFoldIcon]);\n  const onTreeExpandChange = (context) => {\n    console.log(context.rowState.expanded ? '展开' : '收起', context);\n    /**\n     * 如果是懒加载，请确认自己完成了以下几个步骤\n     * 1. 提前设置 children 值为 true；\n     * 2. 在 onTreeExpandChange 事件中处理异步数据；\n     * 3. 自定义展开图标渲染 lazyLoadingTreeIconRender\n     */\n    if (context.row.list === true) {\n      setLazyLoadingData(context.row);\n      const timer = setTimeout(() => {\n        appendMultipleDataTo(context.row);\n        setLazyLoadingData(null);\n        clearTimeout(timer);\n      }, 200);\n    }\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Button onClick={appendToRoot}>添加根节点</Button>\n        <Button\n          theme=\"default\"\n          style={{\n            marginLeft: '16px',\n          }}\n          onClick={resetData}\n        >\n          重置/更新数据\n        </Button>\n        <Button\n          theme=\"default\"\n          style={{\n            marginLeft: '16px',\n          }}\n          onClick={onRowToggle}\n        >\n          展开/收起可见行\n        </Button>\n        <Button\n          theme=\"default\"\n          style={{\n            marginLeft: '16px',\n          }}\n          onClick={onExpandAllToggle}\n        >\n          {expandAll ? '收起全部' : '展开全部'}\n        </Button>\n        <Button\n          theme=\"default\"\n          style={{\n            marginLeft: '16px',\n          }}\n          onClick={getTreeNode}\n        >\n          获取全部树形结构\n        </Button>\n      </Space>\n      <Checkbox\n        checked={customTreeExpandAndFoldIcon}\n        onChange={setCustomTreeExpandAndFoldIcon}\n        style={{\n          verticalAlign: 'middle',\n        }}\n      >\n        自定义折叠/展开图标\n      </Checkbox>\n      {/* <!-- !!! 树形结构 EnhancedTable 才支持，普通 Table 不支持 !!! --> */}\n      {/* treeNodeColumnIndex 定义第几列作为树结点展开列，默认为第一列 --> */}\n      {/* defaultExpandAll 默认展开全部，也可通过实例方法 tableRef.current.expandAll() 自由控制展开或收起 */}\n      {/* expandedTreeNodes + onExpandedTreeNodesChange 用于自由控制展开行，非必须 */}\n      <EnhancedTable\n        ref={tableRef}\n        rowKey=\"key\"\n        data={data}\n        columns={columns}\n        tree={{\n          childrenKey: 'list',\n          treeNodeColumnIndex: 2 /** , defaultExpandAll: true */,\n        }}\n        expandedTreeNodes={expandedTreeNodes}\n        onExpandedTreeNodesChange={setExpandedTreeNodes}\n        dragSort=\"row-handler\"\n        treeExpandAndFoldIcon={treeExpandIconRender}\n        pagination={pagination}\n        onPageChange={onPageChange}\n        onTreeExpandChange={onTreeExpandChange}\n        lazyLoad\n      ></EnhancedTable>\n\n      {/* <!-- 第二列展开树结点，缩进为 12px，示例代码有效，勿删 -->\n       <!-- indent 定义缩进距离 -->\n       <!-- 如果子结点字段不是 'children'，可以使用 childrenKey 定义字段别名，如 `:tree=\"{ childrenKey: 'list' }\"` --> */}\n      {/* <EnhancedTable\n        ref={tableRef}\n        rowKey=\"key\"\n        data={data}\n        columns={columns}\n        tree={{ indent: 12, treeNodeColumnIndex: 1, childrenKey: 'list', defaultExpandAll: true }}\n       ></EnhancedTable> */}\n    </Space>\n  );\n}\n",
        "desc": "树形结构显示"
      },
      {
        "code": "import React, { useState, useEffect, useRef } from 'react';\nimport { EnhancedTable, Radio, Space, Button, MessagePlugin, Tag } from 'tdesign-react';\nimport { cloneDeep } from 'lodash-es';\nimport { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nconst statusNameListMap = {\n  0: {\n    label: '审批通过',\n    theme: 'success',\n    icon: <CheckCircleFilledIcon />,\n  },\n  1: {\n    label: '审批失败',\n    theme: 'danger',\n    icon: <CloseCircleFilledIcon />,\n  },\n  2: {\n    label: '审批过期',\n    theme: 'warning',\n    icon: <ErrorCircleFilledIcon />,\n  },\n};\nconst CHILDREN_KEY = 'childrenList';\nconst initData = [];\nfor (let i = 0; i < 500; i++) {\n  const obj = {\n    key: `first_level_${i}`,\n    applicant: ['贾明', '张三', '王芳'][i % 3],\n    status: i % 3,\n    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],\n    email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],\n    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],\n    time: [2, 3, 1, 4][i % 4],\n    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],\n    childrenList: [],\n  };\n  obj.childrenList = new Array(5).fill(null).map((t, j) => {\n    const secondIndex = 100 * j + (i + 1) * 10;\n    const secondObj = {\n      ...obj,\n      status: secondIndex % 3,\n      key: `second_level_${secondIndex}`,\n      applicant: ['贾明', '张三', '王芳'][secondIndex % 3],\n    };\n    secondObj.childrenList = new Array(3).fill(null).map((m, n) => {\n      const thirdIndex = secondIndex * 1000 + 100 * m + (n + 1) * 10;\n      return {\n        ...obj,\n        status: thirdIndex % 3,\n        key: `third_level_${thirdIndex}`,\n        applicant: ['贾明', '张三', '王芳'][thirdIndex % 3],\n      };\n    });\n    return secondObj;\n  });\n  initData.push(obj);\n}\nconst columns = [\n  {\n    colKey: 'row-select',\n    type: 'multiple',\n    // 禁用行选中方式一：使用 disabled 禁用行（示例代码有效，勿删）。disabled 参数：{row: RowData; rowIndex: number })\n    // 这种方式禁用行选中，当前行会添加行类名 t-table__row--disabled，禁用行文字变灰\n    // disabled: ({ rowIndex }) => rowIndex === 1 || rowIndex === 3,\n\n    // 禁用行选中方式二：使用 checkProps 禁用行（示例代码有效，勿删）\n    // 这种方式禁用行选中，行文本不会变灰\n    checkProps: ({ row }) => ({\n      disabled: !row.childrenList && row.status !== 0,\n    }),\n    // 自由调整宽度，如果发现元素看不见，请加大宽度\n    width: 50,\n  },\n  {\n    colKey: 'serial-number',\n    title: '序号',\n  },\n  {\n    colKey: 'applicant',\n    title: '申请人',\n  },\n  {\n    colKey: 'status',\n    title: '状态',\n    cell: ({ row }) => (\n      <Tag\n        shape=\"round\"\n        theme={statusNameListMap[row.status].theme}\n        variant=\"light-outline\"\n        icon={statusNameListMap[row.status].icon}\n      >\n        {statusNameListMap[row.status].label}\n      </Tag>\n    ),\n  },\n  {\n    colKey: 'matters',\n    title: '申请事项',\n  },\n  // { colKey: 'email', title: '邮箱地址' },\n];\nconst defaultSelectedRowKeys = [];\nexport default function TableSingleSort() {\n  const [data, setData] = useState([...initData]);\n  const [selectedRowKeys, setSelectedRowKeys] = useState(defaultSelectedRowKeys);\n  const [checkStrictly, setCheckStrictly] = useState(false);\n  const [expandedRowKeys, setExpandedRowKeys] = useState([]);\n  const treeTableRef = useRef(null);\n  useEffect(() => {\n    // 包含 treeDataMap 及各类树形操作方法\n    console.log(treeTableRef.current);\n  }, []);\n  useEffect(\n    () => {\n      setSelectedRowKeys(defaultSelectedRowKeys);\n      setData(cloneDeep(data));\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [checkStrictly],\n  );\n\n  // 可使用 treeTableRef.current.treeDataMap 判断是否为叶子结点，或任意结点的层级\n  const onSelectChange = (value, selectOptions) => {\n    console.log('onSelectChange', value, selectOptions);\n    setSelectedRowKeys(value);\n  };\n  const onExpandChange = (val) => {\n    setExpandedRowKeys(val);\n  };\n  const getTreeExpandedRow = () => {\n    const treeExpandedRowKeys = treeTableRef.current.getTreeExpandedRow('unique');\n    console.log('行唯一标识值：', treeExpandedRowKeys);\n    const treeExpandedRow = treeTableRef.current.getTreeExpandedRow('data');\n    console.log('行数据：', treeExpandedRow);\n    const treeExpandedRowState = treeTableRef.current.getTreeExpandedRow('all');\n    console.log('全部行信息：', treeExpandedRowState);\n    MessagePlugin.success('获取成功，请打开控制台查看');\n  };\n  const onRowClick = (data) => {\n    console.log(data);\n  };\n  const scrollToElement = () => {\n    const treeNodeData = treeTableRef.current.getData('first_level_150');\n    console.log(treeNodeData);\n    // 因为可能会存在前面的元素节点展开，或行展开，故而下标跟序号不一定一样，不一定是 150\n    treeTableRef.current.scrollToElement({\n      // 跳转元素下标（第 151 个元素位置，下标/序号不一定是 150）\n      index: treeNodeData.rowIndex - selectedRowKeys.length,\n      // 滚动元素距离顶部的距离（如表头高度）\n      top: 47,\n      // 高度动态变化场景下，即 isFixedRowHeight = false。延迟设置元素位置，一般用于依赖不同高度异步渲染等场景，单位：毫秒。（固定高度不需要这个）\n      time: 60,\n    });\n  };\n\n  // 树节点展开，受控示例\n  // const [expandedTreeNodes, setExpandedTreeNodes] = useState(['first_level_0']);\n\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Radio.Group value={checkStrictly} onChange={(val) => setCheckStrictly(val)} variant=\"default-filled\">\n          <Radio.Button value={true}>父子行选中独立</Radio.Button>\n          <Radio.Button value={false}>父子行选中关联</Radio.Button>\n        </Radio.Group>\n        <Button onClick={getTreeExpandedRow}>获取树形结构展开的节点</Button>\n        <Button onClick={scrollToElement}>滚动到指定元素</Button>\n      </Space>\n\n      <EnhancedTable\n        ref={treeTableRef}\n        rowKey=\"key\"\n        data={data}\n        columns={columns}\n        // indeterminateSelectedRowKeys={[1]}\n        selectedRowKeys={selectedRowKeys}\n        onSelectChange={onSelectChange}\n        tree={{\n          checkStrictly,\n          childrenKey: CHILDREN_KEY,\n          treeNodeColumnIndex: 2,\n          expandTreeNodeOnClick: true,\n        }}\n        height={300}\n        scroll={{\n          type: 'virtual',\n        }}\n        expandedRow={({ row }) => <div>这是展开项数据，我是 {row.key} 号</div>}\n        expandedRowKeys={expandedRowKeys}\n        onExpandChange={onExpandChange}\n        onRowClick={onRowClick}\n        lazyLoad\n        // expandedTreeNodes={expandedTreeNodes}\n        // onExpandedTreeNodesChange={setExpandedTreeNodes}\n      />\n    </Space>\n  );\n}\n",
        "desc": "树形结构行选中"
      }
    ]
  },
  {
    "name": "<Tag/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Space, Tag } from 'tdesign-react';\n\nexport default function ThemeTagExample() {\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Tag>标签一</Tag>\n        <a href=\"https://www.tencent.com/zh-cn\" target=\"_blank\" rel=\"noreferrer\">\n          <Tag>超链接</Tag>\n        </a>\n      </Space>\n      <Space>\n        <Tag theme=\"primary\">标签一</Tag>\n        <Tag theme=\"warning\">标签二</Tag>\n        <Tag theme=\"danger\" variant=\"dark\">\n          标签三\n        </Tag>\n        <Tag theme=\"success\" variant=\"dark\">\n          标签四\n        </Tag>\n      </Space>\n\n      <Space>\n        <Tag variant=\"light\">灰标签</Tag>\n        <Tag theme=\"primary\" variant=\"light\">\n          标签一\n        </Tag>\n        <Tag theme=\"warning\" variant=\"light\">\n          标签二\n        </Tag>\n        <Tag theme=\"danger\" variant=\"light\">\n          标签三\n        </Tag>\n        <Tag theme=\"success\" variant=\"light\">\n          标签四\n        </Tag>\n      </Space>\n\n      <Space>\n        {/* Do not delete the grey tag from demo, it's very useful */}\n        <Tag variant=\"outline\">灰标签</Tag>\n        <Tag theme=\"primary\" variant=\"outline\">\n          标签一\n        </Tag>\n        <Tag theme=\"warning\" variant=\"outline\">\n          标签二\n        </Tag>\n        <Tag theme=\"danger\" variant=\"outline\">\n          标签三\n        </Tag>\n        <Tag theme=\"success\" variant=\"outline\">\n          标签四\n        </Tag>\n      </Space>\n\n      <Space>\n        <Tag variant=\"light-outline\">灰标签</Tag>\n        <Tag theme=\"primary\" variant=\"light-outline\">\n          标签一\n        </Tag>\n        <Tag theme=\"warning\" variant=\"light-outline\">\n          标签二\n        </Tag>\n        <Tag theme=\"danger\" variant=\"light-outline\">\n          标签三\n        </Tag>\n        <Tag theme=\"success\" variant=\"light-outline\">\n          标签四\n        </Tag>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "基础标签为默认的标签样式。适用于常规表单。"
      },
      {
        "code": "import React from 'react';\nimport { Tag } from 'tdesign-react';\nimport { DiscountIcon } from 'tdesign-icons-react';\n\nexport default function ThemeTagExample() {\n  return (\n    <Tag icon={<DiscountIcon />} theme=\"default\">\n      默认标签\n    </Tag>\n  );\n}\n",
        "desc": "在标签内嵌入图标。适用于用图标来辅助标签分类，或表达标签的属性。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Tag, Input, Space } from 'tdesign-react';\nimport { DiscountIcon, AddIcon } from 'tdesign-icons-react';\n\nexport default function ClosableTagExample() {\n  const [inputVisible, toggleInputVisible] = useState(false);\n  const [tagList, setTagList] = useState([\n    {\n      name: '可删除标签',\n      showClose: true,\n    },\n    {\n      name: '可删除标签',\n      icon: <DiscountIcon />,\n      showClose: true,\n    },\n    {\n      name: '可删除标签',\n      showClose: true,\n      disabled: true,\n    },\n  ]);\n\n  /**\n   * @param {number} i\n   */\n  const deleteTag = (i) => {\n    const newtagList = [...tagList];\n    newtagList.splice(i, 1);\n    setTagList(newtagList);\n  };\n  const handleClickAdd = () => {\n    toggleInputVisible(true);\n  };\n  const handleInputEnter = (value) => {\n    toggleInputVisible(false);\n    if (value)\n      setTagList((currentList) =>\n        currentList.concat([\n          {\n            name: value,\n            showClose: true,\n          },\n        ]),\n      );\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        {tagList.map((tag, i) => (\n          <Tag\n            key={i}\n            closable\n            onClose={() => {\n              deleteTag(i);\n            }}\n            icon={tag.icon}\n            disabled={tag.disabled}\n            style={{\n              marginRight: 30,\n            }}\n          >\n            {tag.name}\n            {i}\n          </Tag>\n        ))}\n      </Space>\n      <div\n        style={{\n          display: 'flex',\n          cursor: 'pointer',\n        }}\n      >\n        {inputVisible ? (\n          <Input\n            onBlur={handleInputEnter}\n            onEnter={handleInputEnter}\n            style={{\n              width: '94px',\n            }}\n          />\n        ) : (\n          <Tag onClick={handleClickAdd} icon={<AddIcon />}>\n            可添加标签\n          </Tag>\n        )}\n      </div>\n    </Space>\n  );\n}\n",
        "desc": "可删除或添加的标签。添加标签可组合输入框组件使用。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Space, Tag } from 'tdesign-react';\n\nconst { CheckTag } = Tag;\nconst STYLE_B_UNCHECKED_PROPS = {\n  theme: 'default',\n  variant: 'outline',\n};\nconst STYLE_C_CHECKED_PROPS = {\n  theme: 'primary',\n  variant: 'outline',\n};\nexport default function CheckTagExample() {\n  const [checked1, setChecked1] = useState(false);\n  const [checked2, setChecked2] = useState(false);\n  const [checked3, setChecked3] = useState(false);\n  return (\n    <Space direction=\"vertical\">\n      <Space align=\"center\">\n        <label>StyleA</label>\n        <CheckTag\n          checked={checked1}\n          onChange={setChecked1}\n          style={{\n            marginRight: '32px',\n          }}\n        >\n          选中/未选态\n        </CheckTag>\n        <CheckTag checked={true}>选中态</CheckTag>\n        <CheckTag checked={false}>未选态</CheckTag>\n        <CheckTag checked={true} disabled>\n          选中禁用\n        </CheckTag>\n        <CheckTag checked={false} disabled>\n          未选禁用\n        </CheckTag>\n      </Space>\n\n      <Space align=\"center\">\n        <label>StyleB</label>\n        <CheckTag\n          checked={checked2}\n          onChange={setChecked2}\n          uncheckedProps={STYLE_B_UNCHECKED_PROPS}\n          style={{\n            marginRight: '32px',\n          }}\n        >\n          选中/未选态\n        </CheckTag>\n\n        <CheckTag checked={true}>选中态</CheckTag>\n        <CheckTag checked={false} uncheckedProps={STYLE_B_UNCHECKED_PROPS}>\n          未选态\n        </CheckTag>\n        <CheckTag checked={true} disabled>\n          选中禁用\n        </CheckTag>\n        <CheckTag checked={false} disabled uncheckedProps={STYLE_B_UNCHECKED_PROPS}>\n          未选禁用\n        </CheckTag>\n      </Space>\n\n      <Space align=\"center\">\n        <label>StyleC</label>\n        <CheckTag\n          checked={checked3}\n          onChange={setChecked3}\n          checkedProps={STYLE_C_CHECKED_PROPS}\n          uncheckedProps={STYLE_B_UNCHECKED_PROPS}\n          style={{\n            marginRight: '32px',\n          }}\n        >\n          Outline Tag\n        </CheckTag>\n\n        <CheckTag checked={true} checkedProps={STYLE_C_CHECKED_PROPS}>\n          Checked\n        </CheckTag>\n        <CheckTag checked={false} uncheckedProps={STYLE_B_UNCHECKED_PROPS}>\n          Unchecked\n        </CheckTag>\n        <CheckTag checked={true} disabled checkedProps={STYLE_C_CHECKED_PROPS}>\n          Disabled\n        </CheckTag>\n        <CheckTag checked={false} disabled uncheckedProps={STYLE_B_UNCHECKED_PROPS}>\n          Disabled\n        </CheckTag>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "标签有已选和未选两种状态，可以通过点击标签来切换。类似多选框的效果。可以通过  设置任意风格选中态，设置任意风格未选中状态。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Space, Tag } from 'tdesign-react';\n\nconst { CheckTagGroup } = Tag;\nconst options = [\n  {\n    label: '标签1',\n    value: 1,\n  },\n  {\n    label: '标签2',\n    value: 2,\n  },\n  {\n    label: <span>标签3</span>,\n    value: 3,\n  },\n  {\n    label: '标签4',\n    value: 4,\n  },\n  {\n    label: '标签5',\n    value: '5',\n  },\n  {\n    label: '标签6',\n    value: 6,\n  },\n];\nconst avatarStyle = {\n  width: '16px',\n  height: '16px',\n  borderRadius: '2px',\n  verticalAlign: '-4px',\n  marginRight: '4px',\n};\nfunction CustomTag(option) {\n  return (\n    <div>\n      <img src={option.avatar} style={avatarStyle} />\n      <span>\n        {option.label}({option.value})\n      </span>\n    </div>\n  );\n}\nconst AVATAR = 'https://tdesign.gtimg.com/site/avatar.jpg';\nconst options2 = [\n  {\n    label: 'TAG_A',\n    value: 1,\n    avatar: AVATAR,\n  },\n  {\n    label: 'TAG_B',\n    value: 2,\n    avatar: AVATAR,\n  },\n  {\n    label: 'TAG_C',\n    value: 3,\n    avatar: AVATAR,\n  },\n  {\n    label: 'TAG_D',\n    value: 4,\n    avatar: AVATAR,\n  },\n  {\n    label: 'TAG_E',\n    value: '5',\n    avatar: AVATAR,\n  },\n  {\n    label: 'TAG_F',\n    value: 6,\n    avatar: AVATAR,\n  },\n].map((option) => ({\n  ...option,\n  label: <CustomTag {...option} />,\n}));\nconst STYLE_B_UNCHECKED_PROPS = {\n  theme: 'default',\n  variant: 'outline',\n};\nconst STYLE_C_CHECKED_PROPS = {\n  theme: 'primary',\n  variant: 'outline',\n};\nconst CheckTagGroupDemo = () => {\n  const [checkTagValue1, setCheckTagValue1] = useState([1]);\n  const [checkTagValue2, setCheckTagValue2] = useState([2]);\n  const [checkTagValue3, setCheckTagValue3] = useState([3]);\n  const [checkTagValue4, setCheckTagValue4] = useState([4, 6]);\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <label>StyleA</label>\n        <CheckTagGroup value={checkTagValue1} onChange={setCheckTagValue1} options={options} />\n      </Space>\n\n      <Space>\n        <label>StyleB</label>\n        <CheckTagGroup\n          value={checkTagValue2}\n          onChange={setCheckTagValue2}\n          options={options}\n          uncheckedProps={STYLE_B_UNCHECKED_PROPS}\n        />\n      </Space>\n\n      <Space>\n        <label>StyleC</label>\n        <CheckTagGroup\n          value={checkTagValue3}\n          onChange={setCheckTagValue3}\n          options={options}\n          checkedProps={STYLE_C_CHECKED_PROPS}\n          uncheckedProps={STYLE_B_UNCHECKED_PROPS}\n        />\n      </Space>\n\n      <Space>\n        <label>CustomContent</label>\n        <CheckTagGroup\n          value={checkTagValue4}\n          onChange={setCheckTagValue4}\n          options={options2}\n          checkedProps={STYLE_C_CHECKED_PROPS}\n          uncheckedProps={STYLE_B_UNCHECKED_PROPS}\n        />\n      </Space>\n    </Space>\n  );\n};\nexport default CheckTagGroupDemo;\n",
        "desc": "可选择标签组"
      },
      {
        "code": "import React from 'react';\nimport { Tag } from 'tdesign-react';\n\nexport default function LongText() {\n  return <Tag maxWidth={150}>默认超八个字超长文本标签超长省略文本标签</Tag>;\n}\n",
        "desc": "通过  设置最大宽度，超出部分自动省略。"
      },
      {
        "code": "import React from 'react';\nimport { Tag, Space } from 'tdesign-react';\n\nconst { CheckTag } = Tag;\nexport default function Size() {\n  return (\n    <Space direction=\"vertical\">\n      <Space align=\"center\">\n        <Tag size=\"small\">小型标签</Tag>\n        <Tag size=\"medium\">默认标签</Tag>\n        <Tag size=\"large\">大型标签</Tag>\n      </Space>\n      <Space align=\"center\">\n        <CheckTag size=\"small\">小型标签</CheckTag>\n        <CheckTag size=\"medium\">默认标签</CheckTag>\n        <CheckTag size=\"large\">大型标签</CheckTag>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "提供大、中（默认）、小三种尺寸。"
      },
      {
        "code": "import React from 'react';\nimport { Tag, Space } from 'tdesign-react';\n\nexport default function ShapeTagExample() {\n  const style = {\n    marginRight: 5,\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Tag>标签一</Tag>\n        <Tag theme=\"primary\">标签一</Tag>\n      </Space>\n      <Space>\n        <Tag shape=\"round\" style={style}>\n          标签一\n        </Tag>\n        <Tag shape=\"round\" theme=\"primary\">\n          标签一\n        </Tag>\n      </Space>\n      <Space>\n        <Tag shape=\"mark\">标签一</Tag>\n        <Tag shape=\"mark\" theme=\"primary\">\n          标签一\n        </Tag>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "提供方形、圆角方形、标记型三种形状。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Space, Tag, ColorPicker } from 'tdesign-react';\n\nexport default function CustomColor() {\n  const [selfDefinedColor, changeSelfDefinedColor] = useState('#0052D9');\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <ColorPicker colorModes={['monochrome']} value={selfDefinedColor} onChange={(v) => changeSelfDefinedColor(v)} />\n      </Space>\n      <Space>\n        <Tag theme=\"primary\" color={selfDefinedColor}>\n          default\n        </Tag>\n        <Tag color={selfDefinedColor} variant=\"light\">\n          light\n        </Tag>\n        <Tag color={selfDefinedColor} variant=\"outline\">\n          outline\n        </Tag>\n        <Tag color={selfDefinedColor} variant=\"light-outline\">\n          light-outline\n        </Tag>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "属性自定义颜色"
      }
    ]
  },
  {
    "name": "<Timeline/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { Timeline, Space, Radio } from 'tdesign-react';\n\nexport default function BasicTimeLine() {\n  const [direction, setDirection] = useState('vertical');\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <h4>时间轴方向</h4>\n        <Radio.Group variant=\"default-filled\" value={direction} onChange={(v) => setDirection(v)}>\n          <Radio.Button value=\"vertical\">垂直时间轴</Radio.Button>\n          <Radio.Button value=\"horizontal\">水平时间轴</Radio.Button>\n        </Radio.Group>\n      </Space>\n      <Timeline layout={direction} mode=\"same\">\n        <Timeline.Item label=\"2022-01-01\">事件一</Timeline.Item>\n        <Timeline.Item label=\"2022-02-01\">事件二</Timeline.Item>\n        <Timeline.Item label=\"2022-03-01\">事件三</Timeline.Item>\n        <Timeline.Item label=\"2022-04-01\">事件四</Timeline.Item>\n      </Timeline>\n    </Space>\n  );\n}\n",
        "desc": "基础时间轴"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Timeline, Space, Switch } from 'tdesign-react';\n\nexport default function ReverseTimeLine() {\n  const [reverse, setReverse] = useState(false);\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <h4>是否倒序</h4>\n        <Switch value={reverse} onChange={(v) => setReverse(v)}></Switch>\n      </Space>\n      <Timeline mode=\"same\" reverse={reverse}>\n        <Timeline.Item label=\"2022-01-01\">事件一</Timeline.Item>\n        <Timeline.Item label=\"2022-02-01\">事件二</Timeline.Item>\n        <Timeline.Item label=\"2022-03-01\">事件三</Timeline.Item>\n        <Timeline.Item label=\"2022-04-01\">事件四</Timeline.Item>\n      </Timeline>\n    </Space>\n  );\n}\n",
        "desc": "控制排序的时间轴"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Timeline, Space, Radio } from 'tdesign-react';\nimport { TipsIcon, UserIcon, HeartIcon, HomeIcon } from 'tdesign-icons-react';\n\nconst color = 'var(--td-brand-color)';\nexport default function CustomDotTimeLine() {\n  const [dot, setDot] = useState('default');\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <h4>时间轴样式</h4>\n        <Radio.Group variant=\"default-filled\" value={dot} onChange={(v) => setDot(v)}>\n          <Radio.Button value=\"default\">默认样式</Radio.Button>\n          <Radio.Button value=\"dot\">Dot样式</Radio.Button>\n        </Radio.Group>\n      </Space>\n      <Timeline mode=\"same\" theme={dot}>\n        <Timeline.Item label=\"2022-01-01\" dot={<TipsIcon size=\"medium\" color={color} />}>\n          事件一\n        </Timeline.Item>\n        <Timeline.Item label=\"2022-02-01\" dot={<UserIcon size=\"medium\" color={color} />}>\n          事件二\n        </Timeline.Item>\n        <Timeline.Item label=\"2022-03-01\" dot={<HeartIcon size=\"medium\" color={color} />}>\n          事件三\n        </Timeline.Item>\n        <Timeline.Item label=\"2022-04-01\" dot={<HomeIcon size=\"medium\" color={color} />}>\n          事件四\n        </Timeline.Item>\n      </Timeline>\n    </Space>\n  );\n}\n",
        "desc": "自定义节点"
      },
      {
        "code": "import React from 'react';\nimport { Timeline } from 'tdesign-react';\n\nconst CommonStyle = {\n  fontSize: 12,\n  color: 'rgba(0,0,0,.6)',\n};\nexport default function CustomContentTimeLine() {\n  return (\n    <Timeline mode=\"same\">\n      <Timeline.Item label=\"2022-01-01\">\n        <div>事件一</div>\n        <div style={CommonStyle}>事件一自定义内容</div>\n      </Timeline.Item>\n      <Timeline.Item label=\"2022-02-01\">\n        <div>事件二</div>\n        <div style={CommonStyle}>事件二自定义内容</div>\n      </Timeline.Item>\n      <Timeline.Item label=\"2022-03-01\">\n        <div>事件三</div>\n        <div style={CommonStyle}>事件三自定义内容</div>\n      </Timeline.Item>\n      <Timeline.Item label=\"2022-04-01\">\n        <div>事件四</div>\n        <div style={CommonStyle}>事件四自定义内容</div>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n",
        "desc": "自定义内容"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Timeline, Space, Radio } from 'tdesign-react';\n\nexport default function LayoutTimeLine() {\n  const [direction, setDirection] = useState('left');\n  const [mode, setMode] = useState('same');\n  const [layout, setLayout] = useState('vertical');\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <h4>时间轴方向</h4>\n        <Radio.Group variant=\"default-filled\" value={layout} onChange={(v) => setLayout(v)}>\n          <Radio.Button value=\"vertical\">垂直时间轴</Radio.Button>\n          <Radio.Button value=\"horizontal\">水平时间轴</Radio.Button>\n        </Radio.Group>\n      </Space>\n      <Space>\n        <h4>对齐方式</h4>\n        <Radio.Group variant=\"default-filled\" value={direction} onChange={(v) => setDirection(v)}>\n          <Radio.Button value=\"left\">左对齐</Radio.Button>\n          <Radio.Button value=\"alternate\">交错对齐</Radio.Button>\n          <Radio.Button value=\"right\">右对齐</Radio.Button>\n        </Radio.Group>\n      </Space>\n      <Space>\n        <h4>label对齐方式</h4>\n        <Radio.Group variant=\"default-filled\" value={mode} onChange={(v) => setMode(v)}>\n          <Radio.Button value=\"same\">同侧</Radio.Button>\n          <Radio.Button value=\"alternate\">交错</Radio.Button>\n        </Radio.Group>\n      </Space>\n      <Timeline layout={layout} labelAlign={direction} mode={mode}>\n        <Timeline.Item label=\"2022-01-01\">事件一</Timeline.Item>\n        <Timeline.Item label=\"2022-02-01\">事件二</Timeline.Item>\n        <Timeline.Item label=\"2022-03-01\">事件三</Timeline.Item>\n        <Timeline.Item label=\"2022-04-01\">事件四</Timeline.Item>\n      </Timeline>\n    </Space>\n  );\n}\n",
        "desc": "布局方式"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Timeline, Space, Switch } from 'tdesign-react';\n\nexport default function LoadingTimeLine() {\n  const [loading, setLoading] = useState(false);\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <h4>加载中</h4>\n        <Switch value={loading} onChange={(v) => setLoading(v)}></Switch>\n      </Space>\n      <Timeline mode=\"same\">\n        <Timeline.Item label=\"2022-01-01\">事件一</Timeline.Item>\n        <Timeline.Item label=\"2022-02-01\">事件二</Timeline.Item>\n        <Timeline.Item label=\"2022-03-01\">事件三</Timeline.Item>\n        <Timeline.Item label=\"2022-04-01\" loading={loading}>\n          事件四\n        </Timeline.Item>\n      </Timeline>\n    </Space>\n  );\n}\n",
        "desc": "加载状态"
      },
      {
        "code": "import React from 'react';\nimport { Timeline } from 'tdesign-react';\n\nexport default function ThemeTimeLine() {\n  return (\n    <Timeline mode=\"same\">\n      <Timeline.Item label=\"2022-01-01\" dotColor=\"primary\">\n        已完成的时间\n      </Timeline.Item>\n      <Timeline.Item label=\"2022-02-01\" dotColor=\"success\">\n        成功的时间\n      </Timeline.Item>\n      <Timeline.Item label=\"2022-03-01\" dotColor=\"error\">\n        危险时间\n      </Timeline.Item>\n      <Timeline.Item label=\"2022-04-01\" dotColor=\"warning\">\n        告警事件\n      </Timeline.Item>\n      <Timeline.Item label=\"2022-05-01\">默认的时间</Timeline.Item>\n      <Timeline.Item label=\"2022-06-01\" dotColor=\"yellowgreen\">\n        自定义主题色\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n",
        "desc": "主题色"
      }
    ]
  },
  {
    "name": "<Tooltip/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Button, Tooltip } from 'tdesign-react';\n\n// const Absolute = Position.absolute as const;\nconst Position = {\n  absolute: 'absolute',\n  relative: 'relative',\n};\nconst styles = {\n  container: {\n    margin: '0 auto',\n    width: '500px',\n    height: '260px',\n    position: Position.relative,\n  },\n  placementTop: {\n    position: Position.absolute,\n    top: '0',\n    left: '42%',\n  },\n  placementTopLeft: {\n    position: Position.absolute,\n    top: '0',\n    left: '70px',\n  },\n  placementTopRight: {\n    position: Position.absolute,\n    top: '0',\n    right: '70px',\n  },\n  placementBottom: {\n    position: Position.absolute,\n    bottom: '0',\n    left: '42%',\n  },\n  placementBottomLeft: {\n    position: Position.absolute,\n    bottom: '0',\n    left: '70px',\n    width: '120px',\n  },\n  placementBottomRight: {\n    position: Position.absolute,\n    bottom: '0',\n    right: '70px',\n  },\n  placementLeft: {\n    position: Position.absolute,\n    left: '0',\n    top: '42%',\n  },\n  placementLeftTop: {\n    position: Position.absolute,\n    left: '0',\n    top: '50px',\n  },\n  placementLeftBottom: {\n    position: Position.absolute,\n    left: '0',\n    bottom: '50px',\n  },\n  placementRight: {\n    position: Position.absolute,\n    right: '0',\n    top: '42%',\n  },\n  placementRightTop: {\n    position: Position.absolute,\n    right: '0',\n    top: '50px',\n  },\n  placementRightBottom: {\n    position: Position.absolute,\n    right: '0',\n    bottom: '50px',\n  },\n};\nexport default function Placements() {\n  return (\n    <div style={styles.container}>\n      <Tooltip content=\"这是Tooltip内容\" placement=\"top\" showArrow destroyOnClose>\n        <Button variant=\"outline\" style={styles.placementTop}>\n          top\n        </Button>\n      </Tooltip>\n      <Tooltip content=\"这是Tooltip内容 top-left\" placement=\"top-left\" showArrow destroyOnClose>\n        <Button variant=\"outline\" style={styles.placementTopLeft}>\n          top-left\n        </Button>\n      </Tooltip>\n      <Tooltip content=\"这是Tooltip内容top-right\" placement=\"top-right\" showArrow destroyOnClose>\n        <Button variant=\"outline\" style={styles.placementTopRight}>\n          top-right\n        </Button>\n      </Tooltip>\n      <Tooltip content=\"这是Tooltip内容\" placement=\"bottom\" showArrow destroyOnClose>\n        <Button variant=\"outline\" style={styles.placementBottom}>\n          bottom\n        </Button>\n      </Tooltip>\n      <Tooltip content=\"这是Tooltip内容 bottom-left\" placement=\"bottom-left\" showArrow destroyOnClose>\n        <Button variant=\"outline\" style={styles.placementBottomLeft}>\n          bottom-left\n        </Button>\n      </Tooltip>\n      <Tooltip content=\"这是Tooltip内容 bottom-right\" placement=\"bottom-right\" showArrow destroyOnClose>\n        <Button variant=\"outline\" style={styles.placementBottomRight}>\n          bottom-right\n        </Button>\n      </Tooltip>\n      <Tooltip content=\"这是Tooltip内容\" placement=\"left\" showArrow destroyOnClose>\n        <Button variant=\"outline\" style={styles.placementLeft}>\n          left\n        </Button>\n      </Tooltip>\n      <Tooltip\n        content=\"这是Tooltip内容   left-top\"\n        placement=\"left-top\"\n        overlayStyle={{\n          width: '140px',\n        }}\n        showArrow\n        destroyOnClose\n      >\n        <Button variant=\"outline\" style={styles.placementLeftTop}>\n          left-top\n        </Button>\n      </Tooltip>\n      <Tooltip\n        content=\"这是Tooltip内容 left-bottom\"\n        placement=\"left-bottom\"\n        overlayStyle={{\n          width: '140px',\n        }}\n        showArrow\n        destroyOnClose\n      >\n        <Button variant=\"outline\" style={styles.placementLeftBottom}>\n          left-bottom\n        </Button>\n      </Tooltip>\n      <Tooltip content=\"这是Tooltip内容\" placement=\"right\" showArrow destroyOnClose>\n        <Button variant=\"outline\" style={styles.placementRight}>\n          right\n        </Button>\n      </Tooltip>\n      <Tooltip\n        content=\"这是Tooltip内容 right-top\"\n        placement=\"right-top\"\n        overlayStyle={{\n          width: '140px',\n        }}\n        showArrow\n        destroyOnClose\n      >\n        <Button variant=\"outline\" style={styles.placementRightTop}>\n          right-top\n        </Button>\n      </Tooltip>\n      <Tooltip\n        content=\"这是Tooltip内容 right-bottom\"\n        placement=\"right-bottom\"\n        overlayStyle={{\n          width: '140px',\n        }}\n        showArrow\n        destroyOnClose\n      >\n        <Button variant=\"outline\" style={styles.placementRightBottom}>\n          right-bottom\n        </Button>\n      </Tooltip>\n    </div>\n  );\n}\n",
        "desc": "基础用法"
      },
      {
        "code": "import React from 'react';\nimport { Button, Tooltip } from 'tdesign-react';\n\nexport default function BasicUsage() {\n  return (\n    <Tooltip\n      content=\"文字提示仅展示文本内容\"\n      overlayStyle={{\n        padding: 2,\n      }}\n      overlayInnerStyle={{\n        padding: 2,\n      }}\n      overlayClassName=\"tooltip-custom-overlay-class\"\n      overlayInnerClassName=\"tooltip-custom-overlay-inner-class\"\n    >\n      <Button variant=\"outline\">默认文字提示</Button>\n    </Tooltip>\n  );\n}\n",
        "desc": "带箭头的文字提示有较明确的指向性。常用于有多个需要提示的信息并列放置时，对某个具体信息进行提示。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Tooltip } from 'tdesign-react';\n\nexport default function BasicUsage() {\n  return (\n    <Tooltip content=\"文字提示仅展示文本内容\" showArrow={false}>\n      <Button variant=\"outline\">不带箭头等文字提示</Button>\n    </Tooltip>\n  );\n}\n",
        "desc": "不带箭头的文字提示没有明确指向性。常用于不需要针对性提示的场景中。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Tooltip, Space } from 'tdesign-react';\n\nexport default function Cumstomize() {\n  return (\n    <Space>\n      <Tooltip content=\"文字提示仅展示文本内容\">\n        <Button theme=\"default\">default</Button>\n      </Tooltip>\n      <Tooltip content=\"文字提示仅展示文本内容\" theme=\"primary\">\n        <Button theme=\"primary\">primary</Button>\n      </Tooltip>\n      <Tooltip content=\"文字提示仅展示文本内容\" theme=\"success\">\n        <Button theme=\"success\">success</Button>\n      </Tooltip>\n      <Tooltip content=\"文字提示仅展示文本内容\" theme=\"danger\">\n        <Button theme=\"danger\">danger</Button>\n      </Tooltip>\n      <Tooltip content=\"文字提示仅展示文本内容\" theme=\"warning\">\n        <Button theme=\"warning\">warning</Button>\n      </Tooltip>\n      <Tooltip content=\"文字提示仅展示文本内容\" theme=\"light\">\n        <Button variant=\"outline\">light</Button>\n      </Tooltip>\n    </Space>\n  );\n}\n",
        "desc": "提供浅灰色、蓝色、绿色、红色、黄色主题的文字提示。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Tooltip, Input, Space } from 'tdesign-react';\n\nexport default function Cumstomize() {\n  return (\n    <Space>\n      <Tooltip content=\"文字提示仅展示文本内容\">\n        <Button variant=\"outline\">悬浮时触发（默认）</Button>\n      </Tooltip>\n      <Tooltip content=\"文字提示仅展示文本内容\" trigger=\"focus\">\n        <Input placeholder=\"获得焦点时触发\" />\n      </Tooltip>\n      <Tooltip content=\"文字提示仅展示文本内容\" trigger=\"click\">\n        <Button variant=\"outline\">点击时触发</Button>\n      </Tooltip>\n      <Tooltip content=\"文字提示仅展示文本内容\" trigger=\"context-menu\">\n        <Button variant=\"outline\">右击时触发</Button>\n      </Tooltip>\n    </Space>\n  );\n}\n",
        "desc": "支持常见元素事件触发文字提示。"
      },
      {
        "code": "import React from 'react';\nimport { Button, TooltipLite, Space } from 'tdesign-react';\n\nexport default function BasicUsage() {\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <TooltipLite\n          content=\"文字提示仅展示文本内容\"\n          placement=\"bottom\"\n          triggerElement={<Button variant=\"outline\">下方文字提示</Button>}\n        ></TooltipLite>\n        <TooltipLite content=\"提示\" placement=\"top\">\n          <Button variant=\"outline\">上方文字提示</Button>\n        </TooltipLite>\n        <TooltipLite content=\"提示\" placement=\"mouse\">\n          <Button variant=\"outline\">鼠标位置显示提示</Button>\n        </TooltipLite>\n        <TooltipLite content=\"提示\" showArrow={false}>\n          <Button variant=\"outline\">无箭头文字提示</Button>\n        </TooltipLite>\n        <TooltipLite content=\"提示\" showShadow={false}>\n          <Button variant=\"outline\">无投影文字提示</Button>\n        </TooltipLite>\n      </Space>\n      <Space>\n        <TooltipLite content=\"浅色提示\" theme=\"light\">\n          <Button variant=\"outline\">浅色模式</Button>\n        </TooltipLite>\n        <TooltipLite content=\"浅色提示\" theme=\"light\" showArrow={false} showShadow={true}>\n          <Button variant=\"outline\">无箭头浅色模式</Button>\n        </TooltipLite>\n        <TooltipLite content=\"不可用提示\">\n          <Button disabled variant=\"outline\">\n            不可用状态下提示\n          </Button>\n        </TooltipLite>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "悬浮元素出现文字提示，不依赖 Popup，具体 API 请参考"
      },
      {
        "code": "import React from 'react';\nimport { TooltipLite } from 'tdesign-react';\n\nexport default function MouseTitle() {\n  return (\n    <TooltipLite content=\"文案确实很长很长很长很长很长\" placement=\"mouse\">\n      <a id=\"testa\" href=\"#\">\n        文案比较长...\n      </a>\n    </TooltipLite>\n  );\n}\n",
        "desc": "模拟原生title"
      },
      {
        "code": "import React, { useEffect, useState, useRef } from 'react';\nimport { Button, Tooltip } from 'tdesign-react';\n\nexport default function Placements() {\n  const ref = useRef(null);\n  const timerRef = useRef(null);\n  const [reset, setReset] = useState(true);\n  const [count, setCount] = useState(5);\n  const countRef = useRef(5);\n  const setTimer = () => {\n    timerRef.current = setInterval(() => {\n      countRef.current -= 1;\n      setCount(countRef.current);\n      if (countRef.current <= 0) {\n        clearInterval(timerRef.current);\n        setReset(true);\n      }\n    }, 1000);\n  };\n  const onResetClick = () => {\n    setReset(false);\n    countRef.current = 5;\n    setCount(5);\n    clearInterval(timerRef.current);\n    setTimer();\n    ref.current.setVisible(true);\n  };\n  useEffect(() => {\n    setTimer();\n    return () => {\n      clearInterval(timerRef.current);\n    };\n  }, []);\n  return (\n    <>\n      <Tooltip content={`提示在${count}秒后消失`} duration={5000} ref={ref}>\n        <Button variant=\"text\">定时消失</Button>\n      </Tooltip>\n      {reset && (\n        <Button variant=\"outline\" onClick={onResetClick}>\n          点击再次查看\n        </Button>\n      )}\n    </>\n  );\n}\n",
        "desc": "定时消失"
      }
    ]
  },
  {
    "name": "<Tree/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Tree } from 'tdesign-react';\n\nconst items = [\n  {\n    label: '第一段',\n    children: [\n      {\n        label: '第二段',\n      },\n      {\n        label: '第二段',\n      },\n    ],\n  },\n  {\n    label: '第一段',\n    children: [\n      {\n        label: '第二段',\n      },\n      {\n        label: '第二段',\n      },\n    ],\n  },\n  {\n    label: '第一段',\n    children: [\n      {\n        label: '第二段',\n      },\n      {\n        label: '第二段',\n      },\n    ],\n  },\n  {\n    label: '第一段',\n    children: [\n      {\n        label: '第二段',\n      },\n      {\n        label: '第二段',\n      },\n    ],\n  },\n];\nexport default () => <Tree data={items} activable hover transition />;\n",
        "desc": "可承载存在父子关系的内容的展示，父节点带有展开/折叠操作，提供单个节点的选中标记。常用于系统目录结构、组织架构的展示。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Radio, Tree, Form, Switch, Space } from 'tdesign-react';\n\nconst valueOptions = [\n  {\n    value: 'onlyLeaf',\n    label: 'onlyLeaf',\n  },\n  {\n    value: 'parentFirst',\n    label: 'parentFirst',\n  },\n  {\n    value: 'all',\n    label: 'all',\n  },\n];\nconst items = [\n  {\n    value: '1',\n    label: '1',\n    children: [\n      {\n        value: '1.1',\n        label: '1.1',\n        disabled: true,\n        children: [\n          {\n            value: '1.1.1',\n            label: '1.1.1',\n            children: [\n              {\n                value: '1.1.1.1',\n                label: '1.1.1.1',\n              },\n              {\n                value: '1.1.1.2',\n                label: '1.1.1.2',\n              },\n            ],\n          },\n          {\n            value: '1.1.2',\n            label: '1.1.2',\n            children: [\n              {\n                value: '1.1.2.1',\n                label: '1.1.2.1',\n              },\n              {\n                value: '1.1.2.2',\n                label: '1.1.2.2',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        value: '1.2',\n        label: '1.2',\n        children: [\n          {\n            value: '1.2.1',\n            label: '1.2.1',\n            children: [\n              {\n                value: '1.2.1.1',\n                label: '1.2.1.1',\n              },\n              {\n                value: '1.2.1.2',\n                label: '1.2.1.2',\n                disabled: true,\n              },\n            ],\n          },\n          {\n            value: '1.2.2',\n            label: '1.2.2',\n            children: [\n              {\n                value: '1.2.2.1',\n                label: '1.2.2.1',\n              },\n              {\n                value: '1.2.2.2',\n                label: '1.2.2.2',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: '2',\n    label: '2',\n    children: [\n      {\n        value: '2.1',\n        label: '2.1',\n      },\n      {\n        value: '2.2',\n        label: '2.2',\n      },\n    ],\n  },\n];\nexport default () => {\n  const [checkable, setCheckable] = useState(true);\n  const [checkStrictly, setCheckStrictly] = useState(false);\n  const [valueMode, setValueMode] = useState('onlyLeaf');\n  const handleChange = (checked, context) => {\n    console.info('onChange:', checked, context);\n  };\n  const handleClick = (context) => {\n    console.info('onClick:', context);\n  };\n  const handleMode = (value) => {\n    setValueMode(value);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Form>\n        <Form.FormItem label=\"可选\" initialData={checkable}>\n          <Switch onChange={setCheckable} />\n        </Form.FormItem>\n        <Form.FormItem label=\"严格模式\" initialData={checkStrictly}>\n          <Switch onChange={setCheckStrictly} />\n        </Form.FormItem>\n        <Form.FormItem label=\"选中值模式\" name=\"valueMode\" initialData={valueMode}>\n          <Radio.Group onChange={handleMode}>\n            {valueOptions.map((v) => (\n              <Radio key={v.value} value={v.value}>\n                {v.label}\n              </Radio>\n            ))}\n          </Radio.Group>\n        </Form.FormItem>\n      </Form>\n      <Tree\n        expandAll\n        hover\n        data={items}\n        checkable={checkable}\n        checkStrictly={checkStrictly}\n        valueMode={valueMode}\n        onChange={handleChange}\n        onClick={handleClick}\n        checkProps={(node) => ({\n          title: node.data.disabled ? 'Disabled' : 'Enabled',\n        })}\n      />\n    </Space>\n  );\n};\n",
        "desc": "在基础树结构上提供多选框控件，当需要对多个节点进行选择时使用，如选择组织架构中的多个人员。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Form, Switch, Tree, Space } from 'tdesign-react';\n\nconst items = [\n  {\n    label: '1',\n    children: [\n      {\n        label: '1.1',\n      },\n      {\n        label: '1.2',\n      },\n    ],\n  },\n  {\n    label: '2',\n    children: [\n      {\n        label: '2.1',\n      },\n      {\n        label: '2.2',\n      },\n    ],\n  },\n];\nexport default () => {\n  const [activable, setActivable] = useState(true);\n  const [activeMultiple, setActiveMultiple] = useState(false);\n  const [expandOnClickNode, setExpandOnClickNode] = useState(false);\n  const handleClick = (context) => {\n    console.info('onClick', context);\n  };\n  const handleActive = (value, context) => {\n    console.info('onActive', value, context);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Form labelWidth={120}>\n        <Form.FormItem label=\"节点可高亮\" initialData={activable}>\n          <Switch onChange={setActivable} />\n        </Form.FormItem>\n        <Form.FormItem label=\"节点可多选高亮\" initialData={activeMultiple}>\n          <Switch onChange={setActiveMultiple} />\n        </Form.FormItem>\n        <Form.FormItem label=\"整个节点可点击\" initialData={expandOnClickNode}>\n          <Switch onChange={setExpandOnClickNode} />\n        </Form.FormItem>\n      </Form>\n      <Tree\n        data={items}\n        expandAll\n        activable={activable}\n        activeMultiple={activeMultiple}\n        expandOnClickNode={expandOnClickNode}\n        onClick={handleClick}\n        onActive={handleActive}\n        hover\n      />\n    </Space>\n  );\n};\n",
        "desc": "可高亮"
      },
      {
        "code": "import React from 'react';\nimport { Tree, Space } from 'tdesign-react';\n\nconst items = [\n  {\n    value: '1',\n    label: '1',\n    children: [\n      {\n        value: '1.1',\n        label: '1.1',\n        children: [\n          {\n            value: '1.1.1',\n            label: '1.1.1',\n            children: [\n              {\n                value: '1.1.1.1',\n                label: '1.1.1.1',\n              },\n              {\n                value: '1.1.1.2',\n                label: '1.1.1.2',\n              },\n            ],\n          },\n          {\n            value: '1.1.2',\n            label: '1.1.2',\n            children: [\n              {\n                value: '1.1.2.1',\n                label: '1.1.2.1',\n              },\n              {\n                value: '1.1.2.2',\n                label: '1.1.2.2',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: '2',\n    label: '2',\n    children: [\n      {\n        value: '2.1',\n        label: '2.1',\n      },\n      {\n        value: '2.2',\n        label: '2.2 不允许拖放为 2.2 的子节点',\n      },\n    ],\n  },\n];\nexport default () => {\n  const handleDragStart = () => {\n    console.log('dragStart');\n  };\n  const handleDragEnd = () => {\n    console.log('dragEnd');\n  };\n  const handleDragOver = () => {\n    console.log('dragOver');\n  };\n  const handleDragLeave = () => {\n    console.log('dragLeave');\n  };\n  const handleDrop = ({ dragNode, dropPosition, e }) => {\n    console.log(dragNode, dropPosition, e);\n  };\n  const handleAllowDrop = (ctx) => {\n    const { dropNode, dropPosition } = ctx;\n    if (dropNode.value === '2.2' && dropPosition === 0) {\n      return false;\n    }\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Tree\n        data={items}\n        activable\n        hover\n        transition\n        expandAll\n        draggable\n        onDrop={handleDrop}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n        onDragLeave={handleDragLeave}\n        onDragOver={handleDragOver}\n        allowDrop={handleAllowDrop}\n      />\n    </Space>\n  );\n};\n",
        "desc": "树中的节点可自由的拖拽"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { InputAdornment, Input, Tree, Space } from 'tdesign-react';\n\nconst items = [\n  {\n    value: '1',\n    label: '1',\n    children: [\n      {\n        value: '1.1',\n        label: '1.1',\n        children: [\n          {\n            value: '1.1.1',\n            label: '1.1.1',\n            children: [\n              {\n                value: '1.1.1.1',\n                label: '1.1.1.1',\n              },\n              {\n                value: '1.1.1.2',\n                label: '1.1.1.2',\n              },\n            ],\n          },\n          {\n            value: '1.1.2',\n            label: '1.1.2',\n            children: [\n              {\n                value: '1.1.2.1',\n                label: '1.1.2.1',\n              },\n              {\n                value: '1.1.2.2',\n                label: '1.1.2.2',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        value: '1.2',\n        label: '1.2',\n        children: [\n          {\n            value: '1.2.1',\n            label: '1.2.1',\n            children: [\n              {\n                value: '1.2.1.1',\n                label: '1.2.1.1',\n              },\n              {\n                value: '1.2.1.2',\n                label: '1.2.1.2',\n              },\n            ],\n          },\n          {\n            value: '1.2.2',\n            label: '1.2.2',\n            children: [\n              {\n                value: '1.2.2.1',\n                label: '1.2.2.1',\n              },\n              {\n                value: '1.2.2.2',\n                label: '1.2.2.2',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: '2',\n    label: '2',\n    children: [\n      {\n        value: '2.1',\n        label: '2.1',\n      },\n      {\n        value: '2.2',\n        label: '2.2',\n      },\n    ],\n  },\n];\nexport default () => {\n  const [filterText, setFilterText] = useState('');\n  const [filterText2, setFilterText2] = useState('');\n  const filterByText = (node) => {\n    const rs = node.data.label.indexOf(filterText) >= 0;\n    return rs;\n  };\n  const filterByText2 = (node) => {\n    const rs = node.data.label.indexOf(filterText2) >= 0;\n    return rs;\n  };\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <InputAdornment prepend=\"filter:\">\n        <Input value={filterText} onChange={setFilterText} />\n      </InputAdornment>\n      <Tree\n        data={items}\n        allowFoldNodeOnFilter={true}\n        expandOnClickNode\n        hover\n        line\n        filter={filterText ? filterByText : null}\n      />\n      <InputAdornment prepend=\"filter:\">\n        <Input value={filterText2} onChange={setFilterText2} />\n      </InputAdornment>\n      <Tree\n        data={items}\n        allowFoldNodeOnFilter={false}\n        expandOnClickNode\n        hover\n        line\n        filter={filterText2 ? filterByText2 : null}\n      />\n    </Space>\n  );\n};\n",
        "desc": "过滤动作由  属性的变更触发，故而不能只修改传递给  属性内部的数据，应当在条件变化时变更  属性。清空过滤条件时，通过设置  来触发树组件展示状态还原。 时，过滤状态下展开的路径节点无法被收起； 时，过滤状态下展开的节点，允许点击收起，注意这会影响到树组件当前的展开状态数据。每次变更过滤条件时，会重设节点展开状态，将命中节点的路径节点展开。当清空过滤条件时，将会还原为设置过滤条件之前时的展开状态。"
      },
      {
        "code": "import React, { useRef, useState } from 'react';\nimport { InputAdornment, Button, Input, Tree, Form, Switch, Space } from 'tdesign-react';\n\nconst items = [\n  {\n    value: 'node1',\n  },\n  {\n    value: 'node2',\n  },\n];\nlet index = 2;\nexport default () => {\n  const [useActived, setUseActived] = useState(false);\n  const [expandParent, setExpandParent] = useState(false);\n  const [filterText, setFilterText] = useState('');\n  const [activeId, setActiveId] = useState('');\n  const [activeIds, setActiveIds] = useState([]);\n  const getLabelContent = (node) => {\n    const pathNodes = node.getPath();\n    let label = pathNodes.map((itemNode) => itemNode.getIndex() + 1).join('.');\n    label = `${label} | value: ${node.value}`;\n    return label;\n  };\n  const getLabel = (node) => {\n    const label = getLabelContent(node);\n    const { data } = node;\n    data.label = label;\n    return label;\n  };\n  const renderOperations = (node) => `value: ${node.value}`;\n  const handleInputChange = (value) => {\n    setFilterText(value);\n    console.info('on input:', value);\n  };\n  const filterByText = (node) => {\n    const label = node?.data?.label || '';\n    const rs = label.indexOf(filterText) >= 0;\n    return rs;\n  };\n  const handleExpand = (vals, state) => {\n    console.info('on expand:', vals, state);\n  };\n  const handleChange = (vals, state) => {\n    console.info('on change:', vals, state);\n  };\n  const handleActive = (vals, state) => {\n    console.info('on active:', vals, state);\n    setActiveIds(vals);\n    setActiveId(vals[0] || '');\n  };\n\n  /* ======== 操作 api ======= */\n  const treeRef = useRef(null);\n  const setLabel = (value) => {\n    const node = treeRef.current.getItem(value);\n    const label = getLabelContent(node);\n    const { data } = node;\n    data.label = label;\n  };\n  const getActivedNode = () => {\n    const activeNode = treeRef.current.getItem(activeId);\n    return activeNode;\n  };\n  const getInsertItem = () => {\n    let item = null;\n    index += 1;\n    const value = `t${index}`;\n    item = {\n      value,\n    };\n    return item;\n  };\n  const append = (node) => {\n    const item = getInsertItem();\n    if (item) {\n      if (!node) {\n        treeRef.current.appendTo('', item);\n      } else {\n        treeRef.current.appendTo(node.value, item);\n      }\n      // setLabel(item.value);\n      if (useActived) {\n        setActiveIds((v) => [...v, item.value]);\n      }\n    }\n  };\n  const insertBefore = (node) => {\n    const item = getInsertItem();\n    if (item) {\n      treeRef.current.insertBefore(node.value, item);\n      setLabel(item.value);\n    }\n  };\n  const insertAfter = (node) => {\n    const item = getInsertItem();\n    if (item) {\n      treeRef.current.insertAfter(node.value, item);\n      setLabel(item.value);\n    }\n  };\n  const remove = (node) => {\n    treeRef.current.remove(node.value);\n  };\n  const renderOperations2 = (node) => (\n    <>\n      <Button\n        style={{\n          marginLeft: '10px',\n        }}\n        size=\"small\"\n        variant=\"base\"\n        onClick={() => append(node)}\n      >\n        添加子节点\n      </Button>\n      <Button\n        style={{\n          marginLeft: '10px',\n        }}\n        size=\"small\"\n        variant=\"outline\"\n        onClick={() => insertBefore(node)}\n      >\n        前插节点\n      </Button>\n      <Button\n        style={{\n          marginLeft: '10px',\n        }}\n        size=\"small\"\n        variant=\"outline\"\n        onClick={() => insertAfter(node)}\n      >\n        后插节点\n      </Button>\n      <Button\n        style={{\n          marginLeft: '10px',\n        }}\n        size=\"small\"\n        variant=\"base\"\n        theme=\"danger\"\n        onClick={() => remove(node)}\n      >\n        删除\n      </Button>\n    </>\n  );\n\n  /* ======== API ======= */\n  const getItem = () => {\n    const node = treeRef.current.getItem('node1');\n    console.info('getItem:', node.value);\n  };\n  const getAllItems = () => {\n    const nodes = treeRef.current.getItems();\n    console.info(\n      'getAllItems:',\n      nodes.map((node) => node.value),\n    );\n  };\n  const getActiveChildren = () => {\n    console.log(activeIds);\n    const node = getActivedNode();\n    if (!node) return;\n    let nodes = [];\n    if (node) {\n      const child = node.getChildren(true);\n      if (typeof child === 'boolean') {\n        // getChildren will never return true value.\n        nodes = [];\n      } else {\n        nodes = child;\n      }\n    }\n    console.info(\n      'getActiveChildren:',\n      nodes.map((node) => node.value),\n    );\n  };\n  const getAllActived = () => {\n    console.info('getActived value:', activeIds.slice(0));\n  };\n  const getActiveChecked = () => {\n    const node = getActivedNode();\n    if (!node) return;\n    const nodes = treeRef.current.getItems(node.value);\n    console.info(\n      'getChecked:',\n      nodes.filter((node) => node.checked).map((node) => node.value),\n    );\n  };\n  const getActiveParent = () => {\n    const node = getActivedNode();\n    if (!node) return;\n    const parent = treeRef.current.getParent(node.value);\n    console.info('getParent', parent?.value);\n  };\n  const getActiveParents = () => {\n    const node = getActivedNode();\n    if (!node) return;\n    const parents = treeRef.current.getParents(node.value);\n    console.info(\n      'getParents',\n      parents.map((node) => node.value),\n    );\n  };\n  const getActiveIndex = () => {\n    const node = getActivedNode();\n    if (!node) return;\n    const index = treeRef.current.getIndex(node.value);\n    console.info('getIndex', index);\n  };\n  const setActiveChecked = () => {\n    const node = getActivedNode();\n    if (!node) return;\n    treeRef.current.setItem(node.value, {\n      checked: true,\n    });\n  };\n  const setActiveExpanded = () => {\n    const node = getActivedNode();\n    if (!node) return;\n    treeRef.current.setItem(node?.value, {\n      expanded: true,\n    });\n  };\n  const getPlainData = (item) => {\n    const root = item;\n    if (!root) return null;\n    const children = item.getChildren(true) || [];\n    const list = [root].concat(children);\n    const nodeMap = {};\n    const nodeList = list.map((item) => {\n      const node = {\n        walkData() {\n          const data = {\n            ...this.data,\n          };\n          const itemChildren = this.getChildren();\n          if (Array.isArray(itemChildren)) {\n            data.children = [];\n            itemChildren.forEach((childItem) => {\n              const childNode = nodeMap[childItem.value];\n              const childData = childNode.walkData();\n              data.children.push(childData);\n            });\n          }\n          return data;\n        },\n        ...item,\n      };\n      nodeMap[item.value] = node;\n      return node;\n    });\n    const [rootNode] = nodeList;\n    const data = rootNode.walkData();\n    return data;\n  };\n  const getActivePlainData = () => {\n    const node = getActivedNode();\n    if (!node) return;\n    const data = getPlainData(node);\n    console.log('getActivePlainData:', data);\n    return data;\n  };\n  return (\n    <Space direction=\"vertical\">\n      <h3 className=\"title\">render:</h3>\n      <Tree hover expandAll data={items} label={getLabel} operations={renderOperations} />\n      <h3 className=\"title\">api:</h3>\n      <div className=\"operations\">\n        <Form labelWidth={200}>\n          <Form.FormItem label=\"插入节点使用高亮节点\" initialData={useActived}>\n            <Switch onChange={setUseActived} />\n          </Form.FormItem>\n          <Form.FormItem label=\"子节点展开触发父节点展开\" initialData={expandParent}>\n            <Switch onChange={setExpandParent} />\n          </Form.FormItem>\n        </Form>\n      </div>\n      <div className=\"operations\">\n        <InputAdornment prepend=\"filter:\">\n          <Input value={filterText} onChange={handleInputChange} />\n        </InputAdornment>\n      </div>\n      <Tree\n        ref={treeRef}\n        hover\n        expandAll\n        activable\n        checkable\n        line\n        data={items}\n        actived={activeIds}\n        activeMultiple\n        allowFoldNodeOnFilter\n        label={getLabel}\n        expandParent={expandParent}\n        filter={filterByText}\n        operations={renderOperations2}\n        onExpand={handleExpand}\n        onChange={handleChange}\n        onActive={handleActive}\n      />\n      <h3 className=\"title\">api:</h3>\n      <Space breakLine>\n        <Button theme=\"primary\" onClick={getItem}>\n          {\"获取 value 为 'node1' 的单个节点\"}\n        </Button>\n        <Button theme=\"primary\" onClick={getAllItems}>\n          获取所有节点\n        </Button>\n        <Button theme=\"primary\" onClick={getActiveChildren}>\n          获取高亮节点的所有子节点\n        </Button>\n        <Button theme=\"primary\" onClick={getAllActived}>\n          获取所有高亮节点\n        </Button>\n        <Button theme=\"primary\" onClick={getActiveChecked}>\n          获取高亮节点下的选中节点\n        </Button>\n        <Button theme=\"primary\" onClick={() => append()}>\n          插入一个根节点\n        </Button>\n        <Button theme=\"primary\" onClick={getActiveParent}>\n          获取高亮节点的父节点\n        </Button>\n        <Button theme=\"primary\" onClick={getActiveParents}>\n          获取高亮节点的所有父节点\n        </Button>\n        <Button theme=\"primary\" onClick={getActiveIndex}>\n          获取高亮节点在子节点中的位置\n        </Button>\n        <Button theme=\"primary\" onClick={setActiveChecked}>\n          选中高亮节点\n        </Button>\n        <Button theme=\"primary\" onClick={setActiveExpanded}>\n          展开高亮节点\n        </Button>\n        <Button theme=\"primary\" onClick={getActivePlainData}>\n          获取高亮节点与其子节点的数据\n        </Button>\n      </Space>\n    </Space>\n  );\n};\n",
        "desc": "在基础树结构上提供针对节点的操作按钮，当需要对节点进行一系列操作时使用，如增、删、改。"
      },
      {
        "code": "import React from 'react';\nimport { Tree, Space } from 'tdesign-react';\nimport { Icon } from 'tdesign-icons-react';\n\nconst items = [\n  {\n    label: '1',\n    children: true,\n  },\n  {\n    label: '2',\n    children: true,\n  },\n];\nexport default () => {\n  const load = (node) => {\n    console.log('load', load);\n    const maxLevel = 2;\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        let nodes = [];\n        if (node.getLevel() < maxLevel) {\n          nodes = [\n            {\n              label: `${node.label}.1`,\n              children: node.getLevel() < maxLevel - 1,\n            },\n            {\n              label: `${node.label}.2`,\n              children: node.getLevel() < maxLevel - 1,\n            },\n          ];\n        }\n        resolve(nodes);\n      }, 500);\n    });\n  };\n  const renderIcon = (node) => {\n    let name = 'file';\n    if (node.getChildren(true)) {\n      if (node.expanded) {\n        name = 'folder-open';\n        if (node.loading) {\n          name = 'loading';\n        }\n      } else {\n        name = 'folder';\n      }\n    }\n    return <Icon name={name} />;\n  };\n  const renderIcon2 = (node) => {\n    let name = 'attach';\n    if (node.getChildren(true)) {\n      if (!node.expanded) {\n        name = 'caret-right';\n      } else if (node.loading) {\n        name = 'loading';\n      } else {\n        name = 'caret-down';\n      }\n    }\n    return <Icon name={name} />;\n  };\n  return (\n    <Space direction=\"vertical\">\n      <h3>render 1:</h3>\n      <Tree data={items} hover expandAll load={load} icon={renderIcon} />\n      <h3>render 2:</h3>\n      <Tree data={items} hover lazy load={load} icon={renderIcon2} />\n    </Space>\n  );\n};\n",
        "desc": "可以对父节点上展开/折叠的图标进行自定义设计。当需要图标与信息名的含义匹配时使用，如文件夹的概念。"
      },
      {
        "code": "import React from 'react';\nimport { Tree, Space } from 'tdesign-react';\n\nexport default () => {\n  const empty = <div>😊 空数据（ empty props ）</div>;\n  return (\n    <Space direction=\"vertical\">\n      <Tree data={[]} />\n\n      <Tree data={[]} empty=\"😊 空数据（string）\" />\n\n      <Tree data={[]} empty={empty} />\n    </Space>\n  );\n};\n",
        "desc": "空数据"
      },
      {
        "code": "import React from 'react';\nimport { Tree } from 'tdesign-react';\n\nconst items = [\n  {\n    label: '1',\n    children: [\n      {\n        label: '1.1',\n      },\n      {\n        label: '1.2',\n      },\n    ],\n  },\n  {\n    label: '2',\n    children: [\n      {\n        label: '2.1',\n      },\n      {\n        label: '2.2',\n      },\n    ],\n  },\n];\nexport default () => {\n  const renderLabel = (node) => <strong>{`value: ${node.value}, label: ${node.label}`}</strong>;\n  return <Tree data={items} expandAll label={renderLabel} />;\n};\n",
        "desc": "自定义标签"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Tree, Form, Switch, Space } from 'tdesign-react';\nimport { Icon } from 'tdesign-icons-react';\nimport classNames from 'classnames';\n\nconst items = [\n  {\n    value: '1',\n    label: '1',\n    children: [\n      {\n        value: '1.1',\n        label: '1.1',\n      },\n      {\n        value: '1.2',\n        label: '1.2',\n      },\n    ],\n  },\n  {\n    value: '2',\n    label: '2',\n    children: [\n      {\n        value: '2.1',\n        label: '2.1',\n        children: [\n          {\n            value: '2.1.1',\n            label: '2.1.1',\n            children: [\n              {\n                value: '2.1.1.1',\n                label: '2.1.1.1',\n                children: [\n                  {\n                    value: '2.1.1.1.1',\n                    label: '2.1.1.1.1',\n                  },\n                  {\n                    value: '2.1.1.1.2',\n                    label: '2.1.1.1.2',\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            value: '2.1.2',\n            label: '2.1.2',\n          },\n        ],\n      },\n      {\n        value: '2.2',\n        label: '2.2',\n      },\n    ],\n  },\n  {\n    value: '3',\n    label: '3',\n    children: [\n      {\n        value: '3.1',\n        label: '3.1',\n      },\n      {\n        value: '3.2',\n        label: '3.2',\n      },\n    ],\n  },\n  {\n    value: '4',\n    label: '4',\n  },\n];\nexport default () => {\n  const [showLine, setShowLine] = useState(true);\n  const [showIcon, setShowIcon] = useState(true);\n  const getLineNodes = (node) => {\n    const nodes = node.getParents().reverse();\n    const lineNodes = [];\n    nodes.forEach((item, index) => {\n      const line = {};\n      const nextItem = nodes[index + 1];\n      if (index < nodes.length - 1 && nextItem) {\n        line.cross = !nextItem.isLast();\n      }\n      lineNodes.push(line);\n    });\n    return lineNodes;\n  };\n\n  // TODO: complete type\n  const renderLine = (node) => {\n    if (!showLine) return null;\n    return (\n      <div\n        className={classNames('custom-line', {\n          'custom-line-first': node.isFirst(),\n          'custom-line-leaf': node.isLeaf(),\n          'custom-line-last': node.isLast(),\n        })}\n      >\n        <div className=\"custom-line-box\">\n          {getLineNodes(node).map((item, index) => (\n            <span\n              key={index}\n              className={classNames({\n                'custom-line-cross': item.cross,\n              })}\n            />\n          ))}\n        </div>\n        {node.isLeaf() ? (\n          <i className=\"custom-line-icon\">\n            <Icon name={'heart-filled'} />\n          </i>\n        ) : null}\n      </div>\n    );\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Form>\n        <Form.FormItem label=\"显示连线\" initialData={showLine}>\n          <Switch onChange={setShowLine} />\n        </Form.FormItem>\n        <Form.FormItem label=\"显示图标\" initialData={showIcon}>\n          <Switch onChange={setShowIcon} />\n        </Form.FormItem>\n      </Form>\n      <Tree data={items} line={showLine} icon={showIcon} expandAll />\n      <h3>render</h3>\n      <Tree data={items} line={renderLine} icon={showIcon} expandAll />\n    </Space>\n  );\n};\n",
        "desc": "将树中的父节点与其层级内的子节点进行连线。该用法针对子项层级较深且较多的情况，需要更明确表示从属关系。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Form, Switch, Tree, Space } from 'tdesign-react';\n\nconst data1 = [\n  {\n    label: '1',\n    children: [\n      {\n        label: '1.1',\n        children: [\n          {\n            label: '1.1.1',\n          },\n          {\n            label: '1.1.2',\n          },\n        ],\n      },\n      {\n        label: '1.2',\n        children: [\n          {\n            label: '1.2.1',\n          },\n          {\n            label: '1.2.2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    label: '2',\n    children: [\n      {\n        label: '2.1',\n      },\n      {\n        label: '2.2',\n      },\n    ],\n  },\n];\nconst data2 = [\n  {\n    label: '1',\n  },\n  {\n    label: '2',\n  },\n  {\n    label: '3',\n    children: [\n      {\n        label: '3.1',\n      },\n      {\n        label: '3.2',\n      },\n    ],\n  },\n];\nexport default () => {\n  const [items, setItems] = useState(data1);\n  const [hover, setHover] = useState(true);\n  const [transition, setTransition] = useState(true);\n  const handleItemsChange = () => {\n    setItems((v) => (v === data1 ? data2 : data1));\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Form labelWidth={150}>\n        <Form.FormItem label=\"切换数据\">\n          <Switch onChange={handleItemsChange} />\n        </Form.FormItem>\n        <Form.FormItem label=\"提供 hover 状态\" initialData={hover}>\n          <Switch onChange={setHover} />\n        </Form.FormItem>\n        <Form.FormItem label=\"展开动画\" initialData={transition}>\n          <Switch onChange={setTransition} />\n        </Form.FormItem>\n      </Form>\n      <Tree data={items} expandAll hover={hover} transition={transition} />\n    </Space>\n  );\n};\n",
        "desc": "初始化展开全部"
      },
      {
        "code": "import React from 'react';\nimport { Tree } from 'tdesign-react';\n\nconst items = [\n  {\n    label: '1',\n    children: [\n      {\n        label: '1.1',\n        children: [\n          {\n            label: '1.1.1',\n          },\n          {\n            label: '1.1.2',\n          },\n        ],\n      },\n      {\n        label: '1.2',\n        children: [\n          {\n            label: '1.2.1',\n          },\n          {\n            label: '1.2.2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    label: '2',\n    children: [\n      {\n        label: '2.1',\n      },\n      {\n        label: '2.2',\n      },\n    ],\n  },\n];\nexport default () => <Tree hover data={items} expandLevel={1} />;\n",
        "desc": "初始化展开第一级"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Form, Switch, Tree, Space } from 'tdesign-react';\n\nconst items = [\n  {\n    label: '1',\n    children: [\n      {\n        label: '1.1',\n        children: [\n          {\n            label: '1.1.1',\n          },\n          {\n            label: '1.1.2',\n          },\n        ],\n      },\n      {\n        label: '1.2',\n        children: [\n          {\n            label: '1.2.1',\n          },\n          {\n            label: '1.2.2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    label: '2',\n    children: [\n      {\n        label: '2.1',\n        children: [\n          {\n            label: '2.1.1',\n          },\n          {\n            label: '2.1.2',\n          },\n        ],\n      },\n      {\n        label: '2.2',\n        children: [\n          {\n            label: '2.2.1',\n          },\n          {\n            label: '2.2.2',\n          },\n        ],\n      },\n    ],\n  },\n];\nexport default () => {\n  const [mutex, setMutex] = useState(true);\n  const [expandOnClickNode, setExpandOnClickNode] = useState(true);\n  const handleClick = (context) => {\n    console.info('onClick', context);\n  };\n  const handleExpand = (value, context) => {\n    console.info('onExpand', value, context);\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Form labelWidth={120}>\n        <Form.FormItem label=\"互斥展开\" initialData={mutex}>\n          <Switch onChange={(v) => setMutex(v)} />\n        </Form.FormItem>\n        <Form.FormItem label=\"整个节点可点击\" initialData={expandOnClickNode}>\n          <Switch onChange={(v) => setExpandOnClickNode(v)} />\n        </Form.FormItem>\n      </Form>\n      <Tree\n        data={items}\n        hover\n        expandMutex={mutex}\n        expandOnClickNode={expandOnClickNode}\n        onClick={handleClick}\n        onExpand={handleExpand}\n      />\n    </Space>\n  );\n};\n",
        "desc": "互斥展开"
      },
      {
        "code": "import React from 'react';\nimport { Tree } from 'tdesign-react';\n\nconst items = [\n  {\n    label: '1',\n    children: true,\n  },\n  {\n    label: '2',\n    children: true,\n  },\n];\nexport default () => {\n  const load = (node) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        let nodes = [];\n        if (node.getLevel() < 2) {\n          nodes = [\n            {\n              label: `${node.label}.1`,\n              children: true,\n            },\n            {\n              label: `${node.label}.2`,\n              children: true,\n            },\n          ];\n        }\n        resolve(nodes);\n      }, 1000);\n    });\n  return <Tree data={items} hover lazy={false} expandAll load={load} />;\n};\n",
        "desc": "异步加载节点"
      },
      {
        "code": "import React from 'react';\nimport { Tree } from 'tdesign-react';\n\nconst items = [\n  {\n    label: '1',\n    children: true,\n  },\n  {\n    label: '2',\n    children: true,\n  },\n];\nexport default () => {\n  const load = (node) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        let nodes = [];\n        if (node.getLevel() < 2) {\n          nodes = [\n            {\n              label: `${node.label}.1`,\n              children: true,\n            },\n            {\n              label: `${node.label}.2`,\n              children: true,\n            },\n          ];\n        }\n        resolve(nodes);\n      }, 1000);\n    });\n  const handleLoad = (state) => {\n    console.log('on load:', state);\n  };\n  return <Tree data={items} hover expandAll load={load} onLoad={handleLoad} />;\n};\n",
        "desc": "默认为点击加载数据。 默认为 。选中父节点时，子节点由于未加载，无法更新和获取选中状态，导致无法更新父节点的状态。 所以使用延迟加载时，推荐  设置为  或者 。"
      },
      {
        "code": "import React, { useEffect, useState } from 'react';\nimport { InputAdornment, Input, Tree, Space } from 'tdesign-react';\n\nconst items = [\n  {\n    value: '1',\n    label: '1',\n    children: [\n      {\n        value: '1.1',\n        label: '1.1',\n        children: [\n          {\n            value: '1.1.1',\n            label: '1.1.1',\n            children: [\n              {\n                value: '1.1.1.1',\n                label: '1.1.1.1',\n              },\n              {\n                value: '1.1.1.2',\n                label: '1.1.1.2',\n              },\n            ],\n          },\n          {\n            value: '1.1.2',\n            label: '1.1.2',\n            children: [\n              {\n                value: '1.1.2.1',\n                label: '1.1.2.1',\n              },\n              {\n                value: '1.1.2.2',\n                label: '1.1.2.2',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        value: '1.2',\n        label: '1.2',\n        children: [\n          {\n            value: '1.2.1',\n            label: '1.2.1',\n            children: [\n              {\n                value: '1.2.1.1',\n                label: '1.2.1.1',\n              },\n              {\n                value: '1.2.1.2',\n                label: '1.2.1.2',\n              },\n            ],\n          },\n          {\n            value: '1.2.2',\n            label: '1.2.2',\n            children: [\n              {\n                value: '1.2.2.1',\n                label: '1.2.2.1',\n              },\n              {\n                value: '1.2.2.2',\n                label: '1.2.2.2',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: '2',\n    label: '2',\n    checkable: false,\n    children: [\n      {\n        value: '2.1',\n        label: '2.1',\n        checkable: false,\n      },\n      {\n        value: '2.2',\n        label: '2.2',\n        checkable: false,\n      },\n    ],\n  },\n];\nconst formatArrToString = (list) => {\n  let arr = [];\n  if (Array.isArray(list)) {\n    arr = list;\n  }\n  return arr.map((val) => `{${val}}`).join(', ');\n};\nconst getValueFromString = (val) => {\n  const arr = val.split(',');\n  const vals = [];\n  arr\n    .map((str) => str.trim())\n    .forEach((tag) => {\n      const match = /^\\{([^{}]+)\\}$/.exec(tag);\n      if (match && match[1]) {\n        vals.push(match[1]);\n      }\n    });\n  return vals;\n};\nexport default () => {\n  const [checked, setChecked] = useState(['1.1.1.1', '1.1.1.2']);\n  const [expanded, setExpanded] = useState(['1', '1.1', '1.1.1', '2']);\n  const [actived, setActived] = useState(['2']);\n  const [allCheckedInput, setAllCheckedInput] = useState(() => formatArrToString(checked));\n  const [allExpandedInput, setAllExpandedInput] = useState(() => formatArrToString(expanded));\n  const [allActivedInput, setAllActivedInput] = useState(() => formatArrToString(actived));\n  const allChecked = formatArrToString(checked);\n  const allExpanded = formatArrToString(expanded);\n  const allActived = formatArrToString(actived);\n\n  // 因为是字符串，直接通过 useEffect 同步\n  useEffect(() => {\n    setAllCheckedInput(allChecked);\n  }, [allChecked]);\n  useEffect(() => {\n    setAllExpandedInput(allExpanded);\n  }, [allExpanded]);\n  useEffect(() => {\n    setAllActivedInput(allActived);\n  }, [allActived]);\n  const handleClick = (context) => {\n    console.info('onClick:', context);\n  };\n  const handleChange = (vals, context) => {\n    console.info('onChange:', vals, context);\n    const checked = vals.filter((val) => val !== '2.1');\n    console.info('节点 2.1 不允许选中');\n    setChecked(checked);\n  };\n  const handleExpand = (vals, context) => {\n    console.info('onExpand:', vals, context);\n    const expanded = vals.filter((val) => val !== '2');\n    console.info('节点 2 不允许展开');\n    setExpanded(expanded);\n  };\n  const handleActive = (vals, context) => {\n    console.info('onActive:', vals, context);\n    const actived = vals.filter((val) => val !== '2');\n    console.info('节点 2 不允许激活');\n    setActived(actived);\n  };\n  const handleAllCheckedChange = (val) => {\n    console.log('checked input on change', val);\n    setAllCheckedInput(val);\n  };\n  const handleAllCheckedSubmit = () => {\n    console.log('submit checked', allCheckedInput);\n    const vals = getValueFromString(allCheckedInput);\n    setChecked(vals);\n  };\n  const handleAllExpandedChange = (val) => {\n    console.log('expanded input on change', val);\n    setAllExpandedInput(val);\n  };\n  const handleAllExpandedSubmit = () => {\n    console.log('submit expanded', allExpandedInput);\n    const vals = getValueFromString(allExpandedInput);\n    setExpanded(vals);\n  };\n  const handleAllActivedInput = (val) => {\n    console.log('actived input on change', val);\n    setAllActivedInput(val);\n  };\n  const handleAllActivedSubmit = () => {\n    console.log('submit actived', allActivedInput);\n    const vals = getValueFromString(allActivedInput);\n    setActived(vals);\n  };\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <InputAdornment prepend=\"checked:\">\n        <Input\n          value={allCheckedInput}\n          onChange={handleAllCheckedChange}\n          onBlur={handleAllCheckedSubmit}\n          onEnter={handleAllCheckedSubmit}\n        />\n      </InputAdornment>\n      <InputAdornment prepend=\"expanded:\">\n        <Input\n          value={allExpandedInput}\n          onChange={handleAllExpandedChange}\n          onBlur={handleAllExpandedSubmit}\n          onEnter={handleAllExpandedSubmit}\n        />\n      </InputAdornment>\n      <InputAdornment prepend=\"actived:\">\n        <Input\n          value={allActivedInput}\n          onChange={handleAllActivedInput}\n          onBlur={handleAllActivedSubmit}\n          onEnter={handleAllActivedSubmit}\n        />\n      </InputAdornment>\n      <Tree\n        data={items}\n        checkable\n        activable\n        expandOnClickNode={false}\n        activeMultiple={false}\n        expanded={expanded}\n        actived={actived}\n        value={checked}\n        valueMode=\"onlyLeaf\"\n        onExpand={handleExpand}\n        onClick={handleClick}\n        onActive={handleActive}\n        onChange={handleChange}\n      />\n    </Space>\n  );\n};\n",
        "desc": "受控用法"
      },
      {
        "code": "import React, { useEffect, useState, useRef } from 'react';\nimport { Tree, Switch, Space, Form, Button } from 'tdesign-react';\n\nexport default () => {\n  const [checkable, setCheckable] = useState(true);\n  const [showLine, toggleShowLine] = useState(true);\n  const [options, setOptions] = useState([]);\n  const treeRef = useRef(null);\n  useEffect(() => {\n    const newOptions = [];\n    for (let i = 1; i <= 3000; i++) {\n      newOptions.push({\n        label: `第${i}段`,\n        value: i,\n        children: [\n          {\n            label: `第${i}段第1个子节点`,\n            value: `${i}.1`,\n          },\n          {\n            label: `第${i}段第2个子节点`,\n            value: `${i}.2`,\n          },\n        ],\n      });\n    }\n    setOptions(newOptions);\n  }, []);\n  const handleScroll = () => {\n    treeRef.current.scrollTo({\n      key: '10.1',\n      behavior: 'smooth',\n    });\n  };\n  const defaultChecked = ['1.2', '2.2'];\n  return (\n    <Space direction=\"vertical\">\n      <Form>\n        <Form.FormItem label=\"可选\" initialData={checkable}>\n          <Switch onChange={setCheckable} />\n        </Form.FormItem>\n        <Form.FormItem label=\"展示连线\" initialData={showLine}>\n          <Switch onChange={toggleShowLine} />\n        </Form.FormItem>\n      </Form>\n      <Button onClick={handleScroll}>scroll to special node</Button>\n      <Tree\n        data={options}\n        defaultValue={defaultChecked}\n        line={showLine}\n        checkable={checkable}\n        transition\n        activable\n        expandAll\n        hover\n        scroll={{\n          type: 'virtual',\n        }}\n        style={{\n          height: '300px',\n        }}\n        ref={treeRef}\n      />\n    </Space>\n  );\n};\n",
        "desc": "虚拟滚动"
      }
    ]
  },
  {
    "name": "<Watermark/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Watermark } from 'tdesign-react';\n\nexport default function BaseWatermark() {\n  return (\n    <Watermark\n      watermarkContent={{\n        text: '文字水印',\n      }}\n      y={120}\n      x={80}\n    >\n      <div\n        style={{\n          height: 300,\n        }}\n      ></div>\n    </Watermark>\n  );\n}\n",
        "desc": "单行文本水印"
      },
      {
        "code": "import React from 'react';\nimport { Watermark } from 'tdesign-react';\n\nexport default function ImageWatermark() {\n  return (\n    <Watermark\n      watermarkContent={{\n        url: 'https://tdesign.gtimg.com/site/logo-watermark.svg',\n      }}\n      width={104}\n      height={65.5}\n      x={90}\n      y={100}\n      rotate={0}\n    >\n      <div\n        style={{\n          height: 300,\n        }}\n      ></div>\n    </Watermark>\n  );\n}\n",
        "desc": "图片水印"
      },
      {
        "code": "import React from 'react';\nimport { Watermark } from 'tdesign-react';\n\nexport default function MultilineWatermark() {\n  return (\n    <Watermark\n      watermarkContent={[\n        {\n          text: '水印文本',\n          fontColor: 'black',\n        },\n        {\n          url: 'https://tdesign.gtimg.com/starter/brand-logo-light.png',\n        },\n      ]}\n      lineSpace={24}\n      x={100}\n      y={120}\n      width={158}\n      height={22}\n      alpha={0.3}\n    >\n      <div\n        style={{\n          height: 300,\n        }}\n      ></div>\n    </Watermark>\n  );\n}\n",
        "desc": "多行文本水印"
      },
      {
        "code": "import React from 'react';\nimport { Watermark } from 'tdesign-react';\n\nexport default function MovingTextWatermark() {\n  return (\n    <Watermark\n      watermarkContent={{\n        text: '©️版权所有',\n      }}\n      movable\n    >\n      <div\n        style={{\n          height: 300,\n        }}\n      ></div>\n    </Watermark>\n  );\n}\n",
        "desc": "运动文字水印"
      },
      {
        "code": "import React from 'react';\nimport { Watermark } from 'tdesign-react';\n\nexport default function MovingImageWatermark() {\n  return (\n    <Watermark\n      watermarkContent={{\n        url: 'https://tdesign.gtimg.com/starter/brand-logo-light.png',\n      }}\n      movable\n      width={158}\n      height={22}\n    >\n      <div\n        style={{\n          height: 300,\n        }}\n      ></div>\n    </Watermark>\n  );\n}\n",
        "desc": "运动图片水印"
      },
      {
        "code": "import React from 'react';\nimport { Watermark } from 'tdesign-react';\n\nexport default function GrayscaleWatermark() {\n  return (\n    <Watermark\n      watermarkContent={{\n        url: 'https://tdesign.gtimg.com/starter/brand-logo-light.png',\n        isGrayscale: true,\n      }}\n      x={100}\n      y={140}\n      width={158}\n      height={22}\n      alpha={0.3}\n    >\n      <div\n        style={{\n          height: 300,\n        }}\n      ></div>\n    </Watermark>\n  );\n}\n",
        "desc": "图片灰阶水印"
      }
    ]
  },
  {
    "name": "<Rate/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Rate } from 'tdesign-react';\n\nexport default function BasicRate() {\n  return <Rate defaultValue={3} />;\n}\n",
        "desc": "实心评分"
      },
      {
        "code": "import React from 'react';\nimport { Rate } from 'tdesign-react';\n\nexport default function BasicRate() {\n  return <Rate count={7} defaultValue={6} />;\n}\n",
        "desc": "自定义评分数量"
      },
      {
        "code": "import React from 'react';\nimport { Rate } from 'tdesign-react';\n\nexport default function BasicRate() {\n  return <Rate showText defaultValue={4} />;\n}\n",
        "desc": "带描述评分"
      },
      {
        "code": "import React from 'react';\nimport { Space, Rate } from 'tdesign-react';\n\nexport default function BasicRate() {\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        textAlign: 'center',\n      }}\n    >\n      <h3>未评分状态</h3>\n      <Rate />\n\n      <h3>满分状态</h3>\n      <Rate defaultValue={5} />\n\n      <h3>半星状态</h3>\n      <Rate allowHalf defaultValue={4.5} />\n    </Space>\n  );\n}\n",
        "desc": "组件状态"
      },
      {
        "code": "import React from 'react';\nimport { Space, Rate } from 'tdesign-react';\n\nexport default function BasicRate() {\n  return (\n    <Space direction=\"vertical\">\n      <h3>16px</h3>\n      <Rate size={`16`} defaultValue={5} />\n\n      <h3>24px</h3>\n      <Rate defaultValue={5} />\n    </Space>\n  );\n}\n",
        "desc": "可以通过  属性调整图标尺寸。"
      },
      {
        "code": "import React from 'react';\nimport { Rate, Space } from 'tdesign-react';\nimport { StarIcon, LogoGithubIcon, HeartFilledIcon } from 'tdesign-icons-react';\n\nexport default function BasicRate() {\n  return (\n    <Space direction=\"vertical\">\n      <Rate defaultValue={1} icon={<StarIcon />} />\n      <Rate defaultValue={2} icon={<LogoGithubIcon />} />\n      <Rate defaultValue={2.5} allowHalf icon={<HeartFilledIcon />} color={'var(--td-error-color-7)'} />\n    </Space>\n  );\n}\n",
        "desc": "可以通过  属性自定义高亮图标。"
      }
    ]
  },
  {
    "name": "<Alert/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Alert, Space } from 'tdesign-react';\n\nexport default function AlertBase() {\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Alert theme=\"success\" message=\"这是一条成功的消息提示\" />\n      <Alert theme=\"info\" message=\"这是一条普通的消息提示\" />\n      <Alert theme=\"warning\" message=\"这是一条警示消息\" />\n      <Alert theme=\"error\" message=\"高危操作/出错信息提示\" />\n    </Space>\n  );\n}\n",
        "desc": "使用简洁文字提示的最基础警告条，包含 4 种情况的提示：普通消息，成功，警示，失败。"
      },
      {
        "code": "import React from 'react';\nimport { Alert, Space } from 'tdesign-react';\n\nexport default function AlertOperation() {\n  const operation = <span>相关操作</span>;\n  return (\n    <Space\n      direction=\"vertical\"\n      style={{\n        width: '100%',\n      }}\n    >\n      <Alert\n        theme=\"success\"\n        message=\"这是一条成功的消息提示\"\n        operation={operation}\n        close\n        onClosed={() => {\n          console.log('onClosed');\n        }}\n      />\n      <Alert theme=\"info\" message=\"这是一条普通的消息提示\" operation={operation} close />\n      <Alert theme=\"warning\" message=\"这是一条警示消息\" operation={operation} close />\n      <Alert theme=\"error\" message=\"高危操作/出错信息提示\" operation={operation} close />\n    </Space>\n  );\n}\n",
        "desc": "当需要对此警告做操作，可以配置  来增加相关操作。"
      },
      {
        "code": "import React from 'react';\nimport { Alert } from 'tdesign-react';\n\nexport default function AlertDescription() {\n  const operation = <span>相关操作</span>;\n  return (\n    <Alert\n      message=\"这是一条普通的消息提示描述，这是一条普通的消息提示描述\"\n      title=\"这是一条普通的消息提示\"\n      operation={operation}\n      close\n    />\n  );\n}\n",
        "desc": "当信息内容较复杂时，可使用相关描述文字辅助说明。"
      },
      {
        "code": "import React from 'react';\nimport { Alert } from 'tdesign-react';\n\nexport default function AlertCollapsed() {\n  const message = [\n    '1.这是一条普通的消息提示描述，',\n    '2.这是一条普通的消息提示描述，',\n    '3.这是一条普通的消息提示描述，',\n    '4.这是一条普通的消息提示描述，',\n    '5.这是一条普通的消息提示描述，',\n  ];\n  return <Alert message={message} maxLine={2} close />;\n}\n",
        "desc": "当信息内容超过 2 行时，可使用折叠的方式将部分信息隐藏。"
      }
    ]
  },
  {
    "name": "<Dialog/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { Dialog, Button } from 'tdesign-react';\n\nexport default function BasicUsage() {\n  const [visible, setVisible] = useState(false);\n  const handleClick = () => {\n    setVisible(true);\n  };\n  const onConfirm = (context) => {\n    console.log('点击了确认按钮', context);\n    setVisible(false);\n  };\n  const onCancel = (context) => {\n    console.log('点击了取消按钮', context);\n  };\n  const onClickCloseBtn = (context) => {\n    console.log('点击了关闭按钮', context);\n  };\n  const onKeydownEsc = (context) => {\n    console.log('按下了ESC', context);\n  };\n  const onClickOverlay = (context) => {\n    console.log('点击了蒙层', context);\n  };\n  const handleClose = (context) => {\n    console.log('关闭弹窗，点击关闭按钮、按下ESC、点击蒙层等触发', context);\n    setVisible(false);\n  };\n  return (\n    <>\n      <Button theme=\"primary\" onClick={handleClick}>\n        Open Modal\n      </Button>\n      <Dialog\n        header=\"Basic Modal\"\n        visible={visible}\n        confirmOnEnter\n        onClose={handleClose}\n        onConfirm={onConfirm}\n        onCancel={onCancel}\n        onEscKeydown={onKeydownEsc}\n        onCloseBtnClick={onClickCloseBtn}\n        onOverlayClick={onClickOverlay}\n      >\n        <p>This is a dialog</p>\n      </Dialog>\n    </>\n  );\n}\n",
        "desc": "指带有取消及主要操作，指导用户进行二次确认的对话框。常用于反馈或容错的场景。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Dialog, Button, Space } from 'tdesign-react';\nimport { CloseCircleFilledIcon } from 'tdesign-icons-react';\n\nexport default function WarningExample() {\n  const [visibleConfirm, setVisibleConfirm] = useState(false);\n  const [visibleSuccess, setVisibleSuccess] = useState(false);\n  const [visibleWarning, setVisibleWarning] = useState(false);\n  const [visibleError, setVisibleError] = useState(false);\n  const onClickConfirm = () => {\n    setVisibleConfirm(true);\n  };\n  const onSuccess = () => {\n    setVisibleSuccess(true);\n  };\n  const onWarning = () => {\n    setVisibleWarning(true);\n  };\n  const onError = () => {\n    setVisibleError(true);\n  };\n  const onCloseConfirm = () => {\n    setVisibleConfirm(false);\n  };\n  const onCloseSuccess = () => {\n    setVisibleSuccess(false);\n  };\n  const onCloseWraing = () => {\n    setVisibleWarning(false);\n  };\n  const onCloseError = () => {\n    setVisibleError(false);\n  };\n  return (\n    <Space breakLine>\n      <Button theme=\"primary\" onClick={onClickConfirm}>\n        提示反馈\n      </Button>\n      <Button theme=\"primary\" onClick={onSuccess}>\n        成功反馈\n      </Button>\n      <Button theme=\"primary\" onClick={onWarning}>\n        警示反馈\n      </Button>\n      <Button theme=\"primary\" onClick={onError}>\n        错误反馈\n      </Button>\n\n      <Dialog header=\"提示\" theme=\"info\" cancelBtn={false} visible={visibleConfirm} onClose={onCloseConfirm}></Dialog>\n\n      <Dialog\n        theme=\"success\"\n        header=\"成功\"\n        cancelBtn={false}\n        visible={visibleSuccess}\n        onClose={onCloseSuccess}\n      ></Dialog>\n      <Dialog theme=\"warning\" header=\"警示\" cancelBtn={false} visible={visibleWarning} onClose={onCloseWraing}></Dialog>\n      <Dialog\n        header={\n          <>\n            <CloseCircleFilledIcon\n              style={{\n                color: 'rgb(227, 77, 89)',\n              }}\n            />\n            <span>我是主要信息，我是主要信息</span>\n          </>\n        }\n        cancelBtn={false}\n        visible={visibleError}\n        onClose={onCloseError}\n      ></Dialog>\n    </Space>\n  );\n}\n",
        "desc": "指显示某操作结果的对话框，标题区域有图标，仅有一个确认按钮。常用于操作后结果的展示，或危险、警告等信息的展示。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Dialog, Button, DialogPlugin } from 'tdesign-react';\n\nasync function delay(time) {\n  return new Promise((resolve) => setTimeout(resolve, time * 1000));\n}\nexport default function BasicUsage() {\n  const [visible, setVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const handleClick = () => {\n    setVisible(true);\n  };\n  const handleClose = () => {\n    setVisible(false);\n  };\n  const handleCloseAsync = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setVisible(false);\n      setLoading(false);\n    }, 2000);\n  };\n  function showFunctionCallDialog() {\n    // 函数调用组件\n    const myDialog = DialogPlugin({\n      header: 'Basic Modal',\n      body: 'This is a dialog',\n      onConfirm: async ({ e }) => {\n        console.log('confirm clicked', e);\n        myDialog.setConfirmLoading(true);\n        await delay(3);\n        myDialog.setConfirmLoading(false);\n        myDialog.hide();\n      },\n      onClose: ({ e, trigger }) => {\n        console.log('e: ', e);\n        console.log('trigger: ', trigger);\n        myDialog.hide();\n      },\n      onCloseBtnClick: ({ e }) => {\n        console.log('close btn: ', e);\n      },\n    });\n  }\n  return (\n    <>\n      <Button\n        theme=\"primary\"\n        onClick={handleClick}\n        style={{\n          marginRight: 16,\n        }}\n      >\n        Open Modal\n      </Button>\n\n      <Button theme=\"primary\" onClick={showFunctionCallDialog}>\n        Open Plugin Modal\n      </Button>\n\n      <Dialog\n        header=\"Basic Modal\"\n        visible={visible}\n        confirmLoading={loading}\n        onClose={handleClose}\n        onConfirm={handleCloseAsync}\n      >\n        <p>This is a dialog</p>\n      </Dialog>\n    </>\n  );\n}\n",
        "desc": "按钮带加载标识，操作需要异步完成的对话框。适用于当前操作需要异步完成，等待后再自动关闭对话框。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Dialog, Button } from 'tdesign-react';\n\nexport default function CustomFooterExample() {\n  const [visibleConfirm, setVisibleConfirm] = useState(false);\n  const [visibleBtn, setVisibleBtn] = useState(false);\n  const [visibleFooter, setVisibleFooter] = useState(false);\n  const handleConfirmClick = () => {\n    setVisibleConfirm(true);\n  };\n  const handleConfirmClose = () => {\n    setVisibleConfirm(false);\n  };\n  const handleBtnClick = () => {\n    setVisibleBtn(true);\n  };\n  const handleBtnClose = () => {\n    setVisibleBtn(false);\n  };\n  const handleFooterClick = () => {\n    setVisibleFooter(true);\n  };\n  const handleFooterClose = () => {\n    setVisibleFooter(false);\n  };\n  return (\n    <>\n      <Button\n        theme=\"primary\"\n        onClick={handleConfirmClick}\n        style={{\n          marginRight: 16,\n        }}\n      >\n        只显示确认按钮\n      </Button>\n      <Button\n        theme=\"primary\"\n        onClick={handleBtnClick}\n        style={{\n          marginRight: 16,\n        }}\n      >\n        自定义按钮内容\n      </Button>\n      <Button\n        theme=\"primary\"\n        onClick={handleFooterClick}\n        style={{\n          marginRight: 16,\n        }}\n      >\n        自定义内容\n      </Button>\n      <Dialog header=\"只显示确认按钮\" visible={visibleConfirm} cancelBtn={false} onClose={handleConfirmClose}>\n        <p>This is a dialog</p>\n      </Dialog>\n      <Dialog\n        header=\"自定义按钮内容\"\n        visible={visibleBtn}\n        confirmBtn=\"去意已决\"\n        cancelBtn=\"我再想想\"\n        onClose={handleBtnClose}\n      >\n        <p>This is a dialog</p>\n      </Dialog>\n      <Dialog\n        header=\"自定义footer\"\n        visible={visibleFooter}\n        footer={\n          <>\n            <div\n              style={{\n                display: 'inline-block',\n                marginRight: 8,\n              }}\n            >\n              自定义的footer{' '}\n            </div>\n            <Button theme=\"primary\" onClick={handleFooterClose}>\n              好吧\n            </Button>\n          </>\n        }\n        onClose={handleFooterClose}\n      >\n        <p>This is a dialog</p>\n      </Dialog>\n    </>\n  );\n}\n",
        "desc": "可自定义对话框内容和底部按钮。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Dialog, DialogCard, Button, Select } from 'tdesign-react';\n\nexport default function NotModalExample() {\n  const [visible, setVisible] = useState(false);\n  const [visible1, setVisible1] = useState(false);\n  const [visible2, setVisible2] = useState(false);\n  const [value, setValue] = useState('');\n  const handleClick = () => {\n    setVisible(true);\n  };\n  const handleClose = () => {\n    setVisible(false);\n  };\n  const handleClose1 = () => {\n    setVisible1(false);\n  };\n  const handleClose2 = () => {\n    setVisible2(false);\n  };\n  const onChange = (value) => {\n    setValue(value);\n  };\n  return (\n    <>\n      <Button\n        theme=\"primary\"\n        onClick={handleClick}\n        style={{\n          marginRight: 16,\n        }}\n      >\n        模态对话框\n      </Button>\n      <Button\n        theme=\"primary\"\n        onClick={() => {\n          setVisible1(true);\n        }}\n        style={{\n          marginRight: 16,\n        }}\n      >\n        非模态对话框\n      </Button>\n      <Button\n        theme=\"primary\"\n        onClick={() => {\n          setVisible2(true);\n        }}\n        style={{\n          marginRight: 16,\n        }}\n      >\n        非模态对话框2\n      </Button>\n\n      <Dialog\n        width={800}\n        header=\"模态对话框\"\n        visible={visible}\n        onClose={handleClose}\n        onCloseBtnClick={() => {\n          console.log('on click close btn');\n        }}\n        onOpened={() => {\n          console.log('dialog is open');\n        }}\n      >\n        <p>This is a dialog</p>\n      </Dialog>\n      <Dialog\n        mode=\"modeless\"\n        header=\"非模态对话框\"\n        draggable={true}\n        visible={visible1}\n        onClose={handleClose1}\n        onOpened={() => {\n          console.log('dialog is open');\n        }}\n      >\n        <Select\n          value={value}\n          onChange={onChange}\n          style={{\n            width: '40%',\n          }}\n          clearable\n          options={[\n            {\n              label: '架构云',\n              value: '1',\n            },\n            {\n              label: '大数据',\n              value: '2',\n            },\n            {\n              label: '区块链',\n              value: '3',\n            },\n            {\n              label: '物联网',\n              value: '4',\n              disabled: true,\n            },\n            {\n              label: '人工智能',\n              value: '5',\n            },\n          ]}\n        ></Select>\n      </Dialog>\n      <Dialog\n        mode=\"modeless\"\n        header=\"非模态对话框2\"\n        draggable={true}\n        visible={visible2}\n        onClose={handleClose2}\n        onOpened={() => {\n          console.log('dialog is open');\n        }}\n      >\n        <p>This is a dialog</p>\n      </Dialog>\n      <DialogCard header=\"普通对话框\">\n        <p>This is a dialog</p>\n      </DialogCard>\n    </>\n  );\n}\n",
        "desc": "模态对话框会中断用户操作，必须处理当前对话框内容后才能进行其他操作。非模态框不中断用户操作。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Dialog, Button } from 'tdesign-react';\n\nexport default function PositionExample() {\n  const [visible, setVisible] = useState(false);\n  const [placement, setPlacement] = useState('center');\n  const [topData, setTopData] = useState('');\n  const [visible1, setVisible1] = useState(false);\n  const handleClick = (placement) => {\n    setVisible(true);\n    setPlacement(placement);\n    setTopData('');\n  };\n  const handleClose = () => {\n    setVisible(false);\n  };\n  const handleClose1 = () => {\n    setVisible1(false);\n  };\n  return (\n    <>\n      <Button\n        theme=\"primary\"\n        onClick={() => handleClick('top')}\n        style={{\n          marginRight: 16,\n        }}\n      >\n        默认\n      </Button>\n      <Button\n        theme=\"primary\"\n        onClick={() => handleClick('center')}\n        style={{\n          marginRight: 16,\n        }}\n      >\n        垂直居中\n      </Button>\n      <Button\n        theme=\"primary\"\n        onClick={() => {\n          setVisible(true);\n          setTopData('100');\n        }}\n        style={{\n          marginRight: 16,\n        }}\n      >\n        自定义\n      </Button>\n      <Button\n        theme=\"primary\"\n        onClick={() => {\n          setVisible1(true);\n          setTopData('100px');\n        }}\n      >\n        超出屏幕\n      </Button>\n\n      <Dialog\n        header=\"位置演示\"\n        visible={visible}\n        top={topData}\n        showOverlay\n        zIndex={2000}\n        placement={placement}\n        onClose={handleClose}\n        onOpened={() => {\n          console.log('dialog is open');\n        }}\n        onClosed={() => {\n          console.log('dialog is closed');\n        }}\n      >\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n      </Dialog>\n      <Dialog\n        header=\"位置演示\"\n        visible={visible1}\n        showOverlay\n        zIndex={2000}\n        onClose={handleClose1}\n        onOpened={() => {\n          console.log('dialog is open');\n        }}\n        onClosed={() => {\n          console.log('dialog is closed');\n        }}\n      >\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n        <p>This is a dialog</p>\n      </Dialog>\n    </>\n  );\n}\n",
        "desc": "可以通过  和  属性来自定义控制对话框位置。"
      },
      {
        "code": "import React, { useState, useRef } from 'react';\nimport { Dialog, Button } from 'tdesign-react';\n\nconst buttonStyle = {\n  marginRight: 16,\n};\nexport default function AttachModalExample() {\n  const elRef = useRef(null);\n  const [state, setState] = useState({\n    visibleBody: false,\n    visibleIdAttach: false,\n    visibleFunctionAttach: false,\n    visibleShowInAttachedElement: false,\n  });\n  const handleOpen = (visibleName) => {\n    setState({\n      ...state,\n      [visibleName]: true,\n    });\n  };\n  const handleClose = (visibleName) => {\n    setState({\n      ...state,\n      [visibleName]: false,\n    });\n  };\n  const getAttach = () => elRef.current;\n  const { visibleBody, visibleIdAttach, visibleFunctionAttach, visibleShowInAttachedElement } = state;\n  return (\n    <div\n      ref={elRef}\n      style={{\n        position: 'relative',\n        height: '400px',\n      }}\n    >\n      <Button theme=\"primary\" onClick={() => handleOpen('visibleBody')} style={buttonStyle}>\n        挂载在body\n      </Button>\n      <Button theme=\"primary\" onClick={() => handleOpen('visibleIdAttach')} style={buttonStyle}>\n        挂载特定元素\n      </Button>\n      <Button theme=\"primary\" onClick={() => handleOpen('visibleFunctionAttach')} style={buttonStyle}>\n        挂载函数返回节点\n      </Button>\n      <Button theme=\"primary\" onClick={() => handleOpen('visibleShowInAttachedElement')} style={buttonStyle}>\n        展示在挂载元素区域\n      </Button>\n      <Dialog\n        attach=\"body\"\n        header=\"挂载在body\"\n        visible={visibleBody}\n        onClose={() => handleClose('visibleBody')}\n        onOpened={() => {\n          console.log('dialog is open');\n        }}\n      >\n        <div>\n          <div>我是被挂载到body元素的对话框</div>\n          <div>我是内容</div>\n          <div>我是内容</div>\n          <div>我是内容</div>\n          <div>我是内容</div>\n        </div>\n      </Dialog>\n      <Dialog\n        attach=\"#app\"\n        header=\"挂载到id为app的元素\"\n        visible={visibleIdAttach}\n        onClose={() => handleClose('visibleIdAttach')}\n        onOpened={() => {\n          console.log('dialog is open');\n        }}\n      >\n        <div>\n          <div>通过querySelect指定元素挂载</div>\n          <div>支持原生document.querySelect选择元素</div>\n          <div>querySelect获取到的第一个元素为挂载点</div>\n          <div>我是内容</div>\n          <div>我是内容</div>\n        </div>\n      </Dialog>\n      <Dialog\n        attach={getAttach}\n        header=\"函数返回挂载节点\"\n        visible={visibleFunctionAttach}\n        onClose={() => handleClose('visibleFunctionAttach')}\n        onOpened={() => {\n          console.log('dialog is open');\n        }}\n      >\n        <div>\n          <div>指定函数返回的节点为挂载点</div>\n          <div>函数返回为DOM节点对象</div>\n          <div>我是内容</div>\n          <div>我是内容</div>\n          <div>我是内容</div>\n        </div>\n      </Dialog>\n\n      <Dialog\n        header=\"展示在挂载元素区域\"\n        attach={getAttach}\n        showInAttachedElement={true}\n        visible={visibleShowInAttachedElement}\n        onClose={() => handleClose('visibleShowInAttachedElement')}\n        onOpened={() => {\n          console.log('dialog is open');\n        }}\n      >\n        <div>\n          <div>父元素（挂载元素）需要有定位属性，如：position: relative</div>\n          <div>showInAttachedElement API 仅针对模态对话框有效</div>\n        </div>\n      </Dialog>\n    </div>\n  );\n}\n",
        "desc": "指定对话框元素挂载 DOM。"
      },
      {
        "code": "import React from 'react';\nimport { DialogPlugin, Button, Space } from 'tdesign-react';\n\nconst buttonStyle = {\n  marginRight: 16,\n};\nexport default function PluginModalExample() {\n  const showDialog = () => {\n    const myDialog = DialogPlugin({\n      header: 'Dialog-Plugin',\n      body: 'Hi, darling! Do you want to be my lover?',\n      onConfirm: ({ e }) => {\n        console.log('confirm clicked', e);\n        myDialog.hide();\n      },\n      onClose: ({ e, trigger }) => {\n        console.log('e: ', e);\n        console.log('trigger: ', trigger);\n        myDialog.hide();\n      },\n      onCloseBtnClick: ({ e }) => {\n        console.log('close btn: ', e);\n      },\n    });\n  };\n  const handleDN = () => {\n    const dialogNode = DialogPlugin({\n      header: 'Dialog-Plugin',\n      body: 'Hi, darling! Do you want to be my lover?',\n    });\n    dialogNode.update({\n      header: 'Updated-Dialog-Plugin',\n      cancelBtn: null,\n      onConfirm: ({ e }) => {\n        console.log('confirm button has been clicked!');\n        console.log('e: ', e);\n        dialogNode.hide();\n        dialogNode.destroy();\n      },\n      onClose: ({ e, trigger }) => {\n        console.log('e: ', e);\n        console.log('trigger: ', trigger);\n        dialogNode.hide();\n      },\n    });\n  };\n  const onConfirm = () => {\n    const confirmDia = DialogPlugin.confirm({\n      header: 'Dialog-Confirm-Plugin',\n      body: 'Are you sure to delete it?',\n      confirmBtn: 'ok',\n      cancelBtn: 'cancel',\n      onConfirm: ({ e }) => {\n        console.log('confirm button has been clicked!');\n        console.log('e: ', e);\n        confirmDia.hide();\n      },\n      onClose: ({ e, trigger }) => {\n        console.log('e: ', e);\n        console.log('trigger: ', trigger);\n        confirmDia.hide();\n      },\n    });\n  };\n  const onAlert = () => {\n    const alertDia = DialogPlugin.alert({\n      header: 'Dialog-Alert-Plugin',\n      body: 'Notice: Your balance is going to be empty.',\n      confirmBtn: {\n        content: 'Got it!',\n        variant: 'base',\n        theme: 'danger',\n      },\n      onConfirm: ({ e }) => {\n        console.log('confirm e: ', e);\n        alertDia.hide();\n      },\n      onClose: ({ e, trigger }) => {\n        console.log('close e: ', e);\n        console.log('trigger: ', trigger);\n        alertDia.hide();\n      },\n    });\n  };\n  const onDialogPluginConfirm = () => {\n    const confirmDia = DialogPlugin.confirm({\n      header: 'Dialog-Confirm-Plugin',\n      body: 'Are you sure to delete it?',\n      confirmBtn: 'ok',\n      cancelBtn: 'cancel',\n      onConfirm: ({ e }) => {\n        console.log('confirm button has been clicked!');\n        console.log('e: ', e);\n        confirmDia.hide();\n      },\n      onClose: ({ e, trigger }) => {\n        console.log('e: ', e);\n        console.log('trigger: ', trigger);\n        confirmDia.hide();\n      },\n    });\n  };\n  return (\n    <Space direction=\"vertical\">\n      <p>函数调用方式一：DialogPlugin(options)</p>\n      <p>函数调用方式二：DialogPlugin.confirm(options)</p>\n      <p>函数调用方式三：DialogPlugin.alert(options)</p>\n      <div>\n        <Button theme=\"primary\" onClick={showDialog} style={buttonStyle}>\n          dialog\n        </Button>\n        <Button theme=\"primary\" onClick={handleDN} style={buttonStyle}>\n          handleDialogNode\n        </Button>\n        <Button theme=\"primary\" onClick={onConfirm} style={buttonStyle}>\n          confirm\n        </Button>\n        <Button theme=\"primary\" onClick={onAlert} style={buttonStyle}>\n          alert\n        </Button>\n        <Button theme=\"primary\" onClick={onDialogPluginConfirm} style={buttonStyle}>\n          DialogPlugin.confirm\n        </Button>\n      </div>\n    </Space>\n  );\n}\n",
        "desc": "组件实例方法-更新弹框："
      }
    ]
  },
  {
    "name": "<Drawer/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { Drawer, Button } from 'tdesign-react';\n\nexport default function () {\n  const [visible, setVisible] = useState(false);\n  const handleClick = () => {\n    setVisible(true);\n  };\n  const handleClose = () => {\n    setVisible(false);\n  };\n  return (\n    <>\n      <Button theme=\"primary\" onClick={handleClick}>\n        打开抽屉\n      </Button>\n      <Drawer header=\"抽屉标题\" visible={visible} onClose={handleClose}>\n        <p>抽屉的内容</p>\n      </Drawer>\n    </>\n  );\n}\n",
        "desc": "承载展示性的信息内容。当页面空间有限时，可用抽屉增大页面扩展性。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Drawer, Button, Input, Form } from 'tdesign-react';\n\nexport default function () {\n  const [visible, setVisible] = useState(false);\n  const handleClick = () => {\n    setVisible(true);\n  };\n  const handleClose = () => {\n    setVisible(false);\n  };\n  return (\n    <>\n      <Button theme=\"primary\" onClick={handleClick}>\n        打开抽屉\n      </Button>\n      <Drawer header=\"抽屉标题\" visible={visible} onClose={handleClose}>\n        <Form labelWidth={60}>\n          <Form.FormItem label=\"Label A\">\n            <Input />\n          </Form.FormItem>\n          <Form.FormItem label=\"Label B\">\n            <Input />\n          </Form.FormItem>\n        </Form>\n      </Drawer>\n    </>\n  );\n}\n",
        "desc": "操作类抽屉在抽屉中承载需要编辑或操作的表单，可在用户需要操作时使用。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Drawer, Button } from 'tdesign-react';\n\nexport default function () {\n  const [visible, setVisible] = useState(false);\n  const handleClick = () => {\n    setVisible(true);\n  };\n  const handleClose = () => {\n    setVisible(false);\n  };\n  return (\n    <>\n      <Button theme=\"primary\" onClick={handleClick}>\n        打开抽屉\n      </Button>\n      <Drawer header=\"抽屉标题\" visible={visible} onClose={handleClose} showOverlay={false}>\n        <p>抽屉的内容</p>\n      </Drawer>\n    </>\n  );\n}\n",
        "desc": "通过设置，可以控制是否显示抽屉的蒙层。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Drawer, Radio, Button, Space } from 'tdesign-react';\n\nexport default function () {\n  const [visible, setVisible] = useState(false);\n  const [placement, setPlacement] = useState('right');\n  const handleClick = () => {\n    setVisible(true);\n  };\n  const handleClose = () => {\n    setVisible(false);\n  };\n  return (\n    <Space>\n      <Radio.Group value={placement} onChange={(value) => setPlacement(value)}>\n        <Radio.Button value=\"left\">左侧</Radio.Button>\n        <Radio.Button value=\"right\">右侧</Radio.Button>\n        <Radio.Button value=\"top\">上方</Radio.Button>\n        <Radio.Button value=\"bottom\">下方</Radio.Button>\n      </Radio.Group>\n\n      <div>\n        <Button theme=\"primary\" onClick={handleClick}>\n          打开抽屉\n        </Button>\n      </div>\n      <Drawer placement={placement} key={placement} visible={visible} onClose={handleClose}>\n        <p>抽屉的内容</p>\n      </Drawer>\n    </Space>\n  );\n}\n",
        "desc": "通过，可以让抽屉在不同的位置展示。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Drawer, Radio, Button, Space } from 'tdesign-react';\n\nexport default function () {\n  const [visible, setVisible] = useState(false);\n  const [size, setSize] = useState('small');\n  const handleClick = () => {\n    setVisible(true);\n  };\n  const handleClose = () => {\n    setVisible(false);\n  };\n  return (\n    <Space>\n      <Radio.Group value={size} onChange={(value) => setSize(value)}>\n        <Radio.Button value=\"small\">small(300px)</Radio.Button>\n        <Radio.Button value=\"medium\">medium(500px)</Radio.Button>\n        <Radio.Button value=\"large\">large(760px)</Radio.Button>\n        <Radio.Button value={200}>200</Radio.Button>\n        <Radio.Button value=\"400px\">400px</Radio.Button>\n        <Radio.Button value=\"50%\">50%</Radio.Button>\n      </Radio.Group>\n      <div>\n        <Button theme=\"primary\" onClick={handleClick}>\n          打开抽屉\n        </Button>\n      </div>\n      <Drawer size={size} header=\"Drawer\" placement=\"right\" visible={visible} onClose={handleClose}>\n        <p>抽屉的内容</p>\n      </Drawer>\n    </Space>\n  );\n}\n",
        "desc": "通过  属性控制抽屉展示宽度。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Drawer, Button } from 'tdesign-react';\n\nexport default function () {\n  const [visible, setVisible] = useState(false);\n  const handleClick = () => {\n    setVisible(true);\n  };\n  const handleClose = () => {\n    setVisible(false);\n  };\n  return (\n    <>\n      <Button theme=\"primary\" onClick={handleClick}>\n        打开抽屉\n      </Button>\n      <Drawer\n        header={<div>自定义头部</div>}\n        body={<div>自定义内容</div>}\n        footer={<Button theme=\"primary\">自定义底部按钮</Button>}\n        visible={visible}\n        onClose={handleClose}\n      ></Drawer>\n    </>\n  );\n}\n",
        "desc": "通过和 可以调整抽屉的头部和底部内容。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Drawer, Radio, Button, Space } from 'tdesign-react';\n\nexport default function () {\n  const [visible, setVisible] = useState(false);\n  const [mode, setMode] = useState('push');\n  const handleClick = () => {\n    setVisible(true);\n  };\n  const handleClose = () => {\n    setVisible(false);\n  };\n  return (\n    <Space>\n      <div>\n        <span>抽屉弹出模式：</span>\n        <Radio.Group value={mode} onChange={(value) => setMode(value)}>\n          <Radio.Button value=\"push\">push</Radio.Button>\n          <Radio.Button value=\"overlay\">overlay</Radio.Button>\n        </Radio.Group>\n      </div>\n\n      <div>\n        <Button theme=\"primary\" onClick={handleClick}>\n          打开抽屉\n        </Button>\n      </div>\n\n      <Drawer placement=\"right\" attach={'body'} header=\"抽屉标题\" visible={visible} onClose={handleClose} mode={mode}>\n        <p>抽屉的内容</p>\n      </Drawer>\n    </Space>\n  );\n}\n",
        "desc": "支持覆盖及推开内容区域的方式展示抽屉， 整个页面的  模式需设置  为 body。（抽屉组件默认挂载到元素本身所在的位置）。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Drawer, Radio, Button, Space } from 'tdesign-react';\n\nexport default function () {\n  const [visible, setVisible] = useState(false);\n  const [placement, setPlacement] = useState('right');\n  const [mode, setMode] = useState('push');\n  const handleClick = () => {\n    setVisible(true);\n  };\n  const handleClose = () => {\n    setVisible(false);\n  };\n  return (\n    <div\n      id=\"demo-container\"\n      style={{\n        position: 'relative',\n        height: '400px',\n        padding: '48px',\n        overflow: 'hidden',\n        background: '#fafafa',\n        border: '1px solid #ebedf0',\n        borderRadius: '2px',\n      }}\n    >\n      <div id=\"demo-suf-container\">\n        <Space direction=\"vertical\">\n          <p>渲染在当前元素中。</p>\n          <div>\n            <span>抽屉弹出方向：</span>\n            <Radio.Group value={placement} onChange={(value) => setPlacement(value)}>\n              <Radio.Button value=\"left\">左侧</Radio.Button>\n              <Radio.Button value=\"right\">右侧</Radio.Button>\n              <Radio.Button value=\"top\">上方</Radio.Button>\n              <Radio.Button value=\"bottom\">下方</Radio.Button>\n            </Radio.Group>\n          </div>\n\n          <div>\n            <span>抽屉弹出模式：</span>\n            <Radio.Group value={mode} onChange={(value) => setMode(value)}>\n              <Radio.Button value=\"push\">push</Radio.Button>\n              <Radio.Button value=\"overlay\">overlay</Radio.Button>\n            </Radio.Group>\n          </div>\n\n          <div>\n            <Button theme=\"primary\" onClick={handleClick}>\n              Open\n            </Button>\n          </div>\n\n          <Drawer\n            showInAttachedElement\n            placement={placement}\n            header=\"Drawer\"\n            visible={visible}\n            onClose={handleClose}\n            mode={mode}\n            attach=\"#demo-suf-container\"\n          >\n            <p>This is a drawer</p>\n          </Drawer>\n        </Space>\n      </div>\n    </div>\n  );\n}\n",
        "desc": "通过  属性指定抽屉出现的父容器元素，父元素需要有定位属性，如：position: relative。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Drawer, Button } from 'tdesign-react';\n\nexport default function () {\n  const [visible, setVisible] = useState(false);\n  const handleClick = () => {\n    setVisible(true);\n  };\n  const handleClose = () => {\n    setVisible(false);\n  };\n  return (\n    <>\n      <Button theme=\"primary\" onClick={handleClick}>\n        打开抽屉\n      </Button>\n      <Drawer visible={visible} onClose={handleClose} destroyOnClose>\n        <p>抽屉的内容</p>\n      </Drawer>\n    </>\n  );\n}\n",
        "desc": "通过，可以在关闭抽屉时将抽屉从页面节点上销毁。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Drawer, Radio, Button, Space } from 'tdesign-react';\n\nexport default function () {\n  const [visible, setVisible] = useState(false);\n  const [placement, setPlacement] = useState('right');\n  const handleClick = () => {\n    setVisible(true);\n  };\n  const handleClose = () => {\n    setVisible(false);\n  };\n  return (\n    <Space>\n      <Radio.Group value={placement} onChange={(value) => setPlacement(value)}>\n        <Radio.Button value=\"left\">从左侧拖拽抽屉</Radio.Button>\n        <Radio.Button value=\"right\">从右侧拖拽抽屉</Radio.Button>\n        <Radio.Button value=\"top\">从上方拖拽抽屉</Radio.Button>\n        <Radio.Button value=\"bottom\">从下方拖拽抽屉</Radio.Button>\n      </Radio.Group>\n\n      <div>\n        <Button theme=\"primary\" onClick={handleClick}>\n          打开抽屉\n        </Button>\n      </div>\n      <Drawer placement={placement} key={placement} visible={visible} onClose={handleClose} sizeDraggable={true}>\n        <p>抽屉的内容</p>\n      </Drawer>\n    </Space>\n  );\n}\n",
        "desc": "通过，可以拖拽抽屉的边缘自由改变抽屉的大小。"
      },
      {
        "code": "import React from 'react';\nimport { DrawerPlugin, Button, Space } from 'tdesign-react';\n\nconst buttonStyle = {\n  marginRight: 16,\n};\nexport default function PluginModalExample() {\n  const showDrawer = () => {\n    const myDrawer = DrawerPlugin({\n      header: 'Drawer-Plugin',\n      body: 'Hi, darling! Do you want to be my lover?',\n      onConfirm: ({ e }) => {\n        console.log('confirm clicked', e);\n        myDrawer.hide();\n      },\n      onClose: ({ e, trigger }) => {\n        console.log('e: ', e);\n        console.log('trigger: ', trigger);\n        myDrawer.hide();\n      },\n      onCloseBtnClick: ({ e }) => {\n        console.log('close btn: ', e);\n      },\n    });\n  };\n  const onDrawerPlugin = () => {\n    const Drawer = DrawerPlugin({\n      header: 'Drawer-Confirm-Plugin',\n      body: 'I am a drawer!',\n      confirmBtn: 'hello',\n      cancelBtn: 'bye',\n      size: 'large',\n      className: 't-class-drawer--first',\n      onConfirm: ({ e }) => {\n        console.log('confirm button has been clicked!');\n        console.log('e: ', e);\n        Drawer.hide();\n      },\n      onClose: ({ e, trigger }) => {\n        console.log('e: ', e);\n        console.log('trigger: ', trigger);\n        Drawer.hide();\n      },\n    });\n  };\n  return (\n    <Space direction=\"vertical\">\n      <p>函数调用方式一：DrawerPlugin(options)</p>\n      <p>函数调用方式二：drawer(options)</p>\n      <div>\n        <Button theme=\"primary\" onClick={showDrawer} style={buttonStyle}>\n          DrawerPlugin\n        </Button>\n        <Button theme=\"primary\" onClick={onDrawerPlugin} style={buttonStyle}>\n          drawer\n        </Button>\n      </div>\n    </Space>\n  );\n}\n",
        "desc": "销毁抽屉：隐藏抽屉：显示抽屉：更新抽屉："
      }
    ]
  },
  {
    "name": "<Guide/>",
    "demoCode": [
      {
        "code": "import React, { useEffect } from 'react';\nimport { Button, Drawer, Guide, Input, Row } from 'tdesign-react';\n\nconst classStyles = `\n<style>\n.guide-container {\n  max-width: 600px;\n  padding: 40px;\n}\n\n.title-major {\n  color: var(--td-text-color-primary);\n  font-size: 36px;\n  font-weight: 700;\n  line-height: 44px;\n}\n\n.title-sub {\n  margin-top: 8px;\n  color: var(--td-text-color-secondary);\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n}\n\n.field {\n  margin-top: 50px;\n}\n\n.label {\n  margin-bottom: 8px;\n  color: var(--td-text-color-primary);\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n}\n\n.action {\n  display: inline-flex;\n  margin-top: 50px;\n}\n\n.action button:first-child {\n  margin-right: 10px;\n}\n</style>\n`;\nexport default function BasicGuide() {\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  const steps = [\n    {\n      element: '.main-title-base',\n      title: '新手引导标题',\n      body: '新手引导的说明文案',\n      placement: 'bottom-right',\n      stepOverlayClass: 't-test-guide-step-overlay',\n      popupProps: {\n        overlayStyle: {\n          fontWeight: 'normal',\n        },\n        overlayInnerStyle: {\n          padding: '4px',\n          height: '128px',\n        },\n        overlayClassName: 'guide-custom-overlay-class',\n        overlayInnerClassName: 'guide-custom-overlay-inner-class',\n      },\n    },\n    {\n      element: '.label-field-base',\n      title: '新手引导标题',\n      body: '新手引导的说明文案',\n      placement: 'bottom',\n    },\n    {\n      element: '.action-base',\n      title: '新手引导标题',\n      body: '新手引导的说明文案',\n      placement: 'right',\n    },\n  ];\n  const [visible, setVisible] = React.useState(false);\n  const [current, setCurrent] = React.useState(-1);\n  const handleClick = () => {\n    setVisible(true);\n    setTimeout(() => {\n      setCurrent(0);\n    }, 800);\n  };\n  const handleChange = (current, { e, total }) => {\n    setCurrent(current);\n    console.log(current, e, total);\n  };\n  const handlePrevStepClick = ({ e, prev, current, total }) => {\n    console.log(e, prev, current, total);\n  };\n  const handleNextStepClick = ({ e, next, current, total }) => {\n    console.log(e, next, current, total);\n  };\n  const handleFinish = ({ e, current, total }) => {\n    setVisible(false);\n    console.log(e, current, total);\n  };\n  const handleSkip = ({ e, current, total }) => {\n    console.log('skip');\n    setVisible(false);\n    console.log(e, current, total);\n  };\n  return (\n    <Row justify=\"center\">\n      <Button onClick={handleClick}>新手引导</Button>\n      <Drawer\n        footer={<Button onClick={() => setVisible(false)}> 关闭抽屉 </Button>}\n        visible={visible}\n        header=\"演示新手引导\"\n        size=\"60%\"\n        showOverlay={false}\n        destroyOnClose={true}\n      >\n        <div className=\"guide-container\">\n          <div className=\"main-title-base\">\n            <div className=\"title-major\">Guide 用户引导</div>\n            <div className=\"title-sub\">按钮用于开启一个闭环的操作任务，如“删除”对象、“购买”商品等。</div>\n          </div>\n          <div className=\"field label-field-base\">\n            <div className=\"label\">Label</div>\n            <Input placeholder=\"请输入内容\" />\n          </div>\n          <div className=\"field\">\n            <div className=\"label\">Label</div>\n            <Input placeholder=\"请输入内容\" />\n          </div>\n          <Row className=\"action action-base\">\n            <Button>确定</Button>\n            <Button theme=\"default\" variant=\"base\">\n              取消\n            </Button>\n          </Row>\n        </div>\n\n        <Guide\n          current={current}\n          steps={steps}\n          onChange={handleChange}\n          onPrevStepClick={handlePrevStepClick}\n          onNextStepClick={handleNextStepClick}\n          onFinish={handleFinish}\n          onSkip={handleSkip}\n        />\n      </Drawer>\n    </Row>\n  );\n}\n",
        "desc": "基本引导"
      },
      {
        "code": "import React, { useEffect } from 'react';\nimport { Button, Drawer, Guide, Input, Row } from 'tdesign-react';\n\nconst classStyles = `\n<style>\n.guide-container {\n  max-width: 600px;\n  padding: 40px;\n}\n\n.title-major {\n  color: var(--td-text-color-primary);\n  font-size: 36px;\n  font-weight: 700;\n  line-height: 44px;\n}\n\n.title-sub {\n  margin-top: 8px;\n  color: var(--td-text-color-secondary);\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n}\n\n.field {\n  margin-top: 50px;\n}\n\n.label {\n  margin-bottom: 8px;\n  color: var(--td-text-color-primary);\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n}\n\n.action {\n  display: inline-flex;\n  margin-top: 50px;\n}\n\n.action button:first-child {\n  margin-right: 10px;\n}\n\n</style>\n`;\nexport default function NoMaskGuide() {\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  const steps = [\n    {\n      element: '.main-title-no-mask',\n      title: '新手引导标题',\n      body: '新手引导的说明文案',\n      placement: 'bottom-right',\n    },\n    {\n      element: '.label-field-no-mask',\n      title: '新手引导标题',\n      body: '新手引导的说明文案',\n      placement: 'bottom',\n    },\n    {\n      element: '.action-no-mask',\n      title: '新手引导标题',\n      body: '新手引导的说明文案',\n      placement: 'right',\n    },\n  ];\n  const [visible, setVisible] = React.useState(false);\n  const [current, setCurrent] = React.useState(-1);\n  const handleClick = () => {\n    setVisible(true);\n    setTimeout(() => {\n      setCurrent(0);\n    }, 800);\n  };\n  const handleChange = (current, { e, total }) => {\n    setCurrent(current);\n    console.log(current, e, total);\n  };\n  const handlePrevStepClick = ({ e, prev, current, total }) => {\n    console.log(e, prev, current, total);\n  };\n  const handleNextStepClick = ({ e, next, current, total }) => {\n    console.log(e, next, current, total);\n  };\n  const handleFinish = ({ e, current, total }) => {\n    setVisible(false);\n    console.log(e, current, total);\n  };\n  const handleSkip = ({ e, current, total }) => {\n    console.log('skip');\n    setVisible(false);\n    console.log(e, current, total);\n  };\n  return (\n    <Row justify=\"center\">\n      <Button onClick={handleClick}>新手引导</Button>\n      <Drawer\n        footer={<Button onClick={() => setVisible(false)}> 关闭抽屉 </Button>}\n        visible={visible}\n        header=\"演示新手引导\"\n        size=\"60%\"\n        showOverlay={false}\n        destroyOnClose={true}\n      >\n        <div className=\"guide-container\">\n          <div className=\"main-title-no-mask\">\n            <div className=\"title-major\">Guide 用户引导</div>\n            <div className=\"title-sub\">按钮用于开启一个闭环的操作任务，如“删除”对象、“购买”商品等。</div>\n          </div>\n          <div className=\"field label-field-no-mask\">\n            <div className=\"label\">Label</div>\n            <Input placeholder=\"请输入内容\" />\n          </div>\n          <div className=\"field\">\n            <div className=\"label\">Label</div>\n            <Input placeholder=\"请输入内容\" />\n          </div>\n          <Row className=\"action action-no-mask\">\n            <Button>确定</Button>\n            <Button theme=\"default\" variant=\"base\">\n              取消\n            </Button>\n          </Row>\n        </div>\n\n        <Guide\n          current={current}\n          steps={steps}\n          showOverlay={false}\n          onChange={handleChange}\n          onPrevStepClick={handlePrevStepClick}\n          onNextStepClick={handleNextStepClick}\n          onFinish={handleFinish}\n          onSkip={handleSkip}\n        />\n      </Drawer>\n    </Row>\n  );\n}\n",
        "desc": "不带遮罩的引导"
      },
      {
        "code": "import React, { useEffect } from 'react';\nimport { Button, Drawer, Guide, Input, Row } from 'tdesign-react';\n\nconst classStyles = `\n<style>\n.guide-container {\n  max-width: 600px;\n  padding: 40px;\n}\n\n.title-major {\n  color: var(--td-text-color-primary);\n  font-size: 36px;\n  font-weight: 700;\n  line-height: 44px;\n}\n\n.title-sub {\n  margin-top: 8px;\n  color: var(--td-text-color-secondary);\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n}\n\n.field {\n  margin-top: 50px;\n}\n\n.label {\n  margin-bottom: 8px;\n  color: var(--td-text-color-primary);\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n}\n\n.action {\n  display: inline-flex;\n  margin-top: 50px;\n}\n\n.action button:first-child {\n  margin-right: 10px;\n}\n\n/* dialog body */\n\n.dialog-img {\n  width: 100%;\n}\n\np {\n  margin-top: 16px;\n  color: var(--td-text-color-secondary);\n  font-size: 14px;\n  font-weight: 400;\n  text-align: left;\n  line-height: 22px;\n}\n\n.dialog-body .img-wrapper {\n  border-radius: var(--td-radius-default);\n  overflow: hidden;\n}\n\n.dialog-body p {\n  margin-top: 24px;\n  color: var(--td-text-color-secondary);\n  font-size: 14px;\n  font-weight: 400;\n  text-align: left;\n  line-height: 22px;\n}\n\n.dialog-body .img-wrapper img {\n  vertical-align: bottom;\n  width: 100%;\n}\n</style>\n`;\nfunction DialogBody() {\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  return (\n    <div className=\"dialog-body\">\n      <div className=\"img-wrapper\">\n        <img className=\"img\" src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\" alt=\"demo\" />\n      </div>\n      <p>此处显示本页引导的说明文案，可按需要撰写，如内容过多可折行显示。图文也可按需自由设计。</p>\n    </div>\n  );\n}\nexport default function DialogGuide() {\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  const steps = [\n    {\n      element: '.main-title-dialog',\n      title: '新手引导标题',\n      body: DialogBody(),\n      placement: 'bottom-right',\n    },\n    {\n      element: '.label-field-dialog',\n      title: '新手引导标题',\n      body: DialogBody(),\n      placement: 'bottom',\n    },\n    {\n      element: '.action-dialog',\n      title: '新手引导标题',\n      body: DialogBody(),\n      placement: 'right',\n    },\n  ];\n  const [visible, setVisible] = React.useState(false);\n  const [current, setCurrent] = React.useState(-1);\n  const handleClick = () => {\n    setVisible(true);\n    setTimeout(() => {\n      setCurrent(0);\n    }, 800);\n  };\n  const handleChange = (current, { e, total }) => {\n    setCurrent(current);\n    console.log(current, e, total);\n  };\n  const handlePrevStepClick = ({ e, prev, current, total }) => {\n    console.log(e, prev, current, total);\n  };\n  const handleNextStepClick = ({ e, next, current, total }) => {\n    console.log(e, next, current, total);\n  };\n  const handleFinish = ({ e, current, total }) => {\n    setVisible(false);\n    console.log(e, current, total);\n  };\n  const handleSkip = ({ e, current, total }) => {\n    console.log('skip');\n    setVisible(false);\n    console.log(e, current, total);\n  };\n  return (\n    <Row justify=\"center\">\n      <Button onClick={handleClick}>新手引导</Button>\n      <Drawer\n        footer={<Button onClick={() => setVisible(false)}> 关闭抽屉 </Button>}\n        visible={visible}\n        header=\"演示新手引导\"\n        size=\"60%\"\n        showOverlay={false}\n        destroyOnClose={true}\n      >\n        <div className=\"guide-container\">\n          <div className=\"main-title-dialog\">\n            <div className=\"title-major\">Guide 用户引导</div>\n            <div className=\"title-sub\">按钮用于开启一个闭环的操作任务，如“删除”对象、“购买”商品等。</div>\n          </div>\n          <div className=\"field label-field-dialog\">\n            <div className=\"label\">Label</div>\n            <Input placeholder=\"请输入内容\" />\n          </div>\n          <div className=\"field\">\n            <div className=\"label\">Label</div>\n            <Input placeholder=\"请输入内容\" />\n          </div>\n          <Row className=\"action action-dialog\">\n            <Button>确定</Button>\n            <Button theme=\"default\" variant=\"base\">\n              取消\n            </Button>\n          </Row>\n        </div>\n\n        <Guide\n          current={current}\n          steps={steps}\n          mode=\"dialog\"\n          onChange={handleChange}\n          onPrevStepClick={handlePrevStepClick}\n          onNextStepClick={handleNextStepClick}\n          onFinish={handleFinish}\n          onSkip={handleSkip}\n        />\n      </Drawer>\n    </Row>\n  );\n}\n",
        "desc": "弹窗形式的引导"
      },
      {
        "code": "import React, { useEffect } from 'react';\nimport { Button, Drawer, Guide, Input, Row } from 'tdesign-react';\n\nconst classStyles = `\n<style>\n.guide-container {\n  max-width: 600px;\n  padding: 40px;\n}\n\n.title-major {\n  color: var(--td-text-color-primary);\n  font-size: 36px;\n  font-weight: 700;\n  line-height: 44px;\n}\n\n.title-sub {\n  margin-top: 8px;\n  color: var(--td-text-color-secondary);\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n}\n\n.field {\n  margin-top: 50px;\n}\n\n.label {\n  margin-bottom: 8px;\n  color: var(--td-text-color-primary);\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n}\n\n.action {\n  display: inline-flex;\n  margin-top: 50px;\n}\n\n.action button:first-child {\n  margin-right: 10px;\n}\n\n.dialog-body .img-wrapper {\n  border-radius: var(--td-radius-default);\n  overflow: hidden;\n}\n\n.dialog-body p {\n  margin-top: 24px;\n  color: var(--td-text-color-secondary);\n  font-size: 14px;\n  font-weight: 400;\n  text-align: left;\n  line-height: 22px;\n}\n\n.dialog-body .img-wrapper img {\n  vertical-align: bottom;\n  width: 100%;\n}\n</style>\n`;\nfunction DialogBody() {\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  return (\n    <div className=\"dialog-body\">\n      <div className=\"img-wrapper\">\n        <img className=\"img\" src=\"https://tdesign.gtimg.com/demo/demo-image-1.png\" alt=\"demo\" />\n      </div>\n      <p>此处显示本页引导的说明文案，可按需要撰写，如内容过多可折行显示。图文也可按需自由设计。</p>\n    </div>\n  );\n}\nexport default function PopupDialogGuide() {\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  const steps = [\n    {\n      element: '.main-title-popup-dialog',\n      title: '新手引导标题',\n      body: '新手引导的说明文案',\n      placement: 'bottom-right',\n    },\n    {\n      element: '.label-field-popup-dialog',\n      title: '新手引导标题',\n      body: DialogBody(),\n      placement: 'bottom',\n      mode: 'dialog',\n    },\n    {\n      element: '.action-popup-dialog',\n      title: '新手引导标题',\n      body: '新手引导的说明文案',\n      placement: 'right',\n    },\n  ];\n  const [visible, setVisible] = React.useState(false);\n  const [current, setCurrent] = React.useState(-1);\n  const handleClick = () => {\n    setVisible(true);\n    setTimeout(() => {\n      setCurrent(0);\n    }, 800);\n  };\n  const handleChange = (current, { e, total }) => {\n    setCurrent(current);\n    console.log(current, e, total);\n  };\n  const handlePrevStepClick = ({ e, prev, current, total }) => {\n    console.log(e, prev, current, total);\n  };\n  const handleNextStepClick = ({ e, next, current, total }) => {\n    console.log(e, next, current, total);\n  };\n  const handleFinish = ({ e, current, total }) => {\n    setVisible(false);\n    console.log(e, current, total);\n  };\n  const handleSkip = ({ e, current, total }) => {\n    console.log('skip');\n    setVisible(false);\n    console.log(e, current, total);\n  };\n  return (\n    <Row justify=\"center\">\n      <Button onClick={handleClick}>新手引导</Button>\n      <Drawer\n        footer={<Button onClick={() => setVisible(false)}> 关闭抽屉 </Button>}\n        visible={visible}\n        header=\"演示新手引导\"\n        size=\"60%\"\n        showOverlay={false}\n        destroyOnClose={true}\n      >\n        <div className=\"guide-container\">\n          <div className=\"main-title-popup-dialog\">\n            <div className=\"title-major\">Guide 用户引导</div>\n            <div className=\"title-sub\">按钮用于开启一个闭环的操作任务，如“删除”对象、“购买”商品等。</div>\n          </div>\n          <div className=\"field label-field-popup-dialog\">\n            <div className=\"label\">Label</div>\n            <Input placeholder=\"请输入内容\" />\n          </div>\n          <div className=\"field\">\n            <div className=\"label\">Label</div>\n            <Input placeholder=\"请输入内容\" />\n          </div>\n          <Row className=\"action action-popup-dialog\">\n            <Button>确定</Button>\n            <Button theme=\"default\" variant=\"base\">\n              取消\n            </Button>\n          </Row>\n        </div>\n\n        <Guide\n          current={current}\n          steps={steps}\n          onChange={handleChange}\n          onPrevStepClick={handlePrevStepClick}\n          onNextStepClick={handleNextStepClick}\n          onFinish={handleFinish}\n          onSkip={handleSkip}\n        />\n      </Drawer>\n    </Row>\n  );\n}\n",
        "desc": "气泡与弹窗混合的引导"
      },
      {
        "code": "import React, { useEffect } from 'react';\nimport { ArrowUpIcon } from 'tdesign-icons-react';\nimport { Button, Drawer, Guide, Input, Row } from 'tdesign-react';\n\nconst classStyles = `\n<style>\n.guide-container {\n  max-width: 600px;\n  padding: 40px;\n}\n\n.title-major {\n  color: var(--td-text-color-primary);\n  font-size: 36px;\n  font-weight: 700;\n  line-height: 44px;\n}\n\n.title-sub {\n  margin-top: 8px;\n  color: var(--td-text-color-secondary);\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n}\n\n.field {\n  margin-top: 50px;\n}\n\n.label {\n  margin-bottom: 8px;\n  color: var(--td-text-color-primary);\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n}\n\n.action {\n  display: inline-flex;\n  margin-top: 50px;\n}\n\n.action button:first-child {\n  margin-right: 10px;\n}\n\n\n.my-popup {\n  width: 240px;\n}\n\n.pop-icon {\n  margin-top: 10px;\n  color: white;\n  font-size: 30px;\n  font-weight: bold;\n}\n\n.popup-desc {\n  margin-top: 10px;\n  color: rgba(255, 255, 255, 0.9);\n  font-size: 12px;\n  font-weight: 400;\n  text-align: left;\n  line-height: 20px;\n}\n\n.popup-action {\n  margin-top: 10px;\n  text-align: right;\n}\n\n.popup-action button {\n  margin-left: 8px;\n}\n</style>\n`;\nfunction MyPopup(props) {\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  const { handlePrev, handleNext, handleSkip, handleFinish, current, total } = props;\n  return (\n    <div className=\"my-popup\">\n      <ArrowUpIcon className=\"pop-icon\" />\n      <p className=\"popup-desc\">自定义的图形或说明文案，用来解释或指导该功能使用。</p>\n      <div className=\"popup-action\">\n        <Button theme=\"default\" size=\"small\" onClick={handleSkip}>\n          跳过\n        </Button>\n        {current !== 0 && (\n          <Button theme=\"default\" size=\"small\" onClick={handlePrev}>\n            上一步\n          </Button>\n        )}\n        {current + 1 < total && (\n          <Button theme=\"primary\" size=\"small\" onClick={handleNext}>\n            下一步\n          </Button>\n        )}\n        {current + 1 === total && (\n          <Button theme=\"primary\" size=\"small\" onClick={handleFinish}>\n            完成\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\nexport default function CustomPopupGuide() {\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  const [visible, setVisible] = React.useState(false);\n  const [current, setCurrent] = React.useState(-1);\n  const handleClick = () => {\n    setVisible(true);\n    setTimeout(() => {\n      setCurrent(0);\n    }, 800);\n  };\n  const handleChange = (current, { e, total }) => {\n    setCurrent(current);\n    console.log(current, e, total);\n  };\n  const handlePrevStepClick = ({ e, prev, current, total }) => {\n    console.log(e, prev, current, total);\n  };\n  const handleNextStepClick = ({ e, next, current, total }) => {\n    console.log(e, next, current, total);\n  };\n  const handleFinish = ({ e, current, total }) => {\n    setVisible(false);\n    console.log(e, current, total);\n  };\n  const handleSkip = ({ e, current, total }) => {\n    console.log('skip');\n    setVisible(false);\n    console.log(e, current, total);\n  };\n  const steps = [\n    {\n      element: '.main-title-custom-popup',\n      title: '新手引导标题',\n      // description: '新手引导的说明文案',\n      placement: 'bottom-right',\n      content: <MyPopup />,\n    },\n    {\n      element: '.label-field-1-custom-popup',\n      title: '新手引导标题',\n      // description: '新手引导的说明文案',\n      placement: 'bottom',\n      content: <MyPopup />,\n    },\n    {\n      element: '.label-field-2-custom-popup',\n      title: '新手引导标题',\n      // description: '新手引导的说明文案',\n      placement: 'bottom-left',\n      content: <MyPopup />,\n    },\n  ];\n  return (\n    <Row justify=\"center\">\n      <Button onClick={handleClick}>新手引导</Button>\n      <Drawer\n        footer={<Button onClick={() => setVisible(false)}> 关闭抽屉 </Button>}\n        visible={visible}\n        header=\"演示新手引导\"\n        size=\"60%\"\n        showOverlay={false}\n        destroyOnClose={true}\n      >\n        <div className=\"guide-container\">\n          <div className=\"main-title-custom-popup\">\n            <div className=\"title-major\">Guide 用户引导</div>\n            <div className=\"title-sub\">按钮用于开启一个闭环的操作任务，如“删除”对象、“购买”商品等。</div>\n          </div>\n          <div className=\"field label-field-1-custom-popup\">\n            <div className=\"label\">Label</div>\n            <Input placeholder=\"请输入内容\" />\n          </div>\n          <div className=\"field label-field-2-custom-popup\">\n            <div className=\"label\">Label</div>\n            <Input placeholder=\"请输入内容\" />\n          </div>\n          <Row className=\"action\">\n            <Button>确定</Button>\n            <Button theme=\"default\" variant=\"base\">\n              取消\n            </Button>\n          </Row>\n        </div>\n\n        <Guide\n          current={current}\n          steps={steps}\n          onChange={handleChange}\n          onPrevStepClick={handlePrevStepClick}\n          onNextStepClick={handleNextStepClick}\n          onFinish={handleFinish}\n          onSkip={handleSkip}\n        />\n      </Drawer>\n    </Row>\n  );\n}\n",
        "desc": "自定义气泡"
      }
    ]
  },
  {
    "name": "<Message/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Message, Space } from 'tdesign-react';\n\nexport default function () {\n  return (\n    <Space direction=\"vertical\">\n      <Message duration={0} theme=\"info\">\n        用户表示普通操作信息提示\n      </Message>\n      <Message duration={0} theme=\"success\">\n        用户表示操作引起一定后果\n      </Message>\n      <Message duration={0} theme=\"warning\">\n        用于表示操作顺利达成\n      </Message>\n      <Message duration={0} theme=\"error\">\n        用于表示操作引起严重的后果\n      </Message>\n      <Message duration={0} theme=\"question\">\n        用于帮助用户操作的信息提示\n      </Message>\n    </Space>\n  );\n}\n",
        "desc": "使用简洁文字描述操作反馈。常规全局提示包含：普通信息、成功信息、警示信息、错误信息、帮助信息和加载中。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Message, Button, Space } from 'tdesign-react';\n\nexport default function () {\n  const [successLoading, setSuccessLoading] = useState(false);\n  const [warningLoading, setWarningLoading] = useState(false);\n  const resetDisabled = successLoading || warningLoading;\n  const resetMethod = () => {\n    if (!successLoading && !warningLoading) {\n      setSuccessLoading(true);\n      setWarningLoading(true);\n      setTimeout(() => {\n        setSuccessLoading(false);\n        setWarningLoading(false);\n      }, 10000);\n    }\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Message duration={0} theme=\"loading\">\n        用于表示操作正在生效的过程中\n      </Message>\n      <Message duration={0} theme={successLoading ? 'loading' : 'success'}>\n        用于表示操作顺利达成(10s)\n      </Message>\n      <Message duration={0} theme={warningLoading ? 'loading' : 'warning'}>\n        用于表示普通操作失败中断(10s)\n      </Message>\n      <Button\n        style={{\n          marginTop: 16,\n        }}\n        onClick={resetMethod}\n        disabled={resetDisabled}\n      >\n        重置\n      </Button>\n    </Space>\n  );\n}\n",
        "desc": "加载中信息提示"
      },
      {
        "code": "import React from 'react';\nimport { Message, Space } from 'tdesign-react';\n\nexport default function () {\n  return (\n    <Space direction=\"vertical\">\n      <Message duration={0} theme=\"info\" closeBtn={true}>\n        默认关闭按钮\n      </Message>\n      <Message duration={0} theme=\"info\" closeBtn={'关闭'}>\n        自定义关闭按钮（文字）\n      </Message>\n      <Message duration={0} theme=\"info\" closeBtn={<div>x</div>}>\n        自定义关闭按钮（函数）\n      </Message>\n      <Message duration={0} theme=\"info\" closeBtn={<div onClick={() => console.log('close')}>x</div>}>\n        自定义关闭按钮（ReactNode）\n      </Message>\n    </Space>\n  );\n}\n",
        "desc": "带关闭按钮的全局提示"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { MessagePlugin, Button } from 'tdesign-react';\n\nexport default function () {\n  const [instance, setInstance] = useState(null);\n  const isMessageOpen = instance === null;\n  const buttonTips = isMessageOpen ? '打开' : '关闭';\n  return (\n    <Button\n      onClick={() => {\n        if (isMessageOpen) {\n          const ins = MessagePlugin.info('调用关闭函数关闭信息提示框', 0);\n          setInstance(ins);\n        } else {\n          MessagePlugin.close(instance);\n          setInstance(null);\n        }\n      }}\n    >\n      自由控制关闭时机（{buttonTips}）\n    </Button>\n  );\n}\n",
        "desc": "使用关闭函数控制全局提示"
      },
      {
        "code": "import React from 'react';\nimport { MessagePlugin, Button, Space } from 'tdesign-react';\n\nexport default function () {\n  return (\n    <Space>\n      <Button\n        onClick={() => {\n          MessagePlugin.info('这是第一条消息');\n          MessagePlugin.warning('这是第二条消息');\n          MessagePlugin.error('这是第三条消息');\n        }}\n      >\n        点击打开多个消息\n      </Button>\n\n      <Button\n        onClick={() => {\n          MessagePlugin.closeAll();\n        }}\n      >\n        点击关闭所有消息\n      </Button>\n    </Space>\n  );\n}\n",
        "desc": "关闭多条全局提示"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Button, MessagePlugin, Input, Space } from 'tdesign-react';\n\nconst placementStyle = {\n  position: 'relative',\n  margin: '0 auto',\n  width: '500px',\n  height: '260px',\n};\nconst placementCenterStyle = {\n  position: 'absolute',\n  right: '42%',\n  bottom: '42%',\n};\nconst placementTopStyle = {\n  position: 'absolute',\n  top: '0',\n  left: '42%',\n};\nconst placementTopLeftStyle = {\n  position: 'absolute',\n  top: '0',\n  left: '70px',\n};\nconst placementTopRightStyle = {\n  position: 'absolute',\n  top: '0',\n  right: '70px',\n};\nconst placementBottomStyle = {\n  position: 'absolute',\n  bottom: '0',\n  left: '42%',\n};\nconst placementBottomLeftStyle = {\n  position: 'absolute',\n  bottom: '0',\n  left: '70px',\n};\nconst placementBottomRightStyle = {\n  position: 'absolute',\n  bottom: '0',\n  right: '70px',\n};\nconst placementLeftStyle = {\n  position: 'absolute',\n  left: '0',\n  top: '42%',\n};\nconst placementRightStyle = {\n  position: 'absolute',\n  right: '0',\n  top: '42%',\n};\nexport default function () {\n  const [offsetX, setOffsetX] = useState('0');\n  const [offsetY, setOffsetY] = useState('0');\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Input\n          // theme=\"column\"\n          style={{\n            width: 200,\n          }}\n          placeholder={'请输入横向偏移量'}\n          value={offsetX}\n          onChange={(value) => {\n            setOffsetX(value);\n          }}\n        />\n        <Input\n          // theme=\"column\"\n          style={{\n            width: 200,\n            marginLeft: 16,\n          }}\n          placeholder={'请输入纵向偏移量'}\n          value={offsetY}\n          onChange={(value) => {\n            setOffsetY(value);\n          }}\n        />\n      </Space>\n      <Space style={placementStyle}>\n        <Button\n          style={placementCenterStyle}\n          onClick={() => {\n            MessagePlugin.info({\n              content: '用户表示普通操作信息提示',\n              placement: 'center',\n              offset: [Number(offsetX), Number(offsetY)],\n            });\n          }}\n        >\n          center\n        </Button>\n        <Button\n          style={placementTopStyle}\n          onClick={() => {\n            MessagePlugin.info({\n              content: '用户表示普通操作信息提示',\n              placement: 'top',\n              offset: [Number(offsetX), Number(offsetY)],\n            });\n          }}\n        >\n          top\n        </Button>\n        <Button\n          style={placementLeftStyle}\n          onClick={() => {\n            MessagePlugin.info({\n              content: '用户表示普通操作信息提示',\n              placement: 'left',\n              offset: [Number(offsetX), Number(offsetY)],\n            });\n          }}\n        >\n          left\n        </Button>\n        <Button\n          style={placementRightStyle}\n          onClick={() => {\n            MessagePlugin.info({\n              content: '用户表示普通操作信息提示',\n              placement: 'right',\n              offset: [Number(offsetX), Number(offsetY)],\n            });\n          }}\n        >\n          right\n        </Button>\n        <Button\n          style={placementBottomStyle}\n          onClick={() => {\n            MessagePlugin.info({\n              content: '用户表示普通操作信息提示',\n              placement: 'bottom',\n              offset: [Number(offsetX), Number(offsetY)],\n            });\n          }}\n        >\n          bottom\n        </Button>\n        <Button\n          style={placementTopLeftStyle}\n          onClick={() => {\n            MessagePlugin.info({\n              content: '用户表示普通操作信息提示',\n              placement: 'top-left',\n              offset: [Number(offsetX), Number(offsetY)],\n            });\n          }}\n        >\n          top-left\n        </Button>\n        <Button\n          style={placementTopRightStyle}\n          onClick={() => {\n            MessagePlugin.info({\n              content: '用户表示普通操作信息提示',\n              placement: 'top-right',\n              offset: [Number(offsetX), Number(offsetY)],\n            });\n          }}\n        >\n          top-right\n        </Button>\n        <Button\n          style={placementBottomLeftStyle}\n          onClick={() => {\n            MessagePlugin.info({\n              content: '用户表示普通操作信息提示',\n              placement: 'bottom-left',\n              offset: [Number(offsetX), Number(offsetY)],\n            });\n          }}\n        >\n          bottom-left\n        </Button>\n        <Button\n          style={placementBottomRightStyle}\n          onClick={() => {\n            MessagePlugin.info({\n              content: '用户表示普通操作信息提示',\n              placement: 'bottom-right',\n              offset: [Number(offsetX), Number(offsetY)],\n            });\n          }}\n        >\n          bottom-right\n        </Button>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "控制全局提示显示位置"
      },
      {
        "code": "import React from 'react';\nimport { Button, MessagePlugin, Space } from 'tdesign-react';\n\nlet message = null;\nexport default function () {\n  const list = [];\n  return (\n    <Space>\n      <Button\n        onClick={() => {\n          message = MessagePlugin.info('I am duration 20s Message', 20 * 1000);\n          list.unshift(message);\n        }}\n      >\n        I am duration 20s Message\n      </Button>\n      <Button\n        onClick={() => {\n          if (list.length !== 0) {\n            MessagePlugin.close(list.shift());\n          }\n        }}\n      >\n        close latest duration 20s Message\n      </Button>\n\n      <Button\n        onClick={() => {\n          MessagePlugin.closeAll();\n        }}\n      >\n        close all Message\n      </Button>\n    </Space>\n  );\n}\n",
        "desc": "函数式调用"
      }
    ]
  },
  {
    "name": "<Notification/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Notification } from 'tdesign-react';\n\nexport default function NotificationExample() {\n  return <Notification title=\"标题名称\" content=\"这是一条消息通知\" theme=\"info\" />;\n}\n",
        "desc": "基础消息通知，可手动关闭也可自动退出。"
      },
      {
        "code": "import React from 'react';\nimport { Notification, Space } from 'tdesign-react';\n\nexport default function NotificationExample() {\n  return (\n    <Space direction=\"vertical\">\n      <Notification\n        theme=\"info\"\n        title=\"普通通知\"\n        content=\"这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知\"\n      />\n      <Notification\n        theme=\"error\"\n        title=\"危险通知\"\n        content=\"这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知\"\n      />\n      <Notification\n        theme=\"warning\"\n        title=\"告警通知\"\n        content=\"这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知\"\n      />\n      <Notification\n        theme=\"success\"\n        title=\"成功通知\"\n        content=\"这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知\"\n      />\n    </Space>\n  );\n}\n",
        "desc": "带图标的消息通知提供两种情况：普通消息通知和重要消息通知（如：系统错误等）。"
      },
      {
        "code": "import React from 'react';\nimport { Notification, Button, Space } from 'tdesign-react';\n\nexport default function NotificationExample() {\n  return (\n    <Space direction=\"vertical\">\n      <Notification\n        theme=\"info\"\n        title=\"超出的文本省略号显示\"\n        content=\"文案不限长度，但是展示最大显示三行折行的末尾显示折行末尾显示折行末尾显示折行末尾显示折行末尾显示折行折行末尾显示折行折行末尾显示折行末尾显示折行折行末尾\"\n        footer={\n          <div>\n            <Button theme=\"primary\" variant=\"text\">\n              查看详情\n            </Button>\n          </div>\n        }\n      />\n      <Notification\n        theme=\"info\"\n        title=\"自定义底部\"\n        content=\"使用 props function 自定义底部内容\"\n        footer={\n          <div>\n            <Button theme=\"primary\" variant=\"text\">\n              查看详情\n            </Button>\n          </div>\n        }\n      />\n      <Notification\n        theme=\"info\"\n        content=\"1. 使用 props function 自定义标题；2. 使用插槽自定义底部内容\"\n        title={\n          <div>\n            自定义标题 <small>我是副标题</small>\n          </div>\n        }\n        footer={\n          <div slot=\"footer\">\n            <Button theme=\"default\" variant=\"text\">\n              知道了\n            </Button>\n          </div>\n        }\n      />\n      <Notification\n        theme=\"info\"\n        content=\"1. 使用插槽自定义标题 2. 使用插槽自定义底部内容\"\n        title={\n          <div>\n            自定义标题 <small>我是副标题</small>\n          </div>\n        }\n        footer={\n          <div>\n            <Button theme=\"default\" variant=\"text\">\n              重启\n            </Button>\n            <Button theme=\"primary\" variant=\"text\">\n              稍后提醒我(10s)\n            </Button>\n          </div>\n        }\n      />\n      <Notification\n        theme=\"info\"\n        title=\"自定义内容\"\n        content=\"使用插槽自定义内容\"\n        footer={\n          <div>\n            <Button theme=\"default\" variant=\"text\">\n              重启\n            </Button>\n            <Button theme=\"primary\" variant=\"text\">\n              更多\n            </Button>\n          </div>\n        }\n      ></Notification>\n    </Space>\n  );\n}\n",
        "desc": "带有操作的消息通知为用户提供下一步行动点，在消息提示框中进行简要快捷的交互。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { NotificationPlugin, Button, Input, Space } from 'tdesign-react';\n\nexport default function NotificationExample() {\n  const [offsetY, setOffsetY] = useState('0');\n  const [offsetX, setOffsetX] = useState('0');\n  const openNotification = (placement) => {\n    NotificationPlugin.info({\n      title: '标题名称',\n      content: '这是一条可以自动关闭的消息通知',\n      placement,\n      duration: 3000,\n      offset: [offsetX, offsetY],\n      closeBtn: true,\n    });\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Input\n          placeholder=\"请输入横向偏移量\"\n          value={offsetX}\n          onChange={(v) => setOffsetX(v)}\n          style={{\n            width: '130px',\n            display: 'inline-block',\n            margin: '0 20px 36px 0',\n          }}\n        />\n        <Input\n          placeholder=\"请输入纵向偏移量\"\n          value={offsetY}\n          onChange={(v) => setOffsetY(v)}\n          style={{\n            width: '130px',\n            display: 'inline-block',\n            margin: '0 20px 36px 0',\n          }}\n        />\n      </Space>\n      <Space>\n        <Button onClick={() => openNotification('top-left')}>左上角</Button>\n        <Button onClick={() => openNotification('top-right')}>右上角</Button>\n      </Space>\n      <Space>\n        <Button onClick={() => openNotification('bottom-left')}>左下角</Button>\n        <Button onClick={() => openNotification('bottom-right')}>右下角</Button>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "全局提示显示位置可控制， 用于控制大概位置， 用于设置相对于  所在位置的偏移"
      },
      {
        "code": "import React from 'react';\nimport { NotificationPlugin, Button } from 'tdesign-react';\n\nexport default function NotificationExample() {\n  const openNotification = () => {\n    const notification = NotificationPlugin.info({\n      title: '信息',\n      content: '这是一条不会自动关闭的消息通知',\n      closeBtn: true,\n      duration: 0,\n      onCloseBtnClick: () => {\n        NotificationPlugin.close(notification);\n      },\n    });\n  };\n  return <Button onClick={openNotification}>自由控制关闭时机</Button>;\n}\n",
        "desc": "如果不希望通过计时关闭，或者用户点击按钮关闭，也可以使用关闭函数。"
      },
      {
        "code": "import React from 'react';\nimport { NotificationPlugin, Button, Space } from 'tdesign-react';\n\nexport default function NotificationExample() {\n  const openInfoNotification = () => {\n    NotificationPlugin.info({\n      title: '信息',\n      content: '这是一条可以自动关闭的消息通知',\n      duration: 3000,\n    });\n  };\n  const openSuccessNotification = () => {\n    NotificationPlugin.success({\n      title: '信息',\n      content: '这是一条可以自动关闭的消息通知',\n      duration: 3000,\n    });\n  };\n  const openWarningNotification = () => {\n    NotificationPlugin.warning({\n      title: '信息',\n      content: '这是一条可以自动关闭的消息通知',\n      duration: 3000,\n    });\n  };\n  const openErrorNotification = () => {\n    NotificationPlugin.error({\n      title: '信息',\n      content: '这是一条可以自动关闭的消息通知',\n      duration: 3000,\n    });\n  };\n  return (\n    <Space>\n      <Button onClick={() => openInfoNotification()}>信息</Button>\n      <Button onClick={() => openSuccessNotification()}>成功</Button>\n      <Button onClick={() => openWarningNotification()}>警告</Button>\n      <Button onClick={() => openErrorNotification()}>错误</Button>\n    </Space>\n  );\n}\n",
        "desc": "示例："
      }
    ]
  },
  {
    "name": "<Popconfirm/>",
    "demoCode": [
      {
        "code": "import React, { useState } from 'react';\nimport { Button, Popconfirm, MessagePlugin, Space } from 'tdesign-react';\n\nexport default function BasicExample() {\n  const [visible, setVisible] = useState(false);\n  const deleteClickHandler = () => {\n    const msg = MessagePlugin.info('提交中', 0);\n    setTimeout(() => {\n      MessagePlugin.close(msg);\n      MessagePlugin.success('提交成功！');\n      setVisible(false);\n    }, 1000);\n  };\n  return (\n    <Space>\n      <Popconfirm content={'确认删除订单吗'} cancelBtn={null}>\n        <Button theme=\"primary\">删除订单</Button>\n      </Popconfirm>\n      <Popconfirm\n        visible={visible}\n        content={'是否提交审核？（自由控制浮层显示或隐藏）'}\n        confirmBtn={\n          <Button size={'small'} onClick={deleteClickHandler}>\n            确定\n          </Button>\n        }\n        onCancel={() => {\n          setVisible(false);\n        }}\n      >\n        <Button\n          theme=\"primary\"\n          onClick={() => {\n            setVisible(true);\n          }}\n        >\n          提交审核\n        </Button>\n      </Popconfirm>\n    </Space>\n  );\n}\n",
        "desc": "使用说明文字及操作按钮对较简单的操作进行二次确认。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Popconfirm, Space } from 'tdesign-react';\nimport { BrowseIcon } from 'tdesign-icons-react';\n\nexport default function IconUsageExample() {\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Popconfirm content={'普通事件通知类型偏向于确认'}>\n          <Button theme=\"primary\">默认</Button>\n        </Popconfirm>\n        <Popconfirm content={'事件通知类型偏向于提示'} theme={'warning'}>\n          <Button theme=\"warning\">警告</Button>\n        </Popconfirm>\n        <Popconfirm content={'事件通知类型偏向于高危提醒'} theme={'danger'}>\n          <Button theme=\"danger\">危险</Button>\n        </Popconfirm>\n      </Space>\n      <Space>\n        <Popconfirm\n          content={'基础气泡确认框文案示意文字按钮'}\n          icon={<BrowseIcon />}\n          popupProps={{\n            placement: 'bottom',\n          }}\n        >\n          <Button theme=\"default\" variant=\"outline\">\n            自定义图标（属性）\n          </Button>\n        </Popconfirm>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "在说明文字之前增加图标，如普通、警示及告警等图标，增强表达以更好的引起用户注意。"
      },
      {
        "code": "import React, { useEffect } from 'react';\nimport { Button, Popconfirm, Space } from 'tdesign-react';\n\nconst classStyles = `\n<style>\n.title {\n  font-weight: 500;\n  font-size: 14px;\n}\n.describe {\n  margin-top: 8px;\n  font-size: 12px;\n  color: var(--td-text-color-secondary);\n}\n</style>\n`;\nexport default function ContentExample() {\n  useEffect(() => {\n    // 添加示例代码所需样式\n    document.head.insertAdjacentHTML('beforeend', classStyles);\n  }, []);\n  const content = (\n    <>\n      <p className=\"title\">带描述的气泡确认框文字按钮</p>\n      <p className=\"describe\">带描述的气泡确认框在主要说明之外增加了操作相关的详细描述</p>\n    </>\n  );\n  return (\n    <Space>\n      <Popconfirm theme={'default'} content={content}>\n        <Button theme=\"primary\">自定义浮层内容</Button>\n      </Popconfirm>\n      <Popconfirm theme={'warning'} content={content}>\n        <Button theme=\"warning\">自定义浮层内容</Button>\n      </Popconfirm>\n    </Space>\n  );\n}\n",
        "desc": "在主要说明文字之外增加了操作相关的详细描述，对较复杂的，可能造成疑惑的操作进行详细描述。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Popconfirm, Space } from 'tdesign-react';\n\nexport default function ButtonExample() {\n  return (\n    <Space>\n      <Popconfirm theme={'default'} content={'您确定要提交吗'} confirmBtn={'确认提交'} cancelBtn={'我再想想'}>\n        <Button theme=\"default\" variant=\"outline\">\n          按钮样式（属性-字符串）\n        </Button>\n      </Popconfirm>\n      <Popconfirm\n        theme={'default'}\n        content=\"您确定要提交吗\"\n        confirmBtn={\n          <Button theme={'warning'} size={'small'}>\n            确定提交\n          </Button>\n        }\n        cancelBtn={\n          <Button theme={'default'} size={'small'} variant={'outline'}>\n            我再想想\n          </Button>\n        }\n      >\n        <Button theme=\"default\" variant=\"outline\">\n          按钮样式（TNode）\n        </Button>\n      </Popconfirm>\n    </Space>\n  );\n}\n",
        "desc": "通过  和  属性来自定义确认和取消按钮，支持传入 Button 组件属性或使用 slot 方式。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Popconfirm, Space } from 'tdesign-react';\n\nexport default function InheritExample() {\n  return (\n    <Space>\n      <Popconfirm theme={'default'} content={'直接使用 placement 进行设置'} placement={'bottom'}>\n        <Button theme=\"default\" variant=\"outline\">\n          浮层出现在下方\n        </Button>\n      </Popconfirm>\n      <Popconfirm\n        theme={'default'}\n        content=\"透传属性到 Popup 组件进行设置\"\n        popupProps={{\n          placement: 'right',\n          overlayStyle: {\n            fontWeight: 'normal',\n          },\n          overlayInnerStyle: {\n            fontWeight: 'normal',\n          },\n          overlayClassName: 'popconfirm-custom-overlay-class',\n          overlayInnerClassName: 'popconfirm-custom-overlay-inner-class',\n        }}\n        confirmBtn={\n          <Button theme={'primary'} size={'small'}>\n            确定提交\n          </Button>\n        }\n        cancelBtn={\n          <Button theme={'default'} size={'small'} variant={'outline'}>\n            我再想想\n          </Button>\n        }\n      >\n        <Button theme=\"default\" variant=\"outline\">\n          浮层出现在右侧\n        </Button>\n      </Popconfirm>\n    </Space>\n  );\n}\n",
        "desc": "通过  可以透传弹窗底层依赖的 Popup 组件所有已支持的属性，比如控制弹窗出现的位置。"
      }
    ]
  },
  {
    "name": "<Popup/>",
    "demoCode": [
      {
        "code": "import React from 'react';\nimport { Button, Popup } from 'tdesign-react';\n\nexport default function BasicUsage() {\n  return (\n    <Popup trigger=\"hover\" showArrow content=\"这是一个弹出框\">\n      <Button>Hover me</Button>\n    </Popup>\n  );\n}\n",
        "desc": "由浮层内容和触发元素组成，两者均可自定义。使用  自定义浮层内容。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Popup, Space } from 'tdesign-react';\n\nexport default function TriggerElement() {\n  return (\n    <Space>\n      <Popup trigger=\"hover\" showArrow content=\"这是一个弹出框\">\n        <Button variant=\"outline\">默认子节点元素触发</Button>\n      </Popup>\n      <Popup triggerElement={<Button>使用 triggerElement 元素触发</Button>} showArrow content=\"这是一个弹出框\"></Popup>\n    </Space>\n  );\n}\n",
        "desc": "可以使用  自定义触发元素。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Popup, Input, Space } from 'tdesign-react';\n\nexport default function Triggers() {\n  return (\n    <Space>\n      <Popup trigger=\"hover\" showArrow content=\"这是一个弹出框\">\n        <Button variant=\"outline\">悬浮时触发（默认）</Button>\n      </Popup>\n      <Popup trigger=\"focus\" showArrow content=\"这是一个弹出框\">\n        <Input\n          placeholder=\"获得焦点时触发\"\n          style={{\n            width: 200,\n          }}\n        ></Input>\n      </Popup>\n      <Popup trigger=\"click\" showArrow content=\"这是一个弹出框\">\n        <Button onClick={() => console.log('自定义事件')} variant=\"outline\">\n          点击时触发\n        </Button>\n      </Popup>\n      <Popup trigger=\"context-menu\" showArrow content=\"这是一个弹出框\">\n        <Button variant=\"outline\">右击时触发</Button>\n      </Popup>\n    </Space>\n  );\n}\n",
        "desc": "提供悬浮时触发（默认）、点击时触发、获取焦点时触发、右击时触发等方式。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Popup } from 'tdesign-react';\n\nconst styles = {\n  container: {\n    margin: '0 auto',\n    width: '500px',\n    height: '260px',\n    position: 'relative',\n  },\n  placementTop: {\n    position: 'absolute',\n    top: '0',\n    left: '42%',\n  },\n  placementTopLeft: {\n    position: 'absolute',\n    top: '0',\n    left: '70px',\n  },\n  placementTopRight: {\n    position: 'absolute',\n    top: '0',\n    right: '70px',\n  },\n  placementBottom: {\n    position: 'absolute',\n    bottom: '0',\n    left: '42%',\n  },\n  placementBottomLeft: {\n    position: 'absolute',\n    bottom: '0',\n    left: '70px',\n    width: '120px',\n  },\n  placementBottomRight: {\n    position: 'absolute',\n    bottom: '0',\n    right: '70px',\n  },\n  placementLeft: {\n    position: 'absolute',\n    left: '0',\n    top: '42%',\n  },\n  placementLeftTop: {\n    position: 'absolute',\n    left: '0',\n    top: '50px',\n  },\n  placementLeftBottom: {\n    position: 'absolute',\n    left: '0',\n    bottom: '50px',\n  },\n  placementRight: {\n    position: 'absolute',\n    right: '0',\n    top: '42%',\n  },\n  placementRightTop: {\n    position: 'absolute',\n    right: '0',\n    top: '50px',\n  },\n  placementRightBottom: {\n    position: 'absolute',\n    right: '0',\n    bottom: '50px',\n  },\n};\nexport default function Placement() {\n  return (\n    <div style={styles.container}>\n      <Popup content=\"这是Popup内容\" placement=\"top\" showArrow destroyOnClose>\n        <Button style={styles.placementTop}>top</Button>\n      </Popup>\n      <Popup content=\"这是Popup内容 top-left\" placement=\"top-left\" showArrow destroyOnClose>\n        <Button style={styles.placementTopLeft}>top-left</Button>\n      </Popup>\n      <Popup content=\"这是Popup内容top-right\" placement=\"top-right\" showArrow destroyOnClose>\n        <Button style={styles.placementTopRight}>top-right</Button>\n      </Popup>\n      <Popup content=\"这是Popup内容\" placement=\"bottom\" showArrow destroyOnClose>\n        <Button style={styles.placementBottom}>bottom</Button>\n      </Popup>\n      <Popup content=\"这是Popup内容 bottom-left\" placement=\"bottom-left\" showArrow destroyOnClose>\n        <Button style={styles.placementBottomLeft}>bottom-left</Button>\n      </Popup>\n      <Popup content=\"这是Popup内容 bottom-right\" placement=\"bottom-right\" showArrow destroyOnClose>\n        <Button style={styles.placementBottomRight}>bottom-right</Button>\n      </Popup>\n      <Popup content=\"这是Popup内容\" placement=\"left\" showArrow destroyOnClose>\n        <Button style={styles.placementLeft}>left</Button>\n      </Popup>\n      <Popup\n        content=\"这是Popup内容   left-top\"\n        placement=\"left-top\"\n        overlayStyle={{\n          width: '140px',\n        }}\n        showArrow\n        destroyOnClose\n      >\n        <Button style={styles.placementLeftTop}>left-top</Button>\n      </Popup>\n      <Popup\n        content=\"这是Popup内容 left-bottom\"\n        placement=\"left-bottom\"\n        overlayStyle={{\n          width: '140px',\n        }}\n        showArrow\n        destroyOnClose\n      >\n        <Button style={styles.placementLeftBottom}>left-bottom</Button>\n      </Popup>\n      <Popup content=\"这是Popup内容\" placement=\"right\" showArrow destroyOnClose>\n        <Button style={styles.placementRight}>right</Button>\n      </Popup>\n      <Popup\n        content=\"这是Popup内容 right-top\"\n        placement=\"right-top\"\n        overlayStyle={{\n          width: '140px',\n        }}\n        showArrow\n        destroyOnClose\n      >\n        <Button style={styles.placementRightTop}>right-top</Button>\n      </Popup>\n      <Popup\n        content=\"这是Popup内容 right-bottom\"\n        placement=\"right-bottom\"\n        overlayStyle={{\n          width: '140px',\n        }}\n        showArrow\n        destroyOnClose\n      >\n        <Button style={styles.placementRightBottom}>right-bottom</Button>\n      </Popup>\n    </div>\n  );\n}\n",
        "desc": "使用  控制浮层方向，如果需要浮层箭头，设置  即可。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Popup, Space } from 'tdesign-react';\n\nexport default function OverlayStyle() {\n  return (\n    <Space>\n      <Popup\n        content=\"浮层拥有自定义类名，可以自定义浮层样式\"\n        overlayClassName=\"tdesign-demo__custom-popup\"\n        placement=\"bottom\"\n      >\n        <Button variant=\"outline\">自定义浮层类名</Button>\n      </Popup>\n      <Popup\n        content=\"浮层宽度是固定的，不会随内容变化而变化\"\n        overlayInnerStyle={{\n          width: '350px',\n          textAlign: 'center',\n        }}\n        placement=\"bottom\"\n      >\n        <Button variant=\"outline\">固定浮层宽度</Button>\n      </Popup>\n      <Popup\n        content=\"可以设置浮层最大宽度，当内容超出最大宽度时，文本内容才会换行\"\n        overlayStyle={{\n          maxWidth: '250px',\n        }}\n        placement=\"bottom\"\n      >\n        <Button variant=\"outline\">浮层最大宽度</Button>\n      </Popup>\n      <Popup\n        content=\"overlayInnerStyle 作为函数使用，可以让浮层内容和触发元素同宽\"\n        overlayInnerStyle={(triggerElem) => ({\n          width: `${triggerElem.offsetWidth}px`,\n        })}\n        placement=\"bottom\"\n      >\n        <Button variant=\"outline\">浮层和触发元素同宽</Button>\n      </Popup>\n    </Space>\n  );\n}\n",
        "desc": "用于定义浮层样式类名。 用于定义浮层样式，比如浮层宽度。浮层宽度默认根据内容宽度呈现，可自由设置宽度和最大宽度。 用于定义浮层内容部分样式，比如内容最大高度以及是否出滚动条。值为类型为函数时，可以实现浮层内容宽度和触发元素同宽。"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Button, Popup } from 'tdesign-react';\n\nexport default function Controlled() {\n  const [visible, setVisible] = useState(false);\n  return (\n    <Popup content=\"这是popup内容\" trigger=\"context-menu\" placement=\"right\" visible={visible}>\n      {/* 当visible=true，trigger节点无法获取元素位置，会导致popup定位异常 */}\n      <Button onClick={() => setVisible(!visible)}>一直显示</Button>\n    </Popup>\n  );\n}\n",
        "desc": "可以通过  自由控制弹出层的显示或隐藏。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Popup, Space } from 'tdesign-react';\n\nexport default function Attach() {\n  return (\n    <Space>\n      <Popup trigger=\"click\" content=\"触发元素的父元素是组件跟元素，通过 CSSSelector 定义\" attach=\".t-space\">\n        <Button>点击查看我的父元素(CSSSelector)</Button>\n      </Popup>\n      <Popup\n        trigger=\"click\"\n        content=\"触发元素的父元素是组件跟元素，通过 Function 定义\"\n        attach={(triggerElement) => triggerElement.parentElement}\n      >\n        <Button>点击查看我的父元素(Function)</Button>\n      </Popup>\n    </Space>\n  );\n}\n",
        "desc": "浮层默认父节点是 ，可通过  自由调整挂载的父节点元素。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Popup } from 'tdesign-react';\n\nexport default function Destroy() {\n  return (\n    <Popup trigger=\"hover\" destroyOnClose showArrow content=\"这是一个弹出框\">\n      <Button>Hover me</Button>\n    </Popup>\n  );\n}\n",
        "desc": "用于控制浮层隐藏时是否销毁浮层内容。"
      },
      {
        "code": "import React from 'react';\nimport { Button, Popup } from 'tdesign-react';\n\nexport default function Disabled() {\n  return (\n    <Popup trigger=\"hover\" disabled showArrow content=\"这是一个弹出框\">\n      <Button>Hover me</Button>\n    </Popup>\n  );\n}\n",
        "desc": "组件禁用后，不再显示弹出层。"
      },
      {
        "code": "import React from 'react';\nimport { Space, Button, PopupPlugin } from 'tdesign-react';\n\nconst Plugin = () => {\n  const ref = React.useRef(null);\n  const handleElement1 = () => {\n    PopupPlugin(ref.current, 'Tdesign React PopupPlugin');\n  };\n  const handleElement2 = async () => {\n    PopupPlugin('.trigger-element2', '渲染文本的内容', {\n      placement: 'right',\n      showArrow: true,\n    });\n  };\n  const handleCreatePopupOffset = () => {\n    PopupPlugin('.trigger-element3', <div>透传popperOptions，在offset里控制节点位置</div>, {\n      placement: 'bottom',\n      popperOptions: {\n        modifiers: [\n          {\n            name: 'offset',\n            trigger: 'click',\n            options: {\n              offset: ({ reference }) => {\n                const target = document.querySelector('.trigger-element2');\n                let { lineHeight } = getComputedStyle(target);\n                if (lineHeight === 'normal') {\n                  const temp = document.createElement('div');\n                  temp.innerText = 't';\n                  document.body.appendChild(temp);\n                  lineHeight = `${temp.offsetHeight}px`;\n                  document.body.removeChild(temp);\n                }\n                const isBreakLine = reference.height > parseInt(lineHeight, 10);\n                return isBreakLine ? [reference.x, -reference.height + 10] : [0, 0];\n              },\n            },\n          },\n        ],\n      },\n    });\n  };\n  return (\n    <Space direction=\"vertical\">\n      <Button ref={ref} variant=\"outline\" onClick={handleElement1} className=\"trigger-element1\">\n        正常的方式打开\n      </Button>\n      <Button variant=\"outline\" onClick={handleElement2} className=\"trigger-element2\">\n        通过Plugin打开，并修改不同浮层的配置\n      </Button>\n      <div>\n        <span>这里是一个日志查询的例子，在很长的日志内容中，日志内容存在换行的情况，可以点击链接进行日志查询操作</span>\n        <a\n          className=\"trigger-element3\"\n          style={{\n            color: 'var(--td-text-color-brand)',\n          }}\n          onClick={handleCreatePopupOffset}\n        >\n          点击此链接，会打开浮层进行跳转操作\n        </a>\n      </div>\n    </Space>\n  );\n};\nexport default Plugin;\n",
        "desc": ""
      },
      {
        "code": "import React, { useState, useRef } from 'react';\nimport { Button, Popup } from 'tdesign-react';\n\nexport default function Controlled() {\n  const [spanVisible, setVisible] = useState(false);\n  const [content, setContent] = useState('这是popup内容');\n  const btnClicksRef = useRef(0);\n  const toggleContent = () => {\n    btnClicksRef.current += 1;\n    const showMore = btnClicksRef.current % 2 !== 0;\n    setVisible(showMore);\n    setContent(`这是popup内容${showMore ? '，又多出来好多好多好多好多....' : ''}`);\n  };\n  return (\n    <Popup content={content} placement=\"top\">\n      <Button onClick={toggleContent}>点击改变内容{spanVisible && <span>，再点一下</span>}</Button>\n    </Popup>\n  );\n}\n",
        "desc": "当trigger或popup显示内容动态变化时，自适应调整位置"
      },
      {
        "code": "import React, { useState } from 'react';\nimport { Button, Input, Popup, Space } from 'tdesign-react';\n\nexport default function PopperOptions() {\n  const [offsetX, setOffsetX] = useState('0');\n  const [offsetY, setOffsetY] = useState('0');\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Space align=\"center\">\n          <span>请输入横向偏移量:</span>\n          <Input\n            placeholder=\"请输入横向偏移量\"\n            value={offsetX}\n            onChange={(v) => setOffsetX(v)}\n            style={{\n              width: '130px',\n              display: 'inline-block',\n            }}\n          />\n        </Space>\n        <Space align=\"center\">\n          <span>请输入纵向偏移量:</span>\n          <Input\n            placeholder=\"请输入纵向偏移量\"\n            value={offsetY}\n            onChange={(v) => setOffsetY(v)}\n            style={{\n              width: '130px',\n              display: 'inline-block',\n            }}\n          />\n        </Space>\n      </Space>\n      <Space>\n        <Popup\n          trigger=\"hover\"\n          showArrow\n          content=\"这是一个弹出框\"\n          popperOptions={{\n            modifiers: [\n              {\n                name: 'offset',\n                options: {\n                  offset: [Number(offsetX), Number(offsetY)],\n                },\n              },\n            ],\n          }}\n        >\n          <Button>Hover me</Button>\n        </Popup>\n      </Space>\n    </Space>\n  );\n}\n",
        "desc": "="
      }
    ]
  }
]
组建:<Button/>
                  使用描述：直接使用文字作为按钮。是视觉吸引力最弱的一个按钮，通常出现在表格操作栏、标题和字段旁等。
                  代码示例：import React from 'react';
import { Button, Space } from 'tdesign-react';

export default function ButtonExample() {
  return (
    <Space>
      <Button theme="default" variant="base">
        填充按钮
      </Button>
      <Button theme="default" variant="outline">
        描边按钮
      </Button>
      <Button theme="default" variant="dashed">
        虚框按钮
      </Button>
      <Button theme="default" variant="text">
        文字按钮
      </Button>
    </Space>
  );
}

                  ===SPLIT===组建:<Button/>
                  使用描述：图标按钮由图标+文字或图标构成。通过图标可增强识别性，以便直观理解。
                  代码示例：import React from 'react';
import { Button, Space } from 'tdesign-react';
import { SearchIcon, AddIcon, CloudUploadIcon, DiscountIcon, CloudDownloadIcon } from 'tdesign-icons-react';

export default function ButtonExample() {
  return (
    <Space>
      <Button icon={<AddIcon />}>新建</Button>
      <Button variant="outline" icon={<CloudUploadIcon />}>
        上传文件
      </Button>
      <Button shape="circle" icon={<DiscountIcon />} />
      <Button shape="circle" icon={<CloudDownloadIcon />} />
      <Button theme="default" variant="outline" icon={<SearchIcon />}>
        Function Icon
      </Button>
    </Space>
  );
}

                  ===SPLIT===组建:<Button/>
                  使用描述：幽灵按钮将按钮的内容反色，背景变为透明，一般是底色透明。常用于有色背景上，例如 banner 图等。
                  代码示例：import React from 'react';
import { Button, Space } from 'tdesign-react';

export default function ButtonExample() {
  return (
    <Space direction="vertical">
      <Space>
        <Button variant="outline" ghost>
          幽灵按钮
        </Button>
        <Button variant="dashed" ghost>
          幽灵按钮
        </Button>
        <Button variant="text" ghost>
          幽灵按钮
        </Button>
      </Space>
      <Space>
        <Button variant="outline" theme="primary" ghost>
          幽灵按钮
        </Button>
        <Button variant="dashed" theme="primary" ghost>
          幽灵按钮
        </Button>
        <Button variant="text" theme="primary" ghost>
          幽灵按钮
        </Button>
      </Space>
      <Space>
        <Button variant="outline" theme="success" ghost>
          幽灵按钮
        </Button>
        <Button variant="dashed" theme="success" ghost>
          幽灵按钮
        </Button>
        <Button variant="text" theme="success" ghost>
          幽灵按钮
        </Button>
      </Space>
      <Space>
        <Button variant="outline" theme="warning" ghost>
          幽灵按钮
        </Button>
        <Button variant="dashed" theme="warning" ghost>
          幽灵按钮
        </Button>
        <Button variant="text" theme="warning" ghost>
          幽灵按钮
        </Button>
      </Space>
      <Space>
        <Button variant="outline" theme="danger" ghost>
          幽灵按钮
        </Button>
        <Button variant="dashed" theme="danger" ghost>
          幽灵按钮
        </Button>
        <Button variant="text" theme="danger" ghost>
          幽灵按钮
        </Button>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Button/>
                  使用描述：Block 按钮在宽度上充满其所在的父容器（无 padding 和 margin 值）。该按钮常见于移动端和一些表单场景中。
                  代码示例：import React from 'react';
import { Button, Space } from 'tdesign-react';

export default function ButtonExample() {
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Button block variant="base">
        填充按钮
      </Button>
      <Button block variant="outline">
        描边按钮
      </Button>
      <Button block variant="dashed">
        虚框按钮
      </Button>
      <Button block variant="text">
        文字按钮
      </Button>
    </Space>
  );
}

                  ===SPLIT===组建:<Button/>
                  使用描述：提供浅灰色、蓝色、红色、黄色和绿色为主题的按钮。
                  代码示例：import React from 'react';
import { Button, Space } from 'tdesign-react';

export default function ButtonExample() {
  return (
    <Space direction="vertical">
      <Space>
        <Button theme="default">填充按钮</Button>
        <Button variant="outline" theme="default">
          描边按钮
        </Button>
        <Button variant="dashed" theme="default">
          虚框按钮
        </Button>
        <Button variant="text" theme="default">
          文字按钮
        </Button>
      </Space>
      <Space>
        <Button theme="primary" variant="base">
          填充按钮
        </Button>
        <Button theme="primary" variant="outline">
          描边按钮
        </Button>
        <Button theme="primary" variant="dashed">
          虚框按钮
        </Button>
        <Button theme="primary" variant="text">
          文字按钮
        </Button>
      </Space>
      <Space>
        <Button theme="danger" variant="base">
          填充按钮
        </Button>
        <Button theme="danger" variant="outline">
          描边按钮
        </Button>
        <Button theme="danger" variant="dashed">
          虚框按钮
        </Button>
        <Button theme="danger" variant="text">
          文字按钮
        </Button>
      </Space>
      <Space>
        <Button theme="warning" variant="base">
          填充按钮
        </Button>
        <Button theme="warning" variant="outline">
          描边按钮
        </Button>
        <Button theme="warning" variant="dashed">
          虚框按钮
        </Button>
        <Button theme="warning" variant="text">
          文字按钮
        </Button>
      </Space>
      <Space>
        <Button theme="success" variant="base">
          填充按钮
        </Button>
        <Button theme="success" variant="outline">
          描边按钮
        </Button>
        <Button theme="success" variant="dashed">
          虚框按钮
        </Button>
        <Button theme="success" variant="text">
          文字按钮
        </Button>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Button/>
                  使用描述：提供加载、禁用两种状态。
                  代码示例：import React from 'react';
import { Button, Space } from 'tdesign-react';

export default function ButtonExample() {
  return (
    <Space>
      <Button disabled>填充按钮</Button>
      <Button loading>加载中</Button>
    </Space>
  );
}

                  ===SPLIT===组建:<Button/>
                  使用描述：提供大、中（默认）、小三种尺寸。
                  代码示例：import React from 'react';
import { Button, Space } from 'tdesign-react';

export default function ButtonExample() {
  return (
    <Space direction="vertical">
      <Space>
        <Button size="small" variant="base">
          填充按钮
        </Button>
        <Button size="small" variant="outline">
          描边按钮
        </Button>
        <Button size="small" variant="dashed">
          虚框按钮
        </Button>
        <Button size="small" variant="text">
          文字按钮
        </Button>
      </Space>
      <Space>
        <Button size="medium" variant="base">
          填充按钮
        </Button>
        <Button size="medium" variant="outline">
          描边按钮
        </Button>
        <Button size="medium" variant="dashed">
          虚框按钮
        </Button>
        <Button size="medium" variant="text">
          文字按钮
        </Button>
      </Space>
      <Space>
        <Button size="large" variant="base">
          填充按钮
        </Button>
        <Button size="large" variant="outline">
          描边按钮
        </Button>
        <Button size="large" variant="dashed">
          虚框按钮
        </Button>
        <Button size="large" variant="text">
          文字按钮
        </Button>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Button/>
                  使用描述：提供长方形、正方形、圆角长方形、圆形四种形状。
                  代码示例：import React from 'react';
import { Button, Space } from 'tdesign-react';
import { CalendarIcon } from 'tdesign-icons-react';

export default function ButtonExample() {
  return (
    <Space direction="vertical">
      <Space>
        <Button shape="rectangle" variant="base">
          填充按钮
        </Button>
        <Button shape="square" variant="base">
          <CalendarIcon />
        </Button>
        <Button shape="round" variant="base">
          填充按钮
        </Button>
        <Button shape="circle" variant="base">
          <CalendarIcon />
        </Button>
      </Space>
      <Space>
        <Button shape="rectangle" variant="outline">
          描边按钮
        </Button>
        <Button shape="square" variant="outline">
          <CalendarIcon />
        </Button>
        <Button shape="round" variant="outline">
          描边按钮
        </Button>
        <Button shape="circle" variant="outline">
          <CalendarIcon />
        </Button>
      </Space>
      <Space>
        <Button shape="rectangle" variant="dashed">
          虚框按钮
        </Button>
        <Button shape="square" variant="dashed">
          <CalendarIcon />
        </Button>
        <Button shape="round" variant="dashed">
          虚框按钮
        </Button>
        <Button shape="circle" variant="dashed">
          <CalendarIcon />
        </Button>
      </Space>
      <Space>
        <Button shape="rectangle" variant="text">
          文字按钮
        </Button>
        <Button shape="square" variant="text">
          <CalendarIcon />
        </Button>
        <Button shape="round" variant="text">
          文字按钮
        </Button>
        <Button shape="circle" variant="text">
          <CalendarIcon />
        </Button>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Button/>
                  使用描述：支持自定义渲染元素，支持 div/a/button
                  代码示例：import React from 'react';
import { Button, Space } from 'tdesign-react';

export default function ButtonExample() {
  return (
    <Space size={24}>
      <Button tag="div">div</Button>
      <Button tag="a">a</Button>
      <Button href="#">a:href</Button>
    </Space>
  );
}

                  组建:<Icon/>
                  使用描述：
                  代码示例：import React from 'react';
import {
  LettersTIcon,
  LettersDIcon,
  LettersSIcon,
  LettersEIcon,
  LettersIIcon,
  LettersNIcon,
  LettersGIcon,
  ComponentCheckboxIcon,
  ComponentInputIcon,
  ComponentSwitchIcon,
  ComponentBreadcrumbIcon,
  ComponentDropdownIcon,
  ComponentRadioIcon,
  ComponentStepsIcon,
} from 'tdesign-icons-react';
import { Space } from 'tdesign-react';

export default function IconExample() {
  return (
    <Space direction="vertical">
      <Space
        breakLine
        style={{
          color: `var(--td-brand-color)`,
        }}
      >
        <LettersTIcon />
        <LettersDIcon />
        <LettersEIcon />
        <LettersSIcon />
        <LettersIIcon />
        <LettersGIcon />
        <LettersNIcon />
      </Space>
      <Space breakLine>
        <ComponentCheckboxIcon />
        <ComponentBreadcrumbIcon />
        <ComponentInputIcon />
        <ComponentSwitchIcon />
        <ComponentDropdownIcon />
        <ComponentRadioIcon />
        <ComponentStepsIcon />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Icon/>
                  使用描述：图标尺寸单位支持多种， 'small', 'medium', 'large', '35px', '3em' 等。 图标颜色使用 CSS 控制，如：style="color: red"，或者 style="fill: red"。 点击右侧导航「全部图标」即可查看组件库全部图标。
                  代码示例：import React from 'react';
import { Space } from 'tdesign-react';
import { Icon } from 'tdesign-icons-react';

export default function SvgSpriteExample() {
  return (
    <Space direction="vertical">
      <Space break-line>
        <p>How do you feel today?</p>
        <Icon name="sneer" />
        <Icon name="unhappy" />
        <Icon name="excited" />
        <Icon name="surprised" />
        <Icon name="giggle" />
      </Space>
      <Space breakLine align="center">
        <p>What is your favourite food?</p>
        <Icon name="tangerinr" color="orange" />
        <Icon name="bamboo-shoot" color="green" />
        <Icon name="apple" color="red" />
        <Icon name="milk" color="#0052D9" />
        <Icon name="peach" color="pink" />
      </Space>
      <Space break-line>
        <p>How much icons does TDesign Icon includes?</p>
        <Icon
          name="numbers-1"
          style={{
            color: 'var(--td-brand-color-5)',
          }}
        />
        <Icon
          name="numbers-2"
          style={{
            color: 'var(--td-brand-color-6)',
          }}
        />
        <Icon
          name="numbers-0"
          style={{
            color: 'var(--td-brand-color-7)',
          }}
        />
        <Icon
          name="numbers-3"
          style={{
            color: 'var(--td-brand-color-8)',
          }}
        />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Icon/>
                  使用描述：
                  代码示例：import React from 'react';
import { Space } from 'tdesign-react';
import { IconFont } from 'tdesign-icons-react';

export default function SvgSpriteExample() {
  return (
    <Space direction="vertical">
      <Space break-line>
        <p>How do you feel today?</p>
        <IconFont name="sneer" />
        <IconFont name="unhappy" />
        <IconFont name="excited" />
        <IconFont name="surprised" />
        <IconFont name="giggle" />
      </Space>
      <Space breakLine align="center">
        <p>What is your favourite food?</p>
        <IconFont
          name="tangerinr"
          style={{
            color: 'orange',
          }}
        />
        <IconFont
          name="bamboo-shoot"
          style={{
            color: 'green',
          }}
        />
        <IconFont
          name="apple"
          style={{
            color: 'red',
          }}
        />
        <IconFont
          name="milk"
          style={{
            color: '#0052D9',
          }}
        />
        <IconFont
          name="peach"
          style={{
            color: 'pink',
          }}
        />
      </Space>
      <Space break-line>
        <p>How much icons does TDesign Icon includes?</p>
        <IconFont
          name="numbers-1"
          style={{
            color: 'var(--td-brand-color-5)',
          }}
        />
        <IconFont
          name="numbers-2"
          style={{
            color: 'var(--td-brand-color-6)',
          }}
        />
        <IconFont
          name="numbers-0"
          style={{
            color: 'var(--td-brand-color-7)',
          }}
        />
        <IconFont
          name="numbers-3"
          style={{
            color: 'var(--td-brand-color-8)',
          }}
        />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Icon/>
                  使用描述：组件会引入默认的 SVG 图标，如果希望禁止组件加载默认的 SVG 图标，将 loadDefaultIcons 置为 false 即可。
                  代码示例：import React from 'react';
import { Icon } from 'tdesign-icons-react';

const CustomUrlIcon = ({ name, size, style }) => (
  <Icon name={name} size={size} style={style} url="https://tdesign.gtimg.com/icon/default-demo/index.js" />
);
function EnhancedIconExample() {
  return (
    <div>
      <CustomUrlIcon
        name="cps-icon-home-sheep"
        style={{
          marginRight: '8px',
        }}
      />
      <CustomUrlIcon
        name="cps-icon-home-sheep"
        size="medium"
        style={{
          marginRight: '8px',
        }}
      />
      <CustomUrlIcon
        name="cps-icon-home-sheep"
        size="large"
        style={{
          marginRight: '8px',
        }}
      />
      <CustomUrlIcon name="cps-icon-home-sheep" size="25px" />
      <br />
      <br />
      <CustomUrlIcon
        name="cps-icon-home-sheep"
        style={{
          color: 'red',
          marginRight: '8px',
        }}
      />
      <CustomUrlIcon
        name="cps-icon-home-sheep"
        style={{
          color: 'green',
          marginRight: '8px',
        }}
      />
      <CustomUrlIcon
        name="cps-icon-home-sheep"
        style={{
          color: 'orange',
          marginRight: '8px',
        }}
      />
      <CustomUrlIcon name="t-icon-home" />
    </div>
  );
}
export default EnhancedIconExample;

                  ===SPLIT===组建:<Icon/>
                  使用描述：组件会引入默认的 iconfont 图标，如果希望禁止组件加载默认的 iconfont 图标，将 loadDefaultIcons 置为 false 即可。
                  代码示例：import React from 'react';
import { IconFont } from 'tdesign-icons-react';

const CustomUrlIconFont = ({ name, size, style }) => (
  <IconFont name={name} size={size} style={style} url="https://tdesign.gtimg.com/icon/default-demo/index.css" />
);
function EnhancedIconExample() {
  return (
    <div>
      <CustomUrlIconFont
        name="cps-icon cps-icon-home-sheep"
        style={{
          marginRight: '8px',
        }}
      />
      <CustomUrlIconFont
        name="cps-icon cps-icon-home-sheep"
        size="medium"
        style={{
          marginRight: '8px',
        }}
      />
      <CustomUrlIconFont
        name="cps-icon cps-icon-home-sheep"
        size="large"
        style={{
          marginRight: '8px',
        }}
      />
      <CustomUrlIconFont name="cps-icon cps-icon-home-sheep" size="25px" />
      <br />
      <br />
      <CustomUrlIconFont
        name="cps-icon cps-icon-home-sheep"
        style={{
          color: 'red',
          marginRight: '8px',
        }}
      />
      <CustomUrlIconFont
        name="cps-icon cps-icon-home-sheep"
        style={{
          color: 'green',
          marginRight: '8px',
        }}
      />
      <CustomUrlIconFont
        name="cps-icon cps-icon-home-sheep"
        style={{
          color: 'orange',
          marginRight: '8px',
        }}
      />
      <CustomUrlIconFont name="t-icon-home" />
    </div>
  );
}
export default EnhancedIconExample;

                  ===SPLIT===组建:<Icon/>
                  使用描述：在一些业务场景中，存在需要选择图标的情况，可以配合Select组件来实现图标选择器。
                  代码示例：import React, { useState } from 'react';
import { Select } from 'tdesign-react';
import { Icon, manifest } from 'tdesign-icons-react';

const { Option } = Select;
function IconSelect() {
  const [value, setValue] = useState('edit-1');
  return (
    <Select
      value={value}
      onChange={setValue}
      prefixIcon={
        <Icon
          name={value}
          style={{
            marginRight: '8px',
          }}
        />
      }
    >
      {manifest.map((item) => (
        <Option
          key={item.stem}
          value={item.stem}
          label={item.stem}
          style={{
            display: 'inline-block',
            fontSize: '20px',
          }}
        >
          <Icon name={item.stem} />
        </Option>
      ))}
    </Select>
  );
}
export default IconSelect;

                  组建:<Link/>
                  使用描述：最简单的文字链接形式，点击后直接跳转到对应链接。
                  代码示例：import React from 'react';
import { Link } from 'tdesign-react';

export default function LinkExample() {
  return <Link theme="primary">跳转链接</Link>;
}

                  ===SPLIT===组建:<Link/>
                  使用描述：在文字下加横线，表明此处为链接。
                  代码示例：import React from 'react';
import { Space, Link } from 'tdesign-react';

export default function LinkExample() {
  return (
    <Space>
      <Link theme="default" underline>
        跳转链接
      </Link>
      <Link theme="primary" underline>
        跳转链接
      </Link>
      <Link theme="danger" underline>
        跳转链接
      </Link>
      <Link theme="warning" underline>
        跳转链接
      </Link>
      <Link theme="success" underline>
        跳转链接
      </Link>
    </Space>
  );
}

                  ===SPLIT===组建:<Link/>
                  使用描述：文字链接与图标搭配使用，通过图标快速了解链接所代表的含义。
                  代码示例：import React from 'react';
import { JumpIcon, LinkIcon } from 'tdesign-icons-react';
import { Space, Link } from 'tdesign-react';

export default function LinkExample() {
  return (
    <Space>
      <Link theme="default" prefixIcon={<LinkIcon />}>
        跳转链接
      </Link>
      <Link theme="primary" underline href="https://tdesign.tencent.com/" target="_self" prefixIcon={<LinkIcon />}>
        跳转链接
      </Link>
      <Link theme="danger" underline href="https://tdesign.tencent.com/" target="_self" prefixIcon={<JumpIcon />}>
        跳转链接
      </Link>
      <Link
        theme="warning"
        underline
        href="https://tdesign.tencent.com/"
        target="_self"
        prefixIcon={<JumpIcon />}
        disabled
      >
        跳转链接
      </Link>
    </Space>
  );
}

                  ===SPLIT===组建:<Link/>
                  使用描述：悬浮状态包含 2 种状态：文本颜色变化 和 添加下划线。由 hover 控制，可选值：color | underline
                  代码示例：import React from 'react';
import { Space, Link } from 'tdesign-react';

export default function LinkExample() {
  return (
    <Space direction="vertical">
      <Space>
        <Link theme="default" hover="underline">
          跳转链接
        </Link>
        <Link theme="primary" hover="underline">
          跳转链接
        </Link>
        <Link theme="danger" hover="underline">
          跳转链接
        </Link>
        <Link theme="warning" hover="underline">
          跳转链接
        </Link>
        <Link theme="success" hover="underline">
          跳转链接
        </Link>
      </Space>
      <Space>
        <Link theme="default" hover="color">
          跳转链接
        </Link>
        <Link theme="primary" hover="color">
          跳转链接
        </Link>
        <Link theme="danger" hover="color">
          跳转链接
        </Link>
        <Link theme="warning" hover="color">
          跳转链接
        </Link>
        <Link theme="success" hover="color">
          跳转链接
        </Link>
      </Space>
      <Space>
        <Link theme="default" hover="color" underline>
          跳转链接
        </Link>
        <Link theme="primary" hover="color" underline>
          跳转链接
        </Link>
        <Link theme="danger" hover="color" underline>
          跳转链接
        </Link>
        <Link theme="warning" hover="color" underline>
          跳转链接
        </Link>
        <Link theme="success" hover="color" underline>
          跳转链接
        </Link>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Link/>
                  使用描述：在default、primary、success、warning、danger不同状态下，可提供对应的链接主题色。
                  代码示例：import React from 'react';
import { Space, Link } from 'tdesign-react';

export default function LinkExample() {
  return (
    <Space>
      <Link theme="default">跳转链接</Link>
      <Link theme="primary">跳转链接</Link>
      <Link theme="danger">跳转链接</Link>
      <Link theme="warning">跳转链接</Link>
      <Link theme="success">跳转链接</Link>
    </Space>
  );
}

                  ===SPLIT===组建:<Link/>
                  使用描述：当链接不可用时，显示禁用状态。
                  代码示例：import React from 'react';
import { JumpIcon } from 'tdesign-icons-react';
import { Space, Link } from 'tdesign-react';

export default function LinkExample() {
  const clickLink = () => {
    console.log('不触发');
  };
  return (
    <Space>
      <Link theme="default" disabled onClick={clickLink}>
        查看链接
      </Link>
      <Link theme="primary" underline disabled onClick={clickLink}>
        查看链接
      </Link>
      <Link theme="danger" hover="color" disabled onClick={clickLink}>
        查看链接
      </Link>
      <Link theme="warning" hover="underline" disabled onClick={clickLink}>
        查看链接
      </Link>
      <Link theme="success" disabled suffixIcon={<JumpIcon />} onClick={clickLink}>
        查看链接
      </Link>
    </Space>
  );
}

                  ===SPLIT===组建:<Link/>
                  使用描述：提供大、中（默认）、小三种尺寸。
                  代码示例：import React from 'react';
import { JumpIcon } from 'tdesign-icons-react';
import { Space, Link } from 'tdesign-react';

export default function LinkExample() {
  return (
    <Space direction="vertical">
      <Space>
        <Link theme="default" size="small">
          跳转链接
        </Link>
        <Link theme="primary" size="small">
          跳转链接
        </Link>
        <Link theme="danger" size="small">
          跳转链接
        </Link>
        <Link theme="warning" size="small" disabled>
          跳转链接
        </Link>
        <Link theme="success" size="small" suffixIcon={<JumpIcon />}>
          跳转链接
        </Link>
      </Space>
      <Space>
        <Link theme="default" size="medium">
          跳转链接
        </Link>
        <Link theme="primary" size="medium">
          跳转链接
        </Link>
        <Link theme="danger" size="medium">
          跳转链接
        </Link>
        <Link theme="warning" size="medium" disabled>
          跳转链接
        </Link>
        <Link theme="success" size="medium" suffixIcon={<JumpIcon />}>
          跳转链接
        </Link>
      </Space>
      <Space>
        <Link theme="default" size="large">
          跳转链接
        </Link>
        <Link theme="primary" size="large">
          跳转链接
        </Link>
        <Link theme="danger" size="large">
          跳转链接
        </Link>
        <Link theme="warning" size="large" disabled>
          跳转链接
        </Link>
        <Link theme="success" size="large" suffixIcon={<JumpIcon />}>
          跳转链接
        </Link>
      </Space>
    </Space>
  );
}

                  组建:<Typography/>
                  使用描述：基础组合用法 
                  代码示例：import React from 'react';
import { Typography, Space } from 'tdesign-react';

const { Title, Text, Paragraph } = Typography;
export default function BasicExample() {
  return (
    <>
      <Title>What is TDesign</Title>
      <Text mark>
        TDesign is an enterprise-level design system accumulated by Tencent&apos;s various business teams.
      </Text>
      <Paragraph>
        <Text strong>
          TDesign features a unified design values, consistent design language, and visual style, helping users form
          continuous and coherent perceptions of the experience.
        </Text>{' '}
        Based on this, TDesign offers out-of-the-box UI component libraries, design guidelines, and design assets,
        elegantly and efficiently freeing design and development from repetitive tasks. Simultaneously, it facilitates
        easy extension on top of TDesign, enabling a better alignment with business requirements.
      </Paragraph>
      <Title level="h2">Comprehensive</Title>
      <Paragraph>
        TDesign Support <Text code>Vue 2</Text>, <Text code>Vue 3</Text>, <Text code>React</Text>, components for
        Desktop Application and <Text code>Vue 3</Text>, <Text code>Wechat MiniProgram</Text> components for Mobile
        Application.
      </Paragraph>

      <Space direction="vertical" size={12}>
        <Paragraph>
          <ul>
            <li>Features</li>
            <li>
              Comprehensive
              <ul>
                <li>Consistency</li>
                <li>Usability</li>
              </ul>
            </li>
            <li>Join TDesign </li>
          </ul>

          <ol>
            <li>Features</li>
            <li>
              Comprehensive
              <ol type="a">
                <li>Consistency</li>
                <li>Usability</li>
              </ol>
            </li>
            <li>Join TDesign</li>
          </ol>
        </Paragraph>
      </Space>
    </>
  );
}

                  ===SPLIT===组建:<Typography/>
                  使用描述：标题 
                  代码示例：import React from 'react';
import { Typography } from 'tdesign-react';

const { Title } = Typography;
const TitleExample = () => (
  <>
    <Title level="h1">H1. TDesign</Title>
    <Title level="h2">H2. TDesign</Title>
    <Title level="h3">H3. TDesign</Title>
    <Title level="h4">H4. TDesign</Title>
    <Title level="h5">H5. TDesign</Title>
    <Title level="h6">H6. TDesign</Title>
  </>
);
export default TitleExample;

                  ===SPLIT===组建:<Typography/>
                  使用描述：文本 
                  代码示例：import React from 'react';
import { Typography, Space } from 'tdesign-react';

const { Text } = Typography;
export default function TextExample() {
  return (
    <Space direction="vertical" className="vertical-demo" size={12}>
      <Text theme="primary">TDesign (primary)</Text>
      <Text theme="secondary">TDesign (secondary)</Text>
      <Text disabled>TDesign (disabled)</Text>
      <Text theme="success">TDesign (success)</Text>
      <Text theme="warning">TDesign (warning)</Text>
      <Text theme="error">TDesign (error)</Text>
      <Text mark="pink">TDesign (mark)</Text>
      <Text code>TDesign (code)</Text>
      <Text keyboard>TDesign (keyboard)</Text>
      <Text underline>TDesign (underline)</Text>
      <Text delete>TDesign (delete)</Text>
      <Text strong>TDesign (strong)</Text>
      <Text italic>TDesign (italic)</Text>
    </Space>
  );
}

                  ===SPLIT===组建:<Typography/>
                  使用描述：可复制 
                  代码示例：import React from 'react';
import { AngryIcon, SmileIcon } from 'tdesign-icons-react';
import { Typography } from 'tdesign-react';

const { Text } = Typography;
const textString = `TDesign was founded with the principles of open-source collaboration from the beginning. The collaboration scheme discussion, component design, and API design, including source code, are fully open within the company, garnering widespread attention from internal developers and designers. TDesign follows an equal, open, and strict policy, regardless of the participants' roles.`;
export default function CopyableExample() {
  return (
    <>
      <Text copyable>This is a copyable text.</Text>
      <br />
      <Text
        ellipsis
        copyable={{
          text: textString,
          tooltipProps: {
            content: 'click to copy',
          },
        }}
        style={{
          display: 'inline-block',
          width: '50%',
        }}
      >
        This is a copyable long text. {textString}
      </Text>
      <br />
      <Text
        copyable={{
          suffix: ({ copied }) => (copied ? <SmileIcon /> : <AngryIcon />),
        }}
      >
        This is a copyable long text with custom suffix.
      </Text>
    </>
  );
}

                  ===SPLIT===组建:<Typography/>
                  使用描述：可省略 
                  代码示例：import React, { useState } from 'react';
import { ChevronDownIcon, ChevronUpIcon } from 'tdesign-icons-react';
import { Button, Typography } from 'tdesign-react';

const { Text, Paragraph } = Typography;
const textString = `TDesign was founded with the principles of open-source collaboration from the beginning. The collaboration scheme discussion, component design, and API design, including source code, are fully open within the company, garnering widespread attention from internal developers and designers. TDesign follows an equal, open, and strict policy, regardless of the participants' roles.`;
const EllipsisExample = () => {
  const [isExpanded, setIsExpanded] = useState(false);
  const handleExpand = () => {
    setIsExpanded(true);
  };
  return (
    <>
      <Paragraph ellipsis>{textString}</Paragraph>
      <Paragraph
        ellipsis={{
          row: 2,
          suffix: ({ expanded }) => (
            <>
              <Button
                theme="primary"
                variant="text"
                style={{
                  padding: 0,
                  height: '1em',
                }}
              >
                {expanded ? 'less' : 'more'}
              </Button>
            </>
          ),
          expandable: true,
          collapsible: true,
        }}
      >
        {textString}
      </Paragraph>
      <Text
        ellipsis={{
          suffix: () => '',
          expandable: false,
          tooltipProps: {
            content: 'long long long text',
          },
          onExpand: handleExpand,
        }}
        style={{
          width: isExpanded ? '100%' : 300,
          display: 'block',
        }}
      >
        {textString}
      </Text>

      <Paragraph
        ellipsis={{
          suffix: ({ expanded }) => (
            <span>
              {expanded ? (
                <ChevronUpIcon
                  size={16}
                  style={{
                    marginLeft: 4,
                  }}
                />
              ) : (
                <ChevronDownIcon
                  style={{
                    marginLeft: 4,
                  }}
                  size={16}
                />
              )}
            </span>
          ),
          expandable: true,
        }}
      >
        {textString}
      </Paragraph>
    </>
  );
};
export default EllipsisExample;

                  组建:<Divider/>
                  使用描述：水平分割线常用来对不同元素内容进行分割。
                  代码示例：import React from 'react';
import { Divider } from 'tdesign-react';

export default function BasicDivider() {
  return (
    <>
      <p>
        通过高效广告平台，协助品牌和市场营销者触达数以亿计的中国消费者通过金融科技及企业服务，促进合作伙伴业务发展，助力实现数字化升级，我们大力投资于人才队伍和推动科技创新，积极参与互联网行业协同发展。
      </p>
      <Divider></Divider>
      <p>
        通过高效广告平台，协助品牌和市场营销者触达数以亿计的中国消费者通过金融科技及企业服务，促进合作伙伴业务发展，助力实现数字化升级，我们大力投资于人才队伍和推动科技创新，积极参与互联网行业协同发展。
      </p>
      <Divider dashed></Divider>
      <p>
        通过高效广告平台，协助品牌和市场营销者触达数以亿计的中国消费者通过金融科技及企业服务，促进合作伙伴业务发展，助力实现数字化升级，我们大力投资于人才队伍和推动科技创新，积极参与互联网行业协同发展。
      </p>
    </>
  );
}

                  ===SPLIT===组建:<Divider/>
                  使用描述：垂直分割线常用来做行内分割。
                  代码示例：import React from 'react';
import { Divider } from 'tdesign-react';

export default function BasicDivider() {
  return (
    <>
      <span>正直</span>
      <Divider layout="vertical"></Divider>
      <span>进取</span>
      <Divider layout="vertical"></Divider>
      <span>合作</span>
      <Divider layout="vertical"></Divider>
      <span>创新</span>
    </>
  );
}

                  ===SPLIT===组建:<Divider/>
                  使用描述：带文字的分割线是在分割线中嵌入文字，在需要对分割内容进行解释说明时使用。
                  代码示例：import React from 'react';
import { Divider } from 'tdesign-react';

export default function BasicDivider() {
  return (
    <>
      <p>
        通过高效广告平台，协助品牌和市场营销者触达数以亿计的中国消费者通过金融科技及企业服务，促进合作伙伴业务发展，助力实现数字化升级，我们大力投资于人才队伍和推动科技创新，积极参与互联网行业协同发展。
      </p>
      <Divider align="left">TDesign</Divider>
      <p>
        通过高效广告平台，协助品牌和市场营销者触达数以亿计的中国消费者通过金融科技及企业服务，促进合作伙伴业务发展，助力实现数字化升级，我们大力投资于人才队伍和推动科技创新，积极参与互联网行业协同发展。
      </p>
      <Divider align="center">TDesign</Divider>
      <p>
        通过高效广告平台，协助品牌和市场营销者触达数以亿计的中国消费者通过金融科技及企业服务，促进合作伙伴业务发展，助力实现数字化升级，我们大力投资于人才队伍和推动科技创新，积极参与互联网行业协同发展。
      </p>
      <Divider align="right">TDesign</Divider>
      <p>
        通过高效广告平台，协助品牌和市场营销者触达数以亿计的中国消费者通过金融科技及企业服务，促进合作伙伴业务发展，助力实现数字化升级，我们大力投资于人才队伍和推动科技创新，积极参与互联网行业协同发展。
      </p>
    </>
  );
}

                  组建:<Grid/>
                  使用描述：基本使用 
                  代码示例：import React from 'react';
import { Row, Col } from 'tdesign-react';

const demoCols = [
  Array(12).fill(1),
  Array(6).fill(2),
  Array(4).fill(3),
  Array(3).fill(4),
  Array(2).fill(6),
  Array(1).fill(12),
];
export default function BasicGrid() {
  return (
    <>
      {demoCols.map((cols, i) => (
        <Row key={i}>
          {cols.map((col, j) => (
            <Col span={col} key={j}>
              <div>{col}</div>
            </Col>
          ))}
        </Row>
      ))}
    </>
  );
}

                  ===SPLIT===组建:<Grid/>
                  使用描述：区块间隔 
                  代码示例：import React from 'react';
import { Row, Col } from 'tdesign-react';

export default function SpaceGrid() {
  return (
    <>
      <Row gutter={16}>
        <Col span={3}>
          <div>col-3</div>
        </Col>
        <Col span={3}>
          <div>col-3</div>
        </Col>
        <Col span={3}>
          <div>col-3</div>
        </Col>
        <Col span={3}>
          <div>col-3</div>
        </Col>
      </Row>

      <Row
        gutter={{
          xs: 8,
          sm: 16,
          md: 24,
          lg: 32,
          xl: 32,
          xxl: 40,
        }}
      >
        <Col span={3}>
          <div>col-3</div>
        </Col>
        <Col span={3}>
          <div>col-3</div>
        </Col>
        <Col span={3}>
          <div>col-3</div>
        </Col>
        <Col span={3}>
          <div>col-3</div>
        </Col>
      </Row>

      <Row gutter={[16, 24]}>
        <Col span={3}>
          <div>col-3</div>
        </Col>
        <Col span={3}>
          <div>col-3</div>
        </Col>
        <Col span={3}>
          <div>col-3</div>
        </Col>
        <Col span={3}>
          <div>col-3</div>
        </Col>
        <Col span={3}>
          <div>col-3</div>
        </Col>
        <Col span={3}>
          <div>col-3</div>
        </Col>
        <Col span={3}>
          <div>col-3</div>
        </Col>
        <Col span={3}>
          <div>col-3</div>
        </Col>
      </Row>
    </>
  );
}

                  ===SPLIT===组建:<Grid/>
                  使用描述：左右偏移 
                  代码示例：import React from 'react';
import { Row, Col } from 'tdesign-react';

export default function OffsetGrid() {
  return (
    <>
      <Row>
        <Col span={4}>
          <div>col-4</div>
        </Col>
        <Col span={4} offset={4}>
          <div>col-4</div>
        </Col>
      </Row>
      <Row>
        <Col span={3} offset={3}>
          <div>col-3 col-offset-3</div>
        </Col>
        <Col span={3} offset={3}>
          <div>col-3 col-offset-3</div>
        </Col>
      </Row>
      <Row>
        <Col span={6} offset={2}>
          <div>col-6 col-offset-2</div>
        </Col>
      </Row>
    </>
  );
}

                  ===SPLIT===组建:<Grid/>
                  使用描述：排序 
                  代码示例：import React from 'react';
import { Row, Col } from 'tdesign-react';

export default function PullPushGrid() {
  return (
    <>
      <Row>通过 `pull` `push` 进行排序</Row>
      <Row>
        <Col span={9} push={3}>
          <div>col-9 col-push-3</div>
        </Col>
        <Col span={3} pull={9}>
          <div>col-3 col-pull-9</div>
        </Col>
      </Row>
      <Row>
        <Col span={8} push={4}>
          <div>col-8 col-push-4</div>
        </Col>
        <Col span={4} pull={8}>
          <div>col-4 col-pull-8</div>
        </Col>
      </Row>
    </>
  );
}

                  ===SPLIT===组建:<Grid/>
                  使用描述：次序 
                  代码示例：import React from 'react';
import { Row, Col } from 'tdesign-react';

export default function OrderGrid() {
  return (
    <>
      <Row>通过 `order` 来改变元素的排序。</Row>
      <Row>
        <Col span={3} order={4}>
          <div>1 col-order-4</div>
        </Col>
        <Col span={3} order={3}>
          <div>2 col-order-3</div>
        </Col>
        <Col span={3} order={2}>
          <div>3 col-order-2</div>
        </Col>
        <Col span={3} order={1}>
          <div>4 col-order-1</div>
        </Col>
      </Row>
      <Row>
        <Col
          span={3}
          xs={{
            order: 1,
          }}
          sm={{
            order: 2,
          }}
          md={{
            order: 3,
          }}
          lg={{
            order: 4,
          }}
        >
          <div>1 col-order-responsive</div>
        </Col>
        <Col
          span={3}
          xs={{
            order: 2,
          }}
          sm={{
            order: 1,
          }}
          md={{
            order: 4,
          }}
          lg={{
            order: 3,
          }}
        >
          <div>2 col-order-responsive</div>
        </Col>
        <Col
          span={3}
          xs={{
            order: 3,
          }}
          sm={{
            order: 4,
          }}
          md={{
            order: 2,
          }}
          lg={{
            order: 1,
          }}
        >
          <div>3 col-order-responsive</div>
        </Col>
        <Col
          span={3}
          xs={{
            order: 4,
          }}
          sm={{
            order: 3,
          }}
          md={{
            order: 1,
          }}
          lg={{
            order: 2,
          }}
        >
          <div>4 col-order-responsive</div>
        </Col>
      </Row>
    </>
  );
}

                  ===SPLIT===组建:<Grid/>
                  使用描述：排版 
                  代码示例：import React from 'react';
import { Row, Col } from 'tdesign-react';

export default function OrderGrid() {
  return (
    <>
      <p>align left</p>
      <Row justify="start">
        <Col span={2}>
          <div>col-2</div>
        </Col>
        <Col span={2}>
          <div>col-2</div>
        </Col>
        <Col span={2}>
          <div>col-2</div>
        </Col>
        <Col span={2}>
          <div>col-2</div>
        </Col>
      </Row>

      <p>align center</p>
      <Row justify="center">
        <Col span={2}>
          <div>col-2</div>
        </Col>
        <Col span={2}>
          <div>col-2</div>
        </Col>
        <Col span={2}>
          <div>col-2</div>
        </Col>
        <Col span={2}>
          <div>col-2</div>
        </Col>
      </Row>

      <p>align right</p>
      <Row justify="end">
        <Col span={2}>
          <div>col-2</div>
        </Col>
        <Col span={2}>
          <div>col-2</div>
        </Col>
        <Col span={2}>
          <div>col-2</div>
        </Col>
        <Col span={2}>
          <div>col-2</div>
        </Col>
      </Row>

      <p>space-between</p>
      <Row justify="space-between">
        <Col span={2}>
          <div>col-2</div>
        </Col>
        <Col span={2}>
          <div>col-2</div>
        </Col>
        <Col span={2}>
          <div>col-2</div>
        </Col>
        <Col span={2}>
          <div>col-2</div>
        </Col>
      </Row>

      <p>space-around</p>
      <Row justify="space-around">
        <Col span={2}>
          <div>col-2</div>
        </Col>
        <Col span={2}>
          <div>col-2</div>
        </Col>
        <Col span={2}>
          <div>col-2</div>
        </Col>
        <Col span={2}>
          <div>col-2</div>
        </Col>
      </Row>
    </>
  );
}

                  ===SPLIT===组建:<Grid/>
                  使用描述：对齐 
                  代码示例：import React from 'react';
import { Row, Col } from 'tdesign-react';

export default function OrderGrid() {
  return (
    <>
      <p>align top</p>
      <Row justify="center" align="top">
        <Col span={3}>
          <div
            style={{
              height: 80,
            }}
          >
            col-3
          </div>
        </Col>
        <Col span={3}>
          <div
            style={{
              height: 40,
            }}
          >
            col-3
          </div>
        </Col>
        <Col span={3}>
          <div
            style={{
              height: 80,
            }}
          >
            col-3
          </div>
        </Col>
        <Col span={3}>
          <div
            style={{
              height: 40,
            }}
          >
            col-3
          </div>
        </Col>
      </Row>

      <p>Align Middle</p>
      <Row justify="space-around" align="middle">
        <Col span={3}>
          <div
            style={{
              height: 80,
            }}
          >
            col-3
          </div>
        </Col>
        <Col span={3}>
          <div
            style={{
              height: 40,
            }}
          >
            col-3
          </div>
        </Col>
        <Col span={3}>
          <div
            style={{
              height: 80,
            }}
          >
            col-3
          </div>
        </Col>
        <Col span={3}>
          <div
            style={{
              height: 40,
            }}
          >
            col-3
          </div>
        </Col>
      </Row>

      <p>Align Bottom</p>
      <Row justify="space-between" align="bottom">
        <Col span={3}>
          <div
            style={{
              height: 80,
            }}
          >
            col-3
          </div>
        </Col>
        <Col span={3}>
          <div
            style={{
              height: 40,
            }}
          >
            col-3
          </div>
        </Col>
        <Col span={3}>
          <div
            style={{
              height: 80,
            }}
          >
            col-3
          </div>
        </Col>
        <Col span={3}>
          <div
            style={{
              height: 40,
            }}
          >
            col-3
          </div>
        </Col>
      </Row>
    </>
  );
}

                  ===SPLIT===组建:<Grid/>
                  使用描述：flex 
                  代码示例：import React from 'react';
import { Row, Col } from 'tdesign-react';

export default function OrderGrid() {
  return (
    <>
      <Row>
        <Col flex={2}>
          <div>2 / 5</div>
        </Col>
        <Col flex={3}>
          <div>3 / 5</div>
        </Col>
      </Row>

      <Row>
        <Col flex="100px">
          <div>100px</div>
        </Col>
        <Col flex="auto">
          <div>Fill Rest</div>
        </Col>
      </Row>

      <Row>
        <Col flex="1 1 200px">
          <div>1 1 200px</div>
        </Col>
        <Col flex="0 1 300px">
          <div>0 1 300px</div>
        </Col>
      </Row>

      <Row>
        <Col flex="none">
          <div
            style={{
              padding: '0 16px',
            }}
          >
            none
          </div>
        </Col>
        <Col flex="auto">
          <div>auto with no-wrap</div>
        </Col>
      </Row>
    </>
  );
}

                  ===SPLIT===组建:<Grid/>
                  使用描述：响应式布局 
                  代码示例：import React from 'react';
import { Row, Col, Space } from 'tdesign-react';

export default function OrderGrid() {
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <span>宽度响应式</span>
      <Row>
        <Col xs={2} sm={4} md={6} lg={8} xl={10}>
          <div>Col</div>
        </Col>
        <Col xs={10} sm={8} md={6} lg={4} xl={2}>
          <div>Col</div>
        </Col>
      </Row>

      <span>其他属性响应式（支持span，offset，order，pull，push）</span>
      <Row>
        <Col
          xs={{
            offset: 0,
            span: 3,
          }}
          sm={{
            offset: 2,
            span: 3,
          }}
          md={{
            offset: 4,
            span: 3,
          }}
          lg={{
            offset: 6,
            span: 3,
          }}
          xl={{
            offset: 8,
            span: 3,
          }}
        >
          <div>Col</div>
        </Col>
      </Row>
    </Space>
  );
}

                  组建:<Layout/>
                  使用描述：当子元素中包含 <Aside> 时，全部子元素会水平排列，否则会垂直排列。
                  代码示例：import React from 'react';
import { Layout } from 'tdesign-react';

const { Header, Content, Footer, Aside } = Layout;
export default function BasicDivider() {
  return (
    <>
      <h4>顶部导航布局</h4>
      <Layout>
        <Header>Header</Header>
        <Content>Content</Content>
        <Footer>Copyright @ 2019-2021 Tencent. All Rights Reserved</Footer>
      </Layout>

      <br />

      <h4>侧边导航布局</h4>
      <Layout>
        <Aside>Aside</Aside>
        <Layout>
          <Content>Content</Content>
          <Footer>Copyright @ 2019-2021 Tencent. All Rights Reserved</Footer>
        </Layout>
      </Layout>

      <br />

      <h4>组合导航布局</h4>
      <Layout>
        <Header>Header</Header>
        <Layout>
          <Aside>Aside</Aside>
          <Layout>
            <Content>Content</Content>
            <Footer>Copyright @ 2019-2021 Tencent. All Rights Reserved</Footer>
          </Layout>
        </Layout>
      </Layout>

      <br />

      <Layout>
        <Header>Header</Header>
        <Layout>
          <Layout>
            <Content>Content</Content>
            <Footer>Copyright @ 2019-2021 Tencent. All Rights Reserved</Footer>
          </Layout>
          <Aside>Aside</Aside>
        </Layout>
      </Layout>

      <br />

      <Layout>
        <Header>Header</Header>
        <Layout>
          <Aside width={'80px'}>Aside</Aside>
          <Layout>
            <Content>Content</Content>
            <Footer>Copyright @ 2019-2021 Tencent. All Rights Reserved</Footer>
          </Layout>
        </Layout>
      </Layout>
    </>
  );
}

                  ===SPLIT===组建:<Layout/>
                  使用描述：主要包含侧边导航、内容区域。该布局下，页面间切换的操作效率较高，但压缩了内容区域的横向空间。适用于导航层级较深，导航效率要求较高的页面。
                  代码示例：import React from 'react';
import { Layout, Menu } from 'tdesign-react';

const { Content, Footer, Aside } = Layout;
const { MenuItem } = Menu;
const Logo = () => <img width="136" src="https://www.tencent.com/img/index/menu_logo_hover.png" alt="logo" />;
function BasicUsage(props) {
  return (
    <Menu
      style={{
        width: '100%',
        height: '100%',
        boxShadow: 'none',
      }}
      logo={<Logo />}
      {...props}
    >
      <MenuItem value="1">侧边内容一</MenuItem>
      <MenuItem value="2">侧边内容二</MenuItem>
      <MenuItem value="3">侧边内容三</MenuItem>
      <MenuItem value="4">侧边内容四</MenuItem>
      <MenuItem value="5">侧边内容无</MenuItem>
    </Menu>
  );
}
export default function BasicDivider() {
  return (
    <>
      <h4>侧边导航布局</h4>
      <Layout>
        <Aside>
          <BasicUsage />
        </Aside>
        <Layout>
          <Content>
            <div>Content</div>
          </Content>
          <Footer>Copyright @ 2019-2020 Tencent. All Rights Reserved</Footer>
        </Layout>
      </Layout>
    </>
  );
}

                  ===SPLIT===组建:<Layout/>
                  使用描述：主要包含顶部区域、内容区域。该布局下，横向空间的展示效率很高，但损失了导航空间，降低了页面导航的切换效率。适用于主要操作区域在内容区域，对页面叠好效率要求不高的页面。对于该类页面，为了保证信息布局的稳定性，内容区域的宽度常设置为固定宽度。
                  代码示例：import React from 'react';
import { Layout, Menu } from 'tdesign-react';
import { SearchIcon, NotificationFilledIcon, HomeIcon } from 'tdesign-icons-react';

const { Header, Content, Footer } = Layout;
const { HeadMenu, MenuItem } = Menu;
export default function BasicDivider() {
  return (
    <Layout>
      <Header>
        <HeadMenu
          value="item1"
          logo={<img width="136" src="https://www.tencent.com/img/index/menu_logo_hover.png" alt="logo" />}
          operations={
            <div className="t-menu__operations">
              <SearchIcon className="t-menu__operations-icon" />
              <NotificationFilledIcon className="t-menu__operations-icon" />
              <HomeIcon className="t-menu__operations-icon" />
            </div>
          }
        >
          <MenuItem value="item1">已选内容</MenuItem>
          <MenuItem value="item2">菜单内容一</MenuItem>
          <MenuItem value="item3">菜单内容二</MenuItem>
          <MenuItem value="item4" disabled>
            菜单内容三
          </MenuItem>
        </HeadMenu>
      </Header>
      <Content>
        <div>Content</div>
      </Content>
      <Footer>Copyright @ 2019-2020 Tencent. All Rights Reserved</Footer>
    </Layout>
  );
}

                  ===SPLIT===组建:<Layout/>
                  使用描述：主要包含顶部导航、侧边导航、内容区域。顶部导航和侧边导航的组合使用，提升了导航效率。多用于信息架构复杂、对导航效率有一定要求的应用型网站。
                  代码示例：import React from 'react';
import { Layout, Menu } from 'tdesign-react';
import {
  SearchIcon,
  NotificationFilledIcon,
  HomeIcon,
  DashboardIcon,
  ServerIcon,
  RootListIcon,
  ControlPlatformIcon,
  PreciseMonitorIcon,
  MailIcon,
  UserCircleIcon,
  PlayCircleIcon,
  Edit1Icon,
} from 'tdesign-icons-react';

const { HeadMenu, MenuItem } = Menu;
function BasicUsage() {
  return (
    <Menu
      theme="light"
      value="dashboard"
      style={{
        marginRight: 50,
        height: 550,
      }}
    >
      <MenuItem value="dashboard" icon={<DashboardIcon />}>
        仪表盘
      </MenuItem>
      <MenuItem value="resource" icon={<ServerIcon />}>
        资源列表
      </MenuItem>
      <MenuItem value="root">
        <RootListIcon />
        根目录
      </MenuItem>
      <MenuItem value="control-platform" icon={<ControlPlatformIcon />}>
        调度平台
      </MenuItem>
      <MenuItem value="precise-monitor" icon={<PreciseMonitorIcon />}>
        精准监控
      </MenuItem>
      <MenuItem value="mail" icon={<MailIcon />}>
        消息区
      </MenuItem>
      <MenuItem value="user-circle" icon={<UserCircleIcon />}>
        个人中心
      </MenuItem>
      <MenuItem value="play-circle" icon={<PlayCircleIcon />}>
        视频区
      </MenuItem>
      <MenuItem value="edit1" icon={<Edit1Icon />}>
        资源编辑
      </MenuItem>
    </Menu>
  );
}
const { Header, Content, Footer, Aside } = Layout;
export default function BasicDivider() {
  return (
    <div className="tdesign-demo-item--layout">
      <Layout>
        <Header>
          <HeadMenu
            value="item1"
            logo={<img width="136" src="https://www.tencent.com/img/index/menu_logo_hover.png" alt="logo" />}
            operations={
              <div className="t-menu__operations">
                <SearchIcon className="t-menu__operations-icon" />
                <NotificationFilledIcon className="t-menu__operations-icon" />
                <HomeIcon className="t-menu__operations-icon" />
              </div>
            }
          >
            <MenuItem value="item1">已选内容</MenuItem>
            <MenuItem value="item2">菜单内容一</MenuItem>
            <MenuItem value="item3">菜单内容二</MenuItem>
            <MenuItem value="item4" disabled>
              菜单内容三
            </MenuItem>
          </HeadMenu>
        </Header>
        <Layout>
          <Aside
            style={{
              borderTop: '1px solid var(--component-border)',
            }}
          >
            <BasicUsage />
          </Aside>
          <Layout>
            <Content>
              <div>Content</div>
            </Content>
            <Footer>Copyright @ 2019-2020 Tencent. All Rights Reserved</Footer>
          </Layout>
        </Layout>
      </Layout>
    </div>
  );
}

                  组建:<Space/>
                  使用描述：默认为横向排列，控制相邻组件水平间距。
                  代码示例：import React from 'react';
import { Space, Button } from 'tdesign-react';

const BaseSpace = () => (
  <Space>
    <Button>Button</Button>
    <Button>Button</Button>
    <Button>Button</Button>
  </Space>
);
export default BaseSpace;

                  ===SPLIT===组建:<Space/>
                  使用描述：可以设置 direction=vertical 调整为竖向排列。
                  代码示例：import React from 'react';
import { Space, Card } from 'tdesign-react';

const BaseSpace = () => (
  <Space direction="vertical">
    <Card title="标题" actions="操作" header bordered hoverShadow>
      仅有内容区域的卡片形式。卡片内容区域可以是文字、图片、表单、表格等形式信息内容。可使用大中小不同的卡片尺寸，按业务需求进行呈现。
    </Card>
    <Card title="标题" actions="操作" header bordered hoverShadow>
      仅有内容区域的卡片形式。卡片内容区域可以是文字、图片、表单、表格等形式信息内容。可使用大中小不同的卡片尺寸，按业务需求进行呈现。
    </Card>
    <Card title="标题" actions="操作" header bordered hoverShadow>
      仅有内容区域的卡片形式。卡片内容区域可以是文字、图片、表单、表格等形式信息内容。可使用大中小不同的卡片尺寸，按业务需求进行呈现。
    </Card>
  </Space>
);
export default BaseSpace;

                  ===SPLIT===组建:<Space/>
                  使用描述：可以通过 size 调整间距大小，自带三个可选值 small、medium、large。 也可以自定义设置，设置为数组时参数为 [row-gap, column-gap]。
                  代码示例：import React, { useState } from 'react';
import { Space, Slider, Button } from 'tdesign-react';

const BaseSpace = () => {
  const [size, setSize] = useState(8);
  return (
    <>
      <Slider value={size} onChange={setSize}></Slider>
      <br />
      <Space size={size}>
        <Button>Button</Button>
        <Button>Button</Button>
        <Button>Button</Button>
        <Button>Button</Button>
      </Space>
    </>
  );
};
export default BaseSpace;

                  ===SPLIT===组建:<Space/>
                  使用描述：可以通过 align 设置辅轴对齐方式，效果与 align-items 一致。
                  代码示例：import React from 'react';
import { Space, Button } from 'tdesign-react';

const BaseSpace = () => (
  <Space breakLine>
    <Space
      align="start"
      style={{
        padding: 12,
        border: '1px dashed var(--td-component-stroke)',
      }}
    >
      <div>start</div>
      <Button>Button</Button>
      <div
        style={{
          background: 'var(--td-bg-color-component)',
          height: 60,
          width: 60,
        }}
      ></div>
    </Space>
    <Space
      align="center"
      style={{
        padding: 12,
        border: '1px dashed var(--td-component-stroke)',
      }}
    >
      <div>center</div>
      <Button>Button</Button>
      <div
        style={{
          background: 'var(--td-bg-color-component)',
          height: 60,
          width: 60,
        }}
      ></div>
    </Space>
    <Space
      align="end"
      style={{
        padding: 12,
        border: '1px dashed var(--td-component-stroke)',
      }}
    >
      <div>end</div>
      <Button>Button</Button>
      <div
        style={{
          background: 'var(--td-bg-color-component)',
          height: 60,
          width: 60,
        }}
      ></div>
    </Space>
    <Space
      align="baseline"
      style={{
        padding: 12,
        border: '1px dashed var(--td-component-stroke)',
      }}
    >
      <div>baseline</div>
      <Button>Button</Button>
      <div
        style={{
          background: 'var(--td-bg-color-component)',
          height: 60,
          width: 60,
        }}
      ></div>
    </Space>
  </Space>
);
export default BaseSpace;

                  ===SPLIT===组建:<Space/>
                  使用描述：可以通过 breakLine 控制是否自动换行，默认不换行。
                  代码示例：import React from 'react';
import { Space, Button } from 'tdesign-react';

const BaseSpace = () => (
  <Space breakLine>
    <Button>Button</Button>
    <Button>Button</Button>
    <Button>Button</Button>
    <Button>Button</Button>
    <Button>Button</Button>
    <Button>Button</Button>
    <Button>Button</Button>
    <Button>Button</Button>
    <Button>Button</Button>
    <Button>Button</Button>
  </Space>
);
export default BaseSpace;

                  ===SPLIT===组建:<Space/>
                  使用描述：可以通过 separator 设置分隔符。
                  代码示例：import React from 'react';
import { Space, Button, Divider } from 'tdesign-react';

const BaseSpace = () => (
  <Space align="center" separator={<Divider layout="vertical" />}>
    <Button variant="text">Text</Button>
    <Button variant="text">Text</Button>
    <Button variant="text">Text</Button>
  </Space>
);
export default BaseSpace;

                  组建:<Affix/>
                  使用描述：适用于页面结构简单的场景，默认容器是 body。
                  代码示例：import React, { useState } from 'react';
import { Affix, Button } from 'tdesign-react';

export default function BaseExample() {
  const [top, setTop] = useState(150);
  const handleClick = () => {
    setTop(top + 10);
  };
  return (
    <Affix offsetTop={top} offsetBottom={10}>
      <Button onClick={handleClick}>固钉</Button>
    </Affix>
  );
}

                  ===SPLIT===组建:<Affix/>
                  使用描述：适用于较为复杂的场景，元素固定位置会受容器位置的影响。
                  代码示例：import React, { useState, useRef, useEffect } from 'react';
import { Affix, Button } from 'tdesign-react';

export default function ContainerExample() {
  const [container, setContainer] = useState(null);
  const [affixed, setAffixed] = useState(false);
  const affixRef = useRef(null);
  const handleFixedChange = (affixed, { top }) => {
    console.log('top', top);
    setAffixed(affixed);
  };
  useEffect(() => {
    if (affixRef.current) {
      const { handleScroll } = affixRef.current;
      // 防止 affix 移动到容器外
      window.addEventListener('scroll', handleScroll);
      return () => window.removeEventListener('scroll', handleScroll);
    }
  }, []);
  const backgroundStyle = {
    height: '1500px',
    paddingTop: '700px',
    backgroundColor: '#eee',
    backgroundImage:
      'linear-gradient(45deg,#bbb 25%,transparent 0),linear-gradient(45deg,transparent 75%,#bbb 0),linear-gradient(45deg,#bbb 25%,transparent 0),linear-gradient(45deg,transparent 75%,#bbb 0)',
    backgroundSize: '30px 30px',
    backgroundPosition: '0 0,15px 15px,15px 15px,0 0',
  };
  return (
    <div
      style={{
        border: '1px solid var(--component-stroke)',
        borderRadius: '3px',
        height: '400px',
        overflowX: 'hidden',
        overflowY: 'auto',
        overscrollBehavior: 'none',
      }}
      ref={setContainer}
    >
      <div style={backgroundStyle}>
        <Affix
          offsetTop={50}
          offsetBottom={50}
          container={container}
          zIndex={5}
          onFixedChange={handleFixedChange}
          ref={affixRef}
        >
          <Button>affixed: {`${affixed}`}</Button>
        </Affix>
      </div>
    </div>
  );
}

                  组建:<Anchor/>
                  使用描述：锚点间不存在层级关系。适用于锚点间为同级关系时，属于页面结构简单的场景。
                  代码示例：import React from 'react';
import { Anchor } from 'tdesign-react';

const { AnchorItem } = Anchor;
export default function AnchorBase() {
  const handleClick = ({ e, href, title }) => {
    console.log('handleClick', e, href, title);
  };
  const handleChange = (currentLink, prevLink) => {
    console.log('currentLink', currentLink, 'prevLink', prevLink);
  };
  return (
    <div
      style={{
        display: 'flex',
      }}
    >
      <div
        style={{
          flex: '1',
        }}
      ></div>
      <Anchor
        onClick={handleClick}
        onChange={handleChange}
        targetOffset={150}
        affixProps={{
          offsetTop: 150,
        }}
      >
        <AnchorItem href="#基础锚点" title="基础锚点" />
        <AnchorItem href="#多级锚点" title="多级锚点" />
        <AnchorItem href="#指定容器锚点" title="指定容器锚点" />
        <AnchorItem href="#特定交互锚点" title="特定交互锚点" />
        <AnchorItem href="#尺寸" title="尺寸"></AnchorItem>
      </Anchor>
    </div>
  );
}

                  ===SPLIT===组建:<Anchor/>
                  使用描述：锚点内含有层级关系。适用锚点内含有父子级关系时，属于页面结构复杂的场景。
                  代码示例：import React from 'react';
import { Anchor } from 'tdesign-react';

const { AnchorItem } = Anchor;
export default function AnchorMultiple() {
  return (
    <>
      <Anchor bounds={100} targetOffset={50}>
        <AnchorItem href="#基础锚点" title="基础锚点" />
        <AnchorItem href="#多级锚点" title="多级锚点" />
        <AnchorItem href="#指定容器锚点" title="指定容器锚点" />
        <AnchorItem href="#特定交互锚点" title="特定交互锚点" />
        <AnchorItem href="#尺寸" title="尺寸">
          <AnchorItem href="#size" title="size-medium"></AnchorItem>
          <AnchorItem href="#size-large" title="size-large"></AnchorItem>
        </AnchorItem>
      </Anchor>
    </>
  );
}

                  ===SPLIT===组建:<Anchor/>
                  使用描述：支持根据自己的需求，设置游标的样式
                  代码示例：import React from 'react';
import { Anchor } from 'tdesign-react';

const { AnchorItem } = Anchor;
const cursorStyle = {
  width: '10px',
  height: '10px',
  backgroundColor: '#0052D9',
  position: 'absolute',
  borderRadius: '50%',
  left: '50%',
  marginLeft: '-5px',
  top: '50%',
  marginTop: '-5px',
};
export default function AnchorBase() {
  return (
    <div
      style={{
        display: 'flex',
      }}
    >
      <Anchor targetOffset={150} cursor={<div style={cursorStyle}></div>}>
        <AnchorItem href="#基础锚点" title="基础锚点" />
        <AnchorItem href="#多级锚点" title="多级锚点" />
        <AnchorItem href="#指定容器锚点" title="指定容器锚点" />
        <AnchorItem href="#特定交互锚点" title="特定交互锚点" />
        <AnchorItem href="#尺寸" title="尺寸"></AnchorItem>
      </Anchor>
    </div>
  );
}

                  ===SPLIT===组建:<Anchor/>
                  使用描述：指定响应滚动的容器进行锚点定位，以及 click 事件的应用，阻止锚点添加到 uri 上。
                  代码示例：import React from 'react';
import { Anchor } from 'tdesign-react';

const { AnchorItem } = Anchor;
export default function AnchorAttach() {
  const handleClick = ({ e, href, title }) => {
    e.preventDefault();
    console.log('handleClick', href, title);
  };
  return (
    <>
      <div
        style={{
          display: 'flex',
        }}
        id="attach"
        className="anchor-demo-attach"
      >
        <Anchor container="#anchor-container" onClick={handleClick}>
          <AnchorItem href="#content-1" title="content-1" />
          <AnchorItem href="#content-2" title="content-2" />
          <AnchorItem href="#content-3" title="content-3" />
          <AnchorItem href="#content-4" title="content-4" />
        </Anchor>
        <div
          id="anchor-container"
          style={{
            width: '100%',
            height: '200px',
            overflow: 'auto',
            textAlign: 'center',
            fontSize: '22px',
          }}
        >
          <div
            id="content-1"
            style={{
              background: '#DFEFFF',
              lineHeight: '100px',
            }}
          >
            content-1
          </div>
          <div
            id="content-2"
            style={{
              background: '#BFDBF7',
              lineHeight: '100px',
            }}
          >
            content-2
          </div>
          <div
            id="content-3"
            style={{
              background: '#9BC5F2',
              lineHeight: '100px',
            }}
          >
            content-3
          </div>
          <div
            id="content-4"
            style={{
              background: '#7BAFED',
              lineHeight: '100px',
            }}
          >
            content-4
          </div>
          <div
            id="content-5"
            style={{
              background: '#5C99EB',
              lineHeight: '100px',
            }}
          >
            content-5
          </div>
        </div>
      </div>
    </>
  );
}

                  ===SPLIT===组建:<Anchor/>
                  使用描述：用于锚点定位后的交互, 包括: 高亮当前锚点、复制链接
                  代码示例：import React from 'react';
import { Anchor } from 'tdesign-react';

const { AnchorTarget } = Anchor;
export default function AnchorTargetExample() {
  return (
    <div id="/components/anchor/#anchor-target" className="anchor-demo">
      <AnchorTarget id="/components/anchor/#default" tag="h1">
        基础锚点
      </AnchorTarget>
      <AnchorTarget id="/components/anchor/#multiple" tag="h1">
        多级锚点
      </AnchorTarget>
      <AnchorTarget id="/components/anchor/#size" tag="h1">
        尺寸大小
      </AnchorTarget>
      <AnchorTarget id="/components/anchor/#attach" tag="h1">
        指定容器
      </AnchorTarget>
    </div>
  );
}

                  ===SPLIT===组建:<Anchor/>
                  使用描述：提供大、小两种尺寸
                  代码示例：import React from 'react';
import { Anchor } from 'tdesign-react';

const { AnchorItem } = Anchor;
export default function AnchorSize() {
  return (
    <div id="size-small">
      <Anchor bounds={100} targetOffset={50} size="small">
        <AnchorItem href="#default" title="基础锚点" />
        <AnchorItem href="#multiple" title="多级锚点" />
        <AnchorItem href="#size" title="尺寸大小">
          <AnchorItem href="#size" title="size-medium"></AnchorItem>
          <AnchorItem href="#size-large" title="size-large"></AnchorItem>
        </AnchorItem>
        <AnchorItem href="#attach" title="指定容器" />
      </Anchor>
    </div>
  );
}

                  ===SPLIT===组建:<Anchor/>
                  使用描述：基础锚点多级锚点尺寸大小size-mediumsize-large指定容器
                  代码示例：import React from 'react';
import { Anchor } from 'tdesign-react';

const { AnchorItem } = Anchor;
export default function AnchorSizeLarge() {
  return (
    <div id="size-large">
      <Anchor bounds={100} targetOffset={50} size="large">
        <AnchorItem href="#default" title="基础锚点" />
        <AnchorItem href="#multiple" title="多级锚点" />
        <AnchorItem href="#size" title="尺寸大小">
          <AnchorItem href="#size" title="size-medium"></AnchorItem>
          <AnchorItem href="#size-large" title="size-large"></AnchorItem>
        </AnchorItem>
        <AnchorItem href="#attach" title="指定容器" />
      </Anchor>
    </div>
  );
}

                  ===SPLIT===组建:<Anchor/>
                  使用描述：自定义锚点高亮 
                  代码示例：import React from 'react';
import { Anchor } from 'tdesign-react';

const { AnchorItem } = Anchor;
export default function AnchorBase() {
  return (
    <div
      style={{
        display: 'flex',
      }}
    >
      <div
        style={{
          flex: '1',
        }}
      ></div>
      <Anchor getCurrentAnchor={() => '#基础锚点'}>
        <AnchorItem href="#基础锚点" title="基础锚点" />
        <AnchorItem href="#多级锚点" title="多级锚点" />
        <AnchorItem href="#自定义游标锚点" title="自定义游标锚点" />
        <AnchorItem href="#指定容器锚点" title="指定容器锚点" />
        <AnchorItem href="#特定交互锚点" title="特定交互锚点" />
        <AnchorItem href="#不同尺寸的锚点" title="不同尺寸的锚点" />
        <AnchorItem href="#自定义锚点高亮" title="自定义锚点高亮" />
      </Anchor>
    </div>
  );
}

                  组建:<BackTop/>
                  使用描述：默认距离页面右侧24px，距离页面底部80px，滚动动画时长200ms
                  代码示例：import React, { useState } from 'react';
import { BackTop, List } from 'tdesign-react';

export default function BasicBackTop() {
  const [container, setContainer] = useState(null);
  const style = {
    position: 'absolute',
    insetInlineEnd: 24,
    insetBlockEnd: 80,
  };
  const listWrapStyle = {
    width: '100%',
    height: '280px',
    position: 'relative',
    overflowY: 'scroll',
    overflowX: 'hidden',
    border: '1px solid #dcdcdcff',
  };
  return (
    <div
      style={{
        position: 'relative',
      }}
    >
      <div id="demo_1" style={listWrapStyle} ref={setContainer}>
        <List>
          {Array.from(Array(50), () => '列表内容').map((item, index) => (
            <List.ListItem key={index}>{item}</List.ListItem>
          ))}
        </List>
      </div>
      <BackTop container={() => container} visibleHeight={46} style={style}></BackTop>
    </div>
  );
}

                  ===SPLIT===组建:<BackTop/>
                  使用描述：可设置不同耗时的回到顶部 
                  代码示例：import React, { useState } from 'react';
import { BackTop, List } from 'tdesign-react';

export default function BasicBackTop() {
  const [container, setContainer] = useState(null);
  const style = {
    position: 'absolute',
    insetInlineEnd: 24,
    insetBlockEnd: 80,
  };
  const listWrapStyle = {
    width: '100%',
    height: '280px',
    position: 'relative',
    overflowY: 'scroll',
    overflowX: 'hidden',
    border: '1px solid #dcdcdcff',
  };
  return (
    <div
      style={{
        position: 'relative',
      }}
    >
      <div id="demo_1" style={listWrapStyle} ref={setContainer}>
        <List>
          {Array.from(Array(50), () => '列表内容').map((item, index) => (
            <List.ListItem key={index}>{item}</List.ListItem>
          ))}
        </List>
      </div>
      <BackTop container={() => container} visibleHeight={46} style={style} size="small" duration={500}></BackTop>
    </div>
  );
}

                  ===SPLIT===组建:<BackTop/>
                  使用描述：提供标准（默认）、小两种尺寸。
                  代码示例：import React from 'react';
import { BackTop, Space } from 'tdesign-react';

export default function BasicBackTop() {
  const style = {
    position: 'relative',
    insetInlineEnd: 0,
    insetBlockEnd: 0,
  };
  return (
    <Space direction="vertical" size={32}>
      <Space size={24}>
        <BackTop style={style} visibleHeight={0} size="small" offset={['24px', '300px']} container={() => document} />
        <BackTop style={style} visibleHeight={0} size="medium" offset={['124px', '300px']} container={() => document} />
      </Space>
      <Space size={24}>
        <BackTop
          style={style}
          visibleHeight={0}
          size="small"
          theme="primary"
          offset={['24px', '300px']}
          container={() => document}
        />
        <BackTop
          style={style}
          visibleHeight={0}
          size="medium"
          theme="primary"
          offset={['124px', '300px']}
          container={() => document}
        />
      </Space>
      <Space size={24}>
        <BackTop
          style={style}
          visibleHeight={0}
          size="small"
          theme="dark"
          offset={['24px', '300px']}
          container={() => document}
        />
        <BackTop
          style={style}
          visibleHeight={0}
          size="medium"
          theme="dark"
          offset={['124px', '300px']}
          container={() => document}
        />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<BackTop/>
                  使用描述：提供圆形和方形两种不同形状。
                  代码示例：import React from 'react';
import { BackTop, Space } from 'tdesign-react';

export default function BasicBackTop() {
  const style = {
    position: 'relative',
    insetInlineEnd: 0,
    insetBlockEnd: 0,
  };
  return (
    <Space direction="vertical" size={32}>
      <Space size={24}>
        <BackTop style={style} visibleHeight={0} shape="circle" container={() => document} />
        <BackTop style={style} visibleHeight={0} shape="square" container={() => document} />
      </Space>
      <Space size={24}>
        <BackTop style={style} visibleHeight={0} shape="circle" theme="primary" container={() => document} />
        <BackTop style={style} visibleHeight={0} shape="square" theme="primary" container={() => document} />
      </Space>
      <Space size={24}>
        <BackTop style={style} visibleHeight={0} shape="circle" theme="dark" container={() => document} />
        <BackTop style={style} visibleHeight={0} shape="square" theme="dark" container={() => document} />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<BackTop/>
                  使用描述：不同组件主题的回到顶部 
                  代码示例：import React from 'react';
import { BackTop, Space } from 'tdesign-react';

export default function BasicBackTop() {
  const style = {
    position: 'relative',
    insetInlineEnd: 0,
    insetBlockEnd: 0,
  };
  return (
    <Space direction="vertical" size={32}>
      <Space size={24}>
        <BackTop style={style} visibleHeight={0} container={() => document} />
        <BackTop style={style} visibleHeight={0} theme="primary" container={() => document} />
        <BackTop style={style} visibleHeight={0} theme="dark" container={() => document} />
      </Space>
      <Space size={24}>
        <BackTop style={style} shape="circle" visibleHeight={0} container={() => document} />
        <BackTop style={style} shape="circle" visibleHeight={0} theme="primary" container={() => document} />
        <BackTop style={style} shape="circle" visibleHeight={0} theme="dark" container={() => document} />
      </Space>
      <Space size={24}>
        <BackTop style={style} size="small" visibleHeight={0} container={() => document} />
        <BackTop style={style} size="small" visibleHeight={0} theme="primary" container={() => document} />
        <BackTop style={style} size="small" visibleHeight={0} theme="dark" container={() => document} />
      </Space>
      <Space size={24}>
        <BackTop style={style} shape="circle" size="small" visibleHeight={0} container={() => document} />
        <BackTop
          style={style}
          shape="circle"
          size="small"
          visibleHeight={0}
          theme="primary"
          container={() => document}
        />
        <BackTop style={style} shape="circle" size="small" visibleHeight={0} theme="dark" container={() => document} />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<BackTop/>
                  使用描述：可自定义内容的回到顶部 
                  代码示例：import React from 'react';
import { BackTop, Space } from 'tdesign-react';

export default function BasicBackTop() {
  const style = {
    position: 'relative',
    insetInlineEnd: 0,
    insetBlockEnd: 0,
  };
  return (
    <Space size={24}>
      <BackTop style={style} visibleHeight={0} offset={['24px', '500px']} container={() => document}>
        <span className="custom-node">返回</span>
      </BackTop>
      <BackTop
        style={style}
        visibleHeight={0}
        default={<span>TOP</span>}
        offset={['124px', '500px']}
        container={() => document}
      />
      <BackTop
        style={style}
        visibleHeight={0}
        content={<span>UP</span>}
        offset={['224px', '500px']}
        container={() => document}
      />
    </Space>
  );
}

                  组建:<Breadcrumb/>
                  使用描述：适用于广泛的基础用法，系统拥有超过两级以上的层级结构，用于切换向上任意层级的内容。
                  代码示例：import React from 'react';
import { Breadcrumb } from 'tdesign-react';

const { BreadcrumbItem } = Breadcrumb;
export default function BreadcrumbExample() {
  return (
    <Breadcrumb maxItemWidth="200px">
      <BreadcrumbItem>页面1</BreadcrumbItem>
      <BreadcrumbItem>页面2页面2页面2页面2页面2页面2页面2页面2</BreadcrumbItem>
      <BreadcrumbItem maxWidth="120px">
        页面3页面3页面3页面3页面3页面3页面3页面3页面3页面3页面3页面3页面3页面3页面3
      </BreadcrumbItem>
    </Breadcrumb>
  );
}

                  ===SPLIT===组建:<Breadcrumb/>
                  使用描述：可自定义每项内容，统一图标加文字，图标放在文字前面。
                  代码示例：import React from 'react';
import { Breadcrumb } from 'tdesign-react';
import { BookmarkIcon } from 'tdesign-icons-react';

const { BreadcrumbItem } = Breadcrumb;
export default function BreadcrumbExample() {
  return (
    <Breadcrumb>
      <BreadcrumbItem icon={<BookmarkIcon />}>页面1</BreadcrumbItem>
      <BreadcrumbItem icon={<BookmarkIcon />}>页面2</BreadcrumbItem>
      <BreadcrumbItem icon={<BookmarkIcon />}>页面3</BreadcrumbItem>
    </Breadcrumb>
  );
}

                  ===SPLIT===组建:<Breadcrumb/>
                  使用描述：通过 separator 属性自定义分隔符，建议用图标而非文本符号。
                  代码示例：import React from 'react';
import { Breadcrumb } from 'tdesign-react';

const { BreadcrumbItem } = Breadcrumb;
export default function BreadcrumbExample() {
  return (
    <>
      <Breadcrumb maxItemWidth="150" separator={'>>'}>
        <BreadcrumbItem>页面1</BreadcrumbItem>
        <BreadcrumbItem>页面2</BreadcrumbItem>
        <BreadcrumbItem maxItemWidth="160">页面3</BreadcrumbItem>
      </Breadcrumb>
      <Breadcrumb maxItemWidth="150" separator={'/////'}>
        <BreadcrumbItem>页面1</BreadcrumbItem>
        <BreadcrumbItem>页面2</BreadcrumbItem>
        <BreadcrumbItem maxItemWidth="160">页面3</BreadcrumbItem>
      </Breadcrumb>
    </>
  );
}

                  ===SPLIT===组建:<Breadcrumb/>
                  使用描述：使用 options 属性配置面包屑内容。
                  代码示例：import React from 'react';
import { Breadcrumb } from 'tdesign-react';

export default function BreadcrumbExample() {
  const options = [
    {
      content: '页面1',
    },
    {
      content: '页面2',
    },
    {
      content: '页面3',
      href: 'https://github.com/',
    },
  ];
  return <Breadcrumb options={options} />;
}

                  ===SPLIT===组建:<Breadcrumb/>
                  使用描述：使用 maxItems、itemsAfterCollapse、itemsBeforeCollapse，配置省略。
                  代码示例：import React from 'react';
import { Breadcrumb } from 'tdesign-react';

const { BreadcrumbItem } = Breadcrumb;
const options = [
  {
    content: '页面1',
  },
  {
    content: '页面2',
  },
  {
    content: '页面3',
  },
  {
    content: '页面4',
  },
  {
    content: '页面5',
  },
];
export default function BreadcrumbExample() {
  return (
    <>
      <Breadcrumb maxItems={3} itemsBeforeCollapse={2} itemsAfterCollapse={1}>
        {options.map((option) => (
          <BreadcrumbItem key={option.content} content={option.content} />
        ))}
      </Breadcrumb>

      <Breadcrumb maxItems={3} itemsBeforeCollapse={2} itemsAfterCollapse={1} options={options} />
    </>
  );
}

                  ===SPLIT===组建:<Breadcrumb/>
                  使用描述：自定义省略号 
                  代码示例：import React from 'react';
import { Breadcrumb, Button, Dropdown } from 'tdesign-react';
import { EllipsisIcon } from 'tdesign-icons-react';

const { BreadcrumbItem } = Breadcrumb;
const options = [
  {
    content: '页面1',
  },
  {
    content: '页面2',
  },
  {
    content: '页面3',
  },
  {
    content: '页面4',
  },
  {
    content: '页面5',
  },
];
export default function BreadcrumbExample() {
  return (
    <>
      <Breadcrumb
        maxItems={4}
        itemsBeforeCollapse={2}
        itemsAfterCollapse={1}
        ellipsis={(props) => (
          <Dropdown>
            <Button icon={<EllipsisIcon />} shape="square" variant="text" />
            <Dropdown.DropdownMenu>
              {props.items.map((item) => (
                <Dropdown.DropdownItem key={String(item.content)}>{item.content}</Dropdown.DropdownItem>
              ))}
            </Dropdown.DropdownMenu>
          </Dropdown>
        )}
      >
        {options.map((option) => (
          <BreadcrumbItem key={option.content} content={option.content} />
        ))}
      </Breadcrumb>

      <Breadcrumb
        maxItems={4}
        itemsBeforeCollapse={2}
        itemsAfterCollapse={1}
        options={options}
        ellipsis={(props) => (
          <Dropdown>
            <Button icon={<EllipsisIcon />} shape="square" variant="text" />
            <Dropdown.DropdownMenu>
              {props.items.map((item) => (
                <Dropdown.DropdownItem key={String(item.content)}>{item.content}</Dropdown.DropdownItem>
              ))}
            </Dropdown.DropdownMenu>
          </Dropdown>
        )}
      />
    </>
  );
}

                  组建:<Dropdown/>
                  使用描述：文字按钮触发下拉菜单。常用于空间极度受限的收纳操作场景，一般用于表格内详情操作的收纳。
                  代码示例：import React from 'react';
import { Dropdown, Button, MessagePlugin } from 'tdesign-react';
import { Icon } from 'tdesign-icons-react';

export default function BasicDropdown() {
  const getContent = () => <div>操作四</div>;
  const options = [
    {
      content: '操作一',
      value: 1,
    },
    {
      content: '操作二',
      value: 2,
    },
    {
      content: '操作三',
      value: 3,
    },
    {
      content: getContent(),
      value: 4,
    },
  ];
  const clickHandler = (data) => {
    MessagePlugin.success(`选中【${data.value}】`);
  };
  return (
    <Dropdown options={options} onClick={clickHandler}>
      <Button variant="text" suffix={<Icon name="chevron-down" size="16" />}>
        更多
      </Button>
    </Dropdown>
  );
}

                  ===SPLIT===组建:<Dropdown/>
                  使用描述：普通按钮触发下拉菜单。常用于操作收纳场景。
                  代码示例：import React from 'react';
import { Dropdown, Button, MessagePlugin } from 'tdesign-react';
import { Icon } from 'tdesign-icons-react';

export default function BasicDropdown() {
  const getContent = () => <div>操作四</div>;
  const options = [
    {
      content: '操作一',
      value: 1,
    },
    {
      content: '操作二',
      value: 2,
    },
    {
      content: '操作三',
      value: 3,
    },
    {
      content: getContent(),
      value: 4,
    },
  ];
  const clickHandler = (data) => {
    MessagePlugin.success(`选中【${data.value}】`);
  };
  return (
    <Dropdown options={options} onClick={clickHandler}>
      <Button theme="default" variant="outline" shape="square">
        <Icon name="ellipsis" size="16" />
      </Button>
    </Dropdown>
  );
}

                  ===SPLIT===组建:<Dropdown/>
                  使用描述：通过分割线区分不同的下拉菜单操作。常用于需要区分不同操作结果的场景。
                  代码示例：import React from 'react';
import { Dropdown, Button, MessagePlugin } from 'tdesign-react';
import { Icon } from 'tdesign-icons-react';

export default function BasicDropdown() {
  const getContent = () => <div>操作四</div>;
  const options = [
    {
      content: '操作一',
      value: 1,
    },
    {
      content: '操作二',
      value: 2,
    },
    {
      content: '操作三',
      value: 3,
      divider: true,
    },
    {
      content: getContent(),
      value: 4,
    },
  ];
  const clickHandler = (data) => {
    MessagePlugin.success(`选中【${data.value}】`);
  };
  return (
    <Dropdown options={options} onClick={clickHandler}>
      <Button variant="text" suffix={<Icon name="chevron-down" size="16" />}>
        更多
      </Button>
    </Dropdown>
  );
}

                  ===SPLIT===组建:<Dropdown/>
                  使用描述：带逻辑层级关系的操作下拉菜单。常用于需要收纳多层逻辑的操作场景。
                  代码示例：import React from 'react';
import { Dropdown, Button, MessagePlugin } from 'tdesign-react';
import { Icon } from 'tdesign-icons-react';

export default function BasicDropdown() {
  const options = [
    {
      content: '操作一',
      value: 1,
      children: [
        {
          content: '操作九',
          value: 9,
        },
      ],
    },
    {
      content: '操作二操作二操作二操作二',
      value: 2,
      children: [
        {
          content: '操作五',
          value: 5,
        },
        {
          content: '操作六',
          value: 6,
        },
      ],
    },
    {
      content: '操作三',
      value: 3,
      children: [
        {
          content: '操作十',
          value: 10,
        },
      ],
    },
    {
      content: '操作四',
      value: 4,
      children: [
        {
          content: '操作十一',
          value: 11,
        },
      ],
    },
    {
      content: '操作五',
      value: 5,
      children: [
        {
          content: '操作十二',
          value: 12,
        },
      ],
    },
    {
      content: '操作六',
      value: 6,
      children: [
        {
          content: '操作十三',
          value: 13,
        },
      ],
    },
    {
      content: '操作七',
      value: 7,
    },
    {
      content: '操作八',
      value: 8,
    },
    {
      content: '操作十八',
      value: 18,
      children: [
        {
          content: '操作十四',
          value: 14,
        },
        {
          content: '操作十五',
          value: 15,
        },
        {
          content: '操作十六',
          value: 16,
          children: [
            {
              content: '三级操作一',
              value: 20,
            },
            {
              content: '三级操作二',
              value: 21,
            },
          ],
        },
        {
          content: '操作十七',
          value: 17,
        },
      ],
    },
  ];
  const clickHandler = (data) => {
    MessagePlugin.success(`选中【${data.value}】`);
  };
  return (
    <Dropdown options={options} onClick={clickHandler} maxHeight={200}>
      <Button theme="default" variant="outline" shape="square">
        <Icon name="ellipsis" size="16" />
      </Button>
    </Dropdown>
  );
}

                  ===SPLIT===组建:<Dropdown/>
                  使用描述：下拉菜单的操作项可以设置禁用。常用于禁用部分操作项的场景。
                  代码示例：import React from 'react';
import { Dropdown, Button, MessagePlugin } from 'tdesign-react';
import { Icon } from 'tdesign-icons-react';

export default function BasicDropdown() {
  const getContent = () => <div>操作四</div>;
  const options = [
    {
      content: '操作一',
      value: 1,
    },
    {
      content: '操作二',
      value: 2,
    },
    {
      content: '操作三',
      value: 3,
      disabled: true,
    },
    {
      content: getContent(),
      value: 4,
      disabled: true,
    },
  ];
  const clickHandler = (data) => {
    MessagePlugin.success(`选中【${data.value}】`);
  };
  return (
    <Dropdown options={options} onClick={clickHandler}>
      <Button variant="text" suffix={<Icon name="chevron-down" size="16" />}>
        更多
      </Button>
    </Dropdown>
  );
}

                  ===SPLIT===组建:<Dropdown/>
                  使用描述：下拉菜单依赖 Popup 组件，可以透传自定义 Popup 组件的属性。
                  代码示例：import React from 'react';
import { Dropdown, Button, MessagePlugin } from 'tdesign-react';

export default function BasicDropdown() {
  const getContent = () => <div>操作四</div>;
  const options = [
    {
      content: '操作一',
      value: 1,
    },
    {
      content: '操作二',
      value: 2,
    },
    {
      content: '操作三',
      value: 3,
    },
    {
      content: getContent(),
      value: 4,
    },
  ];
  const clickHandler = (data) => {
    MessagePlugin.success(`选中【${data.value}】`);
  };
  return (
    <Dropdown
      options={options}
      onClick={clickHandler}
      trigger="click"
      popupProps={{
        overlayStyle: {
          fontWeight: 'normal',
        },
        overlayInnerStyle: {
          fontWeight: 'normal',
        },
        overlayClassName: 'dropdown-custom-overlay-class',
        overlayInnerClassName: 'dropdown-custom-overlay-inner-class',
      }}
    >
      <Button>点击我试试</Button>
    </Dropdown>
  );
}

                  ===SPLIT===组建:<Dropdown/>
                  使用描述：下拉菜单支持定义最大高度。
                  代码示例：import React from 'react';
import { Dropdown, Button, MessagePlugin } from 'tdesign-react';

export default function BasicDropdown() {
  const options = Array.from({
    length: 20,
  }).map((v, k) => ({
    content: `选项${k + 1}`,
    value: k + 1,
  }));
  const clickHandler = (data) => {
    MessagePlugin.success(`选中【${data.value}】`);
  };
  return (
    <Dropdown options={options} onClick={clickHandler} maxHeight={400} minColumnWidth={'90px'}>
      <Button>hover我试试</Button>
    </Dropdown>
  );
}

                  ===SPLIT===组建:<Dropdown/>
                  使用描述：下拉菜单的菜单项都支持自定义主题，根据具体场景使用。
                  代码示例：import React from 'react';
import { Dropdown, Button, MessagePlugin } from 'tdesign-react';
import { Icon } from 'tdesign-icons-react';

export default function ThemeDropdown() {
  const options = [
    {
      content: '选项一',
      value: 1,
      children: [
        {
          content: '选项九',
          value: 9,
        },
      ],
    },
    {
      content: '选项二',
      value: 3,
      children: [
        {
          content: '选项十',
          value: 10,
        },
      ],
    },
    {
      content: '危险操作',
      value: 4,
      theme: 'error',
      children: [
        {
          content: '危险操作一',
          value: 11,
          theme: 'error',
          children: [
            {
              content: '危险操作项',
              value: 13,
              theme: 'error',
            },
            {
              content: '操作项',
              value: 12,
            },
          ],
        },
      ],
    },
  ];
  const clickHandler = (data) => {
    MessagePlugin.success(`选中【${data.value}】`);
  };
  return (
    <Dropdown options={options.concat()} onClick={clickHandler} trigger="click">
      <Button variant="text" suffix={<Icon name="chevron-down" size="16" />}>
        更多
      </Button>
    </Dropdown>
  );
}

                  ===SPLIT===组建:<Dropdown/>
                  使用描述：下拉菜单支持向左侧展开。
                  代码示例：import React from 'react';
import { Dropdown, Button, MessagePlugin } from 'tdesign-react';
import { Icon } from 'tdesign-icons-react';

export default function LeftDropdown() {
  const options = [
    {
      content: '选项一',
      value: 1,
      children: [
        {
          content: '选项九',
          value: 9,
        },
      ],
    },
    {
      content: '选项二',
      value: 2,
      children: [
        {
          content: '选项五',
          value: 5,
        },
        {
          content: '选项六',
          value: 6,
          children: [
            {
              content: '选项七',
              value: 7,
            },
            {
              content: '选项八',
              value: 8,
            },
          ],
        },
      ],
    },
    {
      content: '选项三',
      value: 3,
      children: [
        {
          content: '选项十',
          value: 10,
        },
      ],
    },
  ];
  const clickHandler = (data) => {
    MessagePlugin.success(`选中【${data.value}】`);
  };
  return (
    <Dropdown
      options={options}
      onClick={clickHandler}
      direction="left"
      popupProps={{
        placement: 'bottom-right',
      }}
    >
      <Button variant="text" suffix={<Icon name="chevron-down" size="16" />}>
        更多
      </Button>
    </Dropdown>
  );
}

                  ===SPLIT===组建:<Dropdown/>
                  使用描述：下拉菜单支持配置菜单项的前置图标。
                  代码示例：import React from 'react';
import { Dropdown, Button, MessagePlugin } from 'tdesign-react';
import { Icon, DiscountIcon } from 'tdesign-icons-react';

export default function BasicDropdown() {
  const options = [
    {
      content: '选项一',
      value: 1,
      prefixIcon: <DiscountIcon />,
    },
    {
      content: '选项二',
      value: 2,
      prefixIcon: <DiscountIcon />,
    },
    {
      content: '选项三',
      value: 3,
      prefixIcon: <DiscountIcon />,
    },
    {
      content: '选项四',
      value: 4,
      prefixIcon: <DiscountIcon />,
      children: [
        {
          content: '选项五',
          value: 5,
          prefixIcon: <DiscountIcon />,
        },
        {
          content: '选项六',
          value: 6,
          prefixIcon: <DiscountIcon />,
        },
      ],
    },
  ];
  const clickHandler = (data) => {
    MessagePlugin.success(`选中【${data.value}】`);
  };
  return (
    <Dropdown options={options} onClick={clickHandler}>
      <Button variant="text" suffix={<Icon name="chevron-down" size="16" />}>
        更多
      </Button>
    </Dropdown>
  );
}

                  ===SPLIT===组建:<Dropdown/>
                  使用描述：下拉菜单操作项支持通过传入Children的方式传递操作项。
                  代码示例：import React from 'react';
import { Dropdown, Button, MessagePlugin } from 'tdesign-react';
import { Icon } from 'tdesign-icons-react';

const { DropdownMenu, DropdownItem } = Dropdown;
export default function BasicDropdown() {
  const clickHandler = (data) => {
    MessagePlugin.success(`选中【${data.value}】`);
  };
  return (
    <Dropdown
      minColumnWidth={100}
      trigger="click"
      panelTopContent={
        <div
          style={{
            height: 48,
            backgroundColor: 'var(--td-bg-color-component)',
            borderRadius: '6px',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
          }}
        >
          Top Content
        </div>
      }
    >
      <Button variant="text" suffix={<Icon name="chevron-down" size="16" />}>
        更多
      </Button>
      <DropdownMenu>
        <DropdownItem value={1}>
          操作一
          <DropdownMenu>
            <DropdownItem value={11}>操作1-1</DropdownItem>
            <DropdownItem value={12}>
              操作1-2
              <DropdownMenu>
                <DropdownItem value={111}>操作1-1-1</DropdownItem>
                <DropdownItem value={112}>操作1-1-2</DropdownItem>
              </DropdownMenu>
            </DropdownItem>
          </DropdownMenu>
        </DropdownItem>
        <DropdownItem value={2}>
          操作二
          <DropdownMenu>
            <DropdownItem value={21}>
              操作2-1
              <DropdownMenu>
                <DropdownItem value={211}>操作2-1-1</DropdownItem>
                <DropdownItem value={211}>操作2-1-2</DropdownItem>
              </DropdownMenu>
            </DropdownItem>
            <DropdownItem value={22} onClick={clickHandler}>
              操作2-2
            </DropdownItem>
          </DropdownMenu>
        </DropdownItem>
        <DropdownItem value={3}>操作三</DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
}

                  组建:<Menu/>
                  使用描述：只存在单层结构的顶部导航，点击即跳转。可在承载单一产品或单一业务线等层级结构简单的网站使用。
                  代码示例：import React, { Fragment, useState } from 'react';
import { Menu, MessagePlugin, Button } from 'tdesign-react';
import { SearchIcon, MailIcon, UserIcon, EllipsisIcon } from 'tdesign-icons-react';

const { HeadMenu, MenuItem } = Menu;
function Single() {
  const [active, setActive] = useState('0');
  const [darkActive, setDarkActive] = useState('1');
  const operations = () => (
    <div className="tdesign-demo-menu__operations">
      <Button variant="text" shape="square" icon={<SearchIcon />} />
      <Button variant="text" shape="square" icon={<MailIcon />} />
      <Button variant="text" shape="square" icon={<UserIcon />} />
      <Button variant="text" shape="square" icon={<EllipsisIcon />} />
    </div>
  );
  const operationsDark = () => (
    <div className="tdesign-demo-menu__operations--dark">
      <Button variant="text" shape="square" icon={<SearchIcon />} />
      <Button variant="text" shape="square" icon={<MailIcon />} />
      <Button variant="text" shape="square" icon={<UserIcon />} />
      <Button variant="text" shape="square" icon={<EllipsisIcon />} />
    </div>
  );
  return (
    <Fragment>
      <HeadMenu
        theme="light"
        value={active}
        onChange={(v) => setActive(v)}
        logo={<img src="https://tdesign.gtimg.com/site/baseLogo-light.png" height="28" alt="logo" />}
        operations={operations()}
        style={{
          marginBottom: 20,
        }}
      >
        <MenuItem value={'0'} onClick={() => MessagePlugin.info('click 菜单1')}>
          <span>菜单1</span>
        </MenuItem>
        <MenuItem value={'1'}>
          <span>菜单2</span>
        </MenuItem>
        <MenuItem value={'2'}>
          <span>菜单3</span>
        </MenuItem>
        <MenuItem value={'3'}>
          <span>菜单4</span>
        </MenuItem>
      </HeadMenu>
      {/* 暗黑模式 */}
      <HeadMenu
        theme="dark"
        value={darkActive}
        onChange={(v) => setDarkActive(v)}
        logo={<img src="https://tdesign.gtimg.com/site/baseLogo-dark.png" height="28" alt="logo" />}
        operations={operationsDark()}
      >
        <MenuItem value={'0'}>
          <span>菜单1</span>
        </MenuItem>
        <MenuItem value={'1'}>
          <span>菜单2</span>
        </MenuItem>
        <MenuItem value={'2'}>
          <span>菜单3</span>
        </MenuItem>
        <MenuItem value={'3'}>
          <span>菜单4</span>
        </MenuItem>
      </HeadMenu>
    </Fragment>
  );
}
export default Single;

                  ===SPLIT===组建:<Menu/>
                  使用描述：顶部导航可承载2级页面导航。常用于聚焦单个业务线下的二级页面导航。
                  代码示例：import React, { Fragment, useState } from 'react';
import { Menu } from 'tdesign-react';

const { HeadMenu, SubMenu, MenuItem } = Menu;
function Double() {
  const [active, setActive] = useState('1');
  const [darkActive, setDarkActive] = useState('1');
  return (
    <Fragment>
      <HeadMenu
        value={active}
        onChange={(v) => setActive(v)}
        logo={<img src="https://tdesign.gtimg.com/site/baseLogo-light.png" height="28" alt="logo" />}
        style={{
          marginBottom: 20,
        }}
      >
        <SubMenu value="sub-0" title="菜单1">
          <MenuItem value="1">子菜单1</MenuItem>
          <MenuItem value="2">子菜单2</MenuItem>
        </SubMenu>
        <SubMenu value="sub-1" title="菜单2">
          <MenuItem value="3">
            <span>子菜单1</span>
          </MenuItem>
          <MenuItem value="4">
            <span>子菜单2</span>
          </MenuItem>
        </SubMenu>
        <SubMenu value="sub-2" title="菜单3">
          <MenuItem value="5">
            <span>二级菜单-1</span>
          </MenuItem>
          <MenuItem value="6">
            <span>二级菜单-2</span>
          </MenuItem>
        </SubMenu>
        <SubMenu value="sub-3" title="菜单4">
          <MenuItem value="7">
            <span>菜单四</span>
          </MenuItem>
        </SubMenu>
      </HeadMenu>
      {/* 暗黑模式 */}
      <HeadMenu
        theme="dark"
        value={darkActive}
        onChange={(v) => setDarkActive(v)}
        logo={<img src="https://tdesign.gtimg.com/site/baseLogo-dark.png" height="28" alt="logo" />}
      >
        <SubMenu value="sub-0" title="菜单1">
          <MenuItem value="1">子菜单1</MenuItem>
          <MenuItem value="2">子菜单2</MenuItem>
        </SubMenu>
        <SubMenu value="sub-1" title="菜单2">
          <MenuItem value="3">
            <span>子菜单1</span>
          </MenuItem>
          <MenuItem value="4">
            <span>子菜单2</span>
          </MenuItem>
        </SubMenu>
        <SubMenu value="sub-2" title="菜单3">
          <MenuItem value="5">
            <span>二级菜单-1</span>
          </MenuItem>
          <MenuItem value="6">
            <span>二级菜单-2</span>
          </MenuItem>
        </SubMenu>
        <SubMenu value="sub-3" title="菜单4">
          <MenuItem value="7">
            <span>菜单四</span>
          </MenuItem>
        </SubMenu>
      </HeadMenu>
    </Fragment>
  );
}
export default Double;

                  ===SPLIT===组建:<Menu/>
                  使用描述：顶部导航下拉菜单收纳2-3级页面导航，可拓展分组展示，常用于多种业务下的快速切换导航。
                  代码示例：import React, { Fragment, useState } from 'react';
import { Menu } from 'tdesign-react';
import { UserIcon } from 'tdesign-icons-react';

const { HeadMenu, SubMenu, MenuItem } = Menu;
function Multiple() {
  const [active, setActive] = useState('0');
  const [darkActive, setDarkActive] = useState('1');
  return (
    <Fragment>
      <HeadMenu
        value={active}
        expandType="popup"
        onChange={(v) => setActive(v)}
        logo={<img src="https://tdesign.gtimg.com/site/baseLogo-light.png" height="28" alt="logo" />}
        style={{
          marginBottom: 20,
        }}
      >
        <SubMenu value="0" title="电器">
          <SubMenu value="0-1" title="电视">
            <MenuItem value="xiaomi">小米电视</MenuItem>
            <MenuItem value="soni">索尼电视</MenuItem>
            <MenuItem value="huawei">华为电视</MenuItem>
          </SubMenu>
          <MenuItem value="0-2">
            <span>冰箱</span>
          </MenuItem>
        </SubMenu>
        <MenuItem value="7" disabled>
          女装
        </MenuItem>
        <SubMenu value="sub-2" title="水果蔬菜" icon={<UserIcon />}>
          <MenuItem value="5">
            <span>苹果</span>
          </MenuItem>
          <MenuItem value="6">黄瓜</MenuItem>
        </SubMenu>
        <MenuItem value="9">其他</MenuItem>
      </HeadMenu>
      {/* 暗黑模式 */}
      <HeadMenu
        theme="dark"
        value={darkActive}
        expandType="popup"
        onChange={(v) => setDarkActive(v)}
        logo={<img src="https://tdesign.gtimg.com/site/baseLogo-dark.png" height="28" alt="logo" />}
        style={{
          marginBottom: 20,
        }}
      >
        <SubMenu value="0" title="电器">
          <MenuItem value="0-1">
            <span>电视</span>
          </MenuItem>
          <MenuItem value="0-2">
            <span>冰箱</span>
          </MenuItem>
        </SubMenu>
        <MenuItem value="7" disabled>
          女装
        </MenuItem>
        <SubMenu
          value="sub-2"
          title="水果蔬菜"
          icon={<UserIcon />}
          popupProps={{
            overlayStyle: {
              fontWeight: 'normal',
            },
            overlayInnerStyle: {
              fontWeight: 'normal',
            },
            overlayClassName: 'sub-menu-custom-overlay-class',
            overlayInnerClassName: 'sub-menu-custom-overlay-inner-class',
          }}
        >
          <MenuItem value="5">
            <span>苹果</span>
          </MenuItem>
          <MenuItem value="6">黄瓜</MenuItem>
        </SubMenu>
        <MenuItem value="9">其他</MenuItem>
      </HeadMenu>
    </Fragment>
  );
}
export default Multiple;

                  ===SPLIT===组建:<Menu/>
                  使用描述：可在原有导航上面加入自定义的功能。在具有复杂逻辑或有特定诉求的业务场景使用。
                  代码示例：import React, { Fragment, useState } from 'react';
import { Menu, Button } from 'tdesign-react';
import { SearchIcon, MailIcon, UserIcon, EllipsisIcon } from 'tdesign-icons-react';

const { HeadMenu, MenuItem } = Menu;
function Single() {
  const [active, setActive] = useState('0');
  const [darkActive, setDarkActive] = useState('1');
  const operations = () => (
    <div className="tdesign-demo-menu__operations">
      <Button variant="text" shape="square" icon={<SearchIcon />} />
      <Button variant="text" shape="square" icon={<MailIcon />} />
      <Button variant="text" shape="square" icon={<UserIcon />} />
      <Button variant="text" shape="square" icon={<EllipsisIcon />} />
    </div>
  );
  const operationsDark = () => (
    <div className="tdesign-demo-menu__operations--dark">
      <Button variant="text" shape="square" icon={<SearchIcon />} />
      <Button variant="text" shape="square" icon={<MailIcon />} />
      <Button variant="text" shape="square" icon={<UserIcon />} />
      <Button variant="text" shape="square" icon={<EllipsisIcon />} />
    </div>
  );
  return (
    <Fragment>
      <HeadMenu
        value={active}
        onChange={(v) => setActive(v)}
        logo={<img src="https://tdesign.gtimg.com/site/baseLogo-light.png" height="28" alt="logo" />}
        operations={operations()}
        style={{
          marginBottom: 20,
        }}
      >
        <MenuItem value={'0'}>
          <span>菜单1</span>
        </MenuItem>
        <MenuItem value={'1'}>
          <span>菜单2</span>
        </MenuItem>
        <MenuItem value={'2'}>
          <span>菜单3</span>
        </MenuItem>
        <MenuItem value={'3'}>
          <span>菜单4</span>
        </MenuItem>
      </HeadMenu>
      {/* 暗黑模式 */}
      <HeadMenu
        theme="dark"
        value={darkActive}
        onChange={(v) => setDarkActive(v)}
        logo={
          <img className="margin_0" src="https://tdesign.gtimg.com/site/baseLogo-dark.png" height="28" alt="logo" />
        }
        operations={operationsDark()}
      >
        <MenuItem value={'0'}>
          <span>菜单1</span>
        </MenuItem>
        <MenuItem value={'1'}>
          <span>菜单2</span>
        </MenuItem>
        <MenuItem value={'2'}>
          <span>菜单3</span>
        </MenuItem>
        <MenuItem value={'3'}>
          <span>菜单4</span>
        </MenuItem>
      </HeadMenu>
    </Fragment>
  );
}
export default Single;

                  ===SPLIT===组建:<Menu/>
                  使用描述：只存在单层结构的侧边导航，点击即跳转。一般与单层顶部导航相结合，作为二级页面的侧边导航。
                  代码示例：import React, { Fragment, useState } from 'react';
import { Menu } from 'tdesign-react';

const { MenuItem } = Menu;
function SingleSide() {
  const [active, setActive] = useState('0');
  const [darkActive, setDarkActive] = useState('1');
  return (
    <Fragment>
      <Menu
        value={active}
        onChange={(v) => setActive(v)}
        logo={<img src="https://tdesign.gtimg.com/site/baseLogo-light.png" height="28" alt="logo" />}
        style={{
          marginRight: 20,
        }}
      >
        <MenuItem value={'0'}>
          <span>仪表盘</span>
        </MenuItem>
        <MenuItem value={'1'}>
          <span>资源列表</span>
        </MenuItem>
        <MenuItem value={'2'}>
          <span>视频区</span>
        </MenuItem>
        <MenuItem value={'3'} disabled>
          <span>根目录</span>
        </MenuItem>
        <MenuItem value={'4'}>
          <span>调度平台</span>
        </MenuItem>
        <MenuItem value={'5'}>
          <span>精准监控</span>
        </MenuItem>
        <MenuItem value={'6'}>
          <span>个人中心</span>
        </MenuItem>
      </Menu>
      {/* 暗黑模式 */}
      <Menu
        value={darkActive}
        theme="dark"
        onChange={(v) => setDarkActive(v)}
        logo={<img src="https://tdesign.gtimg.com/site/baseLogo-dark.png" height="28" alt="logo" />}
      >
        <MenuItem value={'0'}>
          <span>仪表盘</span>
        </MenuItem>
        <MenuItem value={'1'}>
          <span>资源列表</span>
        </MenuItem>
        <MenuItem value={'2'}>
          <span>视频区</span>
        </MenuItem>
        <MenuItem value={'3'} disabled>
          <span>根目录</span>
        </MenuItem>
        <MenuItem value={'4'}>
          <span>调度平台</span>
        </MenuItem>
        <MenuItem value={'5'}>
          <span>精准监控</span>
        </MenuItem>
        <MenuItem value={'6'}>
          <span>个人中心</span>
        </MenuItem>
      </Menu>
    </Fragment>
  );
}
export default SingleSide;

                  ===SPLIT===组建:<Menu/>
                  使用描述：侧边导航可承载1-3级页面导航，并平铺展示。适用于层级较深的网站。
                  代码示例：import React, { Fragment, useState } from 'react';
import { Menu, Button } from 'tdesign-react';
import { AppIcon, CodeIcon, FileIcon, UserIcon, ViewListIcon, MailIcon, RollbackIcon } from 'tdesign-icons-react';

const { SubMenu, MenuItem } = Menu;
function MultiSide() {
  const [active, setActive] = useState('1-1');
  const [collapsed, setCollapsed] = useState(false);
  const [expands, setExpands] = useState(['1', '2']);
  const [darkActive, setDarkActive] = useState('1-1');
  const [darkCollapsed, setDarkCollapsed] = useState(false);
  const [darkExpands, setDarkExpands] = useState(['1', '2']);
  return (
    <Fragment>
      <Menu
        value={active}
        collapsed={collapsed}
        expandMutex={false}
        expanded={expands}
        onExpand={(values) => setExpands(values)}
        onChange={(v) => setActive(v)}
        operations={
          <Button variant="text" shape="square" icon={<ViewListIcon />} onClick={() => setCollapsed(!collapsed)} />
        }
        style={{
          marginRight: 20,
        }}
      >
        <MenuItem
          value="0"
          icon={<AppIcon />}
          tooltipProps={{
            theme: 'light',
          }}
        >
          仪表盘
        </MenuItem>
        <SubMenu value="1" title={<span>资源列表</span>} icon={<CodeIcon />}>
          <MenuItem value="1-1" disabled>
            <span>菜单二</span>
          </MenuItem>
        </SubMenu>
        <SubMenu value="2" title={<span>调度平台</span>} icon={<FileIcon />}>
          <SubMenu value="2-1" title="二级菜单-1">
            <MenuItem value="2-1-1">三级菜单-1</MenuItem>
            <MenuItem value="2-1-2">三级菜单-2</MenuItem>
            <MenuItem value="2-1-3">三级菜单-3</MenuItem>
          </SubMenu>
          <MenuItem value="2-2">
            <span>二级菜单-2</span>
          </MenuItem>
        </SubMenu>
        <SubMenu value="3" title={<span>精准监控</span>} icon={<UserIcon />}>
          <MenuItem value="3-1">
            <span>二级菜单-1</span>
          </MenuItem>
          <MenuItem value="3-2">
            <span>二级菜单-2</span>
          </MenuItem>
        </SubMenu>
        <MenuItem value="4" disabled icon={<RollbackIcon />}>
          根目录
        </MenuItem>
        <SubMenu value="5" title={<span>消息区</span>} icon={<MailIcon />}>
          <MenuItem value="5-1">
            <span>二级菜单-1</span>
          </MenuItem>
          <MenuItem value="5-2">
            <span>二级菜单-2</span>
          </MenuItem>
        </SubMenu>
      </Menu>
      {/* 暗黑模式 */}
      <Menu
        theme="dark"
        value={darkActive}
        collapsed={darkCollapsed}
        expandMutex={false}
        expanded={darkExpands}
        onExpand={(values) => setDarkExpands(values)}
        onChange={(v) => setDarkActive(v)}
        operations={
          <div className="tdesign-demo-menu-collapse--dark">
            <Button
              variant="text"
              shape="square"
              icon={<ViewListIcon />}
              onClick={() => setDarkCollapsed(!darkCollapsed)}
            />
          </div>
        }
      >
        <MenuItem value="0" icon={<AppIcon />}>
          仪表盘
        </MenuItem>
        <SubMenu value="1" title={<span>资源列表</span>} icon={<CodeIcon />}>
          <SubMenu value="2-1" title="二级菜单-1">
            <MenuItem value="2-1-1">三级菜单-1</MenuItem>
            <MenuItem value="2-1-2">三级菜单-2</MenuItem>
            <MenuItem value="2-1-3">三级菜单-3</MenuItem>
          </SubMenu>
        </SubMenu>
        <SubMenu value="2" title={<span>调度平台</span>} icon={<FileIcon />}>
          <MenuItem value="2-1">
            <span>二级菜单-1</span>
          </MenuItem>
          <MenuItem value="2-2">
            <span>二级菜单-2</span>
          </MenuItem>
        </SubMenu>
        <SubMenu value="3" title={<span>精准监控</span>} icon={<UserIcon />}>
          <MenuItem value="3-1">
            <span>二级菜单-1</span>
          </MenuItem>
          <MenuItem value="3-2">
            <span>二级菜单-2</span>
          </MenuItem>
        </SubMenu>
        <MenuItem value="4" disabled icon={<RollbackIcon />}>
          根目录
        </MenuItem>
        <SubMenu value="5" title={<span>消息区</span>} icon={<MailIcon />}>
          <MenuItem value="5-1">
            <span>二级菜单-1</span>
          </MenuItem>
          <MenuItem value="5-2">
            <span>二级菜单-2</span>
          </MenuItem>
        </SubMenu>
      </Menu>
    </Fragment>
  );
}
export default MultiSide;

                  ===SPLIT===组建:<Menu/>
                  使用描述：针对大量页面进行分组展示，以方便用户理解及查找。一般在大量业务或者页面需要展示的网站使用。
                  代码示例：import React, { useState } from 'react';
import { Menu, Button } from 'tdesign-react';
import {
  ViewListIcon,
  ServerIcon,
  Edit1Icon,
  RootListIcon,
  CheckIcon,
  UserIcon,
  AppIcon,
  LoginIcon,
} from 'tdesign-icons-react';

const { MenuGroup, MenuItem, SubMenu } = Menu;
function GroupSide() {
  const [value, setValue] = useState('1');
  const [collapsed, setCollapsed] = useState(false);
  return (
    <Menu
      value={value}
      onChange={(value) => setValue(value)}
      collapsed={collapsed}
      operations={
        <Button variant="text" shape="square" icon={<ViewListIcon />} onClick={() => setCollapsed(!collapsed)} />
      }
      logo={
        collapsed ? (
          <img
            src="https://oteam-tdesign-1258344706.cos.ap-guangzhou.myqcloud.com/site/logo%402x.png"
            width="35"
            alt="logo"
          />
        ) : (
          <img src="https://tdesign.gtimg.com/site/baseLogo-light.png" height="28" alt="logo" />
        )
      }
    >
      <MenuGroup title="主导航">
        <MenuItem value="item1" icon={<AppIcon />}>
          仪表盘
        </MenuItem>
      </MenuGroup>
      <MenuGroup title="组件">
        <SubMenu title="列表项" value="2-1" icon={<ServerIcon />}>
          <MenuItem value="2-1-1">基础列表项</MenuItem>
          <MenuItem value="2-1-2">卡片列表项</MenuItem>
          <MenuItem value="2-1-3">筛选列表项</MenuItem>
          <MenuItem value="2-1-4">树状筛选列表项</MenuItem>
        </SubMenu>
        <MenuItem value="2-2" icon={<Edit1Icon />}>
          表单项
        </MenuItem>
        <MenuItem value="2-3" icon={<RootListIcon />}>
          详情页
        </MenuItem>
        <MenuItem value="2-4" icon={<CheckIcon />}>
          结果页
        </MenuItem>
      </MenuGroup>
      <MenuGroup title="更多">
        <MenuItem value="item3" icon={<UserIcon />}>
          个人页
        </MenuItem>
        <MenuItem value="item4" icon={<LoginIcon />}>
          登录页
        </MenuItem>
      </MenuGroup>
    </Menu>
  );
}
export default GroupSide;

                  ===SPLIT===组建:<Menu/>
                  使用描述：在侧边导航上提供收起按钮，点击后可以将侧边栏最小化，常见于带有图标的侧边导航。
                  代码示例：import React, { useState } from 'react';
import { Menu, Button } from 'tdesign-react';
import { AppIcon, CodeIcon, FileIcon, UserIcon, ViewListIcon, MailIcon, RollbackIcon } from 'tdesign-icons-react';

const { SubMenu, MenuItem } = Menu;
function ClosableSide() {
  const [active, setActive] = useState('1-1');
  const [collapsed, setCollapsed] = useState(true);
  return (
    <Menu
      value={active}
      collapsed={collapsed}
      expandMutex={false}
      onChange={(v) => setActive(v)}
      operations={
        <Button variant="text" shape="square" icon={<ViewListIcon />} onClick={() => setCollapsed(!collapsed)} />
      }
      logo={<span>LOGO</span>}
    >
      <MenuItem value="0" icon={<AppIcon />}>
        仪表盘
      </MenuItem>
      <SubMenu value="1" title={<span>资源列表</span>} icon={<CodeIcon />}>
        <MenuItem value="1-1" disabled>
          <span>菜单二</span>
        </MenuItem>
      </SubMenu>
      <SubMenu value="2" title={<span>调度平台</span>} icon={<FileIcon />}>
        <MenuItem value="2-1">
          <span>三级菜单-1</span>
        </MenuItem>
        <MenuItem value="2-2">
          <span>三级菜单-2</span>
        </MenuItem>
      </SubMenu>
      <SubMenu value="3" title={<span>精准监控</span>} icon={<UserIcon />}>
        <MenuItem value="3-1">
          <span>三级菜单-1</span>
        </MenuItem>
        <MenuItem value="3-2">
          <span>三级菜单-2</span>
        </MenuItem>
      </SubMenu>
      <MenuItem value="4" disabled icon={<RollbackIcon />}>
        根目录
      </MenuItem>
      <SubMenu value="5" title={<span>消息区</span>} icon={<MailIcon />}>
        <MenuItem value="5-1">
          <span>三级菜单-1</span>
        </MenuItem>
        <MenuItem value="5-2">
          <span>三级菜单-2</span>
        </MenuItem>
      </SubMenu>
    </Menu>
  );
}
export default ClosableSide;

                  组建:<Pagination/>
                  使用描述：最基础的分页控件，仅展示页码。建议使用在内容少于10页的轻量化分页场景。
                  代码示例：import React from 'react';
import { Pagination } from 'tdesign-react';

export default function PaginationExample() {
  const onChange = (pageInfo) => {
    console.log(pageInfo);
  };
  const onPageSizeChange = (size) => {
    console.log('page-size:', size);
  };
  const onCurrentChange = (index, pageInfo) => {
    console.log(`转到第${index}页`);
    console.log(pageInfo);
  };
  return (
    <Pagination
      total={100}
      defaultPageSize={5}
      onChange={onChange}
      onCurrentChange={onCurrentChange}
      onPageSizeChange={onPageSizeChange}
    />
  );
}

                  ===SPLIT===组建:<Pagination/>
                  使用描述：拥有大量数据需要展示，通过分页能够让用户快速定位当前页码。建议使用在内容超过10页以上的分页场景。
                  代码示例：import React, { useState } from 'react';
import { Pagination } from 'tdesign-react';

export default function PaginationExample() {
  const [pageSize, changePageSize] = useState(5);
  const onChange = (pageInfo) => {
    console.log(pageInfo);
  };
  return (
    <div>
      <span>展示首尾页码省略</span>
      <Pagination total={100} pageSize={pageSize} onChange={onChange} onPageSizeChange={(v) => changePageSize(v)} />
      <span>不展示首尾页码省略</span>
      <Pagination
        total={100}
        pageSize={pageSize}
        onChange={onChange}
        pageEllipsisMode="both-ends"
        onPageSizeChange={(v) => changePageSize(v)}
      />
    </div>
  );
}

                  ===SPLIT===组建:<Pagination/>
                  使用描述：关联模块内数据进行展示，以方便用户无需全部浏览即可快速了解数据量级。常用于表格内的数据统计。
                  代码示例：import React from 'react';
import { Pagination } from 'tdesign-react';

export default function PaginationExample() {
  return <Pagination total={685} defaultPageSize={10} totalContent />;
}

                  ===SPLIT===组建:<Pagination/>
                  使用描述：可根据用户需求对每页展示条目数进行调整。
                  代码示例：import React from 'react';
import { Pagination } from 'tdesign-react';

export default function PaginationExample() {
  const [current, setCurrent] = React.useState(1);
  const [pageSize, setPageSize] = React.useState(20);
  const onChange = React.useCallback((pageInfo) => {
    const index = pageInfo.current;
    setCurrent(index);
    console.log(`current: ${index}`);
  }, []);
  const onPageSizeChange = React.useCallback((index, pageInfo) => {
    setPageSize(index);
    console.log(`pageSize: ${index}`);
    console.log(`pageInfo: ${JSON.stringify(pageInfo)}`);
  }, []);
  return (
    <Pagination
      total={645}
      current={current}
      pageSize={pageSize}
      pageSizeOptions={[20, 30, 100, 200]}
      onChange={onChange}
      onPageSizeChange={onPageSizeChange}
      selectProps={{
        popupProps: {
          overlayStyle: {
            fontWeight: 'normal',
          },
          overlayInnerStyle: {
            fontWeight: 'normal',
          },
          overlayClassName: 'pagination-num-custom-overlay-class',
          overlayInnerClassName: 'pagination-num-custom-overlay-inner-class',
        },
      }}
    />
  );
}

                  ===SPLIT===组建:<Pagination/>
                  使用描述：当数据有快速定位的需求时，通过选择显示快速跳转的分页。
                  代码示例：import React from 'react';
import { Pagination } from 'tdesign-react';

export default function PaginationExample() {
  const [current, setCurrent] = React.useState(1);
  const [pageSize, setPageSize] = React.useState(20);
  const onChange = React.useCallback((pageInfo) => {
    const index = pageInfo.current;
    setCurrent(index);
    console.log(`current: ${index}`);
  }, []);
  const onPageSizeChange = React.useCallback((index, pageInfo) => {
    setPageSize(index);
    console.log(`pageSize: ${index}`);
    console.log(`pageInfo: ${JSON.stringify(pageInfo)}`);
  }, []);
  return (
    <Pagination
      showJumper
      total={645}
      current={current}
      pageSize={pageSize}
      onChange={onChange}
      onPageSizeChange={onPageSizeChange}
    />
  );
}

                  ===SPLIT===组建:<Pagination/>
                  使用描述：极度简单的翻页控件，只展示当前页、总页数及上下翻页。模块内的横向空间较少，并且无需精准定位具体页面的场景。
                  代码示例：import React from 'react';
import { Pagination } from 'tdesign-react';

export default function PaginationExample() {
  const onChange = (pageInfo) => {
    console.log(pageInfo);
  };
  return <Pagination total={100} defaultPageSize={5} theme="simple" onChange={onChange} />;
}

                  ===SPLIT===组建:<Pagination/>
                  使用描述：去掉线框的翻页控件，并保留翻页的主要功能。模块内的空间较少，需要轻量化的翻页的场景，以增加页面利用率。
                  代码示例：import React from 'react';
import { Pagination } from 'tdesign-react';

export default function PaginationExample() {
  return <Pagination size="small" total={100} defaultPageSize={5} />;
}

                  ===SPLIT===组建:<Pagination/>
                  使用描述：更小尺寸的迷你风格分页控件，适合内嵌在其他组件中分页导航使用。
                  代码示例：import React from 'react';
import { Pagination } from 'tdesign-react';

export default function PaginationExample() {
  const onChange = (pageInfo) => {
    console.log(pageInfo);
  };
  return <Pagination total={100} defaultPageSize={5} size="small" theme="simple" onChange={onChange} />;
}

                  ===SPLIT===组建:<Pagination/>
                  使用描述：最小单元分页控件，适合内嵌在其他空间较小的组件中使用。
                  代码示例：import React, { useState } from 'react';
import { Radio, PaginationMini, Space } from 'tdesign-react';

export default function DemoPaginationMini() {
  const [layout, setLayout] = useState('vertical');
  const [size, setSize] = useState('medium');
  const tips = {
    prev: '前尘忆梦',
    current: '回到现在',
    next: '展望未来',
  };
  return (
    <Space direction="vertical" size={16}>
      <Space align="center">
        <span>layout:</span>
        <Radio.Group value={layout} onChange={(val) => setLayout(val)} variant="default-filled">
          <Radio.Button value="vertical">vertical</Radio.Button>
          <Radio.Button value="horizontal">horizontal</Radio.Button>
        </Radio.Group>
      </Space>
      <Space align="center">
        <span>size:</span>
        <Radio.Group value={size} onChange={(val) => setSize(val)} variant="default-filled">
          <Radio.Button value="small">small</Radio.Button>
          <Radio.Button value="medium">medium</Radio.Button>
          <Radio.Button value="large">large</Radio.Button>
        </Radio.Group>
      </Space>
      <PaginationMini layout={layout} size={size} tips={tips} />
    </Space>
  );
}

                  组建:<Steps/>
                  使用描述：适用于步骤数较多时，让用户更明确的了解步骤数量。
                  代码示例：import React from 'react';
import { Steps, Space } from 'tdesign-react';

const { StepItem } = Steps;
export default function HorizontalStepsWithNumbers() {
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Steps defaultCurrent={1}>
        <StepItem title="已完成的步骤" content="这里是提示文字" />
        <StepItem title="进行中的步骤" content="这里是提示文字" />
        <StepItem title="未进行的步骤" content="这里是提示文字" />
        <StepItem title="未进行的步骤" content="这里是提示文字" />
      </Steps>
      <Steps defaultCurrent={2}>
        <StepItem title="已完成的步骤" content="这里是提示文字" />
        <StepItem title="已完成的步骤" content="这里是提示文字" />
        <StepItem title="进行中的步骤" content="这里是提示文字" />
        <StepItem title="未进行的步骤" content="这里是提示文字" />
      </Steps>
    </Space>
  );
}

                  ===SPLIT===组建:<Steps/>
                  使用描述：适用于步骤数较少时，主要引导用户按步骤完成操作。
                  代码示例：import React from 'react';
import { Steps } from 'tdesign-react';

const { StepItem } = Steps;
export default function HorizontalStepsWithNumbers() {
  return (
    <Steps theme="dot" defaultCurrent={1}>
      <StepItem title="已完成的步骤" content="这里是提示文字" />
      <StepItem title="进行中的步骤" content="这里是提示文字" />
      <StepItem title="未进行的步骤" content="这里是提示文字" />
      <StepItem title="未进行的步骤" content="这里是提示文字" />
    </Steps>
  );
}

                  ===SPLIT===组建:<Steps/>
                  使用描述：适用于垂直步骤较少的情况。
                  代码示例：import React from 'react';
import { Steps } from 'tdesign-react';

const { StepItem } = Steps;
export default function HorizontalStepsWithNumbers() {
  return (
    <div
      style={{
        display: 'flex',
        justifyContent: 'space-between',
      }}
    >
      <Steps layout="vertical" theme="dot" defaultCurrent={1}>
        <StepItem title="已完成的步骤" content="这里是提示文字" />
        <StepItem title="进行中的步骤" content="这里是提示文字" />
        <StepItem title="未进行的步骤" content="这里是提示文字" />
        <StepItem title="未进行的步骤" content="这里是提示文字" />
      </Steps>
      <Steps layout="vertical" sequence="reverse" theme="dot" defaultCurrent={1}>
        <StepItem title="已完成的步骤" content="这里是提示文字" />
        <StepItem title="已完成的步骤" content="这里是提示文字" />
        <StepItem title="进行中的步骤" content="这里是提示文字" />
        <StepItem title="未进行的步骤" content="这里是提示文字" />
      </Steps>
    </div>
  );
}

                  ===SPLIT===组建:<Steps/>
                  使用描述：适用于步骤较多、步骤提示内容较长的场景。
                  代码示例：import React from 'react';
import { Steps } from 'tdesign-react';

const { StepItem } = Steps;
export default function HorizontalStepsWithNumbers() {
  return (
    <div
      style={{
        display: 'flex',
        justifyContent: 'space-between',
      }}
    >
      <Steps layout="vertical" defaultCurrent={1}>
        <StepItem title="已完成的步骤" content="这里是提示文字" />
        <StepItem title="进行中的步骤" content="这里是提示文字" />
        <StepItem title="未进行的步骤" content="这里是提示文字" />
        <StepItem title="未进行的步骤" content="这里是提示文字" />
      </Steps>
      <Steps layout="vertical" sequence="reverse" defaultCurrent={1}>
        <StepItem title="已完成的步骤" content="这里是提示文字" />
        <StepItem title="已完成的步骤" content="这里是提示文字" />
        <StepItem title="进行中的步骤" content="这里是提示文字" />
        <StepItem title="未进行的步骤" content="这里是提示文字" />
      </Steps>
    </div>
  );
}

                  ===SPLIT===组建:<Steps/>
                  使用描述：在步骤中，包含“已完成、进行中、未完成”三种状态的步骤条。
                  代码示例：import React from 'react';
import { Steps, Space } from 'tdesign-react';

const { StepItem } = Steps;
export default function BasicStepsExample() {
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Steps>
        <StepItem status="finish" title="已完成的步骤" content="这里是提示文字" />
        <StepItem status="process" title="进行中的步骤" content="这里是提示文字" />
        <StepItem title="未进行的步骤" content="这里是提示文字" />
        <StepItem title="未进行的步骤" content="这里是提示文字" />
      </Steps>
      <Steps>
        <StepItem status="finish" title="已完成的步骤" content="这里是提示文字" />
        <StepItem status="process" title="进行中的步骤" content="这里是提示文字" />
        <StepItem status="error" title="错误的步骤" content="优先展示`t-step`中设置的 status" />
        <StepItem title="未进行的步骤" content="这里是提示文字" />
      </Steps>
    </Space>
  );
}

                  ===SPLIT===组建:<Steps/>
                  使用描述：适用于需要自定义图标的场景。
                  代码示例：import React from 'react';
import { Steps } from 'tdesign-react';
import { LoginIcon, CartIcon, WalletIcon, CheckCircleIcon } from 'tdesign-icons-react';

const { StepItem } = Steps;
export default function BasicStepsExample() {
  return (
    <Steps defaultCurrent={1}>
      <StepItem icon={<LoginIcon />} title="登录" content="已完成状态" />
      <StepItem icon={<CartIcon />} title="购物" content="进行中状态" />
      <StepItem icon={<WalletIcon />} title="支付" content="未开始" />
      <StepItem icon={<CheckCircleIcon />} title="完成" content="未开始" />
    </Steps>
  );
}

                  ===SPLIT===组建:<Steps/>
                  使用描述：适用于步骤中需要额外操作，等待下一步操作场景。
                  代码示例：import React, { useState } from 'react';
import { Steps, Button } from 'tdesign-react';

const { StepItem } = Steps;
export default function HorizontalStepsWithNumbers() {
  const [current, setCurrent] = useState(1);
  const preBtn = (
    <Button
      size={'small'}
      onClick={() => {
        setCurrent(current - 1);
      }}
    >
      pre
    </Button>
  );
  const preTextBtn = (
    <Button
      size={'small'}
      variant="text"
      onClick={() => {
        setCurrent(current - 1);
      }}
    >
      pre
    </Button>
  );
  const nextBtn = (
    <Button
      size={'small'}
      onClick={() => {
        setCurrent(current + 1);
      }}
    >
      Next
    </Button>
  );
  const preNextBtnGroup = (
    <>
      {preTextBtn}
      <div
        style={{
          display: 'inline',
          marginLeft: 4,
        }}
      >
        {nextBtn}
      </div>
    </>
  );
  return (
    <Steps layout="vertical" defaultCurrent={current}>
      <StepItem title="步骤1" content="这里是提示文字">
        {current === 0 ? nextBtn : null}
      </StepItem>
      <StepItem title="步骤2" content="这里是提示文字">
        {current === 1 ? preNextBtnGroup : null}
      </StepItem>
      <StepItem title="步骤3" content="这里是提示文字">
        {current === 2 ? preNextBtnGroup : null}
      </StepItem>
      <StepItem title="步骤4" content="这里是提示文字">
        {current === 3 ? preBtn : null}
      </StepItem>
    </Steps>
  );
}

                  组建:<StickyTool/>
                  使用描述：基础侧边栏 
                  代码示例：import React from 'react';
import { StickyTool, Space } from 'tdesign-react';
import { ChatIcon, AddIcon, QrcodeIcon } from 'tdesign-icons-react';

const { StickyItem } = StickyTool;
export default function Base() {
  const handleClick = (context) => {
    console.log('click', context);
  };
  const handleHover = (context) => {
    console.log('hover', context);
  };
  return (
    <Space>
      <StickyTool
        style={{
          position: 'relative',
          overflow: 'hidden',
        }}
        offset={[-500, -24]}
        onClick={handleClick}
        onHover={handleHover}
      >
        <StickyItem label="chat" icon={<ChatIcon />}></StickyItem>
        <StickyItem label="add" icon={<AddIcon />}></StickyItem>
        <StickyItem
          label="qrcode"
          icon={<QrcodeIcon />}
          popup={<img alt="TDesign Logo" width="120" height="120" src="https://tdesign.gtimg.com/site/site.jpg" />}
          popupProps={{
            overlayInnerStyle: {
              padding: '4px',
              height: '128px',
            },
          }}
        ></StickyItem>
      </StickyTool>
    </Space>
  );
}

                  ===SPLIT===组建:<StickyTool/>
                  使用描述：紧凑侧边栏 
                  代码示例：import React from 'react';
import { StickyTool, Space } from 'tdesign-react';
import { ChatIcon, AddIcon, QrcodeIcon } from 'tdesign-icons-react';

const { StickyItem } = StickyTool;
export default function Compact() {
  const handleClick = (context) => {
    console.log('click', context);
  };
  const handleHover = (context) => {
    console.log('hover', context);
  };
  return (
    <Space>
      <StickyTool
        style={{
          position: 'relative',
          overflow: 'hidden',
        }}
        type="compact"
        offset={[-500, -24]}
        onClick={handleClick}
        onHover={handleHover}
      >
        <StickyItem icon={<ChatIcon />} popup="chat"></StickyItem>
        <StickyItem icon={<AddIcon />} popup="add"></StickyItem>
        <StickyItem
          icon={<QrcodeIcon />}
          popup={<img alt="TDesign Logo" width="120" height="120" src="https://tdesign.gtimg.com/site/site.jpg" />}
          popupProps={{
            overlayInnerStyle: {
              padding: '4px',
              height: '128px',
            },
          }}
        ></StickyItem>
      </StickyTool>
    </Space>
  );
}

                  ===SPLIT===组建:<StickyTool/>
                  使用描述：提供圆形和方形两种不同形状。
                  代码示例：import React from 'react';
import { StickyTool, Space } from 'tdesign-react';
import { ChatIcon, AddIcon, QrcodeIcon } from 'tdesign-icons-react';

const { StickyItem } = StickyTool;
export default function Shape() {
  const handleClick = (context) => {
    console.log('click', context);
  };
  const handleHover = (context) => {
    console.log('hover', context);
  };
  return (
    <Space>
      <StickyTool
        style={{
          position: 'relative',
          overflow: 'hidden',
        }}
        offset={[-500, -24]}
        onClick={handleClick}
        onHover={handleHover}
      >
        <StickyItem label="chat" icon={<ChatIcon />}></StickyItem>
        <StickyItem label="add" icon={<AddIcon />}></StickyItem>
        <StickyItem
          label="qrcode"
          icon={<QrcodeIcon />}
          popup={<img alt="TDesign Logo" width="120" height="120" src="https://tdesign.gtimg.com/site/site.jpg" />}
          popupProps={{
            overlayInnerStyle: {
              padding: '4px',
              height: '128px',
            },
            overlayClassName: 'sticky-item-custom-overlay-class',
            overlayInnerClassName: 'sticky-item-custom-overlay-inner-class',
          }}
        ></StickyItem>
      </StickyTool>
      <StickyTool
        style={{
          position: 'relative',
          overflow: 'hidden',
        }}
        shape="round"
        offset={[-300, -24]}
        onClick={handleClick}
        onHover={handleHover}
      >
        <StickyItem label="chat" icon={<ChatIcon />}></StickyItem>
        <StickyItem label="add" icon={<AddIcon />}></StickyItem>
        <StickyItem
          label="qrcode"
          icon={<QrcodeIcon />}
          popup={<img alt="TDesign Logo" width="120" height="120" src="https://tdesign.gtimg.com/site/site.jpg" />}
          popupProps={{
            overlayStyle: {
              fontWeight: 'normal',
            },
            overlayInnerStyle: {
              padding: '4px',
              height: '128px',
            },
            overlayClassName: 'sticky-item-custom-overlay-class',
            overlayInnerClassName: 'sticky-item-custom-overlay-inner-class',
          }}
        ></StickyItem>
      </StickyTool>
    </Space>
  );
}

                  组建:<Tabs/>
                  使用描述：使用选项卡切换内容模块，操作后不会进行页面跳转。
                  代码示例：import React from 'react';
import { Space, Tabs } from 'tdesign-react';

const { TabPanel } = Tabs;
export default function BasicTabs() {
  const tabList = [
    {
      label: '选项卡一',
      value: 1,
      panel: (
        <p
          style={{
            padding: 25,
          }}
        >
          这是选项卡一的内容，使用 Tabs 渲染
        </p>
      ),
    },
    {
      label: '选项卡二',
      value: 2,
      panel: (
        <p
          style={{
            padding: 25,
          }}
        >
          这是选项卡二的内容，使用 Tabs 渲染
        </p>
      ),
    },
    {
      label: '选项卡三',
      value: 3,
      panel: (
        <p
          style={{
            padding: 25,
          }}
        >
          这是选项卡三的内容，使用 Tabs 渲染
        </p>
      ),
    },
  ];
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Tabs placement={'top'} size={'medium'} defaultValue={1}>
        <TabPanel value={1} label="选项卡1">
          <p
            style={{
              padding: 25,
            }}
          >
            选项卡1的内容，使用 TabPanel 渲染
          </p>
        </TabPanel>
        <TabPanel value={2} label="选项卡2">
          <p
            style={{
              padding: 25,
            }}
          >
            选项卡2的内容，使用 TabPanel 渲染
          </p>
        </TabPanel>
        <TabPanel value={3} label="选项卡3">
          <p
            style={{
              padding: 25,
            }}
          >
            选项卡3的内容，使用 TabPanel 渲染
          </p>
        </TabPanel>
      </Tabs>

      <Tabs defaultValue={1} list={tabList} />
    </Space>
  );
}

                  ===SPLIT===组建:<Tabs/>
                  使用描述：在基础选项卡基础上，在每个标签前添加图标，方便用户快速理解。
                  代码示例：import React, { useState } from 'react';
import { Tabs, Radio, Space } from 'tdesign-react';
import { DiscountIcon, ToolsIcon, TipsIcon } from 'tdesign-icons-react';

const { TabPanel } = Tabs;
export default function IconTabs() {
  const [theme, setTheme] = useState('normal');
  const handleChange = (value) => {
    setTheme(value);
  };
  return (
    <Space
      direction="vertical"
      size="large"
      style={{
        width: '100%',
      }}
    >
      <Radio.Group variant="default-filled" defaultValue="normal" onChange={handleChange}>
        <Radio.Button value="normal">常规</Radio.Button>
        <Radio.Button value="card">卡片</Radio.Button>
      </Radio.Group>
      <Tabs placement={'top'} defaultValue={'a'} theme={theme}>
        <TabPanel
          value="a"
          label={
            <>
              <DiscountIcon />
              选项卡1
            </>
          }
        >
          <div
            className="tabs-content"
            style={{
              margin: 20,
            }}
          >
            选项卡1内容区
          </div>
        </TabPanel>
        <TabPanel
          value="b"
          label={
            <>
              <ToolsIcon />
              选项卡2
            </>
          }
        >
          <div
            className="tabs-content"
            style={{
              margin: 20,
            }}
          >
            选项卡2内容区
          </div>
        </TabPanel>
        <TabPanel
          value="c"
          label={
            <>
              <TipsIcon />
              选项卡3
            </>
          }
        >
          <div
            className="tabs-content"
            style={{
              margin: 20,
            }}
          >
            选项卡3内容区
          </div>
        </TabPanel>
      </Tabs>
    </Space>
  );
}

                  ===SPLIT===组建:<Tabs/>
                  使用描述：用户可添加、删除选项卡，满足自定义场景。
                  代码示例：import React, { useState } from 'react';
import { Tabs } from 'tdesign-react';

const { TabPanel } = Tabs;
const tabs = [];
for (let i = 1, max = 10; i <= max; ++i) {
  tabs.push({
    value: i,
    label: `选项卡 ${i}`,
  });
}
export default function AddTabs() {
  const [panels, setPanels] = useState(tabs);
  const [value, setValue] = useState(1);
  return (
    <Tabs
      placement={'top'}
      size={'medium'}
      disabled={false}
      theme={'card'}
      defaultValue={1}
      value={value}
      onChange={setValue}
      addable
      onRemove={({ value }) => {
        const newPanels = panels.filter((panel) => panel.value !== value);
        setPanels(newPanels);
      }}
      onAdd={() => {
        const newValue = panels.length > 0 ? panels[panels.length - 1].value + 1 : 1;
        const newPanels = panels.concat({
          value: newValue,
          label: `选项卡${panels.length + 1}`,
        });
        setValue(newValue);
        setPanels(newPanels);
      }}
    >
      {panels.map(({ value, label }, index) => (
        <TabPanel
          key={value}
          value={value}
          label={label}
          removable={true}
          onRemove={() => {
            setPanels((panels) => {
              panels.splice(index, 1);
              return panels;
            });
          }}
        >
          <div
            className="tabs-content"
            style={{
              margin: 20,
            }}
          >
            {label}内容区
          </div>
        </TabPanel>
      ))}
    </Tabs>
  );
}

                  ===SPLIT===组建:<Tabs/>
                  使用描述：提供 大、中（默认）两种尺寸。
                  代码示例：import React from 'react';
import { Tabs, Space } from 'tdesign-react';

const { TabPanel } = Tabs;
export default function SizeTabs() {
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Tabs placement={'top'} size="medium" theme="normal" disabled={false} defaultValue={'1'}>
        <TabPanel value={'1'} label={'选项卡1'}>
          <div
            style={{
              margin: 20,
            }}
          >
            选项卡1内容区
          </div>
        </TabPanel>
        <TabPanel value={'2'} label={'选项卡2'}>
          <div
            style={{
              margin: 20,
            }}
          >
            选项卡2内容区
          </div>
        </TabPanel>
      </Tabs>
      <Tabs placement={'top'} size="large" theme="normal" disabled={false} defaultValue={'1'}>
        <TabPanel value={'1'} label={'选项卡1'}>
          <div
            style={{
              margin: 20,
            }}
          >
            选项卡1内容区
          </div>
        </TabPanel>
        <TabPanel value={'2'} label={'选项卡2'}>
          <div
            style={{
              margin: 20,
            }}
          >
            选项卡2内容区
          </div>
        </TabPanel>
      </Tabs>
    </Space>
  );
}

                  ===SPLIT===组建:<Tabs/>
                  使用描述：提供 默认 和 卡片 两种风格。
                  代码示例：import React from 'react';
import { Tabs, Space } from 'tdesign-react';

const { TabPanel } = Tabs;
export default function ThemeTabs() {
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Tabs placement={'top'} size={'medium'} theme="normal" disabled={false}>
        <TabPanel value={'1'} label={'选项卡1'}>
          <div
            style={{
              margin: 20,
            }}
          >
            选项卡1内容区
          </div>
        </TabPanel>
        <TabPanel value={'2'} label={'选项卡2'}>
          <div
            style={{
              margin: 20,
            }}
          >
            选项卡2内容区
          </div>
        </TabPanel>
      </Tabs>

      <Tabs placement={'top'} size={'medium'} theme="card" disabled={false}>
        <TabPanel value={'1'} label={'选项卡1'}>
          <div
            style={{
              margin: 20,
            }}
          >
            选项卡1内容区
          </div>
        </TabPanel>
        <TabPanel value={'2'} label={'选项卡2'}>
          <div
            style={{
              margin: 20,
            }}
          >
            选项卡2内容区
          </div>
        </TabPanel>
      </Tabs>
    </Space>
  );
}

                  ===SPLIT===组建:<Tabs/>
                  使用描述：提供 上、右、下、左 不同位置的选项卡。
                  代码示例：import React, { useState } from 'react';
import { Tabs, Radio, Space } from 'tdesign-react';

const { TabPanel } = Tabs;
export default function PositionTabs() {
  const [position, setPosition] = useState('top');
  const handlePositionChange = (val) => {
    setPosition(val);
  };
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Radio.Group variant="default-filled" defaultValue="top" onChange={handlePositionChange}>
        <Radio.Button value="top">top</Radio.Button>
        <Radio.Button value="right">right</Radio.Button>
        <Radio.Button value="bottom">bottom</Radio.Button>
        <Radio.Button value="left">left</Radio.Button>
      </Radio.Group>
      <Tabs placement={position} defaultValue={'1'} theme={'normal'} disabled={false}>
        <TabPanel value={'1'} label="选项卡1">
          <div
            className="tabs-content"
            style={{
              margin: 20,
            }}
          >
            选项卡1内容区
          </div>
        </TabPanel>
        <TabPanel value={'2'} label="选项卡2">
          <div
            className="tabs-content"
            style={{
              margin: 20,
            }}
          >
            选项卡2内容区
          </div>
        </TabPanel>
        <TabPanel value={'3'} label="选项卡3">
          <div
            className="tabs-content"
            style={{
              margin: 20,
            }}
          >
            选项卡3内容区
          </div>
        </TabPanel>
      </Tabs>
    </Space>
  );
}

                  ===SPLIT===组建:<Tabs/>
                  使用描述：当选项卡数量超出最大宽度，可通过滑动展示选项卡。
                  代码示例：import React, { useState } from 'react';
import { Tabs, Radio, Space } from 'tdesign-react';

const { TabPanel } = Tabs;
export default function AddTabs() {
  const [theme, setTheme] = useState('normal');
  const [scrollPosition, setScrollPosition] = useState('auto');
  const panels = Array.from({
    length: 20,
  }).map((item, index) => ({
    value: index + 1,
    label: `选项卡${index + 1}`,
  }));
  return (
    <Space
      direction="vertical"
      size="large"
      style={{
        width: '100%',
      }}
    >
      <Radio.Group variant="default-filled" defaultValue="normal" onChange={(val) => setTheme(val)}>
        <Radio.Button value="normal">常规型</Radio.Button>
        <Radio.Button value="card">卡片型</Radio.Button>
      </Radio.Group>
      <Radio.Group variant="default-filled" defaultValue="auto" onChange={(v) => setScrollPosition(v)}>
        <Radio.Button value="auto">Auto</Radio.Button>
        <Radio.Button value="start">Start</Radio.Button>
        <Radio.Button value="center">Center</Radio.Button>
        <Radio.Button value="end">End</Radio.Button>
      </Radio.Group>

      <Tabs
        placement={'top'}
        size={'medium'}
        disabled={false}
        theme={theme}
        scrollPosition={scrollPosition}
        defaultValue={1}
      >
        {panels.map(({ value, label }) => (
          <TabPanel key={value} value={value} label={label}>
            <div
              className="tabs-content"
              style={{
                margin: 20,
              }}
            >
              {label}内容区
            </div>
          </TabPanel>
        ))}
      </Tabs>
    </Space>
  );
}

                  ===SPLIT===组建:<Tabs/>
                  使用描述：提供了选项卡的禁用状态。
                  代码示例：import React, { useState } from 'react';
import { Tabs, Radio, Space } from 'tdesign-react';

const { TabPanel } = Tabs;
export default function ThemeTabs() {
  const [theme, setTheme] = useState('normal');
  return (
    <Space
      direction="vertical"
      size="large"
      style={{
        width: '100%',
      }}
    >
      <Radio.Group variant="default-filled" defaultValue="normal" onChange={(val) => setTheme(val)}>
        <Radio.Button value="normal">常规型</Radio.Button>
        <Radio.Button value="card">卡片型</Radio.Button>
      </Radio.Group>
      <Tabs placement={'top'} defaultValue={'1'} theme={theme} size={'medium'} disabled={false}>
        <TabPanel value={'1'} label={'选项卡1'}>
          <div
            style={{
              margin: 20,
            }}
          >
            选项卡1内容区
          </div>
        </TabPanel>
        <TabPanel value={'2'} label={'选项卡2'} disabled>
          <div
            style={{
              margin: 20,
            }}
          >
            选项卡2内容区
          </div>
        </TabPanel>
        <TabPanel value={'3'} label={'选项卡3'}>
          <div
            style={{
              margin: 20,
            }}
          >
            选项卡3内容区
          </div>
        </TabPanel>
      </Tabs>
    </Space>
  );
}

                  ===SPLIT===组建:<Tabs/>
                  使用描述：提供了可拖拽的选项卡。
                  代码示例：import React, { useState } from 'react';
import { Space, Tabs } from 'tdesign-react';

const { TabPanel } = Tabs;
const defaultList = [
  {
    label: '选项卡一',
    value: 1,
    panel: (
      <p
        style={{
          padding: 25,
        }}
      >
        这是选项卡一的内容，使用 Tabs 渲染
      </p>
    ),
  },
  {
    label: '选项卡二',
    value: 2,
    panel: (
      <p
        style={{
          padding: 25,
        }}
      >
        这是选项卡二的内容，使用 Tabs 渲染
      </p>
    ),
  },
  {
    label: '选项卡三',
    value: 3,
    panel: (
      <p
        style={{
          padding: 25,
        }}
      >
        这是选项卡三的内容，使用 Tabs 渲染
      </p>
    ),
  },
];
export default function DragSortExample() {
  const [tabList1, setTabList1] = useState([...defaultList]);
  const [tabList2, setTabList2] = useState([...defaultList]);
  const onDragSort1 = ({ currentIndex, targetIndex }) => {
    const temp = tabList1[currentIndex];
    tabList1[currentIndex] = tabList1[targetIndex];
    tabList1[targetIndex] = temp;
    setTabList1([...tabList1]);
  };
  const onDragSort2 = ({ currentIndex, targetIndex }) => {
    const temp = tabList2[currentIndex];
    tabList2[currentIndex] = tabList2[targetIndex];
    tabList2[targetIndex] = temp;
    setTabList2([...tabList2]);
  };
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Tabs defaultValue={1} list={tabList1} dragSort onDragSort={onDragSort1} />
      <Tabs dragSort onDragSort={onDragSort2} placement={'top'} size={'medium'} defaultValue={1}>
        {tabList2.map(({ label, value, panel }) => (
          <TabPanel key={value} value={value} label={label}>
            {panel}
          </TabPanel>
        ))}
      </Tabs>
    </Space>
  );
}

                  ===SPLIT===组建:<Tabs/>
                  使用描述：通过设置 lazy，可以实现懒加载，只在选中tab时才进行渲染。
                  代码示例：import React from 'react';
import { Space, Tabs } from 'tdesign-react';

const { TabPanel } = Tabs;
export default function BasicTabs() {
  const tabList = [
    {
      label: '选项卡一',
      value: 1,
      panel: (
        <p
          style={{
            padding: 25,
          }}
        >
          这是选项卡1的内容，使用 Tabs 渲染
        </p>
      ),
    },
    {
      label: '选项卡二',
      value: 2,
      panel: (
        <p
          style={{
            padding: 25,
          }}
        >
          这是选项卡2的内容，使用 Tabs 渲染
        </p>
      ),
      destroyOnHide: false,
    },
    {
      label: '选项卡三',
      value: 3,
      panel: (
        <p
          style={{
            padding: 25,
          }}
        >
          这是选项卡3的内容，使用 Tabs 渲染
        </p>
      ),
      lazy: true,
      destroyOnHide: false,
    },
  ];
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Tabs placement={'top'} size={'medium'} defaultValue={1}>
        <TabPanel value={1} label="选项卡1">
          <p
            style={{
              padding: 25,
            }}
          >
            选项卡1的内容，使用 TabPanel 渲染
          </p>
        </TabPanel>
        <TabPanel value={2} label="选项卡2" destroyOnHide={false}>
          <p
            style={{
              padding: 25,
            }}
          >
            选项卡2的内容，使用 TabPanel 渲染
          </p>
        </TabPanel>
        <TabPanel value={3} label="选项卡3" destroyOnHide={false} lazy>
          <p
            style={{
              padding: 25,
            }}
          >
            选项卡3的内容，使用 TabPanel 渲染
          </p>
        </TabPanel>
      </Tabs>

      <Tabs defaultValue={1} list={tabList} />
    </Space>
  );
}

                  组建:<AutoComplete/>
                  使用描述：基础自动填充 
                  代码示例：import React, { useEffect, useState } from 'react';
import { Space, AutoComplete, Button } from 'tdesign-react';
import { SearchIcon } from 'tdesign-icons-react';

const classStyles = `
<style>
.t-demo-autocomplete__search .t-input {
  padding-right: 0;
}
.t-demo-auto-complete__base .t-button svg {
  font-size: 20px;
}
</style>
`;
let timer = null;
const AutoCompleteBase = () => {
  const [value, setValue] = useState('');
  const [value2, setValue2] = useState('');
  const [options, setOptions] = useState(['第一个默认联想词', '第二个默认联想词', '第三个默认联想词']);
  const [options2] = useState(['第一个默认联想词', '第二个默认联想词', '第三个默认联想词']);

  // 输入框内容发生变化时进行搜索，100ms 搜索一次
  const onChange = (val) => {
    setValue(val);
    clearTimeout(timer);
    timer = setTimeout(() => {
      const text = '搜索联想词';
      const pureValue = val.replace(`第一个${text}`, '').replace(`第二个${text}`, '').replace(`第三个${text}`, '');
      setOptions([`${pureValue}第一个${text}`, `${pureValue}第二个${text}`, `${pureValue}第三个${text}`]);
      clearTimeout(timer);
    }, 100);
  };
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  return (
    <Space
      direction="vertical"
      className="t-demo-auto-complete__base"
      style={{
        width: '100%',
      }}
    >
      <AutoComplete
        value={value}
        options={options}
        onChange={onChange}
        highlightKeyword
        filterable={false}
        clearable
        placeholder="请输入关键词搜索"
        onBlur={() => {
          console.log('blur');
        }}
      />

      {/* 左侧图标可以使用 label，同 input */}
      <AutoComplete
        value={value2}
        options={options2}
        onChange={setValue2}
        highlightKeyword
        filterable
        placeholder="请输入关键词搜索（自定义右侧图标）"
        className="t-demo-autocomplete__search"
        inputProps={{
          suffix: (
            <Button shape="square">
              <SearchIcon />
            </Button>
          ),
        }}
      />
    </Space>
  );
};
AutoCompleteBase.displayName = 'AutoCompleteBase';
export default AutoCompleteBase;

                  ===SPLIT===组建:<AutoComplete/>
                  使用描述：设置 filterable 后的默认过滤规则为：不区分大小写，文本任意位置。如果 filterable 的默认规则不符合需求，可以使用 filter 自定义过滤规则。
                  代码示例：import React, { useState } from 'react';
import { Space, AutoComplete } from 'tdesign-react';
import { escapeRegExp } from 'lodash-es';

const LIST = ['第一个 AutoComplete 默认联想词', '第二个 AutoComplete 默认联想词', '第三个 AutoComplete 默认联想词'];
const AutoCompleteBaseFilter = () => {
  const [value1, setValue1] = useState('');
  const [value2, setValue2] = useState('');
  const filterWords = (keyword, option) => {
    const regExp = new RegExp(escapeRegExp(keyword));
    return regExp.test(option);
  };
  return (
    <Space
      style={{
        width: '100%',
      }}
    >
      <AutoComplete
        value={value1}
        options={[...LIST]}
        onChange={setValue1}
        highlightKeyword
        filterable
        placeholder="组件默认过滤规则（不区分大小写）"
        style={{
          width: '280px',
        }}
      />

      <AutoComplete
        value={value2}
        options={[...LIST]}
        onChange={setValue2}
        highlightKeyword
        filter={filterWords}
        placeholder="组件默认过滤规则（不区分大小写）"
        style={{
          width: '280px',
        }}
      />
    </Space>
  );
};
AutoCompleteBaseFilter.displayName = 'AutoCompleteBaseFilter';
export default AutoCompleteBaseFilter;

                  ===SPLIT===组建:<AutoComplete/>
                  使用描述：使用 option 自定义联想词
                  代码示例：import React, { useEffect, useState } from 'react';
import { AutoComplete, HighlightOption } from 'tdesign-react';

const classStyles = `
<style>
.t-demo-autocomplete-option-list .t-select-option {
  height: 50px;
}

.t-demo-autocomplete-option-list .custom-option {
  display: flex;
  align-items: center;
}

.t-demo-autocomplete-option-list .custom-option > img {
  max-height: 40px;
  border-radius: 50%;
}

.t-demo-autocomplete-option-list .custom-option__main {
  margin-left: 8px;
}

.t-demo-autocomplete-option-list .custom-option .description {
  color: var(--td-gray-color-9);
}
</style>
`;
const TEXTS = ['第一个默认联想词', '第二个默认联想词', '第三个默认联想词'];
const AutoCompleteOption = () => {
  const [value, setValue] = useState('');
  const options = TEXTS.map((text) => ({
    text,
    label: (
      <div className="custom-option">
        <img src="https://tdesign.gtimg.com/site/avatar.jpg" />
        <div className="custom-option__main">
          <HighlightOption content={text} keyword={value} />
          <small className="description">这是关于联想词的描述，使用 label 渲染</small>
        </div>
      </div>
    ),
  }));
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  return (
    <div className="t-demo-autocomplete-option">
      <AutoComplete
        value={value}
        options={options}
        onChange={setValue}
        highlightKeyword
        placeholder="请输入关键词搜索"
        popupProps={{
          overlayStyle: {
            fontWeight: 'normal',
          },
          overlayInnerStyle: {
            fontWeight: 'normal',
          },
          overlayClassName: 't-demo-autocomplete-option-list',
          overlayInnerClassName: 'autocomplete-custom-overlay-inner-class',
        }}
      />
    </div>
  );
};
AutoCompleteOption.displayName = 'AutoCompleteOption';
export default AutoCompleteOption;

                  ===SPLIT===组建:<AutoComplete/>
                  使用描述：可自定义触发元素的自动填充 
                  代码示例：import React, { useState } from 'react';
import { AutoComplete, Textarea } from 'tdesign-react';

let timer = null;
const AutoCompleteTriggerElement = () => {
  const [value, setValue] = useState('');
  const [options, setOptions] = useState([
    'First AutoComplete Textarea',
    'Second AutoComplete Textarea',
    'Third AutoComplete Textarea',
  ]);

  // 输入框内容发生变化时进行搜索，200ms 搜索一次
  const onChange = (val) => {
    setValue(val);
    clearTimeout(timer);
    timer = setTimeout(() => {
      const text = 'AutoComplete Textarea';
      const pureValue = val.replace(`First ${text}`, '').replace(`Second ${text}`, '').replace(`Third ${text}`, '');
      setOptions([`${pureValue}First ${text}`, `${pureValue}Second ${text}`, `${pureValue}Third ${text}`]);
      clearTimeout(timer);
    }, 200);
  };
  return (
    <AutoComplete value={value} options={options} onChange={onChange} highlightKeyword>
      <Textarea value={value} onChange={setValue} placeholder="自定义联想词触发元素" />
    </AutoComplete>
  );
};
AutoCompleteTriggerElement.displayName = 'AutoCompleteTriggerElement';
export default AutoCompleteTriggerElement;

                  ===SPLIT===组建:<AutoComplete/>
                  使用描述：不同尺寸的自动填充 
                  代码示例：import React, { useState } from 'react';
import { AutoComplete, Space } from 'tdesign-react';

const options = ['第一个联想词', '第二个联想词', '第三个联想词'];
const AutoCompleteSize = () => {
  const [value1, setValue1] = useState('');
  const [value2, setValue2] = useState('');
  const [value3, setValue3] = useState('');
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <AutoComplete
        value={value1}
        options={options}
        onChange={setValue1}
        size="small"
        inputProps={{
          label: '小尺寸：',
        }}
      />
      <AutoComplete
        value={value2}
        options={options}
        onChange={setValue2}
        inputProps={{
          label: '中尺寸：',
        }}
      />
      <AutoComplete
        value={value3}
        options={options}
        onChange={setValue3}
        size="large"
        inputProps={{
          label: '大尺寸：',
        }}
      />
    </Space>
  );
};
AutoCompleteSize.displayName = 'AutoCompleteSize';
export default AutoCompleteSize;

                  ===SPLIT===组建:<AutoComplete/>
                  使用描述：不同状态的自动填充 
                  代码示例：import React, { useState } from 'react';
import { AutoComplete, Space } from 'tdesign-react';

const options = ['第一个联想词', '第二个联想词', '第三个联想词'];
const AutoCompleteStatus = () => {
  const [value, setValue] = useState('');
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
      size="32px"
    >
      <AutoComplete
        value={value}
        options={options}
        onChange={setValue}
        disabled
        tips="这是禁用状态"
        placeholder="请输入关键词搜索"
      />
      <AutoComplete
        value={value}
        options={options}
        onChange={setValue}
        readonly
        tips="这是只读状态"
        placeholder="请输入关键词搜索"
      />
      <AutoComplete
        value={value}
        options={options}
        onChange={setValue}
        tips="这是普通状态"
        placeholder="请输入关键词搜索"
      />
      <AutoComplete
        value={value}
        options={options}
        onChange={setValue}
        tips="这是告警状态"
        status="warning"
        placeholder="请输入关键词搜索"
      />
      <AutoComplete
        value={value}
        options={options}
        onChange={setValue}
        tips="这是错误状态"
        status="error"
        placeholder="请输入关键词搜索"
      />
      <AutoComplete
        value={value}
        options={options}
        onChange={setValue}
        tips="这是成功状态"
        status="success"
        placeholder="请输入关键词搜索"
      />
    </Space>
  );
};
AutoCompleteStatus.displayName = 'AutoCompleteStatus';
export default AutoCompleteStatus;

                  组建:<Cascader/>
                  使用描述：提供单选的级联选择器，选取后展示每一层级所选的内容。
                  代码示例：import React, { useState } from 'react';
import { Cascader } from 'tdesign-react';

export default function Example() {
  const [value, setValue] = useState([]);
  const [options] = useState([
    {
      label: '选项一',
      value: '1',
      children: [
        {
          label: '子选项一',
          value: '1.1',
        },
        {
          label: '子选项二',
          value: '1.2',
        },
        {
          label: '子选项三',
          value: '1.3',
        },
      ],
    },
    {
      label: '选项二',
      value: '2',
      children: [
        {
          label: '子选项一',
          value: '2.1',
        },
        {
          label: '子选项二',
          value: '2.2',
        },
      ],
    },
  ]);
  const onChange = (value) => {
    setValue(value);
  };
  return <Cascader options={options} onChange={onChange} value={value} size="medium" clearable />;
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：提供多选的级联选择器，通过标签展示多选内容。
                  代码示例：import React, { useState } from 'react';
import { Cascader } from 'tdesign-react';

export default function Example() {
  const [value, setValue] = useState(['8.1']);
  const options = [
    {
      label: '选项一',
      value: '1',
      children: [
        {
          label: '子选项一',
          value: '1.1',
        },
        {
          label: '子选项二',
          value: '1.2',
        },
        {
          label: '子选项三',
          value: '1.3',
        },
      ],
    },
    {
      label: '选项二',
      value: '2',
      children: [
        {
          label: '子选项一',
          value: '2.1',
        },
        {
          label: '子选项二',
          value: '2.2',
        },
      ],
    },
    {
      label: '选项三',
      value: '3',
      children: [
        {
          label: '子选项一',
          value: '3.1',
        },
        {
          label: '子选项二',
          value: '3.2',
        },
      ],
    },
    {
      label: '选项四',
      value: '4',
      children: [
        {
          label: '子选项一',
          value: '4.1',
        },
        {
          label: '子选项二',
          value: '4.2',
        },
      ],
    },
    {
      label: '选项五',
      value: '5',
      children: [
        {
          label: '子选项一',
          value: '5.1',
        },
        {
          label: '子选项二',
          value: '5.2',
        },
      ],
    },
    {
      label: '选项六',
      value: '6',
      children: [
        {
          label: '子选项一',
          value: '6.1',
        },
        {
          label: '子选项二',
          value: '6.2',
        },
      ],
    },
    {
      label: '选项七',
      value: '7',
      children: [
        {
          label: '子选项一',
          value: '7.1',
        },
        {
          label: '子选项二',
          value: '7.2',
        },
      ],
    },
    {
      label: '选项8',
      value: '8',
      children: [
        {
          label: '子选项一',
          value: '8.1',
        },
        {
          label: '子选项二',
          value: '8.2',
        },
      ],
    },
  ];
  const onChange = (value) => {
    setValue(value);
  };
  return (
    <div className="tdesign-demo-block-row">
      <Cascader options={options} onChange={onChange} value={value} multiple clearable />
    </div>
  );
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：多选情况下折叠选中项，超出该数值的选中项折叠。
                  代码示例：import React, { useState } from 'react';
import { Cascader, Space } from 'tdesign-react';

export default function Example() {
  const [value, setValue] = useState(['1.1', '1.2', '1.3']);
  const options = [
    {
      label: '选项一',
      value: '1',
      children: [
        {
          label: '子选项一',
          value: '1.1',
        },
        {
          label: '子选项二',
          value: '1.2',
        },
        {
          label: '子选项三',
          value: '1.3',
        },
      ],
    },
    {
      label: '选项二',
      value: '2',
      children: [
        {
          label: '子选项一',
          value: '2.1',
        },
        {
          label: '子选项二',
          value: '2.2',
        },
      ],
    },
  ];
  const onChange = (value) => {
    setValue(value);
  };
  return (
    <Space direction="vertical">
      <Cascader options={options} value={value} onChange={onChange} multiple minCollapsedNum={1} />
      <Cascader
        options={options}
        value={value}
        onChange={onChange}
        multiple
        minCollapsedNum={1}
        collapsedItems={({ count }) =>
          count > 0 && (
            <span
              style={{
                color: '#00a870',
              }}
            >
              +{count - 1}
            </span>
          )
        }
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：提供大中小三种不同高度、宽度的选择器，以适应不同尺寸布局。
                  代码示例：import React, { useState } from 'react';
import { Cascader, Space } from 'tdesign-react';

export default function Example() {
  const [value, setValue] = useState([]);
  const [options] = useState([
    {
      label: '选项一',
      value: '1',
      children: [
        {
          label: '子选项一',
          value: '1.1',
        },
        {
          label: '子选项二',
          value: '1.2',
        },
        {
          label: '子选项三',
          value: '1.3',
        },
      ],
    },
    {
      label: '选项二',
      value: '2',
      children: [
        {
          label: '子选项一',
          value: '2.1',
        },
        {
          label: '子选项二',
          value: '2.2',
        },
      ],
    },
  ]);
  const onChange = (value) => {
    setValue(value);
  };
  const itemStyle = {
    marginTop: '16px',
  };
  return (
    <Space direction="vertical">
      {/* 非受控 */}
      <Cascader style={itemStyle} options={options} defaultValue={value} clearable size="small" placeholder="请选择" />
      {/* 受控 */}
      <Cascader style={itemStyle} options={options} onChange={onChange} value={value} size="medium" clearable />
      {/* 受控 */}
      <Cascader style={itemStyle} options={options} onChange={onChange} value={value} size="large" clearable />
    </Space>
  );
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：输入过滤已选项。在有特定诉求的业务场景时使用。默认过滤文本。
                  代码示例：import React, { useState } from 'react';
import { Cascader, Space } from 'tdesign-react';

export default function Example() {
  const [value1, setValue1] = useState('');
  const [value2, setValue2] = useState(['1.1']);
  const options = [
    {
      label: '当选项一数据展示文本过长时',
      value: '1',
      children: [
        {
          label: '子选项一',
          value: '1.1',
        },
        {
          label: '子选项二',
          value: '1.2',
        },
        {
          label: '当选项数据展示文本过长时',
          value: '1.3',
        },
      ],
    },
    {
      label: '选项二',
      value: '2',
      children: [
        {
          label: '子选项一',
          value: '2.1',
        },
        {
          label: '当选项数据展示文本过长时',
          value: '2.2',
        },
      ],
    },
  ];
  const onChange1 = (value) => {
    setValue1(value);
  };
  const onChange2 = (value) => {
    setValue2(value);
  };
  return (
    <Space direction="vertical">
      <Cascader options={options} value={value1} onChange={onChange1} filterable />
      <Cascader options={options} value={value2} multiple onChange={onChange2} filterable />
    </Space>
  );
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：提供禁用状态的级联选择器。
                  代码示例：import React, { useState } from 'react';
import { Cascader, Space } from 'tdesign-react';

export default function Example() {
  const value1 = '1.1';
  const value2 = ['1.1'];
  const [options] = useState([
    {
      label: '选项一',
      value: '1',
      children: [
        {
          label: '子选项一',
          value: '1.1',
        },
        {
          label: '子选项二',
          value: '1.2',
        },
        {
          label: '子选项三',
          value: '1.3',
        },
      ],
    },
    {
      label: '选项二',
      value: '2',
      children: [
        {
          label: '子选项一',
          value: '2.1',
        },
        {
          label: '子选项二',
          value: '2.2',
        },
      ],
    },
  ]);
  return (
    <Space direction="vertical">
      <Cascader options={options} value={value1} disabled />
      <Cascader options={options} value={value2} disabled multiple />
    </Space>
  );
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：可以仅在输入框中显示选中项最后一级的标签，而不是选中项所在的完整路径。
                  代码示例：import React, { useState } from 'react';
import { Cascader, Space } from 'tdesign-react';

export default function Example() {
  const [value1, setValue1] = useState('');
  const [value2, setValue2] = useState([]);
  const options = [
    {
      label: '选项一',
      value: '1',
      children: [
        {
          label: '子选项一',
          value: '1.1',
        },
        {
          label: '子选项二',
          value: '1.2',
        },
        {
          label: '子选项三',
          value: '1.3',
        },
      ],
    },
    {
      label: '选项二',
      value: '2',
      children: [
        {
          label: '子选项一',
          value: '2.1',
        },
        {
          label: '子选项二',
          value: '2.2',
        },
      ],
    },
  ];
  const onChange1 = (value) => {
    setValue1(value);
  };
  const onChange2 = (value) => {
    setValue2(value);
  };
  return (
    <Space direction="vertical">
      <Cascader options={options} value={value1} showAllLevels={false} onChange={onChange1} />
      <Cascader options={options} value={value2} showAllLevels={false} multiple onChange={onChange2} />
    </Space>
  );
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：启用该功能后，可以选择任意一级选项。
                  代码示例：import React, { useState } from 'react';
import { Cascader, Space } from 'tdesign-react';

export default function Example() {
  const [value1, setValue1] = useState('1.2.2');
  const [value2, setValue2] = useState(['1.1.2.1', '2']);
  const options = [
    {
      value: '1',
      label: '1',
      children: [
        {
          value: '1.1',
          label: '1.1',
          children: [
            {
              value: '1.1.1',
              label: '1.1.1',
              children: [
                {
                  value: '1.1.1.1',
                  label: '1.1.1.1',
                },
                {
                  value: '1.1.1.2',
                  label: '1.1.1.2',
                },
              ],
            },
            {
              value: '1.1.2',
              label: '1.1.2',
              children: [
                {
                  value: '1.1.2.1',
                  label: '1.1.2.1',
                },
                {
                  value: '1.1.2.2',
                  label: '1.1.2.2',
                },
              ],
            },
          ],
        },
        {
          value: '1.2',
          label: '1.2',
          children: [
            {
              value: '1.2.1',
              label: '1.2.1',
              children: [
                {
                  value: '1.2.1.1',
                  label: '1.2.1.1',
                },
                {
                  value: '1.2.1.2',
                  label: '1.2.1.2',
                },
              ],
            },
            {
              value: '1.2.2',
              label: '1.2.2',
              children: [
                {
                  value: '1.2.2.1',
                  label: '1.2.2.1',
                },
                {
                  value: '1.2.2.2',
                  label: '1.2.2.2',
                },
              ],
            },
          ],
        },
      ],
    },
    {
      value: '2',
      label: '2',
      children: [
        {
          value: '2.1',
          label: '2.1',
        },
        {
          value: '2.2',
          label: '2.2',
        },
      ],
    },
  ];
  const onChange1 = (value) => {
    setValue1(value);
  };
  const onChange2 = (value) => {
    setValue2(value);
  };
  return (
    <Space direction="vertical">
      <Cascader options={options} value={value1} onChange={onChange1} checkStrictly />
      <Cascader options={options} value={value2} onChange={onChange2} checkStrictly multiple />
    </Space>
  );
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：单选情况下，选中后value是一维数组，如：['1','1.1']多选情况下，选中后value是二维数组，如：[['1','1.1'],['1','1.2']]
                  代码示例：import React, { useState } from 'react';
import { Cascader, Space } from 'tdesign-react';

export default function Example() {
  const [value1, setValue1] = useState(['1', '1.1']);
  const [value2, setValue2] = useState([
    ['1', '1.1'],
    ['1', '1.2'],
  ]);
  const options = [
    {
      label: '选项一',
      value: '1',
      children: [
        {
          label: '子选项一',
          value: '1.1',
        },
        {
          label: '子选项二',
          value: '1.2',
        },
        {
          label: '子选项三',
          value: '1.3',
        },
      ],
    },
    {
      label: '选项二',
      value: '2',
      children: [
        {
          label: '子选项一',
          value: '2.1',
        },
        {
          label: '子选项二',
          value: '2.2',
        },
      ],
    },
  ];
  const onChange1 = (value) => {
    setValue1(value);
  };
  const onChange2 = (value) => {
    setValue2(value);
  };
  return (
    <Space direction="vertical">
      {JSON.stringify(value1)}
      <Cascader options={options} value={value1} onChange={onChange1} valueType="full" />
      {JSON.stringify(value2)}
      <Cascader options={options} value={value2} onChange={onChange2} valueType="full" multiple />
    </Space>
  );
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：只在多选条件下生效。onlyLeaft 表示无论什么情况，选中值仅呈现叶子节点、parentFirst 表示当子节点全部选中时，仅父节点在选中值里面、all 表示父节点和子节点全部会出现在选中值里面。
                  代码示例：import React, { useState } from 'react';
import { Cascader, Space } from 'tdesign-react';

export default function Example() {
  const [value1, setValue1] = useState([]);
  const [value2, setValue2] = useState([]);
  const [value3, setValue3] = useState([]);
  const options = [
    {
      label: '选项一',
      value: '1',
      children: [
        {
          label: '子选项一',
          value: '1.1',
        },
        {
          label: '子选项二',
          value: '1.2',
        },
        {
          label: '子选项三',
          value: '1.3',
        },
      ],
    },
    {
      label: '选项二',
      value: '2',
      children: [
        {
          label: '子选项一',
          value: '2.1',
        },
        {
          label: '子选项二',
          value: '2.2',
        },
      ],
    },
  ];
  const onChange1 = (value) => {
    setValue1(value);
  };
  const onChange2 = (value) => {
    setValue2(value);
  };
  const onChange3 = (value) => {
    setValue3(value);
  };
  return (
    <Space direction="vertical">
      <Cascader
        options={options}
        value={value1}
        onChange={onChange1}
        multiple
        valueMode="onlyLeaf"
        popupProps={{
          overlayStyle: {
            fontWeight: 'normal',
          },
          overlayInnerStyle: {
            fontWeight: 'normal',
          },
          overlayClassName: 'cascader-custom-overlay-class',
          overlayInnerClassName: 'cascader-custom-overlay-inner-class',
        }}
      />
      <Cascader options={options} value={value2} onChange={onChange2} multiple valueMode="parentFirst" />
      <Cascader options={options} value={value3} onChange={onChange3} multiple valueMode="all" />
    </Space>
  );
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：可以自定义输入框中显示的选中项内容展示
                  代码示例：import React from 'react';
import { Space, Cascader, Tag } from 'tdesign-react';

const SingleValueDisplay = ({ value, selectedOptions }) =>
  value ? (
    <div>
      <img
        src={selectedOptions?.[0]?.avatar}
        style={{
          width: '16px',
          height: '16px',
          marginTop: '2px',
          verticalAlign: '-4px',
          marginRight: '4px',
        }}
      />
      <span>{selectedOptions?.[0]?.label}</span>
      <span>({value})</span>
    </div>
  ) : null;
const MultipleValueDisplay = ({ selectedOptions, onClose }) =>
  Array.isArray(selectedOptions) && selectedOptions.length
    ? selectedOptions.map((option, index) => (
        <Tag key={option.value} closable onClose={() => onClose(index)}>
          <img
            src={option.avatar}
            style={{
              width: '16px',
              height: '16px',
              marginTop: '2px',
              verticalAlign: '-4px',
              marginRight: '4px',
            }}
          />
          <span>{option.label}</span>
          <span>({option.value})</span>
        </Tag>
      ))
    : null;
export default function Example() {
  const [value1, setValue1] = React.useState('2.2');
  const [value2, setValue2] = React.useState(['1.3', '2.1', '2.2']);
  const AVATAR = 'https://tdesign.gtimg.com/site/avatar.jpg';
  const optionsData = [
    {
      label: '选项一',
      value: '1',
      children: [
        {
          label: '子选项一',
          value: '1.1',
          avatar: AVATAR,
        },
        {
          label: '子选项二',
          value: '1.2',
          avatar: AVATAR,
        },
        {
          label: '子选项三',
          value: '1.3',
          avatar: AVATAR,
        },
      ],
    },
    {
      label: '选项二',
      value: '2',
      children: [
        {
          label: '子选项一',
          value: '2.1',
          avatar: AVATAR,
        },
        {
          label: '子选项二',
          value: '2.2',
          avatar: AVATAR,
        },
      ],
    },
  ];
  return (
    <Space direction="vertical">
      <Cascader
        value={value1}
        label="单选："
        options={optionsData}
        valueDisplay={SingleValueDisplay}
        onChange={(val) => setValue1(val)}
        clearable
      ></Cascader>

      <Cascader
        value={value2}
        label="多选："
        options={optionsData}
        valueDisplay={MultipleValueDisplay}
        onChange={(val) => setValue2(val)}
        clearable
        multiple
        style={{
          width: '500px',
        }}
      ></Cascader>
    </Space>
  );
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：可通过不同的触发方式来加载子菜单。
                  代码示例：import React, { useState } from 'react';
import { Cascader, Space } from 'tdesign-react';

export default function Example() {
  const [value, setValue] = useState('');
  const options = [
    {
      label: '选项一',
      value: '1',
      children: [
        {
          label: '子选项一',
          value: '1.1',
        },
        {
          label: '子选项二',
          value: '1.2',
        },
        {
          label: '子选项三',
          value: '1.3',
        },
      ],
    },
    {
      label: '选项二',
      value: '2',
      children: [
        {
          label: '子选项一',
          value: '2.1',
        },
        {
          label: '子选项二',
          value: '2.2',
        },
      ],
    },
  ];
  const onChange = (value) => {
    setValue(value);
  };
  return (
    <Space direction="vertical">
      <Cascader options={options} value={value} trigger="click" onChange={onChange} />
      <Cascader options={options} value={value} trigger="hover" onChange={onChange} />
    </Space>
  );
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：数据文本展示过长时，使用浏览器 title 展示过长文案。
                  代码示例：import React, { useState } from 'react';
import { Cascader } from 'tdesign-react';

export default function Example() {
  const [value1, setValue1] = useState('');
  const options = [
    {
      label: '当选项一数据展示文本过长时',
      value: '1',
      children: [
        {
          label: '子选项一',
          value: '1.1',
        },
        {
          label: '子选项二',
          value: '1.2',
        },
        {
          label: '当选项数据展示文本过长时',
          value: '1.3',
        },
      ],
    },
    {
      label: '选项二',
      value: '2',
      children: [
        {
          label: '子选项一',
          value: '2.1',
        },
        {
          label: '当选项数据展示文本过长时',
          value: '2.2',
        },
      ],
    },
  ];
  const onChange1 = (value) => {
    setValue1(value);
  };
  return <Cascader options={options} value={value1} onChange={onChange1} filterable />;
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：限制多选选择器的最大可选数目。通常在需要限制多选可选数目时使用。
                  代码示例：import React, { useState } from 'react';
import { Cascader } from 'tdesign-react';

export default function Example() {
  const [value1, setValue1] = useState([]);
  const options = [
    {
      label: '选项一',
      value: '1',
      children: [
        {
          label: '子选项一',
          value: '1.1',
        },
        {
          label: '子选项二',
          value: '1.2',
        },
        {
          label: '子选项三',
          value: '1.3',
        },
      ],
    },
    {
      label: '选项二',
      value: '2',
      children: [
        {
          label: '子选项一',
          value: '2.1',
        },
        {
          label: '子选项二',
          value: '2.2',
        },
      ],
    },
  ];
  const onChange1 = (value) => {
    setValue1(value);
  };
  return <Cascader options={options} value={value1} max={3} onChange={onChange1} multiple />;
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：使用 options 配置下拉选项时，如果数据字段不是 label 和 value，可以使用 keys 定义别名。
                  代码示例：import React, { useState } from 'react';
import { Cascader, Space } from 'tdesign-react';

export default function Example() {
  const [value1, setValue1] = useState('');
  const [value2, setValue2] = useState([]);
  const options = [
    {
      name: '选项一',
      code: '1',
      items: [
        {
          name: '子选项一',
          code: '1.1',
        },
        {
          name: '子选项二',
          code: '1.2',
        },
        {
          name: '子选项三',
          code: '1.3',
        },
      ],
    },
    {
      name: '选项二',
      code: '2',
      items: [
        {
          name: '子选项一',
          code: '2.1',
        },
        {
          name: '子选项二',
          code: '2.2',
        },
      ],
    },
  ];
  const onChange1 = (value) => {
    setValue1(value);
  };
  const onChange2 = (value) => {
    setValue2(value);
  };
  const keys = {
    label: 'name',
    value: 'code',
    children: 'items',
  };
  return (
    <Space direction="vertical">
      <Cascader keys={keys} options={options} value={value1} onChange={onChange1} />
      <Cascader keys={keys} options={options} value={value2} multiple onChange={onChange2} />
    </Space>
  );
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：可根据需求定制选择器内容。在有复杂逻辑或有特定诉求的业务场景时使用。
                  代码示例：import React, { useState } from 'react';
import { Cascader, Space } from 'tdesign-react';

export default function Example() {
  const [singleValue, setSingleValue] = useState('');
  const [multipleValue, setMultipleValue] = useState([]);
  const options = [
    {
      label: '选项1',
      value: '1',
      children: true,
    },
    {
      label: '选项2',
      value: '2',
      children: true,
    },
  ];
  const onSingleChange = (value) => {
    setSingleValue(value);
  };
  const onMultipleChange = (value) => {
    setMultipleValue(value);
  };
  const load = (node) =>
    new Promise((resolve) => {
      setTimeout(() => {
        let nodes = [];
        if (node.getLevel() < 3) {
          nodes = [
            {
              label: `${node.label}.1`,
              children: node.getLevel() < 2,
            },
            {
              label: `${node.label}.2`,
              children: node.getLevel() < 2,
            },
          ];
        }
        resolve(nodes);
      }, 300);
    });
  return (
    <Space direction="vertical">
      <Cascader options={options} value={singleValue} onChange={onSingleChange} load={load} />
      <Cascader multiple options={options} value={multipleValue} onChange={onMultipleChange} load={load} />
    </Space>
  );
}

                  ===SPLIT===组建:<Cascader/>
                  使用描述：单独使用级联面板，用于与其他触发器结合
                  代码示例：import React, { useState } from 'react';
import { CascaderPanel, Space } from 'tdesign-react';

export default function Example() {
  const [value1, setValue1] = useState('');
  const [value2, setValue2] = useState([]);
  const options = [
    {
      label: '选项一',
      value: '1',
      children: [
        {
          label: '子选项一',
          value: '1.1',
        },
        {
          label: '子选项二',
          value: '1.2',
        },
        {
          label: '子选项三',
          value: '1.3',
        },
      ],
    },
    {
      label: '选项二',
      value: '2',
      children: [
        {
          label: '子选项一',
          value: '2.1',
        },
        {
          label: '子选项二',
          value: '2.2',
        },
      ],
    },
  ];
  const onChange1 = (value) => {
    setValue1(value);
  };
  const onChange2 = (value) => {
    setValue2(value);
  };
  const style = {
    border: '1px solid #eee',
    width: '100%',
  };
  return (
    <Space direction="vertical">
      <div style={style}>
        <CascaderPanel options={options} value={value1} showAllLevels={false} onChange={onChange1} />
      </div>
      <div style={style}>
        <CascaderPanel options={options} value={value2} showAllLevels={false} multiple onChange={onChange2} />
      </div>
    </Space>
  );
}

                  组建:<Checkbox/>
                  使用描述：最简单的多选框形式，常用于表单中数据多选的场景。
                  代码示例：import React, { useState } from 'react';
import { Checkbox, Space } from 'tdesign-react';

export default function CheckboxExample() {
  const [value, setValue] = useState(true);
  return (
    <Space>
      <Checkbox>未选中项</Checkbox>
      <Checkbox indeterminate>半选状态</Checkbox>
      <Checkbox checked={value} onChange={setValue}>
        选中项
      </Checkbox>
      <Checkbox disabled>未选禁用项</Checkbox>
      <Checkbox disabled defaultChecked>
        选中禁用项
      </Checkbox>
    </Space>
  );
}

                  ===SPLIT===组建:<Checkbox/>
                  使用描述：联动多选框指多选框与其他组件配合使用。
                  代码示例：import React, { useState } from 'react';
import { Checkbox, Button, Space } from 'tdesign-react';

export default function CheckboxControlledExample() {
  const [checked, setChecked] = useState(false);
  return (
    <Space direction="vertical">
      <Space>
        <Checkbox checked={checked}>腾讯云A</Checkbox>
        <Checkbox checked={checked}>腾讯云B</Checkbox>
        <Checkbox checked={checked}>腾讯云C</Checkbox>
      </Space>

      <Space>
        <Button onClick={() => setChecked(false)}>重置</Button>
        <Button
          style={{
            marginLeft: 16,
          }}
          onClick={() => setChecked(true)}
        >
          全选
        </Button>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Checkbox/>
                  使用描述：将多选框按一定属性组合使用的多选框组。
                  代码示例：import React, { useState } from 'react';
import { Checkbox, Space } from 'tdesign-react';

const options = [
  {
    value: '北京',
    label: '北京',
  },
  {
    value: '上海',
    label: '上海',
  },
  {
    value: '广州',
    label: '广州',
  },
  {
    label: '全选',
    checkAll: true,
  },
];
export default function CheckboxExample() {
  const [disabled, setDisabled] = useState(false);
  const [city, setCity] = useState(['北京']);
  return (
    <Space direction="vertical">
      <div>选中值: {city.join('、')}</div>
      <div>
        <Checkbox checked={disabled} onChange={(value) => setDisabled(value)}>
          禁用全部
        </Checkbox>
      </div>

      <Checkbox.Group
        disabled={disabled}
        value={city}
        onChange={(value) => {
          setCity(value);
        }}
        options={options}
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Checkbox/>
                  使用描述：多选框支持受控和非受控使用方式。
                  代码示例：import React, { useState } from 'react';
import { Checkbox, Space } from 'tdesign-react';

export default function CheckboxExample() {
  const [value, setValue] = useState(false);
  return (
    <Space>
      <Checkbox checked={value} onChange={setValue}>
        受控属性
      </Checkbox>
      <Checkbox defaultChecked={true}>非受控属性</Checkbox>
    </Space>
  );
}

                  ===SPLIT===组建:<Checkbox/>
                  使用描述：最多选中的数量 
                  代码示例：import React, { useState } from 'react';
import { Checkbox, InputNumber, Space } from 'tdesign-react';

const options = [
  {
    value: '北京',
    label: '北京',
  },
  {
    value: '上海',
    label: '上海',
  },
  {
    value: '广州',
    label: '广州',
  },
  {
    value: '深圳',
    label: '深圳',
  },
];
export default function CheckboxExample() {
  const [city, setCity] = useState(['北京']);
  const [max, setMax] = useState(1);
  return (
    <Space direction="vertical">
      <div>
        最多可选:{' '}
        <InputNumber
          value={max}
          max={3}
          min={1}
          onChange={(value) => {
            setMax(value);
          }}
        />
      </div>
      <div>选中值: {city.length ? city.join('、') : '无'}</div>

      <Checkbox.Group max={max} value={city} onChange={(value) => setCity(value)}>
        {options.map((item) => (
          <Checkbox key={item.value} value={item.value}>
            {item.label}
          </Checkbox>
        ))}
      </Checkbox.Group>
    </Space>
  );
}

                  组建:<ColorPicker/>
                  使用描述：没有触发器，直接显示颜色选择器面板。
                  代码示例：import React, { useState } from 'react';
import { ColorPickerPanel } from 'tdesign-react';

export default function PanelExample() {
  const [recentColors, setRecentColors] = useState([]);
  const handleChange = (value, context) => {
    console.log('handleChange', value, context);
  };
  const handlePaletteChange = (context) => {
    console.log('色相面板改变', context);
  };
  const handleRecentColorsChange = (value) => {
    console.log('最近使用颜色改变', value);
    setRecentColors(value);
  };
  return (
    <ColorPickerPanel
      onChange={handleChange}
      onPaletteBarChange={handlePaletteChange}
      onRecentColorsChange={handleRecentColorsChange}
      recentColors={recentColors}
      defaultValue="#0052d9"
      format="HEX"
      popupProps={{
        overlayStyle: {
          fontWeight: 'normal',
        },
        overlayInnerStyle: {
          fontWeight: 'normal',
        },
        overlayClassName: 'color-picker-panel-custom-overlay-class',
        overlayInnerClassName: 'color-picker-panel-custom-overlay-inner-class',
      }}
    />
  );
}

                  ===SPLIT===组建:<ColorPicker/>
                  使用描述：通过触发器触发显示选择器面板，透传全部属性到面板选择器组件。
                  代码示例：import React from 'react';
import { ColorPicker } from 'tdesign-react';

export default function PanelExample() {
  return <ColorPicker defaultValue={'#0052d9'} showPrimaryColorPreview={false} format="HEX" />;
}

                  ===SPLIT===组建:<ColorPicker/>
                  使用描述：支持单色模式、线性渐变两种颜色模式选择，可单独一种模式使用，也可同时两种模式切换。使用 colorModes 进行配置。
                  代码示例：import React from 'react';
import { ColorPicker, Space } from 'tdesign-react';

export default function ColorMode() {
  const color1 = 'rgba(0, 82, 217, 1)';
  const color2 = '#0052d9';
  const color3 = 'linear-gradient(45deg, #4facfe 0%, #00f2fe 100%)';
  return (
    <Space breakLine>
      <div>
        <h5
          style={{
            marginBottom: 10,
            fontWeight: 'normal',
          }}
        >
          默认（单色 + 线性渐变）
        </h5>
        <ColorPicker defaultValue={color1} format="CSS" />
      </div>
      <div>
        <h5
          style={{
            marginBottom: 10,
            fontWeight: 'normal',
          }}
        >
          仅单色模式
        </h5>
        <ColorPicker defaultValue={color2} format="HEX" colorModes={['monochrome']} />
      </div>
      <div
        style={{
          width: '100%',
        }}
      ></div>
      <div>
        <h5
          style={{
            marginBottom: 10,
            fontWeight: 'normal',
          }}
        >
          仅线性渐变模式
        </h5>
        <ColorPicker defaultValue={color3} format="CSS" colorModes={['linear-gradient']} />
      </div>
    </Space>
  );
}

                  ===SPLIT===组建:<ColorPicker/>
                  使用描述：设置 enableAlpha=true 即可开启选择器的透明度设置。
                  代码示例：import React, { useState } from 'react';
import { ColorPickerPanel } from 'tdesign-react';

export default function EnableAlpha() {
  const [value, setValue] = useState('#0052D9CC');
  const handleChange = (value) => {
    setValue(value);
  };
  return <ColorPickerPanel enableAlpha value={value} format="HEX" onChange={handleChange} />;
}

                  ===SPLIT===组建:<ColorPicker/>
                  使用描述：可以通过 swatchColors 配置系统预设颜色，值为 null 或 [] 则不显示系统色。
                  代码示例：import React from 'react';
import { ColorPickerPanel, Space } from 'tdesign-react';

export default function SwatchColor() {
  const color = '#0052d9';
  const systemColors = ['red', 'green', 'yellow', 'blue', 'purple'];
  return (
    <Space>
      <div>
        <h6
          style={{
            marginBottom: 10,
          }}
        >
          自定义系统色
        </h6>
        <ColorPickerPanel defaultValue={color} swatchColors={systemColors} />
      </div>
      <div>
        <h6
          style={{
            marginBottom: 10,
          }}
        >
          完全不显示系统色
        </h6>
        <ColorPickerPanel defaultValue={color} swatchColors={null} />
      </div>
    </Space>
  );
}

                  ===SPLIT===组建:<ColorPicker/>
                  使用描述：可以通过 recentColors 配置最近使用的颜色，值为 [] 表示以组件内部的“最近使用颜色”为准，值长度大于 0 则以该值为准显示“最近使用颜色”。值为 null 则完全不显示“最近使用颜色”。
                  代码示例：import React, { useState } from 'react';
import { ColorPickerPanel, Space } from 'tdesign-react';

export default function RecentColor() {
  const color = '#0052d9';
  const [recentColors, setRecentColors] = useState([
    '#f00',
    '#008000',
    '#ffff00',
    '#0000ff',
    '#800080',
    'linear-gradient(to right, #fa709a 0%, #fee140 100%)',
    'linear-gradient(45deg, #eea2a2 0%, #bbc1bf 19%, #57c6e1 42%, #b49fda 79%, #7ac5d8 100%)',
    'linear-gradient(120deg, #fcc5e4 0%, #fda34b 15%, #ff7882 35%, #c8699e 52%, #7046aa 71%, #0c1db8 87%, #020f75 100%)',
  ]);
  return (
    <Space>
      <div>
        <h6
          style={{
            marginBottom: 10,
          }}
        >
          预设最近使用色
        </h6>
        <ColorPickerPanel defaultValue={color} recentColors={recentColors} onRecentColorsChange={setRecentColors} />
      </div>
      <div>
        <h6
          style={{
            marginBottom: 10,
          }}
        >
          完全不显示最近使用色
        </h6>
        <ColorPickerPanel defaultValue={color} recentColors={null} />
      </div>
    </Space>
  );
}

                  ===SPLIT===组建:<ColorPicker/>
                  使用描述：禁用状态的颜色选择器 
                  代码示例：import React from 'react';
import { ColorPicker } from 'tdesign-react';

export default function StatusDisabled() {
  const color = '#0052d9';
  return <ColorPicker defaultValue={color} disabled />;
}

                  ===SPLIT===组建:<ColorPicker/>
                  使用描述：只读状态的颜色选择器 
                  代码示例：import React from 'react';
import { ColorPickerPanel } from 'tdesign-react';

export default function StatusReadonly() {
  const color = '#0052d9';
  return <ColorPickerPanel defaultValue={color} disabled />;
}

                  组建:<DatePicker/>
                  使用描述：用于年份的选择。用户仅需输入年份信息时使用，常用于如年账单等按年记录数据的查询场景。
                  代码示例：import React from 'react';
import { DatePicker, DateRangePicker, Space } from 'tdesign-react';

export default function YearDatePicker() {
  const handleChange = (value) => {
    console.log(value);
  };
  const handleRangeChange = (value) => {
    console.log(value);
  };
  return (
    <Space direction="vertical">
      <DatePicker mode="year" clearable allowInput onChange={handleChange} />
      <DateRangePicker mode="year" clearable allowInput onChange={handleRangeChange} />
    </Space>
  );
}

                  ===SPLIT===组建:<DatePicker/>
                  使用描述：用于月份的选择。用户仅需输入月份信息时使用。
                  代码示例：import React from 'react';
import { DatePicker, DateRangePicker, Space } from 'tdesign-react';

export default function YearDatePicker() {
  const handleChange = (value) => {
    console.log(value);
  };
  const handleRangeChange = (value) => {
    console.log(value);
  };
  return (
    <Space direction="vertical">
      <DatePicker mode="month" clearable allowInput onChange={handleChange} />
      <DateRangePicker mode="month" clearable allowInput onChange={handleRangeChange} />
    </Space>
  );
}

                  ===SPLIT===组建:<DatePicker/>
                  使用描述：用于季度的选择。用户仅需输入季度信息时使用。
                  代码示例：import React from 'react';
import { DatePicker, DateRangePicker, Space } from 'tdesign-react';

export default function YearDatePicker() {
  const handleChange = (value) => {
    console.log(value);
  };
  const handleRangeChange = (value) => {
    console.log(value);
  };
  return (
    <Space direction="vertical">
      <DatePicker mode="quarter" clearable allowInput onChange={handleChange} />
      <DateRangePicker mode="quarter" clearable allowInput onChange={handleRangeChange} />
    </Space>
  );
}

                  ===SPLIT===组建:<DatePicker/>
                  使用描述：用于周的选择。用户仅需输入年份 + 周信息时使用。
                  代码示例：import React from 'react';
import { DatePicker, DateRangePicker, Space } from 'tdesign-react';

export default function YearDatePicker() {
  const handleChange = (value) => {
    console.log(value);
  };
  const handleRangeChange = (value) => {
    console.log(value);
  };
  return (
    <Space direction="vertical">
      <DatePicker mode="week" clearable allowInput onChange={handleChange} />
      <DateRangePicker mode="week" clearable allowInput onChange={handleRangeChange} />
    </Space>
  );
}

                  ===SPLIT===组建:<DatePicker/>
                  使用描述：用于具体日期的选择。用户仅需要输入非常具体的日期信息时使用。
                  代码示例：import React from 'react';
import { DatePicker, Space } from 'tdesign-react';

export default function YearDatePicker() {
  const handleChange = (value, context) => {
    console.log('onChange:', value, context);
    console.log('timestamp', context.dayjsValue.valueOf());
    console.log('YYYYMMDD', context.dayjsValue.format('YYYYMMDD'));
  };
  return (
    <Space direction="vertical">
      <DatePicker onChange={handleChange} />
      <DatePicker placeholder="可清除、可输入的日期选择器" onChange={handleChange} clearable allowInput />
    </Space>
  );
}

                  ===SPLIT===组建:<DatePicker/>
                  使用描述：用于日期多选的选择。
                  代码示例：import React, { useState } from 'react';
import { DatePicker, Space } from 'tdesign-react';

export default function YearDatePicker() {
  const [dateValue, setDateValue] = useState(['2024-10-01', '2024-10-24']);
  const [weekValue, setWeekValue] = useState(['2024-50周', '2024-51周']);
  const [yearValue, setYearValue] = useState(['2022', '2023', '2024']);
  const handleDateChange = (value, context) => {
    console.log('onChange:', value, context);
    setDateValue(value);
  };
  const handleWeekChange = (value, context) => {
    console.log('onChange:', value, context);
    setWeekValue(value);
  };
  const handleYearChange = (value, context) => {
    console.log('onChange:', value, context);
    setYearValue(value);
  };
  return (
    <Space direction="vertical">
      <DatePicker
        value={dateValue}
        placeholder="可清除、可输入的日期选择器"
        onChange={handleDateChange}
        clearable
        multiple
      />
      <DatePicker
        value={weekValue}
        placeholder="可清除、可输入的日期选择器"
        onChange={handleWeekChange}
        clearable
        multiple
        mode="week"
      />
      <DatePicker
        value={yearValue}
        placeholder="可清除、可输入的日期选择器"
        onChange={handleYearChange}
        clearable
        multiple
        mode="year"
      />
    </Space>
  );
}

                  ===SPLIT===组建:<DatePicker/>
                  使用描述：用于日期和时间相关联的选择。用户需要输入包含时间在内的日期时使用。
                  代码示例：import React, { useState } from 'react';
import { DatePicker, Space } from 'tdesign-react';

export default function YearDatePicker() {
  const [value, setValue] = useState('2022-02-02 12:11:11');
  const [value2, setValue2] = useState('2022-02-02 am 12:11:11');
  const handleChange = (value) => {
    console.log(value);
    setValue(value);
  };
  return (
    <Space direction="vertical">
      <DatePicker
        enableTimePicker
        value={value}
        onChange={handleChange}
        allowInput
        clearable
        popupProps={{
          overlayStyle: {
            fontWeight: 'normal',
          },
          overlayInnerStyle: {
            fontWeight: 'normal',
          },
          overlayClassName: 'date-picker-custom-overlay-class',
          overlayInnerClassName: 'date-picker-custom-overlay-inner-class',
        }}
      />

      <DatePicker
        enableTimePicker
        value={value2}
        onChange={(v) => setValue2(v)}
        allowInput
        clearable
        format="YYYY-MM-DD a hh:mm:ss"
      />
    </Space>
  );
}

                  ===SPLIT===组建:<DatePicker/>
                  使用描述：用于某一段日期的选择。用户需要输入一段日期区间时使用。
                  代码示例：import React from 'react';
import { DateRangePicker, Space } from 'tdesign-react';

export default function YearDatePicker() {
  // 选中日期时的事件
  const onPick = (value, context) => {
    console.log('onPick:', value, context);
  };
  const onChange = (value, context) => {
    console.log('onChange:', value, context);
    console.log(
      'timestamp',
      context.dayjsValue.map((d) => d.valueOf()),
    );
    console.log(
      'YYYYMMDD',
      context.dayjsValue.map((d) => d.format('YYYYMMDD')),
    );
  };
  return (
    <Space direction="vertical">
      <DateRangePicker onPick={onPick} allowInput clearable onChange={onChange} />
      <DateRangePicker enableTimePicker allowInput clearable onPick={onPick} onChange={onChange} />
    </Space>
  );
}

                  ===SPLIT===组建:<DatePicker/>
                  使用描述：具有可提前设置的时间标签。当日期信息具有规律性，需要点击标签快捷输入时。
                  代码示例：import React, { useState } from 'react';
import dayjs from 'dayjs';
import { DateRangePicker, Space } from 'tdesign-react';

export default function YearDatePicker() {
  const [presets] = useState({
    最近7天: [dayjs().subtract(6, 'day').toDate(), dayjs().toDate()],
    最近3天: [dayjs().subtract(2, 'day').toDate(), dayjs().toDate()],
    今天: [dayjs().toDate(), dayjs().toDate()],
  });
  const [range1, setRange1] = useState(['2022-01-01', '2022-08-08']);
  const [range2, setRange2] = useState(['2022-01-01 11:11:11', '2022-08-08 12:12:12']);
  return (
    <Space direction="vertical">
      <DateRangePicker value={range1} presets={presets} onChange={(val) => setRange1(val)} />

      <DateRangePicker value={range2} presets={presets} onChange={(val) => setRange2(val)} enableTimePicker />
    </Space>
  );
}

                  ===SPLIT===组建:<DatePicker/>
                  使用描述：可将不支持用户选择的日期禁止点击。
                  代码示例：import React from 'react';
import dayjs from 'dayjs';
import { DatePicker, DateRangePicker, Space } from 'tdesign-react';

export default function YearDatePicker() {
  const disableTime = (time) => {
    if (dayjs(time).format('YYYY-MM-DD') === dayjs().format('YYYY-MM-DD')) {
      return {
        hour: [0, 1, 2, 3, 4, 5, 6],
      };
    }
    return {};
  };
  return (
    <Space direction="vertical">
      <DatePicker
        placeholder="禁用昨天、前天"
        disableDate={[dayjs().subtract(1, 'day').format(), dayjs().subtract(2, 'day').format()]}
      />
      <DatePicker
        placeholder="明后三天禁用"
        disableDate={{
          from: dayjs().add(1, 'day').format(),
          to: dayjs().add(3, 'day').format(),
        }}
      />
      <DatePicker placeholder="禁用所有周六" disableDate={(date) => dayjs(date).day() === 6} />
      <DatePicker
        placeholder="禁用最近 3 天外的日期"
        disableDate={{
          before: dayjs().subtract(3, 'day').format(),
          after: dayjs().add(3, 'day').format(),
        }}
      />
      <DatePicker
        placeholder="禁用日期精确到时间"
        enableTimePicker
        disableDate={{
          before: dayjs().subtract(1, 'day').format(),
        }}
        disableTime={disableTime}
      />
      <DateRangePicker
        placeholder="禁用最近 5 天外的日期"
        disableDate={{
          before: dayjs().subtract(5, 'day').format(),
          after: dayjs().add(5, 'day').format(),
        }}
      />
    </Space>
  );
}

                  ===SPLIT===组建:<DatePicker/>
                  使用描述：可以通过 firstDayOfWeek 属性指定一周从星期几开始，仅在日期选择时(mode = date) 时有效，默认为 1 即从周一开始，如下可以设置为周日开始。
                  代码示例：import React, { useState } from 'react';
import { DatePicker, Radio, Space } from 'tdesign-react';

export default function YearDatePicker() {
  const [startWeek, setStartWeek] = useState(1);
  return (
    <Space direction="vertical">
      <Radio.Group variant="default-filled" value={startWeek} onChange={(value) => setStartWeek(value)}>
        {[1, 2, 3, 4, 5, 6, 7].map((i) => (
          <Radio.Button key={i} value={i}>
            {i}
          </Radio.Button>
        ))}
      </Radio.Group>

      <DatePicker firstDayOfWeek={startWeek} />
    </Space>
  );
}

                  ===SPLIT===组建:<DatePicker/>
                  使用描述：支持通过 prefixIcon 和 suffixIcon 自定义设置前缀和后缀图标。
                  代码示例：import React from 'react';
import { DatePicker, Space } from 'tdesign-react';
import { BrowseIcon, LockOnIcon } from 'tdesign-icons-react';

export default function YearDatePicker() {
  const handleChange = (value) => {
    console.log(value);
  };
  return (
    <Space>
      <DatePicker prefixIcon={<BrowseIcon />} suffixIcon={<LockOnIcon />} onChange={handleChange} />
    </Space>
  );
}

                  ===SPLIT===组建:<DatePicker/>
                  使用描述：支持 DatePickerPanel 和 DateRangePickerPanel 单独使用场景，可以自行组装日期选择器。
                  代码示例：import React from 'react';
import { DatePickerPanel, DateRangePickerPanel, Space } from 'tdesign-react';

export default function PanelExample() {
  const handleChange = (value) => {
    console.log('onChange', value);
  };
  const handleCellClick = (value) => {
    console.log('onCellClick', value);
  };
  const handleRangeChange = (value) => {
    console.log('onChange', value);
  };
  const handleRangeCellClick = (value) => {
    console.log('onCellClick', value);
  };
  return (
    <Space direction="vertical">
      <div
        style={{
          border: '1px solid var(--td-border-level-2-color)',
          width: 'fit-content',
          borderRadius: 3,
        }}
      >
        <DatePickerPanel onCellClick={handleCellClick} onChange={handleChange} />
      </div>
      <div
        style={{
          border: '1px solid var(--td-border-level-2-color)',
          width: 'fit-content',
          borderRadius: 3,
        }}
      >
        <DatePickerPanel enableTimePicker onCellClick={handleCellClick} onChange={handleChange} />
      </div>

      <div
        style={{
          border: '1px solid var(--td-border-level-2-color)',
          width: 'fit-content',
          borderRadius: 3,
        }}
      >
        <DateRangePickerPanel onCellClick={handleRangeCellClick} onChange={handleRangeChange} />
      </div>
      <div
        style={{
          border: '1px solid var(--td-border-level-2-color)',
          width: 'fit-content',
          borderRadius: 3,
        }}
      >
        <DateRangePickerPanel enableTimePicker onCellClick={handleRangeCellClick} onChange={handleRangeChange} />
      </div>
    </Space>
  );
}

                  ===SPLIT===组建:<DatePicker/>
                  使用描述：不限制日期区间选择范围的选择器 
                  代码示例：import React from 'react';
import { DateRangePicker, Space } from 'tdesign-react';

export default function CancelRangeLimitDatePicker() {
  return (
    <Space direction="vertical">
      <DateRangePicker cancelRangeSelectLimit={true} clearable={true} />
    </Space>
  );
}

                  组建:<Form/>
                  使用描述：如果表单内存在提交按钮 <button type='submit'>，点击提交按钮时，会自动触发 submit 事件。如果表单内存在重置按钮 <button type='reset'>，点击重置按钮时，会自动触发 reset 事件。如果表单内不存在提交或重置按钮，您希望点击任意按钮进行提交和重置操作，则可以使用组件实例方法 submit 和 reset，详情请查阅 API 文档。
                  代码示例：import React from 'react';
import { Form, Input, Radio, Checkbox, Button, Switch, MessagePlugin, DatePicker, Tooltip, Space } from 'tdesign-react';

const { FormItem } = Form;
export default function BaseForm() {
  const [form] = Form.useForm();
  const name = Form.useWatch('name', form);
  const gender = Form.useWatch('gender', form);
  console.log('name', name);
  console.log('gender', gender);
  const onSubmit = (e) => {
    console.log(e);
    if (e.validateResult === true) {
      MessagePlugin.info('提交成功');
    }
  };
  const onReset = (e) => {
    console.log(e);
    MessagePlugin.info('重置成功');
  };
  const setMessage = () => {
    console.log(form);
    form.setFields([
      {
        name: 'name',
        status: 'error',
        validateMessage: {
          type: 'error',
          message: '输入有误',
        },
      },
      {
        name: 'birthday',
        status: 'warning',
        validateMessage: {
          type: 'warning',
          message: '时间有误',
        },
      },
    ]);
  };
  return (
    <Form form={form} onSubmit={onSubmit} onReset={onReset} colon labelWidth={100}>
      <FormItem label="姓名" name="name">
        <Input />
      </FormItem>
      <FormItem label="出生日期" name="birthday">
        <DatePicker mode="date" />
      </FormItem>
      <FormItem label="性别" name="gender">
        <Radio.Group>
          <Radio value="male">男性</Radio>
          <Radio value="female">女性</Radio>
        </Radio.Group>
      </FormItem>
      <FormItem shouldUpdate={(prev, next) => prev.gender !== next.gender}>
        {({ getFieldValue }) => {
          if (getFieldValue('gender') === 'female') {
            return (
              <FormItem label="动态选项2" name="bar">
                <Radio.Group>
                  <Radio value="2">选项三</Radio>
                  <Radio value="3">选项四</Radio>
                </Radio.Group>
              </FormItem>
            );
          }
          return (
            <FormItem label="动态选项1" name="foo">
              <Radio.Group>
                <Radio value="0">选项一</Radio>
                <Radio value="1">选项二</Radio>
              </Radio.Group>
            </FormItem>
          );
        }}
      </FormItem>
      <FormItem label="课程" name="course">
        <Checkbox.Group>
          <Checkbox value="la">加辣</Checkbox>
          <Checkbox value="ma">加麻</Checkbox>
          <Checkbox value="nocong">不要葱花</Checkbox>
        </Checkbox.Group>
      </FormItem>
      <FormItem label="状态" name="status" for="status">
        <Switch />
      </FormItem>
      <FormItem label="自定义内容" for="custom">
        <div
          style={{
            display: 'flex',
            gap: 8,
          }}
        >
          <FormItem name="custom">
            <Input />
          </FormItem>
          <Tooltip content="文字链提示信息">
            <Button variant="text">文字链</Button>
          </Tooltip>
        </div>
      </FormItem>
      <FormItem
        style={{
          marginLeft: 100,
        }}
      >
        <Space>
          <Button type="submit" theme="primary">
            提交
          </Button>
          <Button onClick={setMessage}>设置信息</Button>
          <Button type="reset" theme="default">
            重置
          </Button>
        </Space>
      </FormItem>
    </Form>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述：专门适用于登录页面的账号和密码输入的表单。
                  代码示例：import React from 'react';
import { Form, Input, Button, MessagePlugin } from 'tdesign-react';
import { DesktopIcon, LockOnIcon } from 'tdesign-icons-react';

const { FormItem } = Form;
export default function BaseForm() {
  const onSubmit = (e) => {
    console.log(e);
    if (e.validateResult === true) {
      MessagePlugin.info('提交成功');
    }
  };
  const onReset = (e) => {
    console.log(e);
    MessagePlugin.info('重置成功');
  };
  return (
    <div
      style={{
        width: 350,
      }}
    >
      <Form statusIcon={true} onSubmit={onSubmit} onReset={onReset} colon={true} labelWidth={0}>
        <FormItem name="account">
          <Input clearable={true} prefixIcon={<DesktopIcon />} placeholder="请输入账户名" />
        </FormItem>
        <FormItem name="password">
          <Input type="password" prefixIcon={<LockOnIcon />} clearable={true} placeholder="请输入密码" />
        </FormItem>
        <FormItem>
          <Button theme="primary" type="submit" block>
            登录
          </Button>
        </FormItem>
      </Form>
    </div>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述：根据具体目标和制约因素，选择最佳的标签对齐方式，默认对齐方式为右对齐。
                  代码示例：import React, { useState } from 'react';
import { Form, Radio, Input, Space } from 'tdesign-react';

const { FormItem } = Form;
export default function AlignForm() {
  const [labelAlign, setLabelAlign] = useState('right');
  return (
    <Space direction="vertical">
      <Radio.Group value={labelAlign} onChange={(value) => setLabelAlign(value)} variant="default-filled">
        <Radio.Button value="left">左对齐</Radio.Button>
        <Radio.Button value="right">右对齐</Radio.Button>
        <Radio.Button value="top">顶部对齐</Radio.Button>
      </Radio.Group>
      <Form labelAlign={labelAlign} labelWidth={80}>
        <FormItem label="名字" name="name">
          <Input />
        </FormItem>
        <FormItem label="密码" name="password">
          <Input />
        </FormItem>
      </Form>
    </Space>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述：不同布局类型的表单 
                  代码示例：import React, { useState } from 'react';
import { Form, Radio, Input, Space } from 'tdesign-react';

const { FormItem } = Form;
export default function LayoutForm() {
  const [layout, setLayout] = useState('inline');
  return (
    <Space direction="vertical">
      <div>
        <Radio.Group value={layout} onChange={(value) => setLayout(value)} variant="default-filled">
          <Radio.Button value="vertical">纵向布局</Radio.Button>
          <Radio.Button value="inline">行内布局</Radio.Button>
        </Radio.Group>
      </div>
      <Form layout={layout} labelWidth={60}>
        <FormItem label="名字" name="name">
          <Input />
        </FormItem>
        <FormItem label="密码" name="password">
          <Input />
        </FormItem>
      </Form>
    </Space>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述：第一种方式：使用 resetType 控制，值为 empty 表示重置表单为空，值为 initial 表示重置表单数据为初始值。示例：<Form resetType='initial' />。第二种方式：使用组件实例方法 reset 进行数据重置，具体参数参考 API 文档。示例一：reset({ type: 'initial' })，示例二：reset({ fields: ['name'] })。
                  代码示例：import React, { useState } from 'react';
import { Form, Input, Radio, Checkbox, Button, MessagePlugin, Popup, Space } from 'tdesign-react';

const { FormItem } = Form;
export default function BaseForm() {
  const [resetType, setResetType] = useState('initial');
  const onSubmit = ({ validateResult, firstError }) => {
    if (validateResult === true) {
      MessagePlugin.success('提交成功');
    } else {
      console.log('Errors: ', validateResult);
      MessagePlugin.warning(firstError);
    }
  };
  const onReset = (e) => {
    console.log(e);
    MessagePlugin.info('重置成功');
  };
  const courseOptions = [
    {
      label: '语文',
      value: '1',
    },
    {
      label: '数学',
      value: '2',
    },
    {
      label: '英语',
      value: '3',
    },
  ];
  return (
    <Space direction="vertical">
      <div>
        <Radio.Group value={resetType} onChange={(value) => setResetType(value)} variant="default-filled">
          <Radio.Button value="empty">重置为空</Radio.Button>
          <Radio.Button value="initial">
            <Popup content="改变表单数据后，点击重置按钮，观察数据重置情况"> 重置为初始值 </Popup>
          </Radio.Button>
        </Radio.Group>
      </div>

      <Form resetType={resetType} colon onReset={onReset} onSubmit={onSubmit}>
        <FormItem label="姓名" name="name" initialData="TDesign">
          <Input placeholder="请输入内容" />
        </FormItem>
        <FormItem label="手机号码" name="tel" initialData="12345678910">
          <Input placeholder="请输入内容" />
        </FormItem>
        <FormItem label="课程" name="course" initialData={['1']}>
          <Checkbox.Group options={courseOptions}></Checkbox.Group>
        </FormItem>
        <FormItem
          style={{
            marginLeft: 100,
          }}
        >
          <Button
            theme="primary"
            type="submit"
            style={{
              marginRight: 10,
            }}
          >
            提交
          </Button>
          <Button theme="default" variant="base" type="reset">
            重置
          </Button>
        </FormItem>
      </Form>
    </Space>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述：校验状态有：成功、失败、警告等状态，可使用 successBorder 控制是否显示校验成功后的绿色边框。使用 statusIcon 控制校验图标，FormItem.statusIcon 优先级大于 Form.statusIcon。值为 true 显示默认图标，默认图标有 成功、失败、警告 等，不同的状态图标不同。statusIcon 值为 false，不显示图标。statusIcon 值类型为渲染函数，则可以自定义右侧状态图标。
                  代码示例：import React, { useEffect } from 'react';
import { Form, Input, Button, MessagePlugin, Loading } from 'tdesign-react';
import { AddRectangleIcon, HelpCircleIcon } from 'tdesign-icons-react';

const { FormItem } = Form;
export default function BaseForm() {
  const onSubmit = (e) => {
    console.log(e);
    if (e.validateResult === true) {
      MessagePlugin.info('提交成功');
    }
  };
  const onReset = (e) => {
    console.log(e);
    MessagePlugin.info('重置成功');
  };
  const rules = {
    fail: [
      {
        required: true,
        message: '必填',
        type: 'error',
      },
    ],
    warning: [
      {
        required: true,
        message: '必填',
        type: 'warning',
      },
    ],
    success: [],
    failB: [
      {
        required: true,
        message: '必填',
        type: 'error',
      },
    ],
    warningB: [
      {
        required: true,
        type: 'warning',
      },
    ],
  };
  const form = React.useRef(null);
  useEffect(() => {
    form.current.validate();
  }, [form]);
  return (
    <Form ref={form} statusIcon={true} onSubmit={onSubmit} onReset={onReset} rules={rules}>
      <FormItem label="失败" help="校验不通过，请输入正确内容" name="fail">
        <Input />
      </FormItem>
      <FormItem
        label="警告"
        name="warning"
        rules={[
          {
            required: true,
            message: '必填',
            type: 'warning',
          },
        ]}
      >
        <Input />
      </FormItem>
      <FormItem label="成功" name="success">
        <Input />
      </FormItem>
      <FormItem label="失败" name="failB" statusIcon={false}>
        <Input placeholder="隐藏状态icon" />
      </FormItem>
      <FormItem label="警告" name="warningB">
        <Input />
      </FormItem>
      <FormItem
        label="加载中"
        name="loading"
        statusIcon={
          <Loading
            loading
            size="25px"
            style={{
              color: '#1890ff',
            }}
          />
        }
      >
        <Input placeholder="正在校验中，请稍等" />
      </FormItem>
      <FormItem
        label="新增"
        name="add"
        help="自定义新增icon"
        statusIcon={<AddRectangleIcon name="add-rectangle" size="25px" />}
      >
        <Input />
      </FormItem>
      <FormItem
        label="帮助"
        name="help"
        help="自定义帮助icon"
        statusIcon={<HelpCircleIcon name="help-circle" size="25px" />}
      >
        <Input />
      </FormItem>
      <FormItem
        style={{
          marginLeft: 100,
        }}
      >
        <Button
          theme="primary"
          type="submit"
          style={{
            marginRight: 10,
          }}
        >
          提交
        </Button>
        <Button type="reset">重置</Button>
      </FormItem>
    </Form>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述：表单内置的校验规则有：date / url / email / required / boolean / max / min / len / number / enum / idcard / telnumber / pattern 。其中 date / url / email 等校验规则参数参看：https://github.com/validatorjs/validator.js。各校验规则示例见 API 文档中的 FormRule。
                  代码示例：import React, { useRef } from 'react';
import { Form, Input, Radio, Checkbox, Button, MessagePlugin } from 'tdesign-react';
import { debounce } from 'lodash-es';

const { FormItem } = Form;
export default function BaseForm() {
  const [form] = Form.useForm();
  const onSubmit = (e) => {
    console.log(e);
    if (e.validateResult === true) {
      MessagePlugin.info('提交成功');
    }
  };
  const onReset = (e) => {
    console.log(e);
    MessagePlugin.info('重置成功');
  };
  const asyncValidate = (val) =>
    new Promise((resolve) => {
      setTimeout(() => {
        if (val === '123') {
          resolve(true);
        } else {
          resolve(false);
        }
      }, 1000);
    });
  const handleChange = useRef(
    debounce((value) => {
      console.log('value', value);
      form.validate({
        fields: ['password'],
        trigger: 'blur',
      });
    }, 500),
  ).current;
  return (
    <Form
      form={form}
      layout="vertical"
      onSubmit={onSubmit}
      labelWidth={100}
      onReset={onReset}
      scrollToFirstError="smooth"
    >
      <FormItem
        label="用户名"
        help="这里请填写用户名"
        name="account"
        initialData={'张三'}
        rules={[
          {
            whitespace: true,
            message: '姓名不能为空',
          },
          {
            required: true,
            message: '姓名必填',
            type: 'error',
          },
          {
            min: 2,
            message: '至少需要两个字',
            type: 'error',
          },
        ]}
      >
        <Input />
      </FormItem>
      <FormItem
        label="密码"
        help="这里请填写密码"
        name="password"
        rules={[
          {
            required: true,
            message: '密码必填',
            type: 'error',
          },
          {
            validator: asyncValidate,
            message: '密码错误',
            type: 'error',
            trigger: 'blur',
          },
        ]}
      >
        <Input onChange={handleChange} />
      </FormItem>
      <FormItem
        label="邮箱"
        name="email"
        rules={[
          {
            required: true,
            message: '格式必须为邮箱',
            type: 'warning',
          },
        ]}
      >
        <Input />
      </FormItem>
      <FormItem
        label="性别"
        name="gender"
        rules={[
          {
            required: true,
            message: '性别必填',
            type: 'warning',
          },
        ]}
      >
        <Radio.Group>
          <Radio value="male">男</Radio>
          <Radio value="femal">女</Radio>
        </Radio.Group>
      </FormItem>
      <FormItem
        label="课程"
        name="course"
        rules={[
          {
            required: true,
            message: '课程必填',
            type: 'warning',
          },
        ]}
      >
        <Checkbox.Group>
          <Checkbox value="1">语文</Checkbox>
          <Checkbox value="2">数学</Checkbox>
          <Checkbox value="3">英语</Checkbox>
          <Checkbox value="4">体育</Checkbox>
        </Checkbox.Group>
      </FormItem>
      <FormItem
        label="入学时间"
        name="date"
        rules={[
          {
            date: true,
            message: '日期格式有误',
          },
        ]}
      >
        <Input />
      </FormItem>
      <FormItem
        label="个人网站"
        name="content.url"
        rules={[
          {
            required: true,
            message: '个人网站必填',
            type: 'warning',
          },
          {
            url: {
              protocols: ['http', 'https', 'ftp'],
              require_protocol: true,
            },
            message: '请输入正确的个人主页',
          },
        ]}
      >
        <Input />
      </FormItem>
      <FormItem
        style={{
          marginLeft: 100,
        }}
      >
        <Button
          theme="primary"
          type="submit"
          style={{
            marginRight: 10,
          }}
        >
          提交
        </Button>
        <Button type="reset">重置</Button>
      </FormItem>
    </Form>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述：示例一：validator: (val) => { result: !!val, message: '该项必填', type: 'error' }。示例二：validator: (val) => new Promise((resolve) => resolve({ result: false, message: '校验未通过', type: 'warning' }))。如果是异步校验，必须返回所有情况的校验结果，不能只返回 resolve(false) 校验不通过的情况，还需要注意返回 resolve(true) 校验通过的情况。
                  代码示例：import React from 'react';
import { Form, Input, Button, MessagePlugin } from 'tdesign-react';

const { FormItem } = Form;
export default function BaseForm() {
  const form = React.useRef(null);
  const onSubmit = (e) => {
    console.log(e);
    if (e.validateResult === true) {
      MessagePlugin.info('提交成功');
    }
  };
  const onReset = (e) => {
    console.log(e);
    MessagePlugin.info('重置成功');
  };
  const resetValidate = () => {
    form.current.clearValidate();
  };

  // 自定义异步校验器
  const rePassword = (val) =>
    new Promise((resolve) => {
      const timer = setTimeout(() => {
        resolve(form.current.getFieldValue('password') === val);
        clearTimeout(timer);
      });
    });

  // 自定义异步校验器
  const validateName = (name) => {
    const names = ['张三', '李四', '王五'];
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(!names.includes(name));
      }, 1000);
    });
  };

  // 自定义校验器，不同的值输出不同的校验结果。支持异步校验（文案选自某密码重置站点，如有侵权，请联系我们删除）
  const passwordValidator = (val) => {
    if (!val || (val.length > 0 && val.length <= 2)) {
      return {
        result: false,
        message: '太简单了！再开动一下你的小脑筋吧！',
        type: 'error',
      };
    }
    if (val.length > 2 && val.length < 4) {
      return {
        result: false,
        message: '还差一点点，就是一个完美的密码了！',
        type: 'warning',
      };
    }
    return {
      result: true,
      message: '太强了，你确定自己记得住吗！',
      type: 'success',
    };
  };
  const rules = {
    account: [
      {
        required: true,
        message: '姓名必填',
        type: 'error',
      },
      {
        min: 2,
        message: '至少需要两个字',
        type: 'error',
      },
      {
        validator: validateName,
        message: '该用户名已存在',
        type: 'error',
        trigger: 'blur',
      },
    ],
    password: [
      {
        required: true,
        message: '密码必填',
        type: 'error',
      },
      // 不同的校验结果有不同的错误信息提醒，切错误信息类型不同
      {
        validator: passwordValidator,
      },
    ],
    rePassword: [
      // 自定义校验规则
      {
        required: true,
        message: '密码必填',
        type: 'error',
      },
      {
        validator: rePassword,
        message: '两次密码不一致',
      },
    ],
  };
  return (
    <Form ref={form} statusIcon={true} onSubmit={onSubmit} onReset={onReset} labelWidth={100} rules={rules}>
      <FormItem label="用户名" name="account">
        <Input />
      </FormItem>
      <FormItem label="密码" name="password" initialData="">
        <Input />
      </FormItem>
      <FormItem label="确认密码" name="rePassword" initialData="">
        <Input />
      </FormItem>
      <FormItem
        style={{
          marginLeft: 100,
        }}
      >
        <Button theme="primary" type="submit">
          提交
        </Button>
        <Button
          theme="default"
          type="reset"
          style={{
            margin: '0 12px',
          }}
        >
          重置
        </Button>
        <Button theme="default" onClick={resetValidate}>
          清除校验状态
        </Button>
      </FormItem>
    </Form>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述：在一些复杂的业务场景中，会涉及到自主控制校验结果的显示与否，此时使用实例方法 clearValidate 来清空校验结果。可以清空全部字段的校验结果，也可以清除部分字段的校验结果。
                  代码示例：import React from 'react';
import { Form, Input, Checkbox, Button, MessagePlugin, Radio, Select } from 'tdesign-react';

const { FormItem } = Form;
const rules = {
  account: [
    {
      required: true,
      message: '姓名必填',
    },
    {
      min: 2,
      message: '至少需要两个字符，一个中文等于两个字符',
    },
    {
      max: 10,
      message: '姓名字符长度超出',
    },
  ],
  description: [
    {
      validator: (val) => val.length >= 5,
      message: '至少 5 个字，中文长度等于英文长度',
    },
    {
      validator: (val) => val.length < 20,
      message: '不能超过 20 个字，中文长度等于英文长度',
    },
  ],
  password: [
    {
      required: true,
      message: '密码必填',
    },
    {
      len: 8,
      message: '请输入 8 位密码',
    },
    {
      pattern: /[A-Z]+/,
      message: '密码必须包含大写字母',
    },
  ],
  email: [
    {
      required: true,
      message: '邮箱必填',
    },
    {
      email: {
        ignore_max_length: true,
      },
      message: '请输入正确的邮箱地址',
    },
  ],
  gender: [
    {
      required: true,
      message: '性别必填',
    },
  ],
  course: [
    {
      required: true,
      message: '课程必填',
    },
    {
      validator: (val) => val.length <= 2,
      message: '最多选择 2 门课程',
    },
  ],
  'content.url': [
    {
      required: true,
      message: '个人网站必填',
    },
    {
      url: {
        protocols: ['http', 'https', 'ftp'],
        require_protocol: true,
      },
      message: '请输入正确的个人主页',
    },
  ],
};
const courseOptions = [
  {
    label: '语文',
    value: '1',
  },
  {
    label: '数学',
    value: '2',
  },
  {
    label: '英语',
    value: '3',
  },
  {
    label: '体育',
    value: '4',
  },
];
const options = [
  {
    label: '计算机学院',
    value: '1',
  },
  {
    label: '软件学院',
    value: '2',
  },
  {
    label: '物联网学院',
    value: '3',
  },
];
export default function BaseForm() {
  const [form] = Form.useForm();
  const onSubmit = ({ validateResult, firstError }) => {
    if (validateResult === true) {
      MessagePlugin.success('提交成功');
    } else {
      console.log('Errors: ', validateResult);
      MessagePlugin.warning(firstError);
    }
  };
  const onReset = () => {
    MessagePlugin.info('重置成功');
  };
  const handleClear = () => {
    form.clearValidate();
  };

  // 清除指定字段的校验结果
  const clearFieldsValidateResult = () => {
    form.clearValidate(['email', 'course', 'content.url']);
    MessagePlugin.success('已清除邮箱、课程、个人网站等字段校验结果');
  };
  return (
    <Form form={form} rules={rules} onReset={onReset} onSubmit={onSubmit} scrollToFirstError="smooth">
      <FormItem label="用户名" help="这是用户名字段帮助说明" name="account">
        <Input />
      </FormItem>
      <FormItem label="个人简介" help="一句话介绍自己" name="description" initialData="">
        <Input />
      </FormItem>
      <FormItem label="密码" name="password">
        <Input type="password" />
      </FormItem>
      <FormItem label="邮箱" name="email">
        <Input />
      </FormItem>
      <FormItem label="性别" name="gender">
        <Radio.Group>
          <Radio value="male">男</Radio>
          <Radio value="femal">女</Radio>
        </Radio.Group>
      </FormItem>
      <FormItem label="课程" name="course" initialData={[]}>
        <Checkbox.Group options={courseOptions}></Checkbox.Group>
      </FormItem>
      <FormItem label="学院" name="college">
        {
          <Select clearable>
            {options.map((item, index) => (
              <Select.Option value={item.value} label={item.label} key={index} />
            ))}
          </Select>
        }
      </FormItem>
      <FormItem
        label="入学时间"
        name="date"
        rules={[
          {
            date: {
              delimiters: ['/', '-', '.'],
            },
            message: '日期格式有误',
          },
        ]}
      >
        <Input />
      </FormItem>
      <FormItem label="个人网站" name="content.url">
        <Input />
      </FormItem>
      <FormItem
        style={{
          marginLeft: 100,
        }}
      >
        <Button
          theme="primary"
          type="submit"
          style={{
            marginRight: 10,
          }}
        >
          提交
        </Button>
        <Button
          theme="default"
          variant="base"
          type="reset"
          style={{
            marginRight: 10,
          }}
        >
          重置
        </Button>
        <Button
          theme="default"
          variant="base"
          onClick={handleClear}
          style={{
            marginRight: 10,
          }}
        >
          清空校验结果
        </Button>
        <Button theme="default" variant="base" onClick={clearFieldsValidateResult}>
          {' '}
          清除指定字段的校验结果{' '}
        </Button>
      </FormItem>
    </Form>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述： 覆盖默认校验信息，也支持全局配置（ConfigProvider）各个规则的校验信息。
                  代码示例：import React, { useState } from 'react';
import { Form, Input, Button, MessagePlugin, Radio, Select, Checkbox, Popup, Space } from 'tdesign-react';

const { FormItem } = Form;
const courseOptions = [
  {
    label: '语文',
    value: '1',
  },
  {
    label: '数学',
    value: '2',
  },
  {
    label: '英语',
    value: '3',
  },
  {
    label: '体育',
    value: '4',
  },
];
const options = [
  {
    label: '计算机学院',
    value: '1',
  },
  {
    label: '软件学院',
    value: '2',
  },
  {
    label: '物联网学院',
    value: '3',
  },
];
const errorMessage = {
  date: 'name不正确',
  url: 'name不正确',
  required: '请输入name',
  max: 'name字符长度不能超过validate个字符，一个中文等于两个字符',
  min: 'name字符长度不能少于 validate 个字符，一个中文等于两个字符',
  len: 'name字符长度必须是 validate',
  pattern: 'name不正确',
  validator: 'name有误',
};
const rules = {
  account: [
    {
      required: true,
    },
    // { enum: ['sheep', 'name'] },
    {
      min: 2,
    },
    {
      max: 10,
      type: 'warning',
    },
  ],
  description: [
    {
      validator: (val) => val.length >= 5,
    },
    {
      validator: (val) => val.length < 10,
      message: '不能超过 20 个字，中文长度等于英文长度',
    },
  ],
  password: [
    {
      required: true,
    },
    {
      len: 8,
      message: '请输入 8 位密码',
    },
    {
      pattern: /[A-Z]+/,
      message: '密码必须包含大写字母',
    },
  ],
  email: [
    {
      required: true,
    },
    {
      email: {
        ignore_max_length: true,
      },
    },
  ],
  gender: [
    {
      required: true,
    },
  ],
  course: [
    {
      required: true,
    },
    {
      validator: (val) => val.length <= 2,
      message: '最多选择 2 门课程',
      type: 'warning',
    },
  ],
  'content.url': [
    {
      required: true,
    },
    {
      url: {
        protocols: ['http', 'https', 'ftp'],
        require_protocol: true,
      },
    },
  ],
};
export default function BaseForm() {
  const [form] = Form.useForm();
  const [errorConfig, setErrorConfig] = useState('default');
  const onSubmit = ({ validateResult, firstError }) => {
    if (validateResult === true) {
      MessagePlugin.success('提交成功');
    } else {
      console.log('Errors: ', validateResult);
      MessagePlugin.warning(firstError);
    }
  };
  const onReset = () => {
    MessagePlugin.info('重置成功');
  };
  const handleClear = () => {
    form.clearValidate();
  };
  return (
    <Space direction="vertical">
      {/* 可以使用全局 ConfigProvider errorMessage 配置规则校验结果描述，而无需给每一个表单都配置校验信息 */}
      <div>
        <Radio.Group variant="default-filled" value={errorConfig} onChange={(v) => setErrorConfig(v)}>
          <Radio.Button value="default">
            <Popup content="Form.errorMessage 为空，使用组件内置校验信息。重置后，点击提交观察校验结果信息">
              使用表单默认校验信息
            </Popup>
          </Radio.Button>
          <Radio.Button value="config">
            <Popup content="统一配置 Form.errorMessage，使用自定义配置的校验信息。重置后，点击提交观察校验结果信息">
              表单统一配置校验信息
            </Popup>
          </Radio.Button>
        </Radio.Group>
      </div>

      <Form
        form={form}
        rules={rules}
        error-message={errorConfig === 'default' ? undefined : errorMessage}
        onReset={onReset}
        onSubmit={onSubmit}
        scrollToFirstError="smooth"
      >
        <FormItem label="用户名" help="这是用户名字段帮助说明" name="account" initialData="">
          <Input />
        </FormItem>
        <FormItem label="个人简介" help="一句话介绍自己" name="description" initialData="">
          <Input />
        </FormItem>
        <FormItem label="密码" name="password" initialData="">
          <Input type="password" />
        </FormItem>
        <FormItem label="邮箱" name="email" initialData="">
          <Input />
        </FormItem>
        <FormItem label="性别" name="gender" initialData="">
          <Radio.Group>
            <Radio value="male">男</Radio>
            <Radio value="femal">女</Radio>
          </Radio.Group>
        </FormItem>
        <FormItem label="课程" name="course" initialData={[]}>
          <Checkbox.Group options={courseOptions}></Checkbox.Group>
        </FormItem>
        <FormItem label="学院" name="college" initialData="">
          <Select clearable>
            {options.map((item, index) => (
              <Select.Option value={item.value} label={item.label} key={index}>
                {item.label}
              </Select.Option>
            ))}
          </Select>
        </FormItem>
        <FormItem
          label="入学时间"
          name="date"
          rules={[
            {
              date: {
                delimiters: ['/', '-', '.'],
              },
              message: '日期格式有误',
            },
          ]}
          initialData=""
        >
          <Input />
        </FormItem>
        <FormItem label="个人网站" name="content.url" initialData="">
          <Input />
        </FormItem>
        <FormItem
          style={{
            marginLeft: 100,
          }}
        >
          <Button
            theme="primary"
            type="submit"
            style={{
              marginRight: 10,
            }}
          >
            提交
          </Button>
          <Button
            theme="default"
            variant="base"
            type="reset"
            style={{
              marginRight: 10,
            }}
          >
            重置
          </Button>
          <Button theme="default" variant="base" onClick={handleClear}>
            清空校验结果
          </Button>
        </FormItem>
      </Form>
    </Space>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述：很多时候，表单数据的类型往往不仅仅是单纯的对象，还包含着数组、对象数组嵌套等。表单支持这些复杂数据类型的校验。
                  代码示例：import React, { useState } from 'react';
import { Form, Input, Checkbox, Button, MessagePlugin, Radio, Tabs } from 'tdesign-react';

const { FormItem } = Form;
let id = 0;
function getId() {
  id += 1;
  return id;
}
const INITIAL_DATA = {
  school: 1,
  students: [
    {
      id: getId(),
      label: '学生1',
      name: 'StudentA',
      courseType: 'wenke',
      course: ['1'],
      status: true,
    },
    {
      id: getId(),
      label: '学生2',
      name: 'StudentB',
      courseType: 'wenke',
      course: [],
      status: true,
    },
  ],
  courseType: undefined,
};
const rules = {
  school: [
    {
      required: true,
      message: '学校必填',
    },
  ],
  name: [
    {
      required: true,
      message: '用户名必填',
    },
  ],
  courseType: [
    {
      required: true,
      message: '选科必填',
    },
  ],
  course: [
    {
      required: true,
      message: '课程必填',
    },
  ],
};
const SCHOOL_OPTIONS = [
  {
    label: '学校一',
    value: 1,
  },
  {
    label: '学校二',
    value: 2,
  },
  {
    label: '学校三',
    value: 3,
  },
];
const COURSE_OPTIONS = [
  {
    label: '全部',
    checkAll: true,
  },
  {
    label: '语文',
    value: '1',
    courseTypes: ['wenke', 'like'],
  },
  {
    label: '数学',
    value: '2',
    courseTypes: ['wenke', 'like'],
  },
  {
    label: '物理',
    value: '3',
    courseTypes: ['like'],
  },
  {
    label: '化学',
    value: '4',
    courseTypes: ['like'],
  },
  {
    label: '地理',
    value: '5',
    courseTypes: ['wenke'],
  },
  {
    label: '历史',
    value: '6',
    courseTypes: ['wenke'],
  },
];
export default function BaseForm() {
  const [studentTab, setStudentTab] = useState(1);
  const [formData, setFormData] = useState(INITIAL_DATA);
  const courseOptions = COURSE_OPTIONS.filter((item) => {
    if (!formData.courseType || !item.courseTypes) return true;
    return item.courseTypes.includes(formData.courseType);
  });
  const onSubmit = ({ validateResult, firstError }) => {
    if (validateResult === true) {
      MessagePlugin.success('提交成功');
    } else {
      console.log('Errors: ', validateResult);
      MessagePlugin.warning(firstError);
      // 判断错误在第几个 Tab，而后自动切换到第几个
      for (let i = 0, len = formData.students.length; i < len; i++) {
        const item = formData.students[i];
        const keys = Object.keys(item).map((key) => `students[${i}].${key}`);
        // 数组数据 key 在 validateResult 中存在，则表示校验不通过
        const isInvalid = keys.find((key) => validateResult[key]);
        if (isInvalid) {
          setStudentTab(item.id);
          return;
        }
      }
    }
  };
  const onReset = () => {
    MessagePlugin.info('重置成功');
  };
  const onAddStudent = () => {
    const id = getId();
    formData.students.push({
      id,
      label: `学生${id}`,
      name: '',
      courseType: 'wenke',
      course: [],
      status: false,
    });
    setFormData(formData);
    setStudentTab(id);
  };
  return (
    <Form rules={rules} resetType="initial" onReset={onReset} onSubmit={onSubmit}>
      <FormItem label="学校" name="school" initialData={formData.school}>
        <Radio.Group options={SCHOOL_OPTIONS} />
      </FormItem>
      <Tabs
        value={studentTab}
        onChange={(v) => setStudentTab(v)}
        theme="card"
        addable
        onAdd={onAddStudent}
        style={{
          marginLeft: 30,
          border: '1px solid var(--td-component-stroke)',
        }}
      >
        {formData.students.map((student, index) => (
          <Tabs.TabPanel key={student.id} value={student.id} label={student.label} destroyOnHide={false}>
            <div
              style={{
                padding: '24px 24px 24px 0',
              }}
            >
              <FormItem label="姓名" name={`students[${index}].name`} label-width={80} initialData={student.name}>
                <Input placeholder="请输入内容" />
              </FormItem>

              <FormItem label="选科" name={`students[${index}].name`} label-width={80} initialData={student.courseType}>
                <Radio.Group>
                  <Radio value="wenke">文科</Radio>
                  <Radio value="like">理科</Radio>
                </Radio.Group>
              </FormItem>

              <FormItem label="课程" name={`students[${index}].name`} label-width={80} initialData={student.course}>
                <Checkbox.Group>
                  {courseOptions.map(({ value, label }, index) => (
                    <Checkbox key={index} value={value} label={label} />
                  ))}
                </Checkbox.Group>
              </FormItem>

              <FormItem
                style={{
                  marginLeft: 100,
                }}
              >
                <Button
                  theme="primary"
                  type="submit"
                  style={{
                    marginRight: 10,
                  }}
                >
                  提交
                </Button>
                <Button theme="default" variant="base" type="reset">
                  重置
                </Button>
              </FormItem>
            </div>
          </Tabs.TabPanel>
        ))}
      </Tabs>
    </Form>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述：可以使用 disabled 属性禁用整个表单项。对于自定义组件，可以使用 formControlledComponents 设置为允许 Form 代理禁用状态。
                  代码示例：import React, { useState } from 'react';
import {
  Form,
  Input,
  InputNumber,
  Checkbox,
  Button,
  MessagePlugin,
  Radio,
  DatePicker,
  Switch,
  TreeSelect,
  Select,
  Upload,
  Cascader,
  Textarea,
  Space,
} from 'tdesign-react';

const { FormItem } = Form;
const INITIAL_DATA = {
  name: '',
  message: true,
  gender: '',
  course: [],
  college: '',
  personalProfile: '',
  address1: 1,
  address2: 2,
  gradePoint: 0,
  date: '',
  avatar: [
    {
      url: 'https://tdesign.gtimg.com/site/avatar.jpg',
      name: 'avatar.jpg',
      status: 'success',
    },
  ],
};
const COLLEGE_OPTIONS = [
  {
    label: '学院 A',
    value: 1,
  },
  {
    label: '学院 B',
    value: 2,
  },
  {
    label: '学院 C',
    value: 3,
  },
];
const ADDRESS_OPTIONS = [
  {
    label: '江苏',
    value: 1,
    children: [
      {
        label: '南京市',
        value: 300,
      },
    ],
  },
  {
    label: '上海',
    value: 2,
    children: [
      {
        label: '徐汇区',
        value: 400,
      },
    ],
  },
  {
    label: '四川',
    value: 3,
    children: [
      {
        label: '成都市',
        value: 500,
      },
    ],
  },
];
export default function BaseForm() {
  const [formDisabled, setFormDisabled] = useState(true);
  const onSubmit = ({ validateResult, firstError }) => {
    if (validateResult === true) {
      MessagePlugin.success('提交成功');
    } else {
      console.log('Errors: ', validateResult);
      MessagePlugin.warning(firstError);
    }
  };
  const onReset = (e) => {
    console.log(e);
    MessagePlugin.info('重置成功');
  };
  const courseOptions = [
    {
      label: '语文',
      value: '1',
    },
    {
      label: '数学',
      value: '2',
    },
    {
      label: '英语',
      value: '3',
    },
  ];
  return (
    <Space direction="vertical">
      <div
        style={{
          marginLeft: 36,
        }}
      >
        <Radio.Group value={formDisabled} onChange={(value) => setFormDisabled(value)} variant="default-filled">
          <Radio.Button value={false}>启用</Radio.Button>
          <Radio.Button value={true}>禁用</Radio.Button>
        </Radio.Group>
      </div>

      <Form resetType="initial" disabled={formDisabled} colon onReset={onReset} onSubmit={onSubmit}>
        <FormItem label="姓名" name="name" initialData={INITIAL_DATA.name}>
          <Input />
        </FormItem>
        <FormItem label="学院" name="college" initialData={INITIAL_DATA.college}>
          <Select options={COLLEGE_OPTIONS} clearable></Select>
        </FormItem>
        <FormItem label="寄件地址" name="address1" initialData={INITIAL_DATA.address1}>
          <TreeSelect data={ADDRESS_OPTIONS} clearable />
        </FormItem>
        <FormItem label="收件地址" name="address2" initialData={INITIAL_DATA.address2}>
          <Cascader options={ADDRESS_OPTIONS} clearable />
        </FormItem>
        <FormItem label="日期" name="date" initialData={INITIAL_DATA.date}>
          <DatePicker mode="date" clearable />
        </FormItem>
        <FormItem label="个人简介" name="personalProfile" initialData={INITIAL_DATA.personalProfile}>
          <Textarea placeholder="简单描述自己的经历" />
        </FormItem>
        <FormItem label="短信" name="message" initialData={INITIAL_DATA.message}>
          <Switch label={['接受', '不接']}></Switch>
        </FormItem>
        <FormItem label="性别" name="gender" initialData={INITIAL_DATA.gender}>
          <Radio.Group>
            <Radio value="1">男</Radio>
            <Radio value="2">女</Radio>
          </Radio.Group>
        </FormItem>
        <FormItem label="课程" name="course" initialData={INITIAL_DATA.course}>
          <Checkbox.Group options={courseOptions} />
        </FormItem>
        <FormItem label="绩点" name="gradePoint" initialData={INITIAL_DATA.gradePoint}>
          <InputNumber theme="normal" placeholder="数字" />
        </FormItem>
        <FormItem label="头像" name="avatar" initialData={INITIAL_DATA.avatar}>
          <Upload
            action="https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
            theme="image"
            tips="请选择单张图片文件上传"
            accept="image/*"
          ></Upload>
        </FormItem>
        <FormItem
          style={{
            marginLeft: 100,
          }}
        >
          <Button
            theme="primary"
            type="submit"
            style={{
              marginRight: 10,
            }}
          >
            提交
          </Button>
          <Button theme="default" variant="base" type="reset">
            重置
          </Button>
        </FormItem>
      </Form>
    </Space>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述：使用 validateMessage 属性可以自定义表单校验信息提示，主要用于非组件内部的校验信息呈现，如：表单初次呈现的远程校验结果。如果要启动组件内部的校验功能，该值必须设置为空。
                  代码示例：import React, { useEffect } from 'react';
import { Form, Input, Button, MessagePlugin } from 'tdesign-react';

const { FormItem } = Form;
const validateMessage = {
  account: [
    {
      type: 'error',
      message: '自定义用户名校验信息提示',
    },
  ],
  description: [
    {
      type: 'warning',
      message: '自定义个人简介校验信息提示',
    },
  ],
};
const rules = {
  account: [
    {
      required: true,
    },
    {
      min: 2,
    },
    {
      max: 10,
      type: 'warning',
    },
  ],
  description: [
    {
      validator: (val) => val.length < 10,
      message: '不能超过 20 个字，中文长度等于英文长度',
    },
  ],
  password: [
    {
      required: true,
    },
    {
      len: 8,
      message: '请输入 8 位密码',
    },
  ],
};
export default function BaseForm() {
  const [form] = Form.useForm();
  const onSubmit = ({ validateResult, firstError }) => {
    if (validateResult === true) {
      MessagePlugin.success('提交成功');
    } else {
      console.log('Errors: ', validateResult);
      MessagePlugin.warning(firstError);
    }
  };
  const onReset = () => {
    MessagePlugin.info('重置成功');
  };
  const handleValidateMessage = () => {
    MessagePlugin.success('设置表单校验信息提示成功');
    form.setValidateMessage(validateMessage);
  };
  const handleValidateOnly = () => {
    form.validateOnly().then((result) => {
      console.log('validateOnly: ', result);
    });
  };
  useEffect(() => {
    form.setValidateMessage(validateMessage);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return (
    <Form rules={rules} form={form} onReset={onReset} onSubmit={onSubmit} scrollToFirstError="smooth">
      <FormItem label="用户名" help="这是用户名字段帮助说明" name="account" initialData="">
        <Input />
      </FormItem>
      <FormItem label="个人简介" help="一句话介绍自己" name="description" initialData="">
        <Input />
      </FormItem>
      <FormItem label="密码" name="password" initialData="">
        <Input type="password" />
      </FormItem>
      <FormItem
        style={{
          marginLeft: 100,
        }}
      >
        <Button
          theme="primary"
          type="submit"
          style={{
            marginRight: 10,
          }}
        >
          提交
        </Button>
        <Button
          theme="default"
          variant="base"
          type="reset"
          style={{
            marginRight: 10,
          }}
        >
          重置
        </Button>
        <Button
          theme="default"
          variant="base"
          style={{
            marginRight: 10,
          }}
          onClick={handleValidateOnly}
        >
          仅校验不展示验证信息
        </Button>
        <Button theme="default" variant="base" onClick={handleValidateMessage}>
          设置校验信息提示
        </Button>
      </FormItem>
    </Form>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述：可给 name 传入数组整理成对象嵌套数据结构。
                  代码示例：import React from 'react';
import { Form, Input, Radio, Checkbox, Button, MessagePlugin, DatePicker } from 'tdesign-react';
import { MinusCircleIcon } from 'tdesign-icons-react';

const { FormItem, FormList } = Form;
export default function BaseForm() {
  const [form] = Form.useForm();
  const user = Form.useWatch('user', form);
  console.log('user', user);
  const onSubmit = (e) => {
    console.log(e);
    if (e.validateResult === true) {
      MessagePlugin.info('提交成功');
    }
  };
  const setData = () => {
    console.log('getFieldsValue all: ', form.getFieldsValue?.(true));
    console.log('getFieldsValue: ', form.getFieldsValue?.([['user', 'name']]));
    console.log('getFieldValue: ', form.getFieldValue?.(['user', 'name']));
    form.setFieldsValue?.({
      birthday: '2020-01-01',
    });
    form.setFieldsValue?.({
      user: {
        gender: 'male',
      },
    });
    form.setFields?.([
      {
        name: ['user', 'course'],
        value: ['la'],
      },
    ]);
  };
  const onReset = (e) => {
    console.log(e);
    MessagePlugin.info('重置成功');
  };
  const onValuesChange = (value) => {
    console.log(value);
  };
  return (
    <Form
      initialData={{
        user: {
          name: 'name',
          age: 'age',
        },
        birthday: '2022-08-08',
      }}
      form={form}
      onSubmit={onSubmit}
      onReset={onReset}
      colon
      labelWidth={100}
      onValuesChange={onValuesChange}
    >
      <FormItem
        label="姓名"
        name={['user', 'name']}
        rules={[
          {
            required: true,
          },
        ]}
      >
        <Input />
      </FormItem>
      <FormItem label="年龄" name={['user', 'age']}>
        <Input />
      </FormItem>
      <FormItem label="性别" name={['user', 'gender']}>
        <Radio.Group>
          <Radio value="male">男性</Radio>
          <Radio value="female">女性</Radio>
        </Radio.Group>
      </FormItem>
      <FormItem label="课程" name={['user', 'course']}>
        <Checkbox.Group>
          <Checkbox value="la">加辣</Checkbox>
          <Checkbox value="ma">加麻</Checkbox>
          <Checkbox value="nocong">不要葱花</Checkbox>
        </Checkbox.Group>
      </FormItem>
      <FormItem label="出生日期" name="birthday">
        <DatePicker />
      </FormItem>
      <FormList name={['user', 'address']}>
        {(fields, { add, remove }) => (
          <>
            {fields.map(({ key, name, ...restField }) => (
              <FormItem key={key}>
                <FormItem
                  {...restField}
                  name={[name, 'province']}
                  label="省份"
                  rules={[
                    {
                      required: true,
                      type: 'error',
                    },
                  ]}
                >
                  <Input />
                </FormItem>
                <FormItem
                  {...restField}
                  name={[name, 'area']}
                  label="地区"
                  rules={[
                    {
                      required: true,
                      type: 'error',
                    },
                  ]}
                >
                  <Input />
                </FormItem>
                <FormItem>
                  <MinusCircleIcon
                    size="20px"
                    style={{
                      cursor: 'pointer',
                    }}
                    onClick={() => remove(name)}
                  />
                </FormItem>
              </FormItem>
            ))}
            <FormItem
              style={{
                marginLeft: 100,
              }}
            >
              <Button
                theme="default"
                variant="dashed"
                onClick={() =>
                  add({
                    province: 'bj',
                    area: 'tzmax',
                  })
                }
              >
                Add field
              </Button>
            </FormItem>
          </>
        )}
      </FormList>
      <FormItem
        style={{
          marginLeft: 100,
        }}
      >
        <Button type="submit" theme="primary">
          提交
        </Button>
        <Button
          theme="primary"
          onClick={setData}
          style={{
            marginLeft: 12,
          }}
        >
          设置信息
        </Button>
        <Button
          type="reset"
          style={{
            marginLeft: 12,
          }}
        >
          重置
        </Button>
      </FormItem>
    </Form>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述：可使用 Form.FormList 组件创建动态表单。
                  代码示例：import React from 'react';
import { Form, Input, Button, Select } from 'tdesign-react';
import { MinusCircleIcon } from 'tdesign-icons-react';

const { FormItem, FormList } = Form;
const provinceOptions = [
  {
    label: '北京',
    value: 'bj',
  },
  {
    label: '上海',
    value: 'sh',
  },
  {
    label: '广州',
    value: 'gz',
  },
  {
    label: '深圳',
    value: 'sz',
  },
];
export default function BaseForm() {
  const [form] = Form.useForm();
  function onSubmit() {
    const allFields = form.getFieldsValue(true);
    console.log('allFields', allFields);
  }
  return (
    <Form form={form} onSubmit={onSubmit}>
      <FormList name="address">
        {(fields, { add, remove }) => (
          <>
            {fields.map(({ key, name, ...restField }) => (
              <FormItem key={key}>
                <FormItem
                  {...restField}
                  name={[name, 'province']}
                  label="省份"
                  rules={[
                    {
                      required: true,
                      type: 'error',
                    },
                  ]}
                >
                  <Select options={provinceOptions}></Select>
                </FormItem>
                <FormItem
                  {...restField}
                  name={[name, 'area']}
                  label="地区"
                  rules={[
                    {
                      required: true,
                      type: 'error',
                    },
                  ]}
                >
                  <Input />
                </FormItem>

                <FormItem>
                  <MinusCircleIcon
                    size="20px"
                    style={{
                      cursor: 'pointer',
                    }}
                    onClick={() => remove(name)}
                  />
                </FormItem>
              </FormItem>
            ))}
            <FormItem
              style={{
                marginLeft: 100,
              }}
            >
              <Button
                theme="default"
                variant="dashed"
                onClick={() =>
                  add({
                    province: 'bj',
                    area: 'tzmax',
                  })
                }
              >
                Add field
              </Button>
            </FormItem>
          </>
        )}
      </FormList>
      <FormItem
        style={{
          marginLeft: 100,
        }}
      >
        <Button type="submit" theme="primary">
          提交
        </Button>
        <Button
          type="reset"
          style={{
            marginLeft: 12,
          }}
        >
          重置
        </Button>
      </FormItem>
    </Form>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述：在某些特定场景，例如修改某个字段值后出现新的字段选项、或者纯粹希望表单任意变化都对某一个区域进行渲染。你可以通过 shouldUpdate 修改 FormItem 的更新逻辑。
                  代码示例：import React from 'react';
import { Form, Radio, Button } from 'tdesign-react';

const { FormItem } = Form;
export default function FormExample() {
  const [form] = Form.useForm();
  const setMessage = () => {
    form.setFieldsValue({
      type: 'cold',
      ice: '1',
    });
  };
  return (
    <Form form={form} colon labelWidth={100}>
      <FormItem label="类型" name="type" initialData="hot">
        <Radio.Group>
          <Radio value="hot">热饮</Radio>
          <Radio value="cold">冷饮</Radio>
        </Radio.Group>
      </FormItem>
      <FormItem shouldUpdate={(prev, next) => prev.type !== next.type}>
        {({ getFieldValue }) => {
          if (getFieldValue('type') === 'cold') {
            return (
              <FormItem label="冰量" key="ice" name="ice">
                <Radio.Group>
                  <Radio value="0">正常冰</Radio>
                  <Radio value="1">少冰</Radio>
                  <Radio value="2">去冰</Radio>
                </Radio.Group>
              </FormItem>
            );
          }
          return null;
        }}
      </FormItem>

      <FormItem
        style={{
          marginLeft: 100,
        }}
      >
        <Button onClick={setMessage}>选择冷饮-少冰</Button>
      </FormItem>
    </Form>
  );
}

                  ===SPLIT===组建:<Form/>
                  使用描述：可以使用 Form.FormItem 包裹自定义组件并在组件中接受 value 和 onChange 的入参，实现自定义表单控件。
                  代码示例：import React from 'react';
import { Form, Input, Button, MessagePlugin, Space, Select } from 'tdesign-react';

const { FormItem } = Form;
function CourseSelect(props) {
  const { value, onChange } = props;
  return (
    <Space>
      <Select
        options={[
          {
            label: '数学',
            value: 'math',
          },
          {
            label: '英语',
            value: 'english',
          },
        ]}
        value={value?.type}
        onChange={(v) => {
          onChange?.({
            ...value,
            type: v,
          });
        }}
        placeholder="请选择课程类型"
      />
      <Input
        value={value?.name}
        onChange={(v) => {
          onChange?.({
            ...value,
            name: v,
          });
        }}
        placeholder="请输入课程名称"
      />
    </Space>
  );
}
export default function BaseForm() {
  const [form] = Form.useForm();
  const onSubmit = (e) => {
    console.log(e);
    if (e.validateResult === true) {
      MessagePlugin.info('提交成功');
    }
  };
  return (
    <Form form={form} onSubmit={onSubmit} colon labelWidth={100}>
      <FormItem label="课程" name="course">
        <CourseSelect />
      </FormItem>
      <FormItem
        style={{
          marginLeft: 100,
        }}
      >
        <Button type="submit" theme="primary">
          提交
        </Button>
      </FormItem>
    </Form>
  );
}

                  组建:<Input/>
                  使用描述：最基础的单行输入框，按状态可分为正常、禁用、错误、带额外提示。通常在需要输入少量内容（20 个字以内）的场景下使用。
                  代码示例：import React, { useState } from 'react';
import { Input, Space } from 'tdesign-react';

export default function InputExample() {
  const [value, onChange] = useState('Welcome to TDesign');
  return (
    <Space
      direction="vertical"
      style={{
        width: 500,
      }}
    >
      <Input
        placeholder="请输入内容（无默认值）"
        onChange={(value) => {
          console.log(value);
        }}
      />
      <Input
        placeholder="请输入内容（有默认值）"
        value={value}
        onChange={(value) => {
          onChange(value);
        }}
        onEnter={(value) => {
          console.log(value);
        }}
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Input/>
                  使用描述：在输入框前后加入一些特定的纯展示标签，通常在需要提高辨识效率时使用。
                  代码示例：import React, { useState } from 'react';
import { Input, InputAdornment, Space } from 'tdesign-react';

export default function InputExample() {
  const [value, onChange] = useState('');
  return (
    <Space direction="vertical">
      <InputAdornment prepend="http://">
        <Input
          placeholder="请输入域名"
          value={value}
          onChange={(value) => {
            onChange(value);
          }}
        />
      </InputAdornment>
      <InputAdornment prepend="http://" append=".com">
        <Input
          placeholder="请输入域名"
          value={value}
          onChange={(value) => {
            onChange(value);
          }}
        />
      </InputAdornment>
    </Space>
  );
}

                  ===SPLIT===组建:<Input/>
                  使用描述：多个输入框相组合，或与其他控件（如下拉）相组合，以方便识别。用于一些固定组合或者固定格式输入的场景，如输入电话号码。
                  代码示例：import React from 'react';
import { Input, Space } from 'tdesign-react';

export default function InputExample() {
  return (
    <Space direction="vertical">
      <Input.Group separate>
        <Input
          defaultValue="0731"
          style={{
            width: 100,
          }}
        />
        <Input defaultValue="12345677" />
      </Input.Group>
      <Input.Group separate>
        <Input />
        <Input />
      </Input.Group>
      <Input.Group separate>
        <Input
          style={{
            width: 100,
          }}
          defaultValue="0731"
        />
        <span
          style={{
            lineHeight: '32px',
          }}
        >
          &nbsp;-&nbsp;
        </span>
        <Input
          style={{
            width: 100,
          }}
          defaultValue="12345"
        />
        <Input
          style={{
            width: 100,
          }}
          defaultValue="678901"
        />
        <Input
          style={{
            width: 100,
          }}
        />
      </Input.Group>
    </Space>
  );
}

                  ===SPLIT===组建:<Input/>
                  使用描述：带清空操作的输入框，可快捷清空输入过的内容。
                  代码示例：import React, { useState } from 'react';
import { Input } from 'tdesign-react';

export default function InputExample() {
  const [value, onChange] = useState('Hello TDesign');
  return (
    <Input
      placeholder="请输入内容"
      value={value}
      clearable
      onChange={(value) => {
        onChange(value);
      }}
      onClear={() => {
        console.log('onClear');
      }}
    />
  );
}

                  ===SPLIT===组建:<Input/>
                  使用描述：由符号代替输入内容的输入框，并可通过操作展示原文信息。用于强安全信息输入的场景。
                  代码示例：import React, { useState } from 'react';
import { Input, Space } from 'tdesign-react';
import { LockOnIcon } from 'tdesign-icons-react';

export default function InputExample() {
  const [value, onChange] = useState('');
  return (
    <Space direction="vertical">
      <Input
        prefixIcon={<LockOnIcon />}
        placeholder="请输入"
        value={value}
        type="password"
        onChange={(value) => {
          onChange(value);
        }}
      />
      <Input
        prefixIcon={<LockOnIcon />}
        placeholder="请输入"
        value={value}
        type="password"
        onChange={(value) => {
          onChange(value);
        }}
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Input/>
                  使用描述：输入框状态可分为：正常、禁用、异常（带提示）、带额外内容提示、带状态图标提示。
                  代码示例：import React, { useState } from 'react';
import { Input, Space } from 'tdesign-react';

export default function InputExample() {
  const [value, onChange] = useState('');
  return (
    <Space size={50}>
      <Space direction="vertical" size={28}>
        <Input placeholder="禁用状态" disabled value={value} onChange={onChange} />
        <Input placeholder="只读状态" readonly value={value} onChange={onChange} />
      </Space>
      <Space direction="vertical" size={28}>
        <Input placeholder="成功状态" value={value} onChange={onChange} status="success" />
        <Input placeholder="警告状态" value={value} onChange={onChange} status="warning" />
        <Input placeholder="错误状态" value={value} onChange={onChange} status="error" />
      </Space>
      <Space direction="vertical" size={28}>
        <Input placeholder="普通状态" tips="这是普通文本提示" value={value} onChange={onChange} />
        <Input placeholder="成功状态" tips="校验通过文本提示" value={value} onChange={onChange} status="success" />
        <Input placeholder="警告状态" tips="校验不通过文本提示" value={value} onChange={onChange} status="warning" />
        <Input
          placeholder="错误状态"
          tips="校验存在严重问题文本提示"
          value={value}
          onChange={onChange}
          status="error"
        />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Input/>
                  使用描述：有大中小三种不同高度、宽度的输入框，以适应不同尺寸布局。设置 size = large | medium | small 实现不同的尺寸。
                  代码示例：import React, { useState } from 'react';
import { Input, Space } from 'tdesign-react';

export default function InputExample() {
  const [value, onChange] = useState(null);
  return (
    <Space
      direction="vertical"
      style={{
        width: 500,
      }}
    >
      <Input
        placeholder="请输入内容"
        value={value}
        onChange={(value) => {
          onChange(value);
        }}
        size="small"
      />
      <Input
        placeholder="请输入内容"
        value={value}
        onChange={(value) => {
          onChange(value);
        }}
      />
      <Input
        placeholder="请输入内容"
        value={value}
        onChange={(value) => {
          onChange(value);
        }}
        size="large"
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Input/>
                  使用描述：输入框共有三种对齐方式：左对齐、局中对齐和右对齐。设置 align = left | center | right 实现不同的对齐方式。
                  代码示例：import React from 'react';
import { Input, Space } from 'tdesign-react';

export default function InputExample() {
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Input defaultValue="居左对齐" align="left" />
      <Input defaultValue="居中对齐" align="center" />
      <Input defaultValue="居右对齐" align="right" />
    </Space>
  );
}

                  ===SPLIT===组建:<Input/>
                  使用描述：输入框支持宽度随输入内容变化而变化，设置属性 autoWidth 即可。
                  代码示例：import React from 'react';
import { Input } from 'tdesign-react';

export default function InputAutoWidth() {
  return (
    <div
      style={{
        maxWidth: '500px',
      }}
    >
      <Input autoWidth defaultValue="宽度自适应" />
    </div>
  );
}

                  ===SPLIT===组建:<Input/>
                  使用描述：使用 maxlength 设置输入框的长度限度，一个中文等于一个计数长度。使用 maxcharacter 设置输入框的长度限度，一个中文汉字表示两个字符长度。使用 allowInputOverMax 设置是否允许在输入内容已经超出限制时继续输入。使用 showLimitNumber 设置是否显示输入框右侧的字数统计。
                  代码示例：import React, { useState } from 'react';
import { Input, Space } from 'tdesign-react';

export default function InputExample() {
  const [value1, setValue1] = useState('');
  const [value2, setValue2] = useState('');
  const [value3, setValue3] = useState('');
  const [value4, setValue4] = useState('');
  const [tips, setTips] = useState('');
  return (
    <Space
      direction="vertical"
      size={24}
      style={{
        width: '500px',
      }}
    >
      <Input
        value={value1}
        onChange={setValue1}
        maxlength={10}
        showLimitNumber
        placeholder="内置字数限制，最大文本长度为10"
      />

      <Input
        value={value2}
        onChange={setValue2}
        maxcharacter={10}
        showLimitNumber
        placeholder="内置字数限制，最大字符数量限制，一个中文字等于两个字符"
      />

      <Input
        value={value3}
        onChange={setValue3}
        maxlength={5}
        allowInputOverMax
        showLimitNumber
        placeholder="内置字数限制，字数超出时允许继续输入"
        tips={tips}
        status={tips ? 'error' : 'default'}
        onValidate={({ error }) => {
          console.log(error);
          setTips(error ? '输入内容长度不允许超过 5 个字' : '');
        }}
      />

      <Input
        value={value4}
        onChange={setValue4}
        maxlength={5}
        suffix={`${[...value4].length}/5`}
        placeholder="自定义字数限制文本"
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Input/>
                  使用描述：可以使用 format 设置输入框在失焦和聚焦时的不同内容呈现。
                  代码示例：import React, { useState } from 'react';
import { Input } from 'tdesign-react';

export default function InputExample() {
  const [value, setValue] = useState('');
  function format(val) {
    const reg = /(\d)(?=(?:\d{3})+$)/g;
    const str = val.replace(reg, '$1,');
    return str;
  }
  const inputStatus = isNaN(+value) ? 'error' : 'default';
  const tips = inputStatus ? '请输入数字' : '';
  return (
    <Input
      value={value}
      onChange={setValue}
      status={inputStatus}
      format={format}
      tips={tips}
      placeholder="请输入数字"
    />
  );
}

                  ===SPLIT===组建:<Input/>
                  使用描述：可以使用 borderless 来开启无边框模式。
                  代码示例：import React from 'react';
import { Input, Space } from 'tdesign-react';

export default function BorderlessInputExample() {
  return (
    <Space
      direction="vertical"
      style={{
        width: 500,
      }}
    >
      <Input placeholder="please input" clearable />
      <Input placeholder="borderless input" borderless={true} clearable />
    </Space>
  );
}

                  组建:<InputAdornment/>
                  使用描述：在输入框前后加入一些特定的纯展示标签，通常在需要提高辨识效率时使用。
                  代码示例：import React from 'react';
import { Input, TagInput, InputAdornment, Space } from 'tdesign-react';

export default function BaseExample() {
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <InputAdornment prepend="http://">
        <Input />
      </InputAdornment>

      <InputAdornment append=".com">
        <TagInput />
      </InputAdornment>

      <InputAdornment prepend="http://" append=".com">
        <Input />
      </InputAdornment>
    </Space>
  );
}

                  ===SPLIT===组建:<InputAdornment/>
                  使用描述：装饰内容可以是下拉菜单。
                  代码示例：import React from 'react';
import { Select, Input, InputAdornment, Space } from 'tdesign-react';

export default function BaseExample() {
  const protocolSelect = (
    <Select
      autoWidth
      options={['http://', 'https://'].map((value) => ({
        label: value,
        value,
      }))}
      defaultValue="http://"
    />
  );
  const tldSelect = (
    <Select
      autoWidth
      options={['.com', '.cn', '.net', '.org'].map((value) => ({
        label: value,
        value,
      }))}
      defaultValue=".cn"
    />
  );
  return (
    <Space direction="vertical" className="adornment-select">
      <InputAdornment prepend={protocolSelect}>
        <Input />
      </InputAdornment>

      <InputAdornment append={tldSelect}>
        <Input />
      </InputAdornment>

      <InputAdornment prepend={protocolSelect} append={tldSelect}>
        <Select
          options={['tencent', 'qq', 'cloud.tencent'].map((value) => ({
            label: value,
            value,
          }))}
          defaultValue="tencent"
        />
      </InputAdornment>
    </Space>
  );
}

                  组建:<InputNumber/>
                  使用描述：已输入的值居中展示，用户可直接在输入框内修改数值，还可以使用输入框左右的箭头按钮增大或减小数值。
                  代码示例：import React, { useState, useMemo } from 'react';
import { InputNumber, Space } from 'tdesign-react';

export default function InputNumberExample() {
  const [value1, setValue1] = useState('');
  const [value2, setValue2] = useState(100);
  const [decimalValue, setDecimalValue] = useState(3.41);
  const [error, setError] = useState();
  const tips = useMemo(() => {
    if (error === 'exceed-maximum') return 'number can not be exceed maximum';
    if (error === 'below-minimum') return 'number can not be below minimum';
    return undefined;
  }, [error]);
  const handleChange = (v, ctx) => {
    console.info('change', v, ctx);
    setValue2(v);
  };
  const onValidate = ({ error }) => {
    setError(error);
  };
  const handleFocus = (v, ctx) => {
    console.info('focus', v, ctx);
  };
  const handleBlur = (v, ctx) => {
    console.info('blur', v, ctx);
  };
  const handleKeydown = (v, ctx) => {
    console.info('keydown', v, ctx);
  };
  const handleKeyup = (v, ctx) => {
    console.info('keyup', v, ctx);
  };
  const handleKeypress = (v, ctx) => {
    console.info('keypress', v, ctx);
  };
  const handleEnter = (v, ctx) => {
    console.info('enter', v, ctx);
  };

  // inputProps={{ tips }} 和 tips={tips} 均可
  return (
    <Space direction="vertical">
      <InputNumber
        value={decimalValue}
        onChange={setDecimalValue}
        // decimalPlaces={0}
        max={5}
        autoWidth
      />

      <InputNumber
        value={value1}
        onChange={setValue1}
        step={0.18}
        max={5}
        allowInputOverLimit={false}
        style={{
          width: 250,
        }}
      />

      <InputNumber
        value={value2}
        max={15}
        min={-2}
        inputProps={{
          tips,
        }}
        suffix="个"
        style={{
          width: 300,
        }}
        onChange={handleChange}
        onValidate={onValidate}
        onBlur={handleBlur}
        onFocus={handleFocus}
        onEnter={handleEnter}
        onKeydown={handleKeydown}
        onKeyup={handleKeyup}
        onKeypress={handleKeypress}
      />
    </Space>
  );
}

                  ===SPLIT===组建:<InputNumber/>
                  使用描述：已输入的值居左展示，用户可直接在输入框内修改数值，还可以使用输入框右侧的箭头按钮增大或减小数值。
                  代码示例：import React from 'react';
import { InputNumber } from 'tdesign-react';

export default function InputNumberExample() {
  return <InputNumber defaultValue={5} theme="column" onChange={(v) => console.log(v)} />;
}

                  ===SPLIT===组建:<InputNumber/>
                  使用描述：仅有输入框，不能用按钮进行数值调整的数字输入框。
                  代码示例：import React from 'react';
import { InputNumber, Space } from 'tdesign-react';

export default function InputNumberExample() {
  return (
    <Space direction="vertical">
      <InputNumber defaultValue={10} onChange={console.log} theme="normal" max={15} min={-2} />
      <InputNumber theme="normal" align="right" label="机器：" suffix="台" />
      <InputNumber
        theme="normal"
        align="right"
        defaultValue={10}
        onChange={console.log}
        label={<span>金额：</span>}
        suffix={<span>元</span>}
      />
    </Space>
  );
}

                  ===SPLIT===组建:<InputNumber/>
                  使用描述：可以通过 decimalPlaces 来设置小数保留精度，通过 step 来设置步进。
                  代码示例：import React, { useState } from 'react';
import { InputNumber } from 'tdesign-react';

export default function InputNumberExample() {
  const [value, setValue] = useState(3.2);
  return <InputNumber max={15} min={-5} step={1.2} decimalPlaces={2} value={value} onChange={setValue} />;
}

                  ===SPLIT===组建:<InputNumber/>
                  使用描述：通过 format 属性格式化数值内容。
                  代码示例：import React, { useState } from 'react';
import { InputNumber, Space } from 'tdesign-react';

export default function InputNumberExample() {
  const [value, setValue] = useState(0);
  const [value1, setValue1] = useState(0);
  return (
    <Space direction="vertical">
      <InputNumber
        max={15}
        min={-12}
        step={1.2}
        format={(value) => `${value} %`}
        value={value}
        onChange={setValue}
        style={{
          width: 250,
        }}
      />
      <InputNumber
        decimalPlaces={2}
        format={(_, { fixedNumber }) => `${fixedNumber} %`}
        value={value1}
        onChange={setValue1}
        style={{
          width: 250,
        }}
      />
    </Space>
  );
}

                  ===SPLIT===组建:<InputNumber/>
                  使用描述：提供 大、中（默认）、小 3 种数字输入框。
                  代码示例：import React from 'react';
import { InputNumber, Space } from 'tdesign-react';

export default function InputNumberExample() {
  return (
    <Space>
      <Space direction="vertical">
        <InputNumber size="small" max={15} min={-12} defaultValue={3} />
        <InputNumber max={15} min={-12} defaultValue={6} />
        <InputNumber size="large" max={15} min={-12} defaultValue={9} />
      </Space>

      <Space direction="vertical">
        <InputNumber defaultValue={5} size="small" theme="column" onChange={console.log} />
        <InputNumber defaultValue={5} theme="column" onChange={console.log} />
        <InputNumber defaultValue={10} size="large" theme="column" onChange={console.log} />
      </Space>

      <Space direction="vertical">
        <InputNumber defaultValue={5} size="small" theme="normal" onChange={console.log} />
        <InputNumber defaultValue={5} theme="normal" onChange={console.log} />
        <InputNumber defaultValue={10} size="large" theme="normal" onChange={console.log} />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<InputNumber/>
                  使用描述：除了禁用 disabled 和只读 readonly 状态之外，提供 正常（默认）、成功 success、警告 warning、错误 error 4 种状态的输入框设置。
                  代码示例：import React, { useState } from 'react';
import { Form, InputNumber, Space, Radio } from 'tdesign-react';

const { FormItem } = Form;
export default function Status() {
  const [type, setType] = useState('align-input');
  return (
    <Space direction="vertical">
      <Radio.Group value={type} onChange={(val) => setType(val)} variant="default-filled">
        <Radio.Button value="hide">隐藏文本提示</Radio.Button>
        <Radio.Button value="align-left">文本提示左对齐</Radio.Button>
        <Radio.Button value="align-input">文本提示对齐输入框</Radio.Button>
      </Radio.Group>

      <Form>
        {type === 'hide' && (
          <>
            <FormItem label="禁用">
              <InputNumber
                style={{
                  width: 300,
                }}
                disabled
              />
            </FormItem>
            <FormItem label="只读">
              <InputNumber
                style={{
                  width: 300,
                }}
                readonly
              />
            </FormItem>
            <FormItem label="正常">
              <InputNumber
                style={{
                  width: 300,
                }}
              />
            </FormItem>
            <FormItem label="成功">
              <InputNumber
                style={{
                  width: 300,
                }}
                status="success"
              />
            </FormItem>
            <FormItem label="警告">
              <InputNumber
                style={{
                  width: 300,
                }}
                status="warning"
              />
            </FormItem>
            <FormItem label="错误">
              <InputNumber
                style={{
                  width: 300,
                }}
                status="error"
              />
            </FormItem>
          </>
        )}

        {type === 'align-left' && (
          <>
            <FormItem label="正常提示">
              <InputNumber
                style={{
                  width: 300,
                }}
                tips="这是普通文本提示"
              />
            </FormItem>
            <FormItem label="成功提示">
              <InputNumber
                style={{
                  width: 300,
                }}
                status="success"
                tips="校验通过文本提示"
              />
            </FormItem>
            <FormItem label="警告提示">
              <InputNumber
                style={{
                  width: 300,
                }}
                status="warning"
                tips="校验不通过文本提示"
              />
            </FormItem>
            <FormItem label="错误提示">
              <InputNumber
                style={{
                  width: 300,
                }}
                status="error"
                tips="校验存在严重问题文本提示"
              />
            </FormItem>
          </>
        )}

        {type === 'align-input' && (
          <>
            <FormItem label="正常提示">
              <InputNumber
                style={{
                  width: 300,
                }}
                tips="这是普通文本提示"
              />
            </FormItem>
            <FormItem label="成功提示">
              <InputNumber
                style={{
                  width: 300,
                }}
                status="success"
                tips="校验通过文本提示"
              />
            </FormItem>
            <FormItem label="警告提示">
              <InputNumber
                style={{
                  width: 300,
                }}
                status="warning"
                tips="校验不通过文本提示"
              />
            </FormItem>
            <FormItem label="错误提示">
              <InputNumber
                style={{
                  width: 300,
                }}
                status="error"
                tips="校验存在严重问题文本提示"
              />
            </FormItem>
          </>
        )}
      </Form>
    </Space>
  );
}

                  ===SPLIT===组建:<InputNumber/>
                  使用描述：不同对齐方式的输入框 
                  代码示例：import React from 'react';
import { InputNumber, Space } from 'tdesign-react';

export default function InputNumberExample() {
  return (
    <Space>
      <Space direction="vertical">
        <InputNumber align="left" defaultValue={100} />
        <InputNumber align="center" defaultValue={200} />
        <InputNumber align="right" defaultValue={300} />
      </Space>

      <Space direction="vertical">
        <InputNumber align="left" theme="normal" defaultValue={100} />
        <InputNumber align="center" theme="normal" defaultValue={200} />
        <InputNumber align="right" theme="normal" defaultValue={300} />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<InputNumber/>
                  使用描述：自适应宽度的输入框 
                  代码示例：import React from 'react';
import { InputNumber } from 'tdesign-react';

export default function InputNumberAutoWidthExample() {
  return <InputNumber autoWidth min={-5} defaultValue={1} />;
}

                  ===SPLIT===组建:<InputNumber/>
                  使用描述：大数字输入框 
                  代码示例：import React from 'react';
import { InputNumber, Space } from 'tdesign-react';

export default function InputNumberExample() {
  return (
    <Space direction="vertical">
      <InputNumber
        defaultValue={'19999999999999999'}
        largeNumber
        decimalPlaces={2}
        step={1}
        style={{
          width: '350px',
        }}
      />
      <InputNumber
        defaultValue={'0.8975527383412673418'}
        largeNumber
        step={0.888}
        style={{
          width: '350px',
        }}
      />
    </Space>
  );
}

                  组建:<TagInput/>
                  使用描述：基础标签输入框 
                  代码示例：import React, { useState } from 'react';
import { TagInput, Space } from 'tdesign-react';

export default function TagInputBaseExample() {
  const [tags1, setTags1] = useState(['Vue', 'React', 'Angular']);
  const [tags2] = useState(['Vue', 'React']);
  const [tags3] = useState(['Vue', 'React']);
  const onTagInputEnter = (val, context) => {
    console.log(val, context);
  };
  const onChange = (val, context) => {
    console.log(val, context);
    setTags1(val);
  };
  const onPaste = (context) => {
    console.log(context);
  };
  return (
    <Space
      direction="vertical"
      style={{
        width: '80%',
      }}
    >
      <TagInput
        value={tags1}
        onChange={onChange}
        clearable
        onPaste={onPaste}
        onEnter={onTagInputEnter}
        placeholder="请输入"
      />
      <TagInput value={tags2} label="Controlled: " placeholder="请输入" clearable />
      <TagInput defaultValue={tags3} label="UnControlled: " placeholder="请输入" clearable />
    </Space>
  );
}

                  ===SPLIT===组建:<TagInput/>
                  使用描述：使用 excessTagsDisplayType 控制标签超出时的呈现方式：横向滚动显示和换行显示，默认为换行显示。
                  代码示例：import React, { useState } from 'react';
import { TagInput, Space } from 'tdesign-react';

export default function TagInputExcessExample() {
  const [tags, setTags] = useState(['Vue', 'React']);
  return (
    <Space
      direction="vertical"
      style={{
        width: '80%',
      }}
    >
      {/* <!-- 标签数量超出时，滚动显示 --> */}
      <TagInput
        value={tags}
        onChange={setTags}
        label="Scroll: "
        excessTagsDisplayType="scroll"
        placeholder="请输入"
        clearable
      />

      {/* <!-- 标签数量超出时，换行显示，默认情况 --> */}
      <TagInput
        value={tags}
        onChange={setTags}
        label="BreakLine: "
        placeholder="请输入"
        excessTagsDisplayType="break-line"
        clearable
      />
    </Space>
  );
}

                  ===SPLIT===组建:<TagInput/>
                  使用描述：使用 maxRows 控制标签超出时的最大行数，超出会出现滚动条，默认为不限制。
                  代码示例：import React, { useState } from 'react';
import { TagInput, Space } from 'tdesign-react';

export default function TagInputMaxRowExample() {
  const [tags, setTags] = useState([
    'Vue',
    'React',
    'Angular',
    'Svelte',
    'Solid',
    'MiniProgram',
    'Flutter',
    'UniApp',
    'Html5',
    'Css3',
    'JavaScript',
    'TypeScript',
    'Node.js',
    'Python',
    'Java',
    'Go',
    'Rust',
    'C++',
  ]);
  return (
    <Space
      direction="vertical"
      style={{
        width: '80%',
      }}
    >
      <h3>最大高度为2</h3>
      <TagInput
        size="small"
        maxRows={2}
        value={tags}
        onChange={(val) => setTags(val.map(String))}
        clearable
        onPaste={(context) => console.log(context)}
        onEnter={(val, context) => console.log(val, context)}
        label="小尺寸: "
        placeholder="最大高度为2行，超出部分滚动显示"
      />

      <h3>最大高度为3</h3>
      <TagInput
        maxRows={3}
        value={tags}
        onChange={(val) => setTags(val.map(String))}
        label="中等尺寸: "
        clearable
        placeholder="最大高度为3行，超出部分滚动显示"
      />

      <h3>最大高度为4</h3>
      <TagInput
        size="large"
        maxRows={4}
        value={tags}
        onChange={(val) => setTags(val.map(String))}
        label="大尺寸: "
        clearable
        placeholder="最大高度为4行，超出部分换行显示"
      />
    </Space>
  );
}

                  ===SPLIT===组建:<TagInput/>
                  使用描述：使用 max 控制最大标签数量。
                  代码示例：import React, { useState } from 'react';
import { MessagePlugin, TagInput } from 'tdesign-react';

export default function TagInputMaxExample() {
  const [tags] = useState([]);
  const onEnter = (value, { inputValue }) => {
    if (value.length >= 3 && inputValue) {
      MessagePlugin.warning('最多只能输入 3 个标签!');
    }
  };
  return (
    <div
      style={{
        width: '100%',
      }}
    >
      <TagInput defaultValue={tags} placeholder="最多只能输入 3 个标签" max={3} onEnter={onEnter} />
    </div>
  );
}

                  ===SPLIT===组建:<TagInput/>
                  使用描述：提供大、中（默认）、小三种不同尺寸的的标签输入框。
                  代码示例：import React, { useState } from 'react';
import { TagInput, Space } from 'tdesign-react';

export default function TagInputSize() {
  const [tags1, setTags1] = useState(['Vue', 'React']);
  const [tags2, setTags2] = useState(['Vue', 'React']);
  const [tags3, setTags3] = useState(['Vue', 'React']);
  return (
    <Space
      direction="vertical"
      style={{
        width: '80%',
      }}
    >
      <TagInput value={tags1} onChange={setTags1} size="small" clearable />

      <TagInput value={tags2} onChange={setTags2} clearable />

      <TagInput value={tags3} onChange={setTags3} size="large" clearable />
    </Space>
  );
}

                  ===SPLIT===组建:<TagInput/>
                  使用描述：mincollapsedNum 用于控制超出这个数量的标签折叠省略显示。collapsedItems 用于自定义折叠标签呈现方式。
                  代码示例：import React, { useState } from 'react';
import { TagInput, Popup, Tag, Space } from 'tdesign-react';

export default function TagInputCollapsedExample() {
  const [tags, setTags] = useState(['Vue', 'React', 'Miniprogram', 'Angular', 'Flutter']);
  const renderCollapsedItems = ({ collapsedSelectedItems }) => (
    <Popup
      key={'tags'}
      content={collapsedSelectedItems.map((item) => (
        <Tag
          key={item}
          style={{
            marginRight: '4px',
          }}
        >
          {item}
        </Tag>
      ))}
    >
      <Tag>More({collapsedSelectedItems?.length})</Tag>
    </Popup>
  );
  return (
    <Space
      direction="vertical"
      style={{
        width: '80%',
      }}
    >
      <TagInput value={tags} onChange={setTags} minCollapsedNum={1} />
      <TagInput value={tags} onChange={setTags} minCollapsedNum={3} collapsedItems={renderCollapsedItems}></TagInput>
    </Space>
  );
}

                  ===SPLIT===组建:<TagInput/>
                  使用描述：tag 用于定义单个标签的内容valueDisplay 用于完全自定义全量标签内容
                  代码示例：import React, { useState } from 'react';
import { TagInput, Tag, Space } from 'tdesign-react';

export default function CustomTagExample() {
  const [tags, setTags] = useState(['StudentA', 'StudentB', 'StudentC']);
  return (
    <Space
      direction="vertical"
      style={{
        width: '80%',
      }}
    >
      {/* 方式一：使用 tag 定义标签内部内容  */}
      <TagInput
        value={tags}
        onChange={setTags}
        clearable
        minCollapsedNum={2}
        tag={({ value }) => (
          <span>
            <img
              src="https://tdesign.gtimg.com/site/avatar.jpg"
              style={{
                maxWidth: '18px',
                maxHeight: '18px',
                borderRadius: '50%',
                verticalAlign: 'text-top',
              }}
            />
            {value}
          </span>
        )}
      ></TagInput>

      <br />
      <br />

      {/* 方式二：使用 valueDisplay 定义全部内容 */}
      <TagInput
        value={tags}
        onChange={setTags}
        valueDisplay={({ value, onClose }) =>
          value.map((item, index) => (
            <Tag
              key={item}
              closable
              style={{
                marginRight: '4px',
              }}
              onClose={() => onClose(index)}
            >
              <div>
                <img
                  src="https://tdesign.gtimg.com/site/avatar.jpg"
                  style={{
                    maxWidth: '18px',
                    maxHeight: '18px',
                    borderRadius: '50%',
                    verticalAlign: 'text-top',
                  }}
                />
                {item}
              </div>
            </Tag>
          ))
        }
        clearable
      ></TagInput>
    </Space>
  );
}

                  ===SPLIT===组建:<TagInput/>
                  使用描述：标签输入框状态可分为：正常、只读、禁用、成功、告警、错误等，其中 成功、告警、错误 等状态一般用于表单验证。此特性继承至 Input 输入框组件。
                  代码示例：import React, { useState } from 'react';
import { TagInput, Space } from 'tdesign-react';

const style = {
  width: '500px',
};
export default function TagInputStatusExample() {
  const [tags1, setTags1] = useState(['Vue', 'React', 'Miniprogram']);
  const [tags3, setTags3] = useState(['Vue', 'React', 'Miniprogram']);
  const [tags2, setTags2] = useState(['Vue', 'React', 'Miniprogram']);
  const [tags4, setTags4] = useState(['Vue', 'React', 'Miniprogram']);
  const [tags5, setTags5] = useState(['Vue', 'React', 'Miniprogram']);
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
      size="32px"
    >
      <Space>
        <label>禁用状态：</label>
        <TagInput style={style} value={tags1} onChange={setTags1} disabled />
      </Space>

      <Space>
        <label>只读状态：</label>
        <TagInput style={style} value={tags2} onChange={setTags2} tips="这是普通文本提示" readonly />
      </Space>

      <Space>
        <label>成功状态：</label>
        <TagInput style={style} value={tags3} onChange={setTags3} status="success" tips="校验通过文本提示" clearable />
      </Space>

      <Space>
        <label>告警状态：</label>
        <TagInput
          style={style}
          value={tags4}
          onChange={setTags4}
          status="warning"
          tips="校验不通过文本提示"
          clearable
        />
      </Space>

      <Space>
        <label>错误状态：</label>
        <TagInput
          style={style}
          value={tags5}
          onChange={setTags5}
          status="error"
          tips="校验存在严重问题文本提示"
          clearable
        />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<TagInput/>
                  使用描述：使用 tagProps 控制标签的所有属性，如：颜色设置。
                  代码示例：import React, { useState } from 'react';
import { TagInput, Space } from 'tdesign-react';

export default function TagInputThemeExample() {
  const [tags, setTags] = useState(['Vue', 'React', 'Miniprogram']);
  return (
    <Space
      direction="vertical"
      style={{
        width: '80%',
      }}
    >
      <TagInput
        value={tags}
        onChange={setTags}
        tagProps={{
          theme: 'primary',
        }}
      />
      <TagInput
        value={tags}
        onChange={setTags}
        tagProps={{
          theme: 'success',
        }}
      />
      <TagInput
        value={tags}
        onChange={setTags}
        tagProps={{
          theme: 'warning',
        }}
      />
      <TagInput
        value={tags}
        onChange={setTags}
        tagProps={{
          theme: 'danger',
        }}
      />
    </Space>
  );
}

                  ===SPLIT===组建:<TagInput/>
                  使用描述：宽度自适应的标签输入框 
                  代码示例：import React, { useState } from 'react';
import { TagInput } from 'tdesign-react';

const TagInputAutoWidth = () => {
  const [tags, setTags] = useState(['Vue', 'React']);
  const onChange = (val) => {
    setTags(val);
  };
  return <TagInput value={tags} onChange={onChange} autoWidth clearable />;
};
TagInputAutoWidth.displayName = 'TagInputAutoWidth';
export default TagInputAutoWidth;

                  ===SPLIT===组建:<TagInput/>
                  使用描述：可拖拽调整顺序的标签输入框 
                  代码示例：import React, { useState } from 'react';
import { TagInput, Space } from 'tdesign-react';

export default function TagInputBaseExample() {
  const [tags1, setTags1] = useState(['Vue', 'React', 'Angular']);
  const [tags2, setTags2] = useState(['Vue', 'React', 'Angular', 'Miniprogram']);
  const onTagInputEnter = (val, context) => {
    console.log(val, context);
  };
  const onChange = (val, context) => {
    console.log(val, context);
    setTags1(val);
  };
  const onChange2 = (val, context) => {
    console.log(val, context);
    setTags2(val);
  };
  const onPaste = (context) => {
    console.log(context);
  };
  const onDragSort = ({ currentIndex, targetIndex }) => {
    const temp = tags1[currentIndex];
    tags1[currentIndex] = tags1[targetIndex];
    tags1[targetIndex] = temp;
    setTags1([...tags1]);
  };
  const onDragSort2 = ({ currentIndex, targetIndex }) => {
    const temp = tags2[currentIndex];
    tags2[currentIndex] = tags2[targetIndex];
    tags2[targetIndex] = temp;
    setTags2([...tags2]);
  };
  return (
    <Space
      direction="vertical"
      style={{
        width: '80%',
      }}
    >
      <TagInput
        value={tags1}
        onChange={onChange}
        clearable
        dragSort
        onPaste={onPaste}
        onEnter={onTagInputEnter}
        onDragSort={onDragSort}
        placeholder="请输入"
      />

      <TagInput
        value={tags2}
        dragSort
        clearable
        excessTagsDisplayType="break-line"
        label="Controlled: "
        onChange={onChange2}
        onDragSort={onDragSort2}
        placeholder="请输入"
      />
    </Space>
  );
}

                  组建:<Radio/>
                  使用描述：最简单的单选框形式，常用于表单中数据选项的选择。
                  代码示例：import React from 'react';
import { Radio, Space } from 'tdesign-react';

export default function RadioControlledExample() {
  return (
    <Space>
      <Radio checked={false}>未选中</Radio>
      <Radio allowUncheck={true}>取消选中</Radio>
      <Radio checked>已选中</Radio>
      <Radio checked={false} disabled>
        禁用未选中
      </Radio>
      <Radio checked={true} disabled>
        禁用已选中
      </Radio>
    </Space>
  );
}

                  ===SPLIT===组建:<Radio/>
                  使用描述：按钮形式的单选框，选项更明显突出，适合强调选项的场景。
                  代码示例：import React from 'react';
import { Radio, Space } from 'tdesign-react';

export default function RadioControlledExample() {
  return (
    <Space direction="vertical">
      <Space direction="vertical">
        <h5>普通单选按钮</h5>
        <Radio.Group defaultValue="gz">
          <Radio value="bj">选项一</Radio>
          <Radio value="sh">选项二</Radio>
          <Radio value="gz">选项三</Radio>
          <Radio value="sz">选项四</Radio>
        </Radio.Group>
      </Space>
      <Space direction="vertical">
        <h5>边框型单选按钮</h5>
        <Radio.Group defaultValue="1">
          <Radio.Button value="1">选项一</Radio.Button>
          <Radio.Button value="2">选项二</Radio.Button>
          <Radio.Button value="3">选项三</Radio.Button>
          <Radio.Button value="1" disabled>
            选中禁用态
          </Radio.Button>
          <Radio.Button value="2" disabled>
            未选中禁用态
          </Radio.Button>
        </Radio.Group>
      </Space>
      <Space direction="vertical">
        <h5>填充型单选按钮</h5>

        <Radio.Group variant="default-filled" defaultValue="gz">
          <Radio.Button value="bj">选项一</Radio.Button>
          <Radio.Button value="gz">选项二</Radio.Button>
          <Radio.Button value="sz">选项三</Radio.Button>
          <Radio.Button value="fj">选项四</Radio.Button>
          <Radio.Button value="cd">选项五</Radio.Button>
        </Radio.Group>

        <Radio.Group variant="primary-filled" defaultValue="gz">
          <Radio.Button value="bj">选项一</Radio.Button>
          <Radio.Button value="gz">选项二</Radio.Button>
          <Radio.Button value="sz">选项三</Radio.Button>
          <Radio.Button value="fj">选项四</Radio.Button>
          <Radio.Button value="cd">选项五</Radio.Button>
        </Radio.Group>

        <Radio.Group variant="default-filled" defaultValue="bj">
          <Radio.Button value="fj" disabled>
            选项一
          </Radio.Button>
          <Radio.Button value="cd" disabled>
            选项二
          </Radio.Button>
          <Radio.Button value="sz" disabled>
            选项三
          </Radio.Button>
          <Radio.Button value="bj" disabled>
            选中禁用态
          </Radio.Button>
          <Radio.Button value="gz" disabled>
            未选中禁用态
          </Radio.Button>
        </Radio.Group>

        <Radio.Group variant="primary-filled" defaultValue="bj">
          <Radio.Button value="fj" disabled>
            选项一
          </Radio.Button>
          <Radio.Button value="cd" disabled>
            选项二
          </Radio.Button>
          <Radio.Button value="sz" disabled>
            选项三
          </Radio.Button>
          <Radio.Button value="bj" disabled>
            选中禁用态
          </Radio.Button>
          <Radio.Button value="gz" disabled>
            未选中禁用态
          </Radio.Button>
        </Radio.Group>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Radio/>
                  使用描述：提供大、中（默认）、小三种单选框。
                  代码示例：import React, { useState } from 'react';
import { Radio, Space } from 'tdesign-react';

export default function RadioExample() {
  const [gender1, setGender1] = useState('bj');
  const [gender2, setGender2] = useState('sh1');
  const [gender3, setGender3] = useState('gz2');
  return (
    <Space>
      <Space direction="vertical">
        <Radio.Group size="small" value={gender1} onChange={(value) => setGender1(value)}>
          <Radio.Button value="bj">北京</Radio.Button>
          <Radio.Button value="sh">上海</Radio.Button>
          <Radio.Button value="gz">广州</Radio.Button>
          <Radio.Button value="sz">深圳</Radio.Button>
        </Radio.Group>

        <Radio.Group value={gender2} onChange={(value) => setGender2(value)}>
          <Radio.Button value="bj1">北京</Radio.Button>
          <Radio.Button value="sh1">上海</Radio.Button>
          <Radio.Button value="gz1">广州</Radio.Button>
          <Radio.Button value="sz1">深圳</Radio.Button>
        </Radio.Group>

        <Radio.Group size="large" value={gender3} onChange={(value) => setGender3(value)}>
          <Radio.Button value="bj2">北京</Radio.Button>
          <Radio.Button value="sh2">上海</Radio.Button>
          <Radio.Button value="gz2">广州</Radio.Button>
          <Radio.Button value="sz2">深圳</Radio.Button>
        </Radio.Group>
      </Space>

      <Space direction="vertical">
        <Radio.Group variant="default-filled" size="small" value={gender1} onChange={(value) => setGender1(value)}>
          <Radio.Button value="bj">北京</Radio.Button>
          <Radio.Button value="sh">上海</Radio.Button>
          <Radio.Button value="gz">广州</Radio.Button>
          <Radio.Button value="sz">深圳</Radio.Button>
        </Radio.Group>

        <Radio.Group variant="default-filled" value={gender2} onChange={(value) => setGender2(value)}>
          <Radio.Button value="bj1">北京</Radio.Button>
          <Radio.Button value="sh1">上海</Radio.Button>
          <Radio.Button value="gz1">广州</Radio.Button>
          <Radio.Button value="sz1">深圳</Radio.Button>
        </Radio.Group>

        <Radio.Group variant="default-filled" size="large" value={gender3} onChange={(value) => setGender3(value)}>
          <Radio.Button value="bj2">北京</Radio.Button>
          <Radio.Button value="sh2">上海</Radio.Button>
          <Radio.Button value="gz2">广州</Radio.Button>
          <Radio.Button value="sz2">深圳</Radio.Button>
        </Radio.Group>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Radio/>
                  使用描述：将单选框按一定属性组合使用的单选框组。
                  代码示例：import React, { useState } from 'react';
import { Radio, Space } from 'tdesign-react';

const objOptions = [
  {
    value: 'bj',
    label: '北京',
  },
  {
    value: 'sh',
    label: '上海',
  },
  {
    value: 'gz',
    label: '广州',
    disabled: true,
  },
  {
    value: 'sz',
    label: '深圳',
  },
];
// eslint-disable-next-line prefer-const
let itemOptions = ['北京', '上海', '广州', '深圳'];
export default function RadioExample() {
  const [city, setCity] = useState('bj');
  const [city2, setCity2] = useState('sz');
  const [city3, setCity3] = useState('深圳');
  return (
    <Space direction="vertical">
      <Radio.Group value={city} onChange={(val) => setCity(val)} allowUncheck>
        <Radio value="bj">北京</Radio>
        <Radio value="sh">上海</Radio>
        <Radio value="gz">广州</Radio>
        <Radio value="sz">深圳</Radio>
      </Radio.Group>

      <Radio.Group value={city2} options={objOptions} allowUncheck onChange={(val) => setCity2(val)} />
      <Radio.Group
        variant="default-filled"
        theme="button"
        value={city2}
        options={objOptions}
        onChange={(val) => setCity2(val)}
      />

      <Radio.Group theme="button" value={city3} options={itemOptions} onChange={(val) => setCity3(val)} />
      <Radio.Group
        variant="primary-filled"
        theme="button"
        value={city3}
        options={itemOptions}
        onChange={(val) => setCity3(val)}
      />
    </Space>
  );
}

                  组建:<RangeInput/>
                  使用描述：基础范围输入框 
                  代码示例：import React from 'react';
import { RangeInput } from 'tdesign-react';

export default function BaseExample() {
  return <RangeInput />;
}

                  ===SPLIT===组建:<RangeInput/>
                  使用描述：提供大、中（默认）、小三种不同尺寸的的标签输入框。
                  代码示例：import React from 'react';
import { RangeInput, Space } from 'tdesign-react';

export default function BaseExample() {
  return (
    <Space direction="vertical">
      <RangeInput size="small" />
      <RangeInput />
      <RangeInput size="large" />
    </Space>
  );
}

                  ===SPLIT===组建:<RangeInput/>
                  使用描述：标签输入框状态可分为：正常、只读、禁用、成功、告警、错误等，其中 成功、告警、错误 等状态一般用于表单验证。此特性继承至 Input 输入框组件。
                  代码示例：import React from 'react';
import { RangeInput, Space } from 'tdesign-react';

export default function BaseExample() {
  return (
    <Space direction="vertical">
      <RangeInput status="success" />
      <RangeInput status="warning" />
      <RangeInput status="error" />
    </Space>
  );
}

                  ===SPLIT===组建:<RangeInput/>
                  使用描述：可使用 RangeInputPopup 组件
                  代码示例：import React from 'react';
import { RangeInputPopup } from 'tdesign-react';

export default function BaseExample() {
  return <RangeInputPopup panel={<div>hello world</div>} />;
}

                  组建:<Select/>
                  使用描述：使用 options 配置下拉选项时，如果数据字段不是 label 和 value，可以使用 keys 定义别名。
                  代码示例：import React, { useState } from 'react';
import { Select, Tooltip } from 'tdesign-react';

export default function SingleSelect() {
  const [value, setValue] = useState('');
  const onChange = (value) => {
    setValue(value);
  };
  return (
    <Select
      value={value}
      onChange={onChange}
      style={{
        width: '40%',
      }}
      clearable
      options={[
        {
          label: '架构云',
          value: '1',
          title: '架构云选项',
        },
        {
          label: '大数据',
          value: '2',
        },
        {
          label: '区块链',
          value: '3',
        },
        {
          label: '物联网',
          value: '4',
          disabled: true,
        },
        {
          label: '人工智能',
          value: '5',
          content: (
            <Tooltip content="人工智能">
              <span>人工智能（新）</span>
            </Tooltip>
          ),
          title: null,
        },
      ]}
    />
  );
}

                  ===SPLIT===组建:<Select/>
                  使用描述：提供多选的选择器，通过标签展示多选内容。添加属性 multiple 即可设置为多选。
                  代码示例：import React, { useState } from 'react';
import { Select, Space } from 'tdesign-react';

const { Option } = Select;
const options1 = [
  {
    label: '全选',
    checkAll: true,
  },
  {
    label: '架构云',
    value: '1',
  },
  {
    label: '大数据',
    value: '2',
  },
  {
    label: '区块链',
    value: '3',
  },
  {
    label: '物联网',
    value: '4',
    disabled: true,
  },
  {
    label: '人工智能',
    value: '5',
    content: <span>人工智能（新）</span>,
  },
  {
    label: '计算场景',
    value: '6',
  },
];
const options2 = [
  {
    label: '云服务器',
    value: '1',
  },
  {
    label: '云数据库',
    value: '2',
  },
  {
    label: '域名注册',
    value: '3',
  },
  {
    label: '网站备案',
    value: '4',
  },
  {
    label: '对象存储',
    value: '5',
  },
  {
    label: '低代码平台',
    value: '6',
    content: <span>低代码平台（新）</span>,
  },
];
const MultipleSelect = () => {
  const [value, setValue] = useState(['3', '5']);
  const handleChange = (v) => {
    setValue(v);
  };
  return (
    <Space
      breakLine
      style={{
        width: '100%',
      }}
    >
      <Select
        value={value}
        onChange={handleChange}
        filterable
        multiple
        options={options1}
        onRemove={(options) => {
          console.log('onRemove', options);
        }}
      />
      <Select
        defaultValue={['1', '2', '3', '4', '5', '6']}
        placeholder="请选择云产品"
        multiple
        onRemove={(options) => {
          console.log('onRemove', options);
        }}
      >
        <Option value="all" label="全选" checkAll></Option>
        {options2.map((item) => (
          <Option value={item.value} label={item.label} key={item.value} content={item.content}></Option>
        ))}
      </Select>
    </Space>
  );
};
export default MultipleSelect;

                  ===SPLIT===组建:<Select/>
                  使用描述：对信息进行分组的选择器，能够直观呈现方便用户辨识。在有层级关系，但选项内容较少的场景下使用。
                  代码示例：import React, { useState } from 'react';
import { Select, Space } from 'tdesign-react';

const { Option, OptionGroup } = Select;
const OptionGroupSelect = () => {
  const [value, setValue] = useState('');
  const [value2, setValue2] = useState([1]);
  const onChange = (value) => {
    setValue(value);
  };
  const onChange2 = (value) => {
    setValue2(value);
  };
  const options1 = [
    {
      label: '选项一',
      value: 1,
    },
    {
      label: '选项二',
      value: 2,
    },
  ];
  const options2 = [
    {
      label: '选项三',
      value: 4,
    },
    {
      label: '选项四',
      value: 5,
    },
    {
      label: '选项五',
      value: 6,
    },
  ];
  const options3 = [
    {
      label: '选项六',
      value: 7,
    },
    {
      label: '选项七',
      value: 8,
    },
    {
      label: '选项八',
      value: 9,
    },
  ];
  const groupOptions = [
    {
      group: '分组一',
      children: options1,
    },
    {
      group: '分组二',
      children: options2,
    },
    {
      group: '分组三',
      divider: true,
      children: options3,
    },
  ];
  return (
    <Space
      breakLine
      style={{
        width: '100%',
      }}
    >
      <Select
        value={value}
        onChange={onChange}
        style={{
          width: '40%',
        }}
        options={groupOptions}
        filterable
      />
      <Select
        value={value2}
        onChange={onChange2}
        style={{
          width: '40%',
        }}
        multiple
        filterable
      >
        <Option value="all" label="全选" checkAll></Option>
        <OptionGroup label="分组一" divider={true}>
          {options1.map((item, index) => (
            <Option label={item.label} value={item.value} key={index} />
          ))}
        </OptionGroup>
        <OptionGroup label="分组二" divider={true}>
          {options2.map((item, index) => (
            <Option label={item.label} value={item.value} key={index} />
          ))}
        </OptionGroup>
        <OptionGroup label="分组三" divider={true}>
          {options3.map((item, index) => (
            <Option label={item.label} value={item.value} key={index} />
          ))}
        </OptionGroup>
      </Select>
    </Space>
  );
};
export default OptionGroupSelect;

                  ===SPLIT===组建:<Select/>
                  使用描述：提供 普通状态、禁用状态、加载状态 三种状态的选择器。
                  代码示例：import React from 'react';
import { Select, Space } from 'tdesign-react';

function Status() {
  return (
    <Space>
      <Select
        options={[
          {
            label: '选项1',
            value: '1',
          },
          {
            label: '选项2',
            value: '2',
          },
          {
            label: '选项3',
            value: '3',
          },
        ]}
      ></Select>
      <Select
        options={[
          {
            label: '选项1',
            value: '1',
          },
          {
            label: '选项2',
            value: '2',
          },
          {
            label: '选项3',
            value: '3',
          },
        ]}
        disabled
      ></Select>
      <Select
        options={[
          {
            label: '选项1',
            value: '1',
          },
          {
            label: '选项2',
            value: '2',
          },
          {
            label: '选项3',
            value: '3',
          },
        ]}
        loading
      ></Select>
    </Space>
  );
}
export default Status;

                  ===SPLIT===组建:<Select/>
                  使用描述：提供大、中（默认）、小三种不同尺寸的的选择器。
                  代码示例：import React, { useState } from 'react';
import { Select, Space } from 'tdesign-react';

const { Option } = Select;
const SelectSizes = () => {
  const [value1, setValue1] = useState('');
  const onChangeValue1 = (value) => {
    setValue1(value);
  };
  const [value2, setValue2] = useState('');
  const onChangeValue2 = (value) => {
    setValue2(value);
  };
  const [value3, setValue3] = useState('');
  const onChangeValue3 = (value) => {
    setValue3(value);
  };
  return (
    <Space breakLine>
      <Select value={value1} onChange={onChangeValue1} size="small">
        <Option key="1" label="选项一" value="1" />
        <Option key="2" label="选项二" value="2" />
        <Option key="3" label="选项三" value="3" />
      </Select>

      <Select value={value2} onChange={onChangeValue2}>
        <Option key="1" label="选项一" value="1" />
        <Option key="2" label="选项二" value="2" />
        <Option key="3" label="选项三" value="3" />
      </Select>

      <Select value={value3} onChange={onChangeValue3} size="large">
        <Option key="1" label="选项一" value="1" />
        <Option key="2" label="选项二" value="2" />
        <Option key="3" label="选项三" value="3" />
      </Select>
    </Space>
  );
};
export default SelectSizes;

                  ===SPLIT===组建:<Select/>
                  使用描述：自定义下拉选项的选择器 
                  代码示例：import React, { useState } from 'react';
import { Select } from 'tdesign-react';

const { Option } = Select;
const options = [
  {
    label: '用户一',
    value: '1',
    description: '这是一段用户描述信息，可自定义内容',
  },
  {
    label: '用户二',
    value: '2',
    description: '这是一段用户描述信息，可自定义内容',
  },
  {
    label: '用户三',
    value: '3',
    description: '这是一段用户描述信息，可自定义内容',
  },
  {
    label: '用户四',
    value: '4',
    description: '这是一段用户描述信息，可自定义内容',
  },
  {
    label: '用户五',
    value: '5',
    description: '这是一段用户描述信息，可自定义内容',
  },
  {
    label: '用户六',
    value: '6',
    description: '这是一段用户描述信息，可自定义内容',
  },
  {
    label: '用户七',
    value: '7',
    description: '这是一段用户描述信息，可自定义内容',
  },
  {
    label: '用户八',
    value: '8',
    description: '这是一段用户描述信息，可自定义内容',
  },
  {
    label: '用户九',
    value: '9',
    description: '这是一段用户描述信息，可自定义内容',
  },
];
const avatarUrl = 'https://tdesign.gtimg.com/site/avatar.jpg';
export default function CustomOptions() {
  const [value, setValue] = useState('1');
  const onChange = (value) => {
    setValue(value);
  };
  return (
    <Select
      value={value}
      onChange={onChange}
      style={{
        width: '300px',
      }}
      clearable
    >
      {options.map((option, idx) => (
        <Option
          style={{
            height: '60px',
          }}
          key={idx}
          value={option.value}
          label={option.label}
        >
          <div
            style={{
              display: 'flex',
            }}
          >
            <img
              src={avatarUrl}
              style={{
                maxWidth: '40px',
                borderRadius: '50%',
              }}
            />
            <div
              style={{
                marginLeft: '16px',
              }}
            >
              <div>{option.label}</div>
              <div
                style={{
                  fontSize: '13px',
                  color: 'var(--td-gray-color-9)',
                }}
              >
                {option.description}
              </div>
            </div>
          </div>
        </Option>
      ))}
    </Select>
  );
}

                  ===SPLIT===组建:<Select/>
                  使用描述：可以使用 panelTopContent 和 panelBottomContent 自定义下拉面板的顶部内容和底部内容。
                  代码示例：import React, { useState } from 'react';
import { Select, Divider, Button, Input, Space } from 'tdesign-react';

const OPTIONS = [
  {
    label: '架构云',
    value: '1',
  },
  {
    label: '大数据',
    value: '2',
  },
  {
    label: '区块链',
    value: '3',
  },
  {
    label: '物联网',
    value: '4',
    disabled: true,
  },
  {
    label: '人工智能',
    value: '5',
  },
];
export default function PanelExample() {
  const [topOptions, setTopOptions] = useState(OPTIONS);
  const [bottomOptions, setBottomOptions] = useState(OPTIONS);
  const [editOrCreate, toggleEditOrCreate] = useState('edit');
  const [inputVal, changeInputVal] = useState('');
  const handleOnSearch = (v) => {
    const filteredValue = OPTIONS.filter((item) => item.label.indexOf(v) !== -1);
    setTopOptions(filteredValue);
  };
  const handleClickConfirm = () => {
    const id = Math.round(Math.random() * 100);
    const newBottomOptions = bottomOptions.concat({
      label: inputVal,
      value: id,
    });
    setBottomOptions(newBottomOptions);
    changeInputVal('');
    toggleEditOrCreate('edit');
  };
  return (
    <Space>
      <Select
        clearable
        placeholder="请选择云解决方案"
        style={{
          width: '300px',
          marginRight: '20px',
        }}
        options={topOptions}
        panelTopContent={
          <div
            style={{
              position: 'sticky',
              backgroundColor: 'var(--td-bg-color-container)',
              top: 0,
              zIndex: 10,
              paddingTop: 8,
            }}
          >
            <Input
              placeholder="请输入关键词搜索"
              onChange={handleOnSearch}
              style={{
                width: 'calc(100% - 4px)',
                margin: '0 auto',
              }}
            />
            <Divider
              style={{
                margin: '8px 0 0',
              }}
            />
          </div>
        }
      />
      <Select
        placeholder="请选择云产品"
        style={{
          width: '300px',
        }}
        options={bottomOptions}
        clearable
        panelBottomContent={
          <div
            className="select-panel-footer"
            style={{
              position: 'sticky',
              bottom: 0,
              backgroundColor: 'var(--td-bg-color-container)',
              zIndex: 2,
            }}
          >
            {editOrCreate === 'edit' ? (
              <div
                style={{
                  padding: '8px 6px',
                  borderTop: '1px solid var(--td-border-level-2-color)',
                }}
              >
                <Button theme="primary" size="small" variant="text" onClick={() => toggleEditOrCreate('create')}>
                  新增选项
                </Button>
              </div>
            ) : (
              <div
                style={{
                  padding: 8,
                  borderTop: '1px solid var(--td-border-level-2-color)',
                }}
              >
                <Input size="small" autofocus value={inputVal} onChange={(v) => changeInputVal(v)}></Input>
                <Button
                  size="small"
                  style={{
                    marginTop: '12px',
                  }}
                  onClick={handleClickConfirm}
                >
                  确认
                </Button>
                <Button
                  theme="default"
                  size="small"
                  style={{
                    marginTop: '12px',
                    marginLeft: '8px',
                  }}
                  onClick={() => toggleEditOrCreate('edit')}
                >
                  取消
                </Button>
              </div>
            )}
          </div>
        }
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Select/>
                  使用描述：自定义选中项的选择器 
                  代码示例：import React, { useState } from 'react';
import { Select, Tag, Space } from 'tdesign-react';

const options = [
  {
    label: '选项一',
    value: '1',
  },
  {
    label: '选项二',
    value: '2',
  },
  {
    label: '选项三',
    value: '3',
  },
  {
    label: '选项四',
    value: '4',
  },
  {
    label: '选项五',
    value: '5',
  },
  {
    label: '选项六',
    value: '6',
  },
  {
    label: '选项七',
    value: '7',
  },
  {
    label: '选项八',
    value: '8',
  },
  {
    label: '选项九',
    value: '9',
  },
];
const CustomSelected = () => {
  const [value, setValue] = useState(['1', '2', '3']);
  const onChange = (value) => {
    setValue(value);
  };
  return (
    <Space>
      <Select
        clearable
        defaultValue={'1'}
        style={{
          width: '300px',
          marginRight: '20px',
        }}
        valueDisplay={({ value }) => (value ? `选中${value}` : null)}
      >
        {options.map((v, i) => (
          <Select.Option value={v.value} key={i}>
            {v.label}
          </Select.Option>
        ))}
      </Select>
      <Select
        clearable
        multiple
        value={value}
        onChange={onChange}
        style={{
          width: '300px',
          marginRight: '20px',
        }}
        options={[
          {
            label: '选项一',
            value: '1',
          },
          {
            label: '选项二',
            value: '2',
          },
          {
            label: '选项三',
            value: '3',
          },
          {
            label: '选项四',
            value: '4',
          },
          {
            label: '选项五',
            value: '5',
          },
          {
            label: '选项六',
            value: '6',
          },
          {
            label: '选项七',
            value: '7',
          },
          {
            label: '选项八',
            value: '8',
          },
          {
            label: '选项九',
            value: '9',
          },
        ]}
        valueDisplay={({ value, onClose }) =>
          Array.isArray(value) && value.length > 0
            ? value.map((v, idx) => (
                <Tag
                  key={idx}
                  onClose={(context) => {
                    context.e && context.e.stopPropagation();
                    onClose(idx);
                  }}
                  closable
                >{`${v.label}选项`}</Tag>
              ))
            : null
        }
      />
    </Space>
  );
};
export default CustomSelected;

                  ===SPLIT===组建:<Select/>
                  使用描述：多选情况下，超出该数值的选中项折叠。
                  代码示例：import React, { useState } from 'react';
import { Select, Space, RadioGroup, Checkbox, Popup, Tag } from 'tdesign-react';

const options = [
  {
    label: '选项一',
    value: '1',
  },
  {
    label: '选项二',
    value: '2',
  },
  {
    label: '选项三',
    value: '3',
  },
];
const MultipleSelect = () => {
  const [value, setValue] = useState(['1', '3']);
  const [size, setSize] = useState('medium');
  const [disabled, setDisabled] = useState(false);
  const [readonly, setReadOnly] = useState(false);
  const [minCollapsedNum] = useState(1);
  const onChange = (value) => {
    setValue(value);
  };
  const renderCollapsedItems = ({ collapsedSelectedItems, onClose }) => (
    <Popup
      key={'tags'}
      overlayInnerStyle={{
        padding: '5px',
      }}
      content={
        <Space size={5} align="center">
          {collapsedSelectedItems.map((item, index) => (
            <Tag
              key={index}
              size={size}
              disabled={disabled}
              closable={!readonly && !disabled}
              onClose={(context) =>
                onClose({
                  e: context.e,
                  index: minCollapsedNum + index,
                })
              }
            >
              {item.label}
            </Tag>
          ))}
        </Space>
      }
    >
      <Tag size={size} disabled={disabled}>
        More({collapsedSelectedItems?.length})
      </Tag>
    </Popup>
  );
  return (
    <Space
      breakLine
      style={{
        width: '100%',
      }}
    >
      <h3>default:</h3>
      <Select
        value={value}
        onChange={onChange}
        multiple
        style={{
          width: '40%',
        }}
        options={options}
        minCollapsedNum={1}
      />

      <h3>use collapsedItems:</h3>
      <Space align="center">
        <div>size control:</div>
        <RadioGroup value={size} options={['small', 'medium', 'large']} onChange={(value) => setSize(value)} />
      </Space>
      <Space align="center">
        <span>disabled control:</span>
        <Checkbox checked={disabled} onChange={(value) => setDisabled(value)} />
      </Space>
      <Space align="center">
        <span>readonly control:</span>
        <Checkbox checked={readonly} onChange={(value) => setReadOnly(value)} />
      </Space>
      <Select
        value={value}
        onChange={onChange}
        multiple
        style={{
          width: '40%',
        }}
        options={options}
        minCollapsedNum={minCollapsedNum}
        collapsedItems={renderCollapsedItems}
        size={size}
        disabled={disabled}
        readonly={readonly}
      />
    </Space>
  );
};
export default MultipleSelect;

                  ===SPLIT===组建:<Select/>
                  使用描述：3、仅有filterable时，执行默认过滤 不区分大小写。
                  代码示例：import React, { useState } from 'react';
import { Select, Space } from 'tdesign-react';

const { Option } = Select;
const FilterableSelect = () => {
  const [value, setValue] = useState('');
  const [value2, setValue2] = useState(['1']);
  const onChange = (value) => {
    setValue(value);
  };
  const onMultipleChange = (value) => {
    setValue2(value);
  };
  const options = [
    {
      label: '选项一',
      value: '1',
    },
    {
      label: '选项二',
      value: '2',
    },
    {
      label: '选项三',
      value: '3',
    },
  ];
  const filterMethod = (search, option) => {
    console.log('search:', search, ', option:', option);
    return option.label.indexOf(search) !== -1;
  };
  const handleBlur = ({ value, e }) => {
    console.log('handleBlur: ', value, e);
  };
  const handleFocus = ({ value, e }) => {
    console.log('handleFocus: ', value, e);
  };
  const handleEnter = (context) => {
    console.log('handleEnter: ', context);
  };
  return (
    <Space
      breakLine
      style={{
        width: '100%',
      }}
    >
      <Select
        value={value}
        onChange={onChange}
        placeholder="-请选择-"
        filterable
        style={{
          width: '400px',
          display: 'inline-block',
        }}
        onBlur={handleBlur}
        onFocus={handleFocus}
        onEnter={handleEnter}
      >
        {options.map((option, index) => (
          <Option key={index} value={option.value} label={option.label}></Option>
        ))}
      </Select>
      <Select
        value={value2}
        onChange={onMultipleChange}
        multiple
        placeholder="-请选择-"
        options={options}
        filterable
        filter={filterMethod}
        style={{
          width: '400px',
          display: 'inline-block',
        }}
        onBlur={handleBlur}
        onFocus={handleFocus}
      />
    </Space>
  );
};
export default FilterableSelect;

                  ===SPLIT===组建:<Select/>
                  使用描述：可根据需求定制选择器内容。在有复杂逻辑或有特定诉求的业务场景时使用。reserveKeyword 用于 multiple 且 filterable 时，选中一个选项后保留当前的搜索关键词。
                  代码示例：import React, { useState } from 'react';
import { Select } from 'tdesign-react';

const RemoteSearchSelect = () => {
  const [value, setValue] = useState('');
  const [loading, setLoading] = useState(false);
  const [options, setOptions] = useState([]);
  const onChange = (value) => {
    setValue(value);
  };
  const handleRemoteSearch = (search) => {
    setLoading(true);
    setTimeout(() => {
      setLoading(false);
      let options = [];
      if (search) {
        options = [
          {
            value: `腾讯_test1`,
            label: `腾讯_test1`,
          },
          {
            value: `腾讯_test2`,
            label: `腾讯_test2`,
          },
          {
            value: `腾讯_test3`,
            label: `腾讯_test3`,
          },
        ].filter((item) => item.label.includes(search));
      }
      setOptions(options);
    }, 500);
  };
  return (
    <Select
      filterable
      value={value}
      onChange={onChange}
      style={{
        width: '40%',
      }}
      loading={loading}
      onSearch={handleRemoteSearch}
      options={options}
    />
  );
};
export default RemoteSearchSelect;

                  ===SPLIT===组建:<Select/>
                  使用描述：允许用户创建新条目，需配合 filterable 使用。
                  代码示例：import React, { useState } from 'react';
import { Select } from 'tdesign-react';

export default function SelectCreatable() {
  const [value, setValue] = useState('');
  const [options, changeOptions] = useState([
    {
      label: '选项一',
      value: '1',
    },
    {
      label: '选项二',
      value: '2',
    },
    {
      label: '选项三',
      value: '3',
    },
  ]);
  const onChange = (value) => {
    setValue(value);
  };
  const handleOnCreate = (value) => {
    changeOptions(
      options.concat([
        {
          value,
          label: value,
        },
      ]),
    );
  };
  return (
    <Select
      value={value}
      onChange={onChange}
      style={{
        width: '40%',
      }}
      options={options}
      filterable
      creatable
      onCreate={handleOnCreate}
    />
  );
}

                  ===SPLIT===组建:<Select/>
                  使用描述：限制多选选择器的最大可选数目。通常在需要限制多选可选数目时使用。
                  代码示例：import React, { useState } from 'react';
import { Select } from 'tdesign-react';

const { Option } = Select;
const SelectMax = () => {
  const [value, setValue] = useState(['1']);
  const onChange = (value) => {
    setValue(value);
  };
  return (
    <Select
      value={value}
      onChange={onChange}
      multiple
      style={{
        width: '40%',
      }}
      max={2}
    >
      <Option key="1" label="选项一" value="1" />
      <Option key="2" label="选项二" value="2" />
      <Option key="3" label="选项三" value="3" />
    </Select>
  );
};
export default SelectMax;

                  ===SPLIT===组建:<Select/>
                  使用描述：可定制前缀图标。
                  代码示例：import React, { useState } from 'react';
import { Select } from 'tdesign-react';
import { BrowseIcon } from 'tdesign-icons-react';

const SelectPrefix = () => {
  const [value, setValue] = useState('');
  const onChange = (value) => {
    setValue(value);
  };
  return (
    <Select
      value={value}
      onChange={onChange}
      style={{
        width: '40%',
      }}
      prefixIcon={
        <BrowseIcon
          style={{
            marginRight: '8px',
          }}
        />
      }
      options={[
        {
          label: '选项一',
          value: '1',
        },
        {
          label: '选项二',
          value: '2',
        },
        {
          label: '选项三',
          value: '3',
        },
      ]}
    />
  );
};
export default SelectPrefix;

                  ===SPLIT===组建:<Select/>
                  使用描述：通过文字按钮触发的选择器，用于修改内容。通常在空间受限、并且需要轻量化选择的场景使用。
                  代码示例：import React, { useState } from 'react';
import { Select } from 'tdesign-react';

const SelectNoborder = () => {
  const [value, setValue] = useState('1');
  const onChange = (value) => {
    setValue(value);
  };
  return (
    <Select
      value={value}
      onChange={onChange}
      borderless
      clearable={true}
      style={{
        width: '40%',
      }}
      options={[
        {
          label: '已选择的选项',
          value: '1',
        },
        {
          label: '短的选项二',
          value: '2',
        },
        {
          label: '选项内容过长的选择器选项',
          value: '3',
        },
      ]}
    ></Select>
  );
};
export default SelectNoborder;

                  ===SPLIT===组建:<Select/>
                  使用描述：定制已选项输出值类型。需要输出选中值包含 label 时使用。
                  代码示例：import React, { useState } from 'react';
import { Select, Space } from 'tdesign-react';

const { Option } = Select;
const LabelInValueSelect = () => {
  const [value, setValue] = useState({
    label: 'Apple',
    value: 'apple',
  });
  const onChange = (value) => {
    console.log('Value', value);
    setValue(value);
  };
  const [value2, setValue2] = useState([
    {
      text: 'Apple',
      data: 'apple',
      type: 'fruit',
    },
  ]);
  const onChange2 = (value) => {
    console.log('Value', value);
    setValue2(value);
  };
  const [value3, setValue3] = useState({
    text: 'Apple',
    data: 'apple',
    type: 'fruit',
  });
  const onChange3 = (value) => {
    console.log('Value', value);
    setValue3(value);
  };
  return (
    <Space
      style={{
        width: '100%',
      }}
    >
      <Select value={value} onChange={onChange} valueType="object">
        <Option key="apple" label="Apple" value="apple" />
        <Option key="orange" label="Orange" value="orange" />
        <Option key="banana" label="Banana" value="banana" />
      </Select>
      <Select
        value={value3}
        onChange={onChange3}
        valueType="object"
        keys={{
          label: 'text',
          value: 'data',
        }}
        options={[
          {
            text: 'Apple',
            data: 'apple',
            type: 'fruit',
          },
          {
            text: 'Orange',
            data: 'orange',
            type: 'fruit',
          },
          {
            text: 'Banana',
            data: 'banana',
            type: 'fruit',
          },
        ]}
      />
      <Select
        value={value2}
        onChange={onChange2}
        multiple
        valueType="object"
        keys={{
          label: 'text',
          value: 'data',
        }}
        options={[
          {
            text: 'Select All',
            checkAll: true,
          },
          {
            text: 'Apple',
            data: 'apple',
            type: 'fruit',
          },
          {
            text: 'Orange',
            data: 'orange',
            type: 'fruit',
          },
          {
            text: 'Banana',
            data: 'banana',
            type: 'fruit',
          },
        ]}
      />
    </Space>
  );
};
export default LabelInValueSelect;

                  ===SPLIT===组建:<Select/>
                  使用描述：下拉框宽度默认和输入框宽度同宽，如果内容宽度超出会自动变宽。可使用 popupProps.overlayInnerStyle 自由控制宽度。
                  代码示例：import React, { useState } from 'react';
import { Select, Space } from 'tdesign-react';

const SelectPopupProps = () => {
  const [value, setValue] = useState('1');
  const onChange = (value) => {
    setValue(value);
  };
  return (
    <Space>
      <Select
        value={value}
        onChange={onChange}
        style={{
          width: '300px',
          display: 'inline-block',
        }}
        options={[
          {
            label: '固定300px宽度',
            value: '1',
          },
          {
            label: '选项内容超长超长超长超长超长超长超长超长超长超长超长的选项',
            value: '2',
          },
        ]}
      ></Select>
      <Select
        value={value}
        onChange={onChange}
        style={{
          width: '300px',
        }}
        popupProps={{
          overlayInnerStyle: {
            width: '300px',
          },
          overlayStyle: {
            fontWeight: 'normal',
          },
          overlayClassName: 'select-custom-overlay-class',
          overlayInnerClassName: 'select-custom-overlay-inner-class',
        }}
        options={[
          {
            label: '下拉框强制和输入框同宽',
            value: '1',
          },
          {
            label: '选项内容超长超长超长超长超长超长超长超长超长超长超长的选项',
            value: '2',
          },
        ]}
      ></Select>
    </Space>
  );
};
export default SelectPopupProps;

                  ===SPLIT===组建:<Select/>
                  使用描述：业务中常常有选项通过滚动触底持续加载的需求，通过popup.onScroll或popup.onScrollToBottom，可以快速实现滚动加载选项的能力。
                  代码示例：import React, { useState } from 'react';
import { Select } from 'tdesign-react';

const options = [];
for (let i = 0; i < 15; i++) {
  options.push({
    label: `选项${i + 1}`,
    value: String(i),
  });
}
export default function ScrollBottom() {
  const [dynamicOptions, changeDynamicOptions] = useState(options);

  // 通过滚动事件自行判断
  // const handleScroll = ({ e }) => {
  //   const { scrollTop, clientHeight, scrollHeight } = e.target;
  //   if (clientHeight + Math.floor(scrollTop) === scrollHeight) {
  //     console.log('到底部了');
  //     changeDynamicOptions((dynamicOptions) =>
  //       dynamicOptions.concat({
  //         label: `滚动新增选项${dynamicOptions.length}`,
  //         value: dynamicOptions.length,
  //       }),
  //     );
  //   }
  // };

  // 直接使用滚动触底事件
  const handleScrollToBottom = () => {
    changeDynamicOptions((dynamicOptions) =>
      dynamicOptions.concat({
        label: `滚动新增选项${dynamicOptions.length}`,
        value: dynamicOptions.length,
      }),
    );
  };
  return (
    <Select
      style={{
        width: '40%',
      }}
      clearable
      options={dynamicOptions}
      popupProps={{
        // onScroll: handleScroll,
        onScrollToBottom: handleScrollToBottom,
      }}
    />
  );
}

                  ===SPLIT===组建:<Select/>
                  使用描述：虚拟滚动一般用于数据量较大的场景，设置 scroll={ type: 'virtual' } 即可开启虚拟滚动模式，通过 scroll.bufferSize 预设加载过程中提前加载的数据数量。为保证组件收益最大化，当数据量小于 threshold 时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动，threshold 默认为 100。
                  代码示例：import React, { useState } from 'react';
import { Space, Select, Input, Divider } from 'tdesign-react';

const { Option } = Select;
const options = [];
for (let i = 0; i < 10000; i++) {
  options.push({
    label: `选项${i + 1}`,
    value: String(i),
  });
}
function VirtualScroll() {
  const [currentOptions, setCurrentOptions] = useState(options);
  const handleOnSearch = (v) => {
    const filteredOptions = options.filter((item) => item.label.indexOf(v) !== -1);
    setCurrentOptions(filteredOptions);
  };
  return (
    <Space>
      {/* 开启虚拟滚动 请为select的panel设定好height 通过popupProps进行透传  */}
      <Select
        options={currentOptions}
        style={{
          width: '300px',
        }}
        scroll={{
          type: 'virtual',
        }}
        popupProps={{
          overlayInnerStyle: {
            height: '300px',
          },
        }}
        panelTopContent={
          <div
            style={{
              position: 'sticky',
              backgroundColor: 'var(--td-bg-color-container)',
              top: 0,
              zIndex: 10,
              padding: 6,
            }}
          >
            <Input
              placeholder="请输入关键词搜索"
              onChange={handleOnSearch}
              style={{
                width: 'calc(100% - 4px)',
                margin: '0 auto',
              }}
            />
            <Divider
              style={{
                margin: '8px 0 0',
              }}
            />
          </div>
        }
      />
      <Select
        options={options}
        style={{
          width: '300px',
        }}
        scroll={{
          type: 'virtual',
        }}
        popupProps={{
          overlayInnerStyle: {
            height: '300px',
          },
        }}
      >
        {options.map((item, index) => (
          <Option key={index} label={item.label} value={item.value}></Option>
        ))}
      </Select>
    </Space>
  );
}
export default VirtualScroll;

                  组建:<SelectInput/>
                  使用描述：可使用 SelectInput 自由定制任何风格的单选选择器。
                  代码示例：import React, { useState, useEffect } from 'react';
import { SelectInput } from 'tdesign-react';
import { ChevronDownIcon } from 'tdesign-icons-react';

const classStyles = `
<style>
.tdesign-demo__select-input-ul-single {
  display: flex;
  flex-direction: column;
  padding: 0;
  gap: 2px;
}
.tdesign-demo__select-input-ul-single > li {
  display: block;
  border-radius: 3px;
  line-height: 22px;
  cursor: pointer;
  padding: 3px 8px;
  color: var(--td-text-color-primary);
  transition: background-color 0.2s linear;
  white-space: nowrap;
  word-wrap: normal;
  overflow: hidden;
  text-overflow: ellipsis;
}

.tdesign-demo__select-input-ul-single > li:hover {
  background-color: var(--td-bg-color-container-hover);
}
</style>
`;
const OPTIONS = [
  {
    label: 'tdesign-vue',
    value: 1,
  },
  {
    label: 'tdesign-react',
    value: 2,
  },
  {
    label: 'tdesign-miniprogram',
    value: 3,
  },
  {
    label: 'tdesign-angular',
    value: 4,
  },
  {
    label: 'tdesign-mobile-vue',
    value: 5,
  },
  {
    label: 'tdesign-mobile-react',
    value: 6,
  },
];
export default function SelectInputSingle() {
  // const selectValue = useState('tdesign-vue');
  const [selectValue, setSelectValue] = useState({
    label: 'tdesign-vue',
    value: 1,
  });
  // const selectValue = useState([{ label: 'tdesign-vue', value: 1 }]);

  const [popupVisible, setPopupVisible] = useState(false);
  const onOptionClick = (item) => {
    setSelectValue(item);
    // 选中后立即关闭浮层
    setPopupVisible(false);
  };
  const onClear = () => {
    setSelectValue(undefined);
  };
  const onPopupVisibleChange = (val, context) => {
    console.log(context);
    setPopupVisible(val);
  };
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  return (
    <div>
      <SelectInput
        value={selectValue}
        popupVisible={popupVisible}
        style={{
          width: '300px',
        }}
        placeholder="Please Select"
        clearable
        allowInput
        popupProps={{
          overlayInnerStyle: {
            padding: 6,
          },
          overlayStyle: {
            fontWeight: 'normal',
          },
          overlayClassName: 'select-custom-overlay-class',
          overlayInnerClassName: 'select-custom-overlay-inner-class',
        }}
        onPopupVisibleChange={onPopupVisibleChange}
        onClear={onClear}
        panel={
          <ul className="tdesign-demo__select-input-ul-single">
            {OPTIONS.map((item) => (
              <li key={item.value} onClick={() => onOptionClick(item)}>
                {item.label}
              </li>
            ))}
          </ul>
        }
        suffixIcon={<ChevronDownIcon />}
      />
    </div>
  );
}

                  ===SPLIT===组建:<SelectInput/>
                  使用描述：可使用 SelectInput 自由定制任何风格的多选选择器。
                  代码示例：import React, { useState, useEffect } from 'react';
import { SelectInput, Radio, Checkbox } from 'tdesign-react';
import { ChevronDownIcon } from 'tdesign-icons-react';

const classStyles = `
<style>
.tdesign-demo__panel-options-multiple {
  width: 100%;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 2px;
}
.tdesign-demo__panel-options-multiple .t-checkbox {
  display: flex;
  border-radius: 3px;
  line-height: 22px;
  cursor: pointer;
  padding: 3px 8px;
  color: var(--td-text-color-primary);
  transition: background-color 0.2s linear;
  white-space: nowrap;
  word-wrap: normal;
  overflow: hidden;
  text-overflow: ellipsis;
  margin: 0;
}
.tdesign-demo__panel-options-multiple .t-checkbox:hover {
  background-color: var(--td-bg-color-container-hover);
}
</style>
`;
const OPTIONS = [
  // 全选
  {
    label: 'Check All',
    checkAll: true,
  },
  {
    label: 'tdesign-vue',
    value: 1,
  },
  {
    label: 'tdesign-react',
    value: 2,
  },
  {
    label: 'tdesign-miniprogram',
    value: 3,
  },
  {
    label: 'tdesign-angular',
    value: 4,
  },
  {
    label: 'tdesign-mobile-vue',
    value: 5,
  },
  {
    label: 'tdesign-mobile-react',
    value: 6,
  },
];
export default function SelectInputMultiple() {
  const [excessTagsDisplayType, setExcessTagsDisplayType] = useState('break-line');
  const [allowInput, setAllowInput] = useState(true);
  const [creatable, setCreatable] = useState(true);
  const [inputValue, setInputValue] = useState('');
  // 全量数据
  const [options, setOptions] = useState([...OPTIONS]);
  // 仅用作展示的数据（过滤功能需要使用）
  const [displayOptions, setDisplayOptions] = useState([...OPTIONS]);
  const [value, setValue] = useState([
    {
      label: 'Vue',
      value: 1,
    },
    {
      label: 'React',
      value: 2,
    },
    {
      label: 'Miniprogram',
      value: 3,
    },
  ]);
  const getCheckboxValue = () => {
    const arr = [];
    const list = value;
    // 此处不使用 forEach，减少函数迭代
    for (let i = 0, len = list.length; i < len; i++) {
      list[i].value && arr.push(list[i].value);
    }
    return arr;
  };
  const checkboxValue = getCheckboxValue();

  // 直接 checkboxgroup 组件渲染输出下拉选项，自定义处理可以避免顺序和 tagChange 冲突
  const onCheckedChange = (val, { current, type }) => {
    // current 不存在，则表示操作全选
    if (!current) {
      const newValue = type === 'check' ? options.slice(1) : [];
      setValue(newValue);
      return;
    }
    // 普通操作
    if (type === 'check') {
      const option = options.find((t) => t.value === current);
      setValue(value.concat(option));
    } else {
      const newValue = value.filter((v) => v.value !== current);
      setValue(newValue);
    }
  };

  // 可以根据触发来源，自由定制标签变化时的筛选器行为
  const onTagChange = (currentTags, context) => {
    const { trigger, index } = context;
    if (trigger === 'clear') {
      setValue([]);
    }
    if (['tag-remove', 'backspace'].includes(trigger)) {
      const newValue = [...value];
      newValue.splice(index, 1);
      setValue(newValue);
    }
  };
  const onInputChange = (val, context) => {
    setInputValue(val);
    // 过滤功能
    console.log(val, context);
  };
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  const onInputEnter = (_, { inputValue }) => {
    // 如果允许创建新条目
    if (creatable) {
      const current = {
        label: inputValue,
        value: inputValue,
      };
      const newValue = [...value];
      setValue(newValue.concat(current));
      const newOptions = options.concat(current);
      setOptions(newOptions);
      setDisplayOptions(newOptions);
      setInputValue('');
    }
  };
  return (
    <div
      className="tdesign-demo__select-input-multiple"
      style={{
        width: '100%',
      }}
    >
      <div>
        <Checkbox checked={allowInput} onChange={setAllowInput}>
          是否允许输入
        </Checkbox>
        <Checkbox checked={creatable} onChange={setCreatable}>
          允许创建新选项（Enter 创建）
        </Checkbox>
      </div>
      <br />
      <div>
        <Radio.Group
          value={excessTagsDisplayType}
          onChange={(val) => setExcessTagsDisplayType(val)}
          options={[
            {
              label: '选中项过多横向滚动',
              value: 'scroll',
            },
            {
              label: '选中项过多换行显示',
              value: 'break-line',
            },
          ]}
        />
      </div>
      <br />
      <br />

      {/* <!-- :popup-props="{ trigger: 'hover' }" --> */}
      <SelectInput
        value={value}
        allowInput={allowInput}
        inputValue={inputValue}
        placeholder={allowInput ? '请选择或输入' : '请选择'}
        tagInputProps={{
          excessTagsDisplayType,
        }}
        popupProps={{
          overlayStyle: {
            maxHeight: '280px',
            overflow: 'auto',
          },
        }}
        // label={<span>多选：</span>}
        panel={
          displayOptions.length ? (
            <Checkbox.Group
              value={checkboxValue}
              options={displayOptions}
              className="tdesign-demo__panel-options-multiple"
              onChange={onCheckedChange}
            />
          ) : (
            <div className="tdesign-demo__select-empty-multiple">暂无数据</div>
          )
        }
        suffixIcon={<ChevronDownIcon />}
        clearable
        multiple
        onTagChange={onTagChange}
        onInputChange={onInputChange}
        onEnter={onInputEnter}
      />
    </div>
  );
}

                  ===SPLIT===组建:<SelectInput/>
                  使用描述：可使用 SelectInput 自由定制任何风格的自动填充筛选器。
                  代码示例：import React, { useState, useEffect } from 'react';
import { SelectInput } from 'tdesign-react';
import { SearchIcon } from 'tdesign-icons-react';

const classStyles = `
<style>
.tdesign-demo__select-input-ul-autocomplete {
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 2px;
}
.tdesign-demo__select-input-ul-autocomplete > li {
  display: block;
  border-radius: 3px;
  line-height: 22px;
  cursor: pointer;
  padding: 3px 8px;
  color: var(--td-text-color-primary);
  transition: background-color 0.2s linear;
  white-space: nowrap;
  word-wrap: normal;
  overflow: hidden;
  text-overflow: ellipsis;
}

.tdesign-demo__select-input-ul-autocomplete > li:hover {
  background-color: var(--td-bg-color-container-hover);
}
</style>
`;
const OPTIONS = ['Student A', 'Student B', 'Student C', 'Student D', 'Student E', 'Student F'];
export default function SelectInputAutocomplete() {
  const [popupVisible, setPopupVisible] = useState(false);
  const [selectValue, setSelectValue] = useState('');
  const [options, setOptions] = useState(OPTIONS);
  const onOptionClick = (item) => {
    setSelectValue(item);
    setPopupVisible(false);
  };
  const onInputChange = (keyword) => {
    setSelectValue(keyword);
    const options = new Array(5).fill(null).map((t, index) => `${keyword} Student ${index}`);
    setOptions(options);
  };
  const onPopupVisibleChange = (val) => {
    setPopupVisible(val);
  };
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);

  // 如果需要输入框宽度自适应，可以使用 autoWidth
  return (
    <div>
      <SelectInput
        value={selectValue}
        popupVisible={popupVisible}
        placeholder="请输入任意关键词"
        allowInput
        clearable
        style={{
          width: '300px',
        }}
        onInputChange={onInputChange}
        onPopupVisibleChange={onPopupVisibleChange}
        panel={
          <ul className="tdesign-demo__select-input-ul-autocomplete">
            {options.map((item) => (
              <li key={item} onClick={() => onOptionClick(item)}>
                {item}
              </li>
            ))}
          </ul>
        }
        suffixIcon={<SearchIcon />}
      />
    </div>
  );
}

                  ===SPLIT===组建:<SelectInput/>
                  使用描述：前置内容使用 label 自定义。后置内容使用 suffix 自定义。前置图标使用 prefixIcon 自定义。后置图标使用 suffixIcon 自定义。
                  代码示例：import React, { useState, useEffect } from 'react';
import { SelectInput } from 'tdesign-react';
import { ChevronDownIcon } from 'tdesign-icons-react';

const classStyles = `

<style>
.tdesign-demo__select-input-ul-label-suffix {
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 2px;
}
.tdesign-demo__select-input-ul-label-suffix > li {
  display: block;
  border-radius: 3px;
  line-height: 22px;
  cursor: pointer;
  padding: 3px 8px;
  color: var(--td-text-color-primary);
  transition: background-color 0.2s linear;
  white-space: nowrap;
  word-wrap: normal;
  overflow: hidden;
  text-overflow: ellipsis;
}

.tdesign-demo__select-input-ul-label-suffix > li:hover {
  background-color: var(--td-bg-color-container-hover);
}
</style>
`;
const OPTIONS = [
  {
    label: 'tdesign-vue',
    value: 1,
  },
  {
    label: 'tdesign-react',
    value: 2,
  },
  {
    label: 'tdesign-miniprogram',
    value: 3,
  },
  {
    label: 'tdesign-angular',
    value: 4,
  },
  {
    label: 'tdesign-mobile-vue',
    value: 5,
  },
  {
    label: 'tdesign-mobile-react',
    value: 6,
  },
];
export default function SelectInputSingle() {
  // const selectValue = useState('tdesign-vue');
  const [selectValue, setSelectValue] = useState({
    label: 'tdesign-vue',
    value: 1,
  });
  // const selectValue = useState([{ label: 'tdesign-vue', value: 1 }]);

  const [popupVisible, setPopupVisible] = useState(false);
  const [popupVisible2, setPopupVisible2] = useState(false);
  const onOptionClick = (item) => {
    setSelectValue(item);
    // 选中后立即关闭浮层
    setPopupVisible(false);
    setPopupVisible2(false);
  };
  const onClear = () => {
    setSelectValue(undefined);
  };
  const onPopupVisibleChange = (val, context) => {
    console.log(context);
    setPopupVisible(val);
  };
  const onPopupVisibleChange2 = (val) => {
    setPopupVisible2(val);
  };
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  return (
    <div>
      {/* <!-- :popup-props="{ trigger: 'hover' }" --> */}
      <SelectInput
        value={selectValue}
        popupVisible={popupVisible}
        style={{
          width: '300px',
        }}
        label={<span>前置内容：</span>}
        placeholder="Please Select"
        clearable
        popupProps={{
          overlayInnerStyle: {
            padding: 6,
          },
        }}
        onPopupVisibleChange={onPopupVisibleChange}
        onClear={onClear}
        panel={
          <ul className="tdesign-demo__select-input-ul-label-suffix">
            {OPTIONS.map((item) => (
              <li key={item.value} onClick={() => onOptionClick(item)}>
                {item.label}
              </li>
            ))}
          </ul>
        }
        suffixIcon={<ChevronDownIcon />}
      />
      <br /> <br />
      <SelectInput
        value={selectValue}
        popupVisible={popupVisible2}
        style={{
          width: '300px',
        }}
        suffix={<span>单位：元</span>}
        placeholder="Please Select"
        clearable
        popupProps={{
          overlayInnerStyle: {
            padding: 6,
          },
        }}
        onPopupVisibleChange={onPopupVisibleChange2}
        onClear={onClear}
        panel={
          <ul className="tdesign-demo__select-input-ul-label-suffix">
            {OPTIONS.map((item) => (
              <li key={item.value} onClick={() => onOptionClick(item)}>
                {item.label}
              </li>
            ))}
          </ul>
        }
        suffixIcon={<ChevronDownIcon />}
      />
    </div>
  );
}

                  ===SPLIT===组建:<SelectInput/>
                  使用描述：使用 status 和 tips 控制状态和提示文案。
                  代码示例：import React, { useEffect } from 'react';
import { SelectInput, Space } from 'tdesign-react';

const classStyles = `
<style>
.tdesign-demo__select-empty-status {
  text-align: center;
  color: var(--td-text-color-disabled);
  line-height: 32px;
}
.tdesign-demo-select-input-status > div {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.tdesign-demo-select-input-status .t-select-input__wrap {
  width: 300px;
  height: 32px;
}
</style>
`;
const SelectInputStatus = () => {
  const selectValue = 'TDesign';
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  return (
    <Space direction="vertical" size={32}>
      <Space>
        <span>禁用状态：</span>
        <SelectInput
          value={selectValue}
          disabled
          placeholder="Please Select"
          tips="这是禁用状态的文本"
          panel={<div className="tdesign-demo__select-empty">暂无数据</div>}
        />
      </Space>

      <Space>
        <span>只读状态：</span>
        <SelectInput
          value={selectValue}
          readonly
          placeholder="Please Select"
          tips="这是只读状态的文本提示"
          panel={<div className="tdesign-demo__select-empty-status">暂无数据</div>}
        />
      </Space>

      <Space>
        <span>成功状态：</span>
        <SelectInput
          value={selectValue}
          status="success"
          tips="校验通过文本提示"
          placeholder="Please Select"
          panel={<div className="tdesign-demo__select-empty-status">暂无数据</div>}
        />
      </Space>

      <Space>
        <span>警告状态：</span>
        <SelectInput
          value={selectValue}
          status="warning"
          tips="校验不通过文本提示"
          placeholder="Please Select"
          panel={<div className="tdesign-demo__select-empty-status">暂无数据</div>}
        />
      </Space>

      <Space>
        <span>错误状态：</span>
        <SelectInput
          value={selectValue}
          status="error"
          tips="校验存在严重问题文本提示"
          placeholder="Please Select"
          panel={<div className="tdesign-demo__select-empty-status">暂无数据</div>}
        />
      </Space>

      <Space>
        <span>加载状态：</span>
        <SelectInput
          loading={true}
          tips="处于加载状态的文本提示"
          placeholder="Please Select"
          panel={<div className="tdesign-demo__select-empty-status">加载中...</div>}
        />
      </Space>
    </Space>
  );
};
SelectInputStatus.displayName = 'SelectInputStatus';
export default SelectInputStatus;

                  ===SPLIT===组建:<SelectInput/>
                  使用描述：下拉框宽度规则：下拉框宽度默认和触发元素宽度保持同宽，如果下拉框宽度超出输入框组件会自动撑开下拉框宽度，但最大宽度不超过 1000px。也可以通过 popupProps.overlayInnerStyle.width 自由设置下拉框宽度。popupProps.overlayInnerStyle 类型为函数时，可以更灵活地动态控制下拉框宽度。
                  代码示例：import React, { useEffect } from 'react';
import { SelectInput } from 'tdesign-react';

const classStyles = `
<style>
.tdesign-demo__select-empty-width {
  text-align: center;
  color: var(--td-text-color-disabled);
  line-height: 32px;
}
.tdesign-demo__select-input-width .t-input__wrap {
  width: 380px;
  vertical-align: middle;
  display: inline-flex;
}

.tdesign-demo__select-input-width .t-demo-normal {
  width: 380px;
  vertical-align: middle;
  display: inline-flex;
}
</style>
`;
const SelectInputWidth = () => {
  const selectValue = 'TDesign';
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  return (
    <div className="tdesign-demo__select-input-width">
      <div>
        <span>下拉框默认宽度：</span>
        <SelectInput
          value={selectValue}
          placeholder="Please Select"
          className="t-demo-normal"
          panel={<div className="tdesign-demo__select-empty-width">下拉框宽度和触发元素宽度保持一致（默认）</div>}
        ></SelectInput>
      </div>
      <br />

      <div>
        <span>下拉框最大宽度：</span>
        <SelectInput
          value={selectValue}
          placeholder="Please Select"
          className="t-demo-normal"
          panel={
            <div className="tdesign-demo__select-empty-width">
              下拉框宽度和触发元素宽度保持一致，但是当下拉框内容宽度超出时，自动撑开下拉框宽度，最大不超过
              1000px（默认）
            </div>
          }
        ></SelectInput>
      </div>
      <br />

      <div>
        <span>与内容宽度一致：</span>
        <SelectInput
          value={selectValue}
          popupProps={{
            overlayInnerStyle: {
              width: 'auto',
            },
          }}
          placeholder="Please Select"
          className="t-demo-normal"
          panel={<div className="tdesign-demo__select-empty-width">宽度随内容宽度自适应</div>}
        ></SelectInput>
      </div>
      <br />

      <div>
        <span>下拉框固定宽度：</span>
        <SelectInput
          value={selectValue}
          popupProps={{
            overlayInnerStyle: {
              width: '360px',
            },
          }}
          placeholder="Please Select"
          className="t-demo-normal"
          panel={<div className="tdesign-demo__select-empty-width">固定宽度 360px</div>}
        ></SelectInput>
      </div>
      <br />
    </div>
  );
};
SelectInputWidth.displayName = 'SelectInputWidth';
export default SelectInputWidth;

                  ===SPLIT===组建:<SelectInput/>
                  使用描述：使用 excessTagsDisplayType 控制标签超出时的呈现方式：横向滚动显示和换行显示，默认为换行显示。
                  代码示例：import React, { useState, useEffect } from 'react';
import { SelectInput, Checkbox } from 'tdesign-react';

const classStyles = `
<style>
.tdesign-demo__panel-options-excess-tags-display-type {
  width: 100%;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 2px;
}
.tdesign-demo__panel-options-excess-tags-display-type .t-checkbox {
  display: flex;
  border-radius: 3px;
  line-height: 22px;
  cursor: pointer;
  padding: 3px 8px;
  color: var(--td-text-color-primary);
  transition: background-color 0.2s linear;
  white-space: nowrap;
  word-wrap: normal;
  overflow: hidden;
  text-overflow: ellipsis;
  margin-right: 0;
}

.tdesign-demo__panel-options-excess-tags-display-type .t-checkbox:hover {
  background-color: var(--td-bg-color-container-hover);
}
</style>
`;
const OPTIONS = [
  // 全选
  {
    label: 'Check All',
    checkAll: true,
  },
  {
    label: 'tdesign-vue',
    value: 1,
  },
  {
    label: 'tdesign-react',
    value: 2,
  },
  {
    label: 'tdesign-miniprogram',
    value: 3,
  },
  {
    label: 'tdesign-angular',
    value: 4,
  },
  {
    label: 'tdesign-mobile-vue',
    value: 5,
  },
  {
    label: 'tdesign-mobile-react',
    value: 6,
  },
];
export default function SelectInputExcessTagsDisplayType() {
  const [options, setOptions] = useState([...OPTIONS]);
  const [value, setValue] = useState(OPTIONS.slice(1));
  const checkboxValue = (() => {
    const arr = [];
    const list = value;
    // 此处不使用 forEach，减少函数迭代
    for (let i = 0, len = list.length; i < len; i++) {
      list[i].value && arr.push(list[i].value);
    }
    return arr;
  })();

  // 直接 checkboxgroup 组件渲染输出下拉选项，自定义处理可以避免顺序和 tagChange 冲突
  const onCheckedChange = (val, { current, type }) => {
    // current 不存在，则表示操作全选
    if (!current) {
      const newValue = type === 'check' ? options.slice(1) : [];
      setValue(newValue);
      return;
    }
    // 普通操作
    if (type === 'check') {
      const option = options.find((t) => t.value === current);
      setValue(value.concat(option));
    } else {
      const newValue = value.filter((v) => v.value !== current);
      setValue(newValue);
    }
  };

  // 可以根据触发来源，自由定制标签变化时的筛选器行为
  const onTagChange = (currentTags, context) => {
    const { trigger, index, item } = context;
    if (trigger === 'clear') {
      setValue([]);
    }
    if (['tag-remove', 'backspace'].includes(trigger)) {
      const newValue = [...value];
      newValue.splice(index, 1);
      setValue(newValue);
    }
    // 如果允许创建新条目
    if (trigger === 'enter') {
      const current = {
        label: item,
        value: item,
      };
      const newValue = [...value];
      setValue(newValue.concat(current));
      setOptions(options.concat(current));
    }
  };
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  return (
    <div
      className="tdesign-demo__select-input-excess-tags-display-type"
      style={{
        width: 'width: 100%',
      }}
    >
      {/* <!-- excessTagsDisplayType: 'scroll'，超出时，滚动显示 --> */}
      <p>第一种呈现方式：超出时滚动显示</p>
      <br />
      <SelectInput
        value={value}
        tagInputProps={{
          excessTagsDisplayType: 'scroll',
        }}
        placeholder="请选择"
        allowInput
        clearable
        multiple
        onTagChange={onTagChange}
        panel={
          <Checkbox.Group
            value={checkboxValue}
            options={options}
            className="tdesign-demo__panel-options-excess-tags-display-type"
            onChange={onCheckedChange}
          />
        }
      />

      <br />
      <br />
      <br />

      {/* <!-- excessTagsDisplayType: 'scroll'，超出时，换行显示 --> */}
      <p>第二种呈现方式：超出时换行显示</p>
      <br />
      <SelectInput
        value={value}
        tagInputProps={{
          excessTagsDisplayType: 'break-line',
        }}
        placeholder="请选择"
        allowInput
        clearable
        multiple
        onTagChange={onTagChange}
        panel={
          <Checkbox.Group
            value={checkboxValue}
            options={options}
            className="tdesign-demo__panel-options-excess-tags-display-type"
            onChange={onCheckedChange}
          />
        }
      />
    </div>
  );
}

                  ===SPLIT===组建:<SelectInput/>
                  使用描述：选中项数量超过 minCollapsedNum 时会被折叠，可使用 collapsedItems 自定义折叠选项中的呈现方式。
                  代码示例：import React, { useState, useEffect } from 'react';
import { SelectInput, Checkbox, Tag, Space } from 'tdesign-react';
import { ChevronDownIcon } from 'tdesign-icons-react';

const classStyles = `
<style>
.tdesign-demo__panel-options-collapsed-items {
  width: 100%;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 2px;
}
.tdesign-demo__panel-options-collapsed-items .t-checkbox {
  display: flex;
  border-radius: 3px;
  line-height: 22px;
  cursor: pointer;
  padding: 3px 8px;
  color: var(--td-text-color-primary);
  transition: background-color 0.2s linear;
  white-space: nowrap;
  word-wrap: normal;
  overflow: hidden;
  text-overflow: ellipsis;
  margin: 0;
}

.tdesign-demo__panel-options-collapsed-items .t-checkbox:hover {
  background-color: var(--td-bg-color-container-hover);
}
</style>
`;
const OPTIONS = [
  // 全选
  {
    label: 'Check All',
    checkAll: true,
  },
  {
    label: 'tdesign-vue',
    value: 1,
  },
  {
    label: 'tdesign-react',
    value: 2,
  },
  {
    label: 'tdesign-miniprogram',
    value: 3,
  },
  {
    label: 'tdesign-angular',
    value: 4,
  },
  {
    label: 'tdesign-mobile-vue',
    value: 5,
  },
  {
    label: 'tdesign-mobile-react',
    value: 6,
  },
];
export default function SelectInputCollapsedItems() {
  const [options, setOptions] = useState([...OPTIONS]);
  const [value, setValue] = useState(OPTIONS.slice(1));
  const getCheckboxValue = () => {
    const arr = [];
    const list = value;
    // 此处不使用 forEach，减少函数迭代
    for (let i = 0, len = list.length; i < len; i++) {
      list[i].value && arr.push(list[i].value);
    }
    return arr;
  };
  const checkboxValue = getCheckboxValue();

  // 直接 checkboxgroup 组件渲染输出下拉选项，自定义处理可以避免顺序和 tagChange 冲突
  const onCheckedChange = (val, { current, type }) => {
    // current 不存在，则表示操作全选
    if (!current) {
      const newValue = type === 'check' ? options.slice(1) : [];
      setValue(newValue);
      return;
    }
    // 普通操作
    if (type === 'check') {
      const option = options.find((t) => t.value === current);
      setValue(value.concat(option));
    } else {
      const newValue = value.filter((v) => v.value !== current);
      setValue(newValue);
    }
  };

  // 可以根据触发来源，自由定制标签变化时的筛选器行为
  const onTagChange = (currentTags, context) => {
    const { trigger, index, item } = context;
    if (trigger === 'clear') {
      setValue([]);
    }
    if (['tag-remove', 'backspace'].includes(trigger)) {
      const newValue = [...value];
      newValue.splice(index, 1);
      setValue(newValue);
    }
    // 如果允许创建新条目
    if (trigger === 'enter') {
      const current = {
        label: item,
        value: item,
      };
      const newValue = [...value];
      setValue(newValue.concat(current));
      setOptions(options.concat(current));
    }
  };
  const CheckboxPanel = (
    <Checkbox.Group
      value={checkboxValue}
      options={options}
      className="tdesign-demo__panel-options-collapsed-items"
      onChange={onCheckedChange}
    />
  );
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  const handleCollapsedItems = ({ collapsedSelectedItems }) => {
    if (Array.isArray(collapsedSelectedItems)) {
      return <Tag key={'More'}>More(+{collapsedSelectedItems.length})</Tag>;
    }
    return null;
  };
  return (
    <Space direction="vertical" className="tdesign-demo__select-input-collapsed-items">
      {/* <!-- :popup-props="{ trigger: 'hover' }" --> */}
      <SelectInput
        value={value}
        minCollapsedNum={1}
        panel={CheckboxPanel}
        suffixIcon={<ChevronDownIcon key="suffixIcon" />}
        clearable
        multiple
        onTagChange={onTagChange}
      />
      <br /> <br />
      {/* 使用 collapsedItems 自定义折叠标签 */}
      <SelectInput
        value={value}
        minCollapsedNum={2}
        panel={CheckboxPanel}
        suffixIcon={<ChevronDownIcon key="suffixIcon" />}
        collapsedItems={handleCollapsedItems}
        clearable
        multiple
        onTagChange={onTagChange}
      />
    </Space>
  );
}

                  ===SPLIT===组建:<SelectInput/>
                  使用描述：使用 valueDisplay 或者 tag 自定义选中项。
                  代码示例：import React, { useState, useEffect } from 'react';
import { SelectInput, Tag } from 'tdesign-react';
import { ControlPlatformIcon } from 'tdesign-icons-react';

const classStyles = `
<style>
.tdesign-demo__select-input-ul-single {
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 2px;
}
.tdesign-demo__select-input-ul-single > li {
  display: block;
  border-radius: 3px;
  line-height: 22px;
  cursor: pointer;
  padding: 3px 8px;
  color: var(--td-text-color-primary);
  transition: background-color 0.2s linear;
  white-space: nowrap;
  word-wrap: normal;
  overflow: hidden;
  text-overflow: ellipsis;
}

.tdesign-demo__select-input-ul-single > li:hover {
  background-color: var(--td-bg-color-container-hover);
}

.tdesign-demo-select-input-custom-tag .tdesign-demo-select-input__img {
  font-size: 16px;
  margin-right: 4px;
}

.tdesign-demo__select-empty-custom {
  text-align: center;
  color: var(--td-text-color-disabled);
  line-height: 32px;
}
.displaySpan {
  line-height: 24px;
}
</style>
`;
const OPTIONS = [
  {
    label: 'tdesign-vue',
    value: 1,
  },
  {
    label: 'tdesign-react',
    value: 2,
  },
  {
    label: 'tdesign-miniprogram',
    value: 3,
  },
  {
    label: 'tdesign-angular',
    value: 4,
  },
  {
    label: 'tdesign-mobile-vue',
    value: 5,
  },
  {
    label: 'tdesign-mobile-react',
    value: 6,
  },
];
const SelectInputCustomTag = () => {
  const [selectValue1, setSelectValue1] = useState({
    label: 'tdesign-vue',
    value: 1,
  });
  const [selectValue2, setSelectValue2] = useState(['tdesign-vue', 'tdesign-react']);
  const [selectValue3, setSelectValue3] = useState(['tdesign-vue', 'tdesign-react', 'tdesign-mobile-vue']);
  const onOptionClick = (item) => {
    setSelectValue1(item);
  };
  const onClear = () => {
    setSelectValue1(undefined);
  };
  const onTagChange2 = (val) => {
    setSelectValue2(val);
  };
  const onTagChange3 = (val) => {
    setSelectValue3(val);
  };
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  return (
    <div className="tdesign-demo-select-input-custom-tag">
      {/* <!-- 单选，使用 valueDisplay 定义选中的某一项的内容 --> */}
      <SelectInput
        value={selectValue1}
        placeholder="Please Select"
        clearable
        valueDisplay={
          selectValue1 && (
            <span className="displaySpan">
              <ControlPlatformIcon className="tdesign-demo-select-input__img" />
              {selectValue1.label}
            </span>
          )
        }
        panel={
          <ul className="tdesign-demo__select-input-ul-single">
            {OPTIONS.map((item) => (
              <li key={item.value} onClick={() => onOptionClick(item)}>
                {item.label}
              </li>
            ))}
          </ul>
        }
        onClear={onClear}
      />

      <br />
      <br />

      {/* <!-- 多选，第一种方式：使用 tag 定义选中的某一项的内容 --> */}
      <SelectInput
        value={selectValue2}
        placeholder="Please Select"
        multiple
        tag={({ value }) => (
          <span className="displaySpan">
            <ControlPlatformIcon /> {value}
          </span>
        )}
        panel={<div className="tdesign-demo__select-empty-custom">暂无示意数据</div>}
        onTagChange={onTagChange2}
      />

      <br />
      <br />

      {/* <!-- 多选，第二种方式：使用 valueDisplay 定义全部选中项的内容 --> */}
      <SelectInput
        value={selectValue3}
        placeholder="Please Select"
        multiple
        valueDisplay={({ value, onClose }) =>
          value.map((item, index) => (
            <Tag
              key={item}
              closable
              style={{
                marginRight: '4px',
              }}
              onClose={() => onClose(index)}
            >
              <span className="displaySpan">
                <ControlPlatformIcon /> {value}
              </span>
            </Tag>
          ))
        }
        panel={<div className="tdesign-demo__select-empty-custom">暂无示意数据</div>}
        onTagChange={onTagChange3}
      />
    </div>
  );
};
SelectInputCustomTag.displayName = 'SelectInputCustomTag';
export default SelectInputCustomTag;

                  ===SPLIT===组建:<SelectInput/>
                  使用描述： 用于控制是否呈现为无边框模式。
                  代码示例：import React, { useState, useEffect } from 'react';
import { SelectInput } from 'tdesign-react';
import { ChevronDownIcon } from 'tdesign-icons-react';

const classStyles = `
<style>
.tdesign-demo__select-input-ul-borderless {
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 2px;
}
.tdesign-demo__select-input-ul-borderless > li {
  display: block;
  border-radius: 3px;
  line-height: 22px;
  cursor: pointer;
  padding: 3px 8px;
  color: var(--td-text-color-primary);
  transition: background-color 0.2s linear;
  white-space: nowrap;
  word-wrap: normal;
  overflow: hidden;
  text-overflow: ellipsis;
}

.tdesign-demo__select-input-ul-borderless > li:hover {
  background-color: var(--td-bg-color-container-hover);
}
</style>
`;
const OPTIONS = [
  {
    label: 'tdesign-vue',
    value: 1,
  },
  {
    label: 'tdesign-react',
    value: 2,
  },
  {
    label: 'tdesign-miniprogram',
    value: 3,
  },
  {
    label: 'tdesign-angular',
    value: 4,
  },
  {
    label: 'tdesign-mobile-vue',
    value: 5,
  },
  {
    label: 'tdesign-mobile-react',
    value: 6,
  },
];
export default function SelectInputSingle() {
  // const selectValue = useState('tdesign-vue');
  const [selectValue, setSelectValue] = useState({
    label: 'tdesign-vue',
    value: 1,
  });
  // const selectValue = useState([{ label: 'tdesign-vue', value: 1 }]);

  const [popupVisible, setPopupVisible] = useState(false);
  const onOptionClick = (item) => {
    setSelectValue(item);
    // 选中后立即关闭浮层
    setPopupVisible(false);
  };
  const onClear = () => {
    setSelectValue(undefined);
  };
  const onPopupVisibleChange = (val, context) => {
    console.log(context);
    setPopupVisible(val);
  };
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  return (
    <div
      style={{
        width: '60%',
      }}
    >
      {/* <!-- :popup-props="{ trigger: 'hover' }" --> */}
      <SelectInput
        value={selectValue}
        popupVisible={popupVisible}
        placeholder="Please Select"
        borderless
        clearable
        onPopupVisibleChange={onPopupVisibleChange}
        onClear={onClear}
        panel={
          <ul className="tdesign-demo__select-input-ul-borderless">
            {OPTIONS.map((item) => (
              <li key={item.value} onClick={() => onOptionClick(item)}>
                {item.label}
              </li>
            ))}
          </ul>
        }
        suffixIcon={<ChevronDownIcon />}
      ></SelectInput>
    </div>
  );
}

                  ===SPLIT===组建:<SelectInput/>
                  使用描述：无边框模式的多选筛选器 
                  代码示例：import React, { useState, useEffect } from 'react';
import { SelectInput, Checkbox } from 'tdesign-react';
import { ChevronDownIcon } from 'tdesign-icons-react';

const classStyles = `
<style>
.tdesign-demo__panel-options-borderless-multiple {
  width: 100%;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.tdesign-demo__panel-options-borderless-multiple .t-checkbox {
  display: flex;
  border-radius: 3px;
  line-height: 22px;
  cursor: pointer;
  padding: 3px 8px;
  color: var(--td-text-color-primary);
  transition: background-color 0.2s linear;
  white-space: nowrap;
  word-wrap: normal;
  overflow: hidden;
  text-overflow: ellipsis;
  margin: 0;
}

.tdesign-demo__panel-options-borderless-multiple .t-checkbox:hover {
  background-color: var(--td-bg-color-container-hover);
}
</style>
`;
const OPTIONS = [
  // 全选
  {
    label: 'Check All',
    checkAll: true,
  },
  {
    label: 'tdesign-vue',
    value: 1,
  },
  {
    label: 'tdesign-react',
    value: 2,
  },
  {
    label: 'tdesign-miniprogram',
    value: 3,
  },
  {
    label: 'tdesign-angular',
    value: 4,
  },
  {
    label: 'tdesign-mobile-vue',
    value: 5,
  },
  {
    label: 'tdesign-mobile-react',
    value: 6,
  },
];
export default function SelectInputMultiple() {
  const [options, setOptions] = useState([...OPTIONS]);
  const [value, setValue] = useState([
    {
      label: 'Vue',
      value: 1,
    },
    {
      label: 'React',
      value: 2,
    },
    {
      label: 'Miniprogram',
      value: 3,
    },
  ]);
  const getCheckboxValue = () => {
    const arr = [];
    const list = value;
    // 此处不使用 forEach，减少函数迭代
    for (let i = 0, len = list.length; i < len; i++) {
      list[i].value && arr.push(list[i].value);
    }
    return arr;
  };
  const checkboxValue = getCheckboxValue();

  // 直接 checkboxgroup 组件渲染输出下拉选项，自定义处理可以避免顺序和 tagChange 冲突
  const onCheckedChange = (val, { current, type }) => {
    // current 不存在，则表示操作全选
    if (!current) {
      const newValue = type === 'check' ? options.slice(1) : [];
      setValue(newValue);
      return;
    }
    // 普通操作
    if (type === 'check') {
      const option = options.find((t) => t.value === current);
      setValue(value.concat(option));
    } else {
      const newValue = value.filter((v) => v.value !== current);
      setValue(newValue);
    }
  };

  // 可以根据触发来源，自由定制标签变化时的筛选器行为
  const onTagChange = (currentTags, context) => {
    const { trigger, index, item } = context;
    if (trigger === 'clear') {
      setValue([]);
    }
    if (['tag-remove', 'backspace'].includes(trigger)) {
      const newValue = [...value];
      newValue.splice(index, 1);
      setValue(newValue);
    }
    // 如果允许创建新条目
    if (trigger === 'enter') {
      const current = {
        label: item,
        value: item,
      };
      const newValue = [...value];
      setValue(newValue.concat(current));
      setOptions(options.concat(current));
    }
  };
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  return (
    <div
      style={{
        width: '60%',
      }}
    >
      <SelectInput
        allowInput
        borderless
        clearable
        multiple
        value={value}
        minCollapsedNum={1}
        placeholder="select frameworks"
        suffixIcon={<ChevronDownIcon />}
        onTagChange={onTagChange}
        panel={
          <Checkbox.Group
            value={checkboxValue}
            options={options}
            className="tdesign-demo__panel-options-borderless-multiple"
            onChange={onCheckedChange}
          />
        }
      />
    </div>
  );
}

                  ===SPLIT===组建:<SelectInput/>
                  使用描述：自动宽度的单选筛选器 
                  代码示例：import React, { useState, useEffect } from 'react';
import { SelectInput } from 'tdesign-react';
import { ChevronDownIcon } from 'tdesign-icons-react';

const classStyles = `
<style>
.tdesign-demo__select-input-ul-auto-width {
  padding: 2px 0;
  margin: 0 -2px;
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.tdesign-demo__select-input-ul-auto-width > li {
  display: block;
  border-radius: 3px;
  line-height: 22px;
  cursor: pointer;
  padding: 3px 8px;
  color: var(--td-text-color-primary);
  transition: background-color 0.2s linear;
  white-space: nowrap;
  word-wrap: normal;
  overflow: hidden;
  text-overflow: ellipsis;
}

.tdesign-demo__select-input-ul-auto-width > li:hover {
  background-color: var(--td-bg-color-container-hover);
}
</style>
`;
const OPTIONS = [
  {
    label: 'tdesign-vue',
    value: 1,
  },
  {
    label: 'tdesign-react',
    value: 2,
  },
  {
    label: 'tdesign-miniprogram',
    value: 3,
  },
  {
    label: 'tdesign-angular',
    value: 4,
  },
  {
    label: 'tdesign-mobile-vue',
    value: 5,
  },
  {
    label: 'tdesign-mobile-react',
    value: 6,
  },
];
export default function SelectInputAutocomplete() {
  const [popupVisible, setPopupVisible] = useState(false);
  const [selectValue, setSelectValue] = useState({
    label: 'tdesign-vue',
    value: 1,
  });
  const onOptionClick = (item) => {
    setSelectValue(item);
    setPopupVisible(false);
  };
  const onClear = () => {
    setSelectValue(undefined);
  };
  const onPopupVisibleChange = (val) => {
    setPopupVisible(val);
  };
  const onInputChange = (val, context) => {
    // 过滤功能
    console.log(val, context);
  };
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);

  // 如果需要输入框宽度自适应，可以使用 autoWidth
  return (
    <SelectInput
      value={selectValue}
      popupVisible={popupVisible}
      placeholder="Please Select"
      clearable
      autoWidth
      allowInput
      onPopupVisibleChange={onPopupVisibleChange}
      onClear={onClear}
      onInputChange={onInputChange}
      suffixIcon={<ChevronDownIcon />}
      panel={
        <ul className="tdesign-demo__select-input-ul-auto-width">
          {OPTIONS.map((item) => (
            <li key={item.value} onClick={() => onOptionClick(item)}>
              {item.label}
            </li>
          ))}
        </ul>
      }
    />
  );
}

                  ===SPLIT===组建:<SelectInput/>
                  使用描述：自动宽度的多选筛选器 
                  代码示例：import React, { useState, useEffect, useMemo } from 'react';
import { SelectInput, Checkbox } from 'tdesign-react';
import { ChevronDownIcon } from 'tdesign-icons-react';

const classStyles = `
<style>
.tdesign-demo__panel-options-autowidth-multiple {
  width: 100%;
  padding: 2px 0;
  margin: 0 -2px;
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.tdesign-demo__panel-options-autowidth-multiple .t-checkbox {
  display: flex;
  border-radius: 3px;
  line-height: 22px;
  cursor: pointer;
  padding: 3px 8px;
  color: var(--td-text-color-primary);
  transition: background-color 0.2s linear;
  white-space: nowrap;
  word-wrap: normal;
  overflow: hidden;
  text-overflow: ellipsis;
  margin: 0;
}

.tdesign-demo__panel-options-autowidth-multiple .t-checkbox:hover {
  background-color: var(--td-bg-color-container-hover);
}
</style>
`;
const OPTIONS = [
  // 全选
  {
    label: 'all frameworks',
    checkAll: true,
  },
  {
    label: 'tdesign-vue',
    value: 1,
  },
  {
    label: 'tdesign-react',
    value: 2,
  },
  {
    label: 'tdesign-miniprogram',
    value: 3,
  },
  {
    label: 'tdesign-angular',
    value: 4,
  },
  {
    label: 'tdesign-mobile-vue',
    value: 5,
  },
  {
    label: 'tdesign-mobile-react',
    value: 6,
  },
];
export default function SelectInputAutocomplete() {
  const [options, setOptions] = useState(OPTIONS);
  const [value, setValue] = useState([
    {
      label: 'Vue',
      value: 1,
    },
    {
      label: 'React',
      value: 2,
    },
    {
      label: 'Miniprogram',
      value: 3,
    },
  ]);
  const checkboxValue = useMemo(() => {
    const arr = [];
    // 此处不使用 forEach，减少函数迭代
    for (let i = 0, len = value.length; i < len; i++) {
      value[i].value && arr.push(value[i].value);
    }
    return arr;
  }, [value]);

  // 直接 checkboxgroup 组件渲染输出下拉选项
  const onCheckedChange = (val, { current, type }) => {
    // current 不存在，则表示操作全选
    if (!current) {
      setValue(type === 'check' ? options.slice(1) : []);
      return;
    }
    // 普通操作
    if (type === 'check') {
      const option = options.find((t) => t.value === current);
      setValue(value.concat(option));
    } else {
      setValue(value.filter((v) => v.value !== current));
    }
  };

  // 可以根据触发来源，自由定制标签变化时的筛选器行为
  const onTagChange = (currentTags, context) => {
    console.log(currentTags, context);
    const { trigger, index, item } = context;
    if (trigger === 'clear') {
      setValue([]);
    }
    if (['tag-remove', 'backspace'].includes(trigger)) {
      setValue(value.filter((v, i) => i !== index));
    }
    // 如果允许创建新条目
    if (trigger === 'enter') {
      const current = {
        label: item,
        value: item,
      };
      setValue(value.concat(current));
      setOptions(options.concat(current));
    }
  };
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);

  // 如果需要输入框宽度自适应，可以使用 autoWidth
  return (
    <div
      className="tdesign-demo__select-input-autowidth-multiple"
      style={{
        width: '100%',
      }}
    >
      <SelectInput
        value={value}
        minCollapsedNum={1}
        autoWidth
        allowInput
        placeholder="select frameworks"
        clearable
        multiple
        onTagChange={onTagChange}
        suffixIcon={<ChevronDownIcon />}
        panel={
          <Checkbox.Group
            value={checkboxValue}
            options={options}
            className="tdesign-demo__panel-options-autowidth-multiple"
            onChange={onCheckedChange}
          />
        }
      />
    </div>
  );
}

                  组建:<Slider/>
                  使用描述：横向滑块 
                  代码示例：import React, { useState } from 'react';
import { Slider } from 'tdesign-react';

const BaseSlider = () => {
  const [value, setValue] = useState(10);
  const [rangeValue, setRangeValue] = useState([10, 80]);
  return (
    <>
      <Slider
        label={({ value }) => `${value}%`}
        style={{
          marginBottom: 50,
        }}
        value={value}
        onChange={setValue}
      ></Slider>
      <Slider value={rangeValue} onChange={setRangeValue} range></Slider>
    </>
  );
};
export default BaseSlider;

                  ===SPLIT===组建:<Slider/>
                  使用描述：纵向滑块： 
                  代码示例：import React, { useState } from 'react';
import { Slider } from 'tdesign-react';

const VerticalSlider = () => {
  const [value, setValue] = useState(10);
  const [rangeValue, setRangeValue] = useState([10, 80]);
  return (
    <div
      style={{
        display: 'flex',
        justifyContent: 'center',
      }}
    >
      <div
        style={{
          height: 300,
          marginRight: 100,
        }}
      >
        <Slider
          layout="vertical"
          style={{
            marginBottom: 50,
          }}
          value={value}
          onChange={setValue}
        ></Slider>
      </div>
      <div
        style={{
          height: 300,
        }}
      >
        <Slider layout="vertical" value={rangeValue} onChange={setRangeValue} range></Slider>
      </div>
    </div>
  );
};
export default VerticalSlider;

                  ===SPLIT===组建:<Slider/>
                  使用描述：提供禁用状态的滑块。
                  代码示例：import React from 'react';
import { Slider } from 'tdesign-react';

const DisabledSlider = () => <Slider step={10} disabled value={10}></Slider>;
export default DisabledSlider;

                  ===SPLIT===组建:<Slider/>
                  使用描述：水平带刻度值的滑块 
                  代码示例：import React, { useState } from 'react';
import { Slider } from 'tdesign-react';

const MarksSlider = () => {
  const [value, setValue] = useState(10);
  const [rangeValue, setRangeValue] = useState([10, 80]);
  const marks1 = {
    0: '0°C',
    12: '12°C',
    37: '37°C',
    60: (
      <button
        style={{
          color: '#1989FA',
        }}
      >
        60°C
      </button>
    ),
  };
  const marks2 = {
    0: '0°C',
    8: '8°C',
    37: '37°C',
    50: (
      <strong
        style={{
          color: '#1989FA',
        }}
      >
        50°C
      </strong>
    ),
    70: '70°C',
  };
  return (
    <>
      <Slider
        marks={marks1}
        style={{
          marginBottom: 50,
        }}
        value={value}
        onChange={setValue}
      ></Slider>
      <Slider marks={marks2} value={rangeValue} onChange={setRangeValue} range></Slider>
    </>
  );
};
export default MarksSlider;

                  ===SPLIT===组建:<Slider/>
                  使用描述：垂直带刻度值的滑块 
                  代码示例：import React, { useState } from 'react';
import { Slider } from 'tdesign-react';

const VerticalSlider = () => {
  const [value, setValue] = useState(10);
  const [rangeValue, setRangeValue] = useState([10, 80]);
  const marks1 = {
    0: '0°C',
    12: '12°C',
    37: '37°C',
    60: (
      <button
        style={{
          color: '#1989FA',
        }}
      >
        60°C
      </button>
    ),
  };
  const marks2 = {
    0: '0°C',
    8: '8°C',
    37: '37°C',
    50: (
      <strong
        style={{
          color: '#1989FA',
        }}
      >
        50°C
      </strong>
    ),
    70: '70°C',
  };
  return (
    <div
      style={{
        display: 'flex',
        justifyContent: 'center',
      }}
    >
      <div
        style={{
          height: 400,
          marginRight: 100,
        }}
      >
        <Slider
          marks={marks1}
          layout="vertical"
          style={{
            marginBottom: 50,
          }}
          value={value}
          onChange={setValue}
        ></Slider>
      </div>
      <div
        style={{
          height: 400,
        }}
      >
        <Slider marks={marks2} layout="vertical" value={rangeValue} onChange={setRangeValue} range></Slider>
      </div>
    </div>
  );
};
export default VerticalSlider;

                  ===SPLIT===组建:<Slider/>
                  使用描述：横向数字输入框 
                  代码示例：import React, { useState } from 'react';
import { Slider } from 'tdesign-react';

const InputNumberSlider = () => {
  const [value, setValue] = useState(10);
  const [rangeValue, setRangeValue] = useState([10, 80]);
  const inputNumberProps = {
    theme: 'row',
  };
  return (
    <>
      <Slider
        style={{
          marginBottom: 50,
        }}
        inputNumberProps={inputNumberProps}
        value={value}
        onChange={setValue}
      ></Slider>
      <Slider value={rangeValue} inputNumberProps={inputNumberProps} onChange={setRangeValue} range></Slider>
    </>
  );
};
export default InputNumberSlider;

                  ===SPLIT===组建:<Slider/>
                  使用描述：垂直数字输入框 
                  代码示例：import React, { useState } from 'react';
import { Slider } from 'tdesign-react';

const InputNumberVerticalSlider = () => {
  const [value, setValue] = useState(10);
  const [rangeValue, setRangeValue] = useState([10, 80]);
  const inputNumberProps = {
    theme: 'row',
  };
  return (
    <div
      style={{
        display: 'flex',
        justifyContent: 'center',
      }}
    >
      <div
        style={{
          height: 300,
          marginRight: 100,
        }}
      >
        <Slider
          inputNumberProps={inputNumberProps}
          layout="vertical"
          style={{
            marginBottom: 50,
          }}
          value={value}
          onChange={setValue}
        ></Slider>
      </div>
      <div
        style={{
          height: 300,
        }}
      >
        <Slider
          inputNumberProps={inputNumberProps}
          layout="vertical"
          value={rangeValue}
          onChange={setRangeValue}
          range
        ></Slider>
      </div>
    </div>
  );
};
export default InputNumberVerticalSlider;

                  ===SPLIT===组建:<Slider/>
                  使用描述：设置步长 
                  代码示例：import React, { useState } from 'react';
import { Slider } from 'tdesign-react';

const StepSlider = () => {
  const [value, setValue] = useState(10);
  const [rangeValue, setRangeValue] = useState([10, 80]);
  return (
    <>
      <Slider
        style={{
          marginBottom: 50,
        }}
        step={4}
        value={value}
        onChange={setValue}
      ></Slider>
      <Slider value={rangeValue} step={4} onChange={setRangeValue} range></Slider>
    </>
  );
};
export default StepSlider;

                  ===SPLIT===组建:<Slider/>
                  使用描述：设置最大值最小值 
                  代码示例：import React, { useState } from 'react';
import { Slider } from 'tdesign-react';

const marks = {
  10: 'min:10',
  30: 'max:30',
};
const MinAndMaxSlider = () => {
  const [value, setValue] = useState(10);
  const [rangeValue, setRangeValue] = useState([10, 20]);
  return (
    <>
      <Slider
        min={10}
        max={30}
        marks={marks}
        style={{
          marginBottom: 50,
        }}
        value={value}
        onChange={setValue}
      ></Slider>
      <Slider min={10} max={30} marks={marks} value={rangeValue} onChange={setRangeValue} range></Slider>
    </>
  );
};
export default MinAndMaxSlider;

                  组建:<Switch/>
                  使用描述：不带描述，最基础的开关。
                  代码示例：import React, { useState } from 'react';
import { Switch, Space } from 'tdesign-react';

export default function SwitchBasic() {
  const [checked, setChecked] = useState(true);
  const onChange = (value) => {
    console.log('value', value);
    setChecked(value);
  };
  return (
    <Space>
      <Switch size="large" />
      <Switch size="large" value={checked} onChange={onChange} />
    </Space>
  );
}

                  ===SPLIT===组建:<Switch/>
                  使用描述：开关内部带有文字或图标等描述，含义对应开关当前状态，切换时文字同步切换。视觉上更加醒目，用于需要描述当前开关对应状态及含义，更直观且方便用户理解。
                  代码示例：import React from 'react';
import { Switch, Space } from 'tdesign-react';
import { Icon } from 'tdesign-icons-react';

export default function SwitchBasic() {
  const renderActiveContent = () => <Icon name="check" />;
  const renderInactiveContent = () => <Icon name="close" />;
  return (
    <Space direction="vertical">
      <Space>
        <Switch size="large" label={['开', '关']} />
        <Switch size="large" defaultValue label={['开', '关']} />
      </Space>
      <Space>
        <Switch size="large" label={[renderActiveContent(), renderInactiveContent()]} />
        <Switch size="large" defaultValue label={[renderActiveContent(), renderInactiveContent()]} />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Switch/>
                  使用描述：提供 normal、loading 和 disabled 3种状态的开关。根据不同场景设置对应状态。
                  代码示例：import React from 'react';
import { Switch, Space } from 'tdesign-react';

export default function SwitchBasic() {
  return (
    <Space>
      <Switch size="large" defaultValue />
      <Switch size="large" defaultValue loading />
      <Switch size="large" disabled />
    </Space>
  );
}

                  ===SPLIT===组建:<Switch/>
                  使用描述：提供 大、中（默认）、小 3种开关。
                  代码示例：import React from 'react';
import { Switch, Space } from 'tdesign-react';

export default function SwitchBasic() {
  return (
    <Space>
      <Switch size="large" defaultValue />
      <Switch />
      <Switch size="small" />
    </Space>
  );
}

                  组建:<Textarea/>
                  使用描述：用于多行文本的输入。
                  代码示例：import React, { useState } from 'react';
import { Textarea, Space } from 'tdesign-react';

export default function InputExample() {
  const [value, onChange] = useState('');
  const [value2, onChange2] = useState('');
  const [value3, onChange3] = useState('');
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Textarea
        placeholder="请输入内容"
        value={value}
        rows={2}
        onChange={(value) => {
          console.log(value);
          onChange(value);
        }}
      />
      <Textarea
        placeholder="请输入内容，高度可自适应，autosize=true"
        value={value2}
        autosize={true}
        onChange={(value) => {
          console.log(value);
          onChange2(value);
        }}
      />
      <Textarea
        placeholder="请输入内容，高度可自适应，最少3行，最多10行，超过会出滚动条"
        value={value3}
        autosize={{
          minRows: 3,
          maxRows: 10,
        }}
        onChange={(value) => {
          console.log(value);
          onChange3(value);
        }}
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Textarea/>
                  使用描述：限制输入的最大字符数并展示字符数。
                  代码示例：import React from 'react';
import { Textarea, Space } from 'tdesign-react';

export default function InputExample() {
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Textarea placeholder="请输入内容，超出限制无法输入" tips="这里可以放一些提示文字" maxlength={20} />
      <Textarea placeholder="请输入内容，超出限制可以输入" maxlength={20} allowInputOverMax />
      <Textarea placeholder="请输入内容，一个中文汉字表示两个字符长度，超出限制无法输入" maxcharacter={20} />
      <Textarea
        placeholder="请输入内容，一个中文汉字表示两个字符长度，超出限制可以输入"
        maxcharacter={20}
        allowInputOverMax
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Textarea/>
                  使用描述：可绑定 onKeypress onKeydown onKeyup onFocus onBlur 等 DOM 原生事件。
                  代码示例：import React, { useState } from 'react';
import { Textarea } from 'tdesign-react';

export default function InputExample() {
  const [value, onChange] = useState('');
  const onKeypress = (value, { e }) => {
    console.log('onKeypress: ', value, e);
  };
  const onKeydown = (value, { e }) => {
    console.log('onKeydown: ', value, e);
  };
  const onKeyup = (value, { e }) => {
    console.log('onKeyup: ', value, e);
  };
  const onFocus = (value, { e }) => {
    console.log('onFocus: ', value, e);
  };
  const onBlur = (value, { e }) => {
    console.log('onBlur: ', value, e);
  };
  return (
    <Textarea
      placeholder="请输入内容"
      onKeypress={onKeypress}
      onKeydown={onKeydown}
      onKeyup={onKeyup}
      value={value}
      onFocus={onFocus}
      onBlur={onBlur}
      onChange={(value) => {
        console.log(value);
        onChange(value);
      }}
    />
  );
}

                  ===SPLIT===组建:<Textarea/>
                  使用描述：多行文本框状态可分为：正常、禁用、异常、带额外内容提示。
                  代码示例：import React from 'react';
import { Textarea, Space } from 'tdesign-react';

export default function InputExample() {
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Textarea placeholder="请输入内容" readonly value="只读状态" />
      <Textarea placeholder="请输入内容" disabled value="禁用状态" />

      <Textarea placeholder="normal" value={'普通状态'} tips={'正常提示'} />
      <Textarea status="success" placeholder="success" value={'成功状态'} tips={'成功提示'} />
      <Textarea status="warning" placeholder="warning" value={'警告状态'} tips={'警告提示'} />
      <Textarea status="error" placeholder="error" value={'错误状态'} tips={'错误提示'} />
    </Space>
  );
}

                  组建:<Transfer/>
                  使用描述：包含穿梭框最基础的功能和组合元素。需要两框之间的元素迁移时，便于元素的选择。
                  代码示例：import React, { useState } from 'react';
import { Transfer } from 'tdesign-react';

const list = [];
for (let i = 0; i < 20; i++) {
  list.push({
    value: i.toString(),
    label: `内容${i + 1}`,
    disabled: i % 4 < 1,
  });
}
export default function BaseExample() {
  const [value, setValue] = useState(['2']);
  return <Transfer data={list} value={value} onChange={(v) => setValue(v)}></Transfer>;
}

                  ===SPLIT===组建:<Transfer/>
                  使用描述：基础穿梭框上支持搜索功能，当穿梭框中数据量较大时，提供给用户更快捷的数据项定位能力。
                  代码示例：import React from 'react';
import { Transfer } from 'tdesign-react';

const list = [];
for (let i = 0; i < 20; i++) {
  list.push({
    value: i.toString(),
    label: `内容${i + 1}`,
    disabled: i % 4 < 1,
  });
}
export default function SearchExample() {
  return <Transfer data={list} search={true}></Transfer>;
}

                  ===SPLIT===组建:<Transfer/>
                  使用描述：针对数据量较多的场景，可以通过 pagination 将选项分页展示。
                  代码示例：import React from 'react';
import { Transfer } from 'tdesign-react';

const list = [];
for (let i = 0; i < 20; i++) {
  list.push({
    value: i.toString(),
    label: `内容${i + 1}`,
  });
}
export default function PaginationExample() {
  const pagination = [
    {
      pageSize: 10,
      onPageChange: (current) => {
        console.log('current', current);
      },
    },
    {
      pageSize: 5,
      defaultCurrent: 1,
    },
  ];
  const handlePageChange = (...args) => {
    console.log('args', args);
  };
  return <Transfer data={list} pagination={pagination} onPageChange={handlePageChange}></Transfer>;
}

                  ===SPLIT===组建:<Transfer/>
                  使用描述：穿梭框的标题、底部、操作按钮和数据渲染都可以自定义渲染。
                  代码示例：import React from 'react';
import { Transfer } from 'tdesign-react';

const list = [];
for (let i = 0; i < 20; i++) {
  list.push({
    value: i.toString(),
    label: `内容${i + 1}`,
    disabled: i % 4 < 1,
  });
}
const customStyle = {
  padding: 12,
  borderTop: '1px solid rgb(231, 231, 231)',
};
export default function BaseExample() {
  return (
    <Transfer
      data={list}
      title={[
        '来源',
        <>
          <div>目标</div>
        </>,
      ]}
      operation={['加入', '移除']}
      footer={[
        <>
          <div style={customStyle}>选中并加入</div>
        </>,
        <>
          <div style={customStyle}>选中并移除</div>
        </>,
      ]}
    ></Transfer>
  );
}

                  ===SPLIT===组建:<Transfer/>
                  使用描述：当数据为空时会展示暂无数据，也可以根据需求配置空数据展示。
                  代码示例：import React from 'react';
import { Transfer } from 'tdesign-react';

export default function BaseExample() {
  return (
    <div className="tdesign-demo-block-column">
      <p>默认暂无数据</p>
      <Transfer></Transfer>
      <p>自定义暂无数据</p>
      <Transfer
        empty={[
          'No Source',
          <div key="empty" className="t-transfer__empty">
            No Target
          </div>,
        ]}
      ></Transfer>
    </div>
  );
}

                  ===SPLIT===组建:<Transfer/>
                  使用描述：还支持配合 Tree 组件使用。适用于复杂选项的场景。
                  代码示例：import React from 'react';
import { Transfer, Tree } from 'tdesign-react';

const list = [
  {
    value: '1',
    label: '1',
    children: [
      {
        value: '1.1',
        label: '1.1',
      },
      {
        value: '1.2',
        label: '1.2',
        children: [
          {
            value: '1.2.1',
            label: '1.2.1',
            children: [
              {
                value: '1.2.1.1',
                label: '1.2.1.1',
              },
              {
                value: '1.2.1.2',
                label: '1.2.1.2',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    value: '2',
    label: '2',
    children: [
      {
        value: '2.1',
        label: '2.1',
      },
      {
        value: '2.2',
        label: '2.2',
      },
    ],
  },
];
export default function BaseExample() {
  const TreeNode = (props) => <Tree {...props} checkable expandAll={true} hover={true} transition={true} />;
  return <Transfer data={list} tree={TreeNode}></Transfer>;
}

                  组建:<TimePicker/>
                  使用描述：由时、分、秒三部分组成的选择界面。用户需要输入精度到秒的时间时使用。
                  代码示例：import React, { useState } from 'react';
import { TimePicker } from 'tdesign-react';

export default function BasicTimePicker() {
  const [value, setValue] = useState('12:00:00');
  const handleValueChange = (v) => {
    console.log('change', v);
    setValue(v);
  };
  const handleOnPick = (v, context) => {
    console.log('onPick', v, context);
  };
  const handleClose = () => {
    console.log('close');
  };
  const handleOpen = () => {
    console.log('open');
  };
  return (
    <TimePicker
      value={value}
      onChange={handleValueChange}
      onPick={handleOnPick}
      onClose={handleClose}
      onOpen={handleOpen}
      popupProps={{
        overlayInnerStyle: {
          fontWeight: 'normal',
        },
        overlayStyle: {
          fontWeight: 'normal',
        },
        overlayClassName: 'time-picker-custom-overlay-class',
        overlayInnerClassName: 'time-picker-custom-overlay-inner-class',
      }}
    />
  );
}

                  ===SPLIT===组建:<TimePicker/>
                  使用描述：如果场景需要自定义格式，可以通过format更改时间格式，面板和输入框会跟随格式变化。
                  代码示例：import React from 'react';
import { TimePicker, Space } from 'tdesign-react';

export default function HmTimePicker() {
  return (
    <Space direction="vertical">
      <h3>时分选择</h3>
      <TimePicker defaultValue={'12:00'} format="HH:mm" />
      <h3>毫秒选择</h3>
      <TimePicker defaultValue={'12:59:59:000'} format="HH:mm:ss:SSS" />
    </Space>
  );
}

                  ===SPLIT===组建:<TimePicker/>
                  使用描述：由时、分两部分组成的选择界面，且分钟刻度步长大于 1。用户对时间精度要求不高的场景，如数据筛选。
                  代码示例：import React from 'react';
import { TimePicker } from 'tdesign-react';

export default function ShowStepsTimePicker() {
  return <TimePicker steps={[1, 5]} format="HH:mm" />;
}

                  ===SPLIT===组建:<TimePicker/>
                  使用描述：12 小时制式的时间格式显示。用户需要以 12 小时制式显示时间时使用。
                  代码示例：import React, { useState } from 'react';
import { TimePicker } from 'tdesign-react';

export default function TwelveHourTimePicker() {
  const [value, setValue] = useState(null);
  const handleValueChange = (v) => {
    setValue(v);
  };
  return <TimePicker format="hh:mm:ss A" value={value} onChange={handleValueChange} />;
}

                  ===SPLIT===组建:<TimePicker/>
                  使用描述：用于某一段时间的选择。用户需要输入一段时间区间时使用。
                  代码示例：import React from 'react';
import { TimePicker } from 'tdesign-react';

const { TimeRangePicker } = TimePicker;
export default function RangeTimePicker() {
  return (
    <TimeRangePicker
      clearable
      format="HH:mm:ss"
      defaultValue={undefined}
      allowInput
      placeholder={['开始时间', '结束时间']}
    />
  );
}

                  ===SPLIT===组建:<TimePicker/>
                  使用描述：默认开启改功能，当选中时、分、秒中的某一项时，可通过数字键盘直接输入或方向键进行时、分、秒的修改。
                  代码示例：import React from 'react';
import { TimePicker } from 'tdesign-react';

export default function KeyboardTimePicker() {
  const handleBlur = (param) => {
    console.log(param, 'onBlur');
  };
  const handleInput = (param) => {
    console.log(param, 'onInput');
  };
  const handleFocus = (param) => {
    console.log(param, 'onFocus');
  };
  return (
    <TimePicker
      defaultValue="12:08:00"
      format="HH:mm:ss"
      onBlur={handleBlur}
      onInput={handleInput}
      onFocus={handleFocus}
      allowInput
      clearable
    />
  );
}

                  ===SPLIT===组建:<TimePicker/>
                  使用描述：限定组件不具备清空按钮。默认组件将会在具备时间值的时候展示清空按钮。
                  代码示例：import React from 'react';
import { TimePicker, Space } from 'tdesign-react';

export default function HmTimePicker() {
  return (
    <Space direction="vertical">
      <h3>禁止清空</h3>
      <TimePicker defaultValue="12:00:00" />
      <h3>允许清空</h3>
      <TimePicker defaultValue="12:00:00" clearable={true} />
    </Space>
  );
}

                  ===SPLIT===组建:<TimePicker/>
                  使用描述：禁止组件的使用。
                  代码示例：import React from 'react';
import { TimePicker, Space } from 'tdesign-react';

export default function DisabledTimePicker() {
  const disableTime = (h) => {
    const disableHour = [1, 2, 3];
    if (h > 4) {
      return {
        hour: disableHour,
        minute: [30, 31, 32, 33, 34],
      };
    }
    return {
      hour: disableHour,
    };
  };
  return (
    <Space direction="vertical">
      <h3>禁用整个选择器</h3>
      <TimePicker disabled={true} />

      <h3>禁用指定时间</h3>
      <TimePicker disableTime={disableTime} />
    </Space>
  );
}

                  ===SPLIT===组建:<TimePicker/>
                  使用描述：如果只需要面板部分，可以通过使用TimePickerPanel来满足使用场景。
                  代码示例：import React, { useState } from 'react';
import { TimePicker } from 'tdesign-react';

const { TimePickerPanel } = TimePicker;
function Panel() {
  const [value, setValue] = useState('');
  return <TimePickerPanel value={value} onChange={setValue} />;
}
export default Panel;

                  ===SPLIT===组建:<TimePicker/>
                  使用描述：可以通过presets设置。
                  代码示例：import React, { useState } from 'react';
import { TimePicker, Space } from 'tdesign-react';

const { TimeRangePicker } = TimePicker;
export default function RangeTimePicker() {
  const [time1, setTime1] = useState('20:22');
  const [time2, setTime2] = useState(['00:00:00', '23:59:59']);
  return (
    <Space direction="vertical">
      <TimePicker
        value={time1}
        onChange={setTime1}
        presets={{
          上午十一点: '11:00:00',
        }}
        clearable
      />

      <TimeRangePicker
        value={time2}
        onChange={setTime2}
        style={{
          marginTop: '20px',
        }}
        clearable
        format="HH:mm:ss"
        allow-input
        presets={{
          下午: ['13:00:00', '18:00:00'],
        }}
      />
    </Space>
  );
}

                  组建:<TreeSelect/>
                  使用描述：最基本的使用方法，常用于选择省份。
                  代码示例：import React, { useState } from 'react';
import { TreeSelect } from 'tdesign-react';

const options = [
  {
    label: '广东省',
    value: 'guangdong',
    children: [
      {
        label: '广州市',
        value: 'guangzhou',
      },
      {
        label: '深圳市',
        value: 'shenzhen',
        children: [
          {
            label: '南山区海天二路33号腾讯滨海大厦',
            value: 'Tencent',
          },
        ],
      },
    ],
  },
  {
    label: '江苏省',
    value: 'jiangsu',
    disabled: true,
    children: [
      {
        label: '南京市',
        value: 'nanjing',
      },
      {
        label: '苏州市',
        value: 'suzhou',
      },
    ],
  },
];
export default function Example() {
  const [value, setValue] = useState('guangdong');
  return (
    <TreeSelect
      data={options}
      clearable
      value={value}
      onChange={(val) => {
        setValue(val);
        console.log(val);
      }}
      style={{
        width: 300,
      }}
    />
  );
}

                  ===SPLIT===组建:<TreeSelect/>
                  使用描述：允许选取多个选项。
                  代码示例：import React, { useState } from 'react';
import { TreeSelect } from 'tdesign-react';

const options = [
  {
    label: '广东省',
    value: 'guangdong',
    children: [
      {
        label: '广州市',
        value: 'guangzhou',
      },
      {
        label: '深圳市',
        value: 'shenzhen',
      },
    ],
  },
  {
    label: '江苏省',
    value: 'jiangsu',
    children: [
      {
        label: '南京市',
        value: 'nanjing',
      },
      {
        label: '苏州市',
        value: 'suzhou',
      },
    ],
  },
];
export default function Example() {
  const [value, setValue] = useState(['guangzhou', 'shenzhen']);
  return (
    <TreeSelect
      data={options}
      clearable
      multiple
      placeholder="请选择"
      value={value}
      onChange={(val) => {
        setValue(val);
        console.log(val);
      }}
      style={{
        width: 300,
      }}
    />
  );
}

                  ===SPLIT===组建:<TreeSelect/>
                  使用描述：树结构支持过滤。
                  代码示例：import React, { useState } from 'react';
import { TreeSelect, Radio, Space } from 'tdesign-react';

const options = [
  {
    label: '广东省',
    value: 'guangdong',
    children: [
      {
        label: '广州市',
        value: 'guangzhou',
      },
      {
        label: '深圳市',
        value: 'shenzhen',
      },
    ],
  },
  {
    label: '江苏省',
    value: 'jiangsu',
    children: [
      {
        label: '南京市',
        value: 'nanjing',
      },
      {
        label: '苏州市',
        value: 'suzhou',
      },
    ],
  },
];
export default function Example() {
  const [type, setType] = useState('default');
  const handleEnter = (ctx) => {
    console.log('onEnter api:', ctx);
  };
  const filterFunction = (searchText, node) => node.data.label.indexOf(searchText) >= 0;
  return (
    <Space
      direction="vertical"
      style={{
        width: 300,
      }}
    >
      <Radio.Group value={type} onChange={(v) => setType(v)} variant="default-filled">
        <Radio.Button value="default">默认</Radio.Button>
        <Radio.Button value="function">自定义方法</Radio.Button>
      </Radio.Group>
      {type === 'default' ? (
        <>
          <TreeSelect data={options} clearable filterable placeholder="请选择" onEnter={handleEnter} />
          <TreeSelect data={options} multiple clearable filterable placeholder="请选择" />
        </>
      ) : (
        <>
          <TreeSelect data={options} clearable filter={filterFunction} placeholder="请选择" />
          <TreeSelect data={options} multiple clearable filter={filterFunction} placeholder="请选择" />
        </>
      )}
    </Space>
  );
}

                  ===SPLIT===组建:<TreeSelect/>
                  使用描述：支持控制选中值的类型。
                  代码示例：import React, { useState } from 'react';
import { TreeSelect, Space } from 'tdesign-react';

const options = [
  {
    label: '广东省',
    value: 'guangdong',
    children: [
      {
        label: '广州市',
        value: 'guangzhou',
      },
      {
        label: '深圳市',
        value: 'shenzhen',
      },
    ],
  },
  {
    label: '江苏省',
    value: 'jiangsu',
    children: [
      {
        label: '南京市',
        value: 'nanjing',
      },
      {
        label: '苏州市',
        value: 'suzhou',
      },
    ],
  },
];
export default function Example() {
  const [value, setValue] = useState({
    label: '深圳市',
    value: 'shenzhen',
  });
  const [mulValue, setMulValue] = useState([
    {
      label: '广州市',
      value: 'guangzhou',
    },
    {
      label: '深圳市',
      value: 'shenzhen',
    },
  ]);
  return (
    <Space
      direction="vertical"
      style={{
        width: 300,
      }}
    >
      <TreeSelect
        data={options}
        clearable
        placeholder="请选择"
        value={value}
        valueType="object"
        onChange={(val) => {
          setValue(val);
          console.log(val);
        }}
      />
      <TreeSelect
        data={options}
        clearable
        multiple
        valueType="object"
        placeholder="请选择"
        value={mulValue}
        onChange={(val) => {
          setMulValue(val);
          console.log(val);
        }}
      />
    </Space>
  );
}

                  ===SPLIT===组建:<TreeSelect/>
                  使用描述：支持透传 popupProps 和 treeProps 。
                  代码示例：import React, { useState } from 'react';
import { TreeSelect } from 'tdesign-react';

const options = [
  {
    name: '广东省',
    pinyin: 'guangdong',
    children: [
      {
        name: '广州市',
        pinyin: 'guangzhou',
      },
      {
        name: '深圳市',
        pinyin: 'shenzhen',
      },
    ],
  },
  {
    name: '江苏省',
    pinyin: 'jiangsu',
    children: [
      {
        name: '南京市',
        pinyin: 'nanjing',
      },
      {
        name: '苏州市',
        pinyin: 'suzhou',
      },
    ],
  },
];
export default function Example() {
  const [value, setValue] = useState('shenzhen');
  return (
    <TreeSelect
      data={options}
      clearable
      placeholder="请选择"
      value={value}
      // defaultValue="guangdong"
      onChange={(val) => {
        setValue(val);
        console.log(val);
      }}
      style={{
        width: 300,
      }}
      popupProps={{
        overlayStyle: {
          width: '500px',
        },
        overlayInnerStyle: {
          fontWeight: 'normal',
        },
        overlayClassName: 'tree-select-custom-overlay-class',
        overlayInnerClassName: 'tree-select-custom-overlay-inner-class',
      }}
      treeProps={{
        keys: {
          label: 'name',
          value: 'pinyin',
          children: 'children',
        },
      }}
    />
  );
}

                  ===SPLIT===组建:<TreeSelect/>
                  使用描述：通过透传实现异步加载树节点。
                  代码示例：import React, { useState } from 'react';
import { TreeSelect } from 'tdesign-react';

const options = [
  {
    label: '1',
    value: '1',
    children: true,
  },
  {
    label: '2',
    value: '2',
    children: true,
  },
];
export default function Example() {
  const [value, setValue] = useState('');
  const loadFunc = (node) =>
    new Promise((resolve) => {
      setTimeout(() => {
        let nodes = [];
        if (node.getLevel() < 2) {
          nodes = [
            {
              label: `${node.label}.1`,
              value: `${node.value}.1`,
              children: true,
            },
            {
              label: `${node.label}.2`,
              value: `${node.value}.2`,
              children: true,
            },
          ];
        }
        resolve(nodes);
      }, 2000);
    });
  return (
    <div
      style={{
        width: 300,
      }}
    >
      <TreeSelect
        data={options}
        clearable
        placeholder="请选择"
        value={value}
        treeProps={{
          load: loadFunc,
          lazy: true,
        }}
        onChange={(val) => {
          setValue(val);
          console.log(val);
        }}
      />
    </div>
  );
}

                  ===SPLIT===组建:<TreeSelect/>
                  使用描述：多选情况下，超出该数值的选中项折叠。
                  代码示例：import React, { useState } from 'react';
import { TreeSelect, Tag, Tooltip, Space } from 'tdesign-react';

const options = [
  {
    label: '广东省',
    value: 'guangdong',
    children: [
      {
        label: '广州市',
        value: 'guangzhou',
      },
      {
        label: '深圳市',
        value: 'shenzhen',
      },
    ],
  },
  {
    label: '江苏省',
    value: 'jiangsu',
    children: [
      {
        label: '南京市',
        value: 'nanjing',
      },
      {
        label: '苏州市',
        value: 'suzhou',
      },
    ],
  },
];
export default function Example() {
  const [value, setValue] = useState(['guangzhou', 'shenzhen']);
  const [customizeValue, setCustomizeValue] = useState(['guangzhou', 'shenzhen']);
  return (
    <Space
      direction="vertical"
      style={{
        width: 300,
      }}
    >
      <TreeSelect
        data={options}
        multiple
        clearable
        placeholder="请选择"
        minCollapsedNum={1}
        value={value}
        onChange={(val) => setValue(val)}
      />
      <TreeSelect
        data={options}
        multiple
        clearable
        placeholder="请选择"
        minCollapsedNum={1}
        collapsedItems={({ collapsedSelectedItems }) => (
          <Tooltip content={collapsedSelectedItems.map((item) => item.label).join('、')}>
            <Tag>更多...</Tag>
          </Tooltip>
        )}
        value={customizeValue}
        onChange={(val) => setCustomizeValue(val)}
      />
    </Space>
  );
}

                  ===SPLIT===组建:<TreeSelect/>
                  使用描述：支持自定义选中项展示，常用于组合 label 和 value 展示。
                  代码示例：import React, { useState } from 'react';
import { TreeSelect, Tag, Space } from 'tdesign-react';

const options = [
  {
    label: '广东省',
    value: 'guangdong',
    children: [
      {
        label: '广州市',
        value: 'guangzhou',
      },
      {
        label: '深圳市',
        value: 'shenzhen',
      },
    ],
  },
  {
    label: '江苏省',
    value: 'jiangsu',
    children: [
      {
        label: '南京市',
        value: 'nanjing',
      },
      {
        label: '苏州市',
        value: 'suzhou',
      },
    ],
  },
];
export default function Example() {
  const [value, setValue] = useState('guangzhou');
  const [mulValue, setMulValue] = useState(['guangzhou', 'shenzhen']);
  return (
    <Space
      direction="vertical"
      style={{
        width: 300,
      }}
    >
      <TreeSelect
        data={options}
        clearable
        placeholder="请选择"
        value={value}
        onChange={(val) => setValue(val)}
        valueDisplay={({ value }) => `${value.label}(${value.value})`}
      />
      <TreeSelect
        data={options}
        multiple
        clearable
        placeholder="请选择"
        value={mulValue}
        valueDisplay={({ onClose, value }) =>
          value.map(({ label, value }, index) => (
            <Tag key={value} closable onClose={() => onClose(index)}>
              {label}({value})
            </Tag>
          ))
        }
        onChange={(val) => setMulValue(val)}
      />
    </Space>
  );
}

                  ===SPLIT===组建:<TreeSelect/>
                  使用描述：支持自定义选择器的前缀、后缀，也可以使用suffixIcon自定义翻转箭头图标。
                  代码示例：import React from 'react';
import { TreeSelect } from 'tdesign-react';
import { UserIcon, CaretDownSmallIcon } from 'tdesign-icons-react';

const options = [
  {
    label: '广东省',
    value: 'guangdong',
    children: [
      {
        label: '广州市',
        value: 'guangzhou',
      },
      {
        label: '深圳市',
        value: 'shenzhen',
        children: [
          {
            label: '南山区海天二路33号腾讯滨海大厦',
            value: 'Tencent',
          },
        ],
      },
    ],
  },
  {
    label: '江苏省',
    value: 'jiangsu',
    disabled: true,
    children: [
      {
        label: '南京市',
        value: 'nanjing',
      },
      {
        label: '苏州市',
        value: 'suzhou',
      },
    ],
  },
];
export default function Example() {
  return (
    <TreeSelect
      data={options}
      clearable
      placeholder="请输入"
      prefixIcon={<UserIcon />}
      suffixIcon={<CaretDownSmallIcon />}
      style={{
        width: 300,
      }}
    />
  );
}

                  组建:<Upload/>
                  使用描述：action 表示上传接口地址。formatRequest 用于格式化上传接口请求参数，可以新增或修改参数。formatResponse 用于格式化接口响应值，如果响应值中的 error 字段存在，则会判定本次上传失败。sizeLimit 用于设置文件大小限制，如果超出限制不会触发上传请求。allowUploadDuplicateFile 是否允许上传相同文件名的文件。onSelectChange 会在文件选择之后，上传请求发起之前触发。onSuccess 会在上传成功后触发。onFail 会在上传失败后触发。
                  代码示例：import React, { useRef, useState, useEffect } from 'react';
import { Upload, Space, Radio, Checkbox, Button, MessagePlugin } from 'tdesign-react';
import { CloseIcon } from 'tdesign-icons-react';

export default function UploadExample() {
  const uploadRef1 = useRef(null);
  const uploadRef2 = useRef(null);
  const uploadRef3 = useRef(null);
  const [files1, setFiles1] = useState([]);
  const [files2, setFiles2] = useState([
    {
      name: '这是一个默认文件',
      status: 'success',
      url: 'https://tdesign.gtimg.com/site/source/figma-pc.png',
      size: 1000,
    },
  ]);
  const [files3, setFiles3] = useState([]);
  const [multiple, setMultiple] = useState(false);
  const [uploadInOneRequest, setUploadInOneRequest] = useState(false);
  const [autoUpload, setAutoUpload] = useState(true);
  const [isBatchUpload, setIsBatchUpload] = useState(false);
  const [disabled, setDisabled] = useState(false);
  useEffect(() => {
    setFiles3(
      multiple
        ? [
            {
              name: '这是一个上传成功的文件',
              status: 'success',
              url: 'https://tdesign.gtimg.com/site/source/figma-pc.png',
              size: 1000,
            },
            {
              name: '这是一个上传中的文件',
              status: 'progress',
              percent: 30,
              url: 'https://tdesign.gtimg.com/site/source/figma-pc.png',
              size: 1000,
            },
            {
              name: '这是一个上传失败的文件',
              status: 'fail',
              url: 'https://tdesign.gtimg.com/site/source/figma-pc.png',
              size: 1000,
            },
            {
              name: '这是一个等待上传的文件',
              status: 'waiting',
              url: 'https://tdesign.gtimg.com/site/source/figma-pc.png',
              size: 1000,
            },
          ]
        : [],
    );
  }, [multiple]);
  const handleFail = ({ file }) => {
    MessagePlugin.error(`文件 ${file.name} 上传失败`);
  };
  const handleSelectChange = (files) => {
    console.log('onSelectChange', files);
  };
  const handleSuccess = (params) => {
    console.log(params);
    MessagePlugin.success('上传成功');
  };

  // 多文件上传，一个文件一个请求场景，每个文件也会单独触发上传成功的事件
  const onOneFileSuccess = (params) => {
    console.log('onOneFileSuccess', params);
  };

  // 有文件数量超出时会触发，文件大小超出限制、文件同名时会触发等场景。注意如果设置允许上传同名文件，则此事件不会触发
  const onValidate = (params) => {
    const { files, type } = params;
    console.log('onValidate', type, files);
    const messageMap = {
      FILE_OVER_SIZE_LIMIT: '文件大小超出限制，已自动过滤',
      FILES_OVER_LENGTH_LIMIT: '文件数量超出限制，仅上传未超出数量的文件',
      // if you need same name files, setting allowUploadDuplicateFile={true} please
      FILTER_FILE_SAME_NAME: '不允许上传同名文件',
      BEFORE_ALL_FILES_UPLOAD: 'beforeAllFilesUpload 方法拦截了文件',
      CUSTOM_BEFORE_UPLOAD: 'beforeUpload 方法拦截了文件',
    };
    // you can also set Upload.tips and Upload.status to show warning message.
    messageMap[type] && MessagePlugin.warning(messageMap[type]);
  };

  // 仅自定义文件列表所需
  // eslint-disable-next-line
  const outsideRemove = (index) => {
    const tmpFiles = [...files3];
    tmpFiles.splice(index, 1);
    setFiles3(tmpFiles);
  };

  // eslint-disable-next-line
  const fileListDisplay = () => (
    <div>
      {files3.map((file, index) => (
        <div key={file.name} className="t-upload__single-display-text t-upload__display-text--margin">
          {file.name}（{file.size} B）
          <CloseIcon className="t-upload__icon-delete" onClick={() => outsideRemove(index)} />
        </div>
      ))}
    </div>
  );

  // 非自动上传文件，需要在父组件单独执行上传请求
  const uploadFiles = () => {
    uploadRef1.current.uploadFiles();
    uploadRef2.current.uploadFiles();
    uploadRef3.current.uploadFiles();
  };

  // 非自动上传文件，需保存待上传文件列表
  const [waitingUploadFiles, setWaitingUploadFiles] = useState([]);
  const onWaitingUploadFilesChange = ({ files }) => {
    setWaitingUploadFiles(files);
    console.log('onWaitingUploadFilesChange', waitingUploadFiles, files);
  };

  // 用于格式化接口响应值，error 会被用于上传失败的提示文字；url 表示文件/图片地址
  const formatResponse = (res) => ({
    ...res,
    error: '上传失败，请重试',
    url: res?.url,
  });

  /** 单个文件校验方法，示例代码有效，勿删 */
  // const beforeUpload = (file) => {
  //   MessagePlugin.error(`文件 ${file.name} 不满足条件`);
  //   return false;
  // };

  /** 全部文件一次性校验方法，示例代码有效，勿删 */
  // const beforeAllFilesUpload = () => {
  //   MessagePlugin.error(`文件不满足条件`);
  //   return false;
  // };

  return (
    <Space direction="vertical">
      <Space>
        <Radio.Group value={multiple} onChange={(val) => setMultiple(val)} variant="default-filled">
          <Radio.Button value={false}>单文件上传</Radio.Button>
          <Radio.Button value={true}>多文件上传</Radio.Button>
        </Radio.Group>
      </Space>
      <Space>
        <Checkbox checked={disabled} onChange={setDisabled}>
          禁用状态
        </Checkbox>
        {multiple && (
          <Checkbox checked={uploadInOneRequest} onChange={setUploadInOneRequest}>
            多个文件一个请求上传
          </Checkbox>
        )}
        {multiple && (
          <Checkbox checked={isBatchUpload} onChange={setIsBatchUpload}>
            整体替换上传
          </Checkbox>
        )}
        <Checkbox checked={autoUpload} onChange={setAutoUpload}>
          自动上传
        </Checkbox>
        {!autoUpload && (
          <Button
            variant="base"
            theme="default"
            style={{
              height: '22px',
            }}
            onClick={uploadFiles}
          >
            点击手动上传
          </Button>
        )}
      </Space>

      <br />

      {/* <!-- 1. formatRequest 用于修改或新增上传请求数据，示例：:formatRequest="(obj) => ({ ...obj, other: 123 })" --> */}
      <Space>
        <Upload
          ref={uploadRef1}
          files={files1}
          onChange={(val, ctx) => {
            console.log(val, ctx);
            setFiles1(val);
          }}
          action="https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
          placeholder={multiple ? '文件数量不超过 5 个' : '要求文件大小在 1M 以内'}
          multiple={multiple}
          autoUpload={autoUpload}
          uploadAllFilesInOneRequest={uploadInOneRequest}
          isBatchUpload={isBatchUpload}
          sizeLimit={{
            size: 1,
            unit: 'MB',
          }}
          max={5}
          disabled={disabled}
          allowUploadDuplicateFile={true}
          // formatRequest={(obj) => ({ ...obj, other: 123 })}
          onSelectChange={handleSelectChange}
          onFail={handleFail}
          onSuccess={handleSuccess}
          onOneFileSuccess={onOneFileSuccess}
          onValidate={onValidate}
          onWaitingUploadFilesChange={onWaitingUploadFilesChange}
        />

        <Upload
          ref={uploadRef2}
          files={files2}
          onChange={setFiles2}
          multiple={multiple}
          disabled={disabled}
          autoUpload={autoUpload}
          uploadAllFilesInOneRequest={uploadInOneRequest}
          isBatchUpload={isBatchUpload}
          triggerButtonProps={{
            theme: 'primary',
            variant: 'base',
          }}
          placeholder="这是一段没有文件时的占位文本"
          action="//service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
          style={{
            marginLeft: '40px',
          }}
          onFail={handleFail}
        ></Upload>

        {/* formatResponse 可控制上传成功或者失败 */}
        <Upload
          ref={uploadRef3}
          files={files3}
          onChange={setFiles3}
          multiple={multiple}
          disabled={disabled}
          autoUpload={autoUpload}
          uploadAllFilesInOneRequest={uploadInOneRequest}
          isBatchUpload={isBatchUpload}
          formatResponse={formatResponse}
          placeholder="文件上传失败示例"
          action="//service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
          style={{
            marginLeft: '60px',
          }}
          // fileListDisplay={fileListDisplay}
          onFail={handleFail}
        />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Upload/>
                  使用描述：设置 theme='single-input' 即可，这种风格不支持拖拽上传，文档下方有拖拽上传和批量上传示例。
                  代码示例：import React, { useState, useRef } from 'react';
import { Upload, MessagePlugin, Space, Button, Checkbox } from 'tdesign-react';

const UploadSingleInput = () => {
  const uploadRef = useRef(null);
  const [files, setFiles] = useState([]);
  const [autoUpload, setAutoUpload] = useState(true);
  const [disabled, setDisabled] = useState(false);
  const handleFail = ({ file }) => {
    MessagePlugin.error(`${file.name} 上传失败`);
  };
  const onSuccess = () => {
    MessagePlugin.success('上传成功');
  };

  // 非自动上传文件，需要在父组件单独执行上传
  const uploadFiles = () => {
    uploadRef.current.uploadFiles();
  };
  return (
    <Space direction="vertical">
      <Space>
        <Checkbox checked={autoUpload} onChange={setAutoUpload}>
          自动上传
        </Checkbox>
        <Checkbox checked={disabled} onChange={setDisabled}>
          禁用状态
        </Checkbox>
        {!autoUpload && (
          <Button
            variant="base"
            theme="default"
            size="small"
            style={{
              height: '22px',
            }}
            onClick={uploadFiles}
          >
            点击上传
          </Button>
        )}
      </Space>
      <br />
      <Upload
        ref={uploadRef}
        style={{
          width: '350px',
        }}
        files={files}
        onChange={setFiles}
        abridgeName={[8, 6]}
        action="https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
        theme="file-input"
        placeholder="请选择文件"
        autoUpload={autoUpload}
        disabled={disabled}
        onFail={handleFail}
        onSuccess={onSuccess}
      ></Upload>
    </Space>
  );
};
UploadSingleInput.displayName = 'UploadSingleInput';
export default UploadSingleInput;

                  ===SPLIT===组建:<Upload/>
                  使用描述：设置属性 theme='image' 即可，这种风格不支持拖拽上传，如果需要拖拽上传请移步文档下方有拖拽上传的示例。上传组件中的全部文本，均可通过 locale 进行修改，也支持全局配置，查看文档。图片预览地址，默认会读取上传接口返回的 url 字段。如果接口没有返回 url 字段，可以使用 formatResponse 格式化返回值，在返回值中增加 url 字段。
                  代码示例：import React, { useRef, useState } from 'react';
import { Upload, Space, MessagePlugin, Checkbox, Button } from 'tdesign-react';
import { getFileUrlByFileRaw } from '@tdesign/common-js/upload/utils';

export default function UploadExample() {
  const uploadRef1 = useRef(null);
  const uploadRef2 = useRef(null);
  const uploadRef3 = useRef(null);
  const [files1, setFiles1] = useState([]);
  const [files2, setFiles2] = useState([
    {
      url: 'https://tdesign.gtimg.com/demo/demo-image-1.png',
      name: 'default.jpeg',
      status: 'success',
    },
  ]);
  const [files3, setFiles3] = useState([]);
  const [disabled, setDisabled] = useState(false);
  const [uploadInOneRequest, setUploadInOneRequest] = useState(false);
  const [autoUpload, setAutoUpload] = useState(true);
  const setFormattedUrlFiles = (files) => {
    const list = files.map(
      (file) =>
        new Promise((resolve) => {
          getFileUrlByFileRaw(file.raw).then((url) => {
            resolve({
              ...file,
              url,
            });
          });
        }),
    );
    Promise.all(list).then((files) => {
      setFiles3(files);
    });
  };

  // 因上传请求始终返回固定的 url，为了让预览效果更加真实，故而将图片转为 base64 进行预览
  const onSuccess = ({ currentFiles }) => {
    const files = autoUpload ? files3.concat(currentFiles) : currentFiles;
    setFormattedUrlFiles(files);
  };

  // 有文件数量超出时会触发，文件大小超出限制、文件同名时会触发等场景。注意如果设置允许上传同名文件，则此事件不会触发
  const onValidate = (params) => {
    const { files, type } = params;
    console.log('onValidate', params);
    if (type === 'FILE_OVER_SIZE_LIMIT') {
      files.map((t) => t.name).join('、');
      MessagePlugin.warning(`${files.map((t) => t.name).join('、')} 等图片大小超出限制，已自动过滤`, 5000);
    } else if (type === 'FILES_OVER_LENGTH_LIMIT') {
      MessagePlugin.warning('文件数量超出限制，仅上传未超出数量的文件');
    } else if (type === 'FILTER_FILE_SAME_NAME') {
      // 如果希望支持上传同名图片，请设置 allowUploadDuplicateFile={true}
      MessagePlugin.warning('不允许上传同名图片');
    }
  };
  const uploadFiles = () => {
    uploadRef1.current.uploadFiles();
    uploadRef2.current.uploadFiles();
    uploadRef3.current.uploadFiles();
  };
  const onPreview = (params) => {
    console.log('点击图片预览时触发', params);
  };
  const formatResponse = () => ({
    name: 'FileName',
    error: '网络异常，图片上传失败',
  });
  return (
    <Space direction="vertical">
      <Space>
        <Checkbox checked={disabled} onChange={setDisabled}>
          禁用状态
        </Checkbox>
        <Checkbox checked={uploadInOneRequest} onChange={setUploadInOneRequest}>
          多个文件一个请求上传
        </Checkbox>
        <Checkbox checked={autoUpload} onChange={setAutoUpload}>
          自动上传
        </Checkbox>
        {!autoUpload && (
          <Button
            variant="base"
            theme="default"
            size="small"
            style={{
              height: '22px',
            }}
            onClick={uploadFiles}
          >
            点击上传
          </Button>
        )}
      </Space>

      <br />
      <Space direction="vertical">
        <Space>
          <Upload
            ref={uploadRef1}
            files={files1}
            onChange={setFiles1}
            action="//service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
            theme="image"
            tips="请选择单张图片文件上传（上传成功状态演示）"
            accept="image/*"
            disabled={disabled}
            locale={{
              triggerUploadText: {
                image: '请选择图片',
              },
            }}
            autoUpload={autoUpload}
            formatResponse={() => ({
              url: 'https://tdesign.gtimg.com/demo/demo-image-1.png',
            })}
          />

          <Upload
            action="https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
            theme="image"
            tips="单张图片文件上传（上传失败状态演示）"
            accept="image/*"
            formatResponse={formatResponse}
          />
        </Space>

        <Upload
          ref={uploadRef2}
          files={files2}
          onChange={setFiles2}
          action="//service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
          theme="image"
          accept="image/*"
          disabled={disabled}
          autoUpload={autoUpload}
          // custom UI example
          // fileListDisplay={UploadUI}
        />

        <Upload
          ref={uploadRef3}
          files={files3}
          onChange={setFiles3}
          action="//service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
          theme="image"
          tips="允许选择多张图片文件上传，最多只能上传 3 张图片"
          accept="image/*"
          multiple
          max={3}
          disabled={disabled}
          sizeLimit={{
            size: 2,
            unit: 'MB',
          }}
          autoUpload={autoUpload}
          abridgeName={[6, 6]}
          uploadAllFilesInOneRequest={uploadInOneRequest}
          onSuccess={onSuccess}
          onValidate={onValidate}
          onPreview={onPreview}
        />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Upload/>
                  使用描述：上传组件中的全部文本，均可通过 locale 进行修改，也支持全局配置，查看文档。如果拖拽上传单个文件，设置 theme='file' 和 draggable=true。如果拖拽上传单张图片，设置 theme='image' 和 draggable=true。可以使用 fileListDisplay 自定义文件信息呈现内容。
                  代码示例：import React, { useState } from 'react';
import { Upload, Radio, Switch, Space, MessagePlugin } from 'tdesign-react';

function getCurrentDate(needTime = false) {
  const d = new Date();
  const month = d.getMonth() + 1;
  const monthText = month < 10 ? `0${month}` : month;
  const date = `${d.getFullYear()}-${monthText}-${d.getDate()}`;
  const time = `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`;
  if (needTime) return [date, time].join(' ');
  return date;
}
export default function UploadExample() {
  const [files, setFiles] = useState([]);
  const [files2, setFiles2] = useState([
    {
      name: '默认文件',
      url: 'https://tdesign.gtimg.com/site/source/figma-pc.png',
      status: 'success',
      size: 1024,
      // 上传日期，如果接口返回的字段包含 uploadTime，则会以接口返回的为准，默认使用本地电脑时间。
      // 如果希望使用接口返回的上传日期，但是接口字段名不是 uploadTime，则可以使用函数 formatResponse 格式化接口数据
      uploadTime: '2022-09-25',
    },
  ]);
  const [autoUpload, setAutoUpload] = React.useState(false);
  const [theme, setTheme] = React.useState('file');
  const onFail = () => {
    MessagePlugin.error('上传失败');
  };
  const onSuccess = () => {
    MessagePlugin.success('上传成功');
  };

  // res.url 图片地址；res.uploadTime 文件上传时间；res.error 上传失败的原因
  const formatResponse = (res) => {
    // 响应结果添加上传时间字段，用于 UI 显示
    res.uploadTime = getCurrentDate();
    return res;
  };
  const handleChange = (checked) => {
    setAutoUpload(checked);
  };
  const handleTheme = (value) => {
    setTheme(value);
  };
  return (
    <Space direction="vertical">
      <div>
        是否自动上传：
        <Switch value={autoUpload} onChange={handleChange} />
      </div>
      <Radio.Group defaultValue="file" onChange={handleTheme} variant="default-filled">
        <Radio.Button value="file">文件拖拽上传</Radio.Button>
        <Radio.Button value="image">图片拖拽上传</Radio.Button>
      </Radio.Group>

      <br />

      {/* 可以使用 trigger 自定义拖拽区域显示的内容 */}
      {/* <!-- abridgeName 表示省略文件名中间文本，保留两侧。左侧保留的文本数量，右侧保留的文本数量] --> */}
      <Space>
        <Upload
          theme={theme}
          autoUpload={autoUpload}
          data={{
            extraData: 123,
            fileName: 'certificate',
          }}
          draggable
          action="//service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
          files={files}
          formatResponse={formatResponse}
          onChange={setFiles}
          onFail={onFail}
          onSuccess={onSuccess}
          // use fileListDisplay to define any file info
          // fileListDisplay={({ files }) => <div>{JSON.stringify(files)}</div>}
        />

        <Upload
          theme={theme}
          autoUpload={autoUpload}
          data={{
            extraData: 123,
            fileName: 'certificate',
          }}
          draggable
          action="//service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
          files={files2}
          formatResponse={formatResponse}
          onChange={setFiles2}
          onFail={onFail}
          onSuccess={onSuccess}
        />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Upload/>
                  使用描述：批量文件上传，请设置属性 theme='file-flow' 和 multiple=true。上传组件中的全部文本，均可通过 locale 进行修改，同时也支持全局配置，查看文档。使用 allowUploadDuplicateFile 实现多文上传时可重复选择重名文件。使用 uploadAllFilesInOneRequest 与 batchUpload 实现多文件批量合并上传，多文件整体上传，整体替换，不允许追加文件。
                  代码示例：import React, { useState } from 'react';
import { Upload, MessagePlugin, Space, Checkbox } from 'tdesign-react';

const ABRIDGE_NAME = [10, 7];
export default function FileFlowList() {
  const [uploadInOneRequest, setUploadInOneRequest] = useState(false);
  const [autoUpload, setAutoUpload] = useState(false);
  const [isBatchUpload, setIsBatchUpload] = useState(false);
  const [allowUploadDuplicateFile, setAllowUploadDuplicateFile] = useState(false);
  const [disabled, setDisabled] = useState(false);
  const [showThumbnail, setShowThumbnail] = useState(false);
  const [fileList, setFileList] = useState([]);

  // 有文件数量超出时会触发，文件大小超出限制、文件同名时会触发等场景。注意如果设置允许上传同名文件，则此事件不会触发
  const onValidate = (params) => {
    const { files, type } = params;
    console.log('onValidate', params);
    if (type === 'FILE_OVER_SIZE_LIMIT') {
      files.map((t) => t.name).join('、');
      MessagePlugin.warning(`${files.map((t) => t.name).join('、')} 等文件大小超出限制，已自动过滤`, 5000);
    } else if (type === 'FILES_OVER_LENGTH_LIMIT') {
      MessagePlugin.warning('文件数量超出限制，仅上传未超出数量的文件');
    } else if (type === 'FILTER_FILE_SAME_NAME') {
      // 如果希望支持上传同名文件，请设置 allowUploadDuplicateFile={true}
      MessagePlugin.warning('不允许上传同名文件');
    }
  };
  const formatResponse = (res) => {
    if (!res) {
      return {
        status: 'fail',
        error: '上传失败，原因：文件过大或网络不通',
      };
    }
    return res;
  };
  return (
    <Space direction="vertical">
      <Space breakLine>
        <Checkbox checked={disabled} onChange={setDisabled}>
          禁用状态
        </Checkbox>
        <Checkbox checked={autoUpload} onChange={setAutoUpload}>
          自动上传
        </Checkbox>
        <Checkbox checked={showThumbnail} onChange={setShowThumbnail}>
          显示文件缩略图
        </Checkbox>
        <Checkbox checked={allowUploadDuplicateFile} onChange={setAllowUploadDuplicateFile}>
          允许上传同名文件
        </Checkbox>
        <Checkbox checked={isBatchUpload} onChange={setIsBatchUpload}>
          整体替换上传
        </Checkbox>
        <Checkbox checked={uploadInOneRequest} onChange={setUploadInOneRequest}>
          多个文件一个请求上传
        </Checkbox>
      </Space>

      <br />

      <Upload
        files={fileList}
        onChange={setFileList}
        action="https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
        placeholder="支持批量上传文件，文件格式不限，最多只能上传 10 份文件"
        theme="file-flow"
        multiple
        max={10}
        abridge-name={ABRIDGE_NAME}
        disabled={disabled}
        autoUpload={autoUpload}
        showThumbnail={showThumbnail}
        uploadAllFilesInOneRequest={uploadInOneRequest}
        isBatchUpload={isBatchUpload}
        allowUploadDuplicateFile={allowUploadDuplicateFile}
        onValidate={onValidate}
        formatResponse={formatResponse}
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Upload/>
                  使用描述：批量图片上传，请设置属性 theme='image-flow' 和 multiple=true。上传组件中的全部文本，均可通过 locale 进行修改，同时也支持全局配置，查看文档。
                  代码示例：import React, { useState } from 'react';
import { Upload, Space, MessagePlugin, Switch, Checkbox, Divider } from 'tdesign-react';

const ABRIDGE_NAME = [4, 6];
const FILE_EXAMPLE = {
  status: 'success',
  response: {
    url: 'https://tdesign.gtimg.com/site/avatar.jpg',
  },
};
export default function TUploadImageFlow() {
  const [autoUpload, setAutoUpload] = useState(false);
  const [showImageFileName, setShowImageFileName] = useState(true);
  const [showUploadButton, setShowUploadButton] = useState(true);
  const [files, setFiles] = useState([
    {
      url: 'https://tdesign.gtimg.com/demo/demo-image-1.png',
      status: 'success',
      name: 'demo-image-1.png',
    },
    {
      url: 'https://tdesign.gtimg.com/site/avatar.jpg',
      status: 'success',
      name: 'avatar.jpg',
    },
  ]);
  // eslint-disable-next-line
  const [files2, setFiles2] = useState([]);
  const staticFiles = [
    {
      url: 'https://tdesign.gtimg.com/demo/demo-image-1.png',
      name: 'loading.svg',
      status: 'success',
    },
    {
      url: 'https://tdesign.gtimg.com/demo/demo-image-1.png',
      name: 'loading.svg',
      status: 'waiting',
    },
    {
      // url: 'https://tdesign.gtimg.com/demo/demo-image-1.png',
      name: 'loading.svg',
      status: 'progress',
      percent: 10,
    },
    {
      url: 'https://tdesign.gtimg.com/demo/demo-image-1.png',
      name: 'loading.svg',
      status: 'fail',
    },
  ];

  // 示例代码：自定义上传方法，一个请求上传一个文件
  // eslint-disable-next-line
  const requestMethod1 = () => {
    return new Promise((resolve) => {
      resolve(FILE_EXAMPLE);
    });
  };

  // 示例代码：自定义上传方法，一个请求上传多个文件
  // eslint-disable-next-line
  const requestMethod2 = () => {
    const files = [
      {
        name: files2[0].name,
        status: 'success',
        url: 'https://tdesign.gtimg.com/site/avatar.jpg',
      },
      {
        name: files2[1].name,
        status: 'success',
        url: 'https://avatars.githubusercontent.com/u/11605702?v=4',
      },
    ];
    return new Promise((resolve) => {
      resolve({
        status: 'success',
        response: {
          files,
        },
      });
    });
  };

  // 有文件数量超出时会触发，文件大小超出限制、文件同名时会触发等场景。注意如果设置允许上传同名文件，则此事件不会触发
  const onValidate = (params) => {
    const { files, type } = params;
    console.log('onValidate', params);
    if (type === 'FILE_OVER_SIZE_LIMIT') {
      files.map((t) => t.name).join('、');
      MessagePlugin.warning(`${files.map((t) => t.name).join('、')} 等文件大小超出限制，已自动过滤`, 5000);
    } else if (type === 'FILES_OVER_LENGTH_LIMIT') {
      MessagePlugin.warning('文件数量超出限制，仅上传未超出数量的文件');
    } else if (type === 'FILTER_FILE_SAME_NAME') {
      // 如果希望支持上传同名文件，请设置 allowUploadDuplicateFile={true}
      MessagePlugin.warning('不允许上传同名文件');
    }
  };
  const handleSwitchChange = (checked) => {
    setAutoUpload(checked);
  };

  // 因接口返回的 url 是同一个，所以看到的图片都是一个
  return (
    <Space direction="vertical">
      <Space>
        <div>
          AutoUpload
          <Switch value={autoUpload} onChange={handleSwitchChange} />
        </div>
        <Checkbox value={showImageFileName} onChange={setShowImageFileName}>
          Show Image Name
        </Checkbox>
        <Checkbox value={showUploadButton} onChange={setShowUploadButton}>
          Show UploadButton Or CancelUploadButton
        </Checkbox>
      </Space>

      <br />

      {/* <!-- action 上传地址，使用组件内部上传逻辑，action="https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo" --> */}
      {/* <!-- requestMethod 自定义上传方法，自定义上传逻辑 --> */}
      <Upload
        files={files}
        onChange={setFiles}
        // action="https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
        requestMethod={requestMethod1}
        placeholder="支持批量上传图片文件"
        theme="image-flow"
        accept="image/*"
        multiple
        autoUpload={autoUpload}
        max={8}
        abridgeName={ABRIDGE_NAME}
        showImageFileName={showImageFileName}
        uploadButton={showUploadButton ? {} : null}
        cancelUploadButton={
          showUploadButton
            ? {
                theme: 'default',
                content: '取消上传',
              }
            : null
        }
        onValidate={onValidate}
      />

      {/* <Upload
        files={files2}
        onChange={setFiles2}
        // action="https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
        requestMethod={requestMethod2}
        placeholder="支持批量上传图片文件"
        theme="image-flow"
        accept="image/*"
        multiple
        autoUpload={autoUpload}
        max={8}
        abridgeName={ABRIDGE_NAME}
        uploadAllFilesInOneRequest={true}
        onValidate={onValidate}
       /> */}

      <br />
      <Divider align="left">Different Status Images</Divider>

      <Upload
        files={staticFiles}
        theme="image-flow"
        showImageFileName={showImageFileName}
        className="static-image-list"
      ></Upload>
    </Space>
  );
}

                  ===SPLIT===组建:<Upload/>
                  使用描述：可以使用 requestMethod 自定义上传方法，返回 Promise 对象，resolve 参数中的 status 控制上传成功或失败，error 表示上传失败的原因。
                  代码示例：import React, { useCallback, useRef, useState } from 'react';
import { Radio, Upload, Space, MessagePlugin } from 'tdesign-react';

const RequestMethod = () => {
  const [files, setFiles] = useState([]);
  const [uploadMethod, setUploadMethod] = useState('requestSuccessMethod');
  const uploadRef = useRef(null);

  // customize upload `file`, if success, return url
  const requestSuccessMethod = useCallback(
    (file) =>
      new Promise((resolve) => {
        // 上传进度控制示例
        let percent = 0;
        const percentTimer = setInterval(() => {
          if (percent + 10 < 99) {
            percent += 10;
            uploadRef.current.uploadFilePercent({
              file,
              percent,
            });
          } else {
            clearInterval(percentTimer);
          }
        }, 100);

        //  mock upload progress
        let timer = setTimeout(() => {
          // resolve 参数为关键代码
          resolve({
            status: 'success',
            response: {
              url: 'https://tdesign.gtimg.com/site/avatar.jpg',
            },
          });
          clearTimeout(timer);
          timer = null;
        }, 1000);
      }),
    [],
  );

  // customize upload `file`, if fail, return error message
  const requestFailMethod = useCallback(
    () =>
      new Promise((resolve) => {
        const errorResult = {
          status: 'fail',
          // `errorResult.error` is equal to `errorResult.response.error`
          // error: 'for some reason, upload fail',

          // this is request response, response.url is required for file or image preview
          response: {
            url: '',
            error: 'for some reason, upload fail',
          },
        };
        resolve(errorResult);
      }),
    [],
  );
  const onChangeUploadMethod = useCallback((value) => {
    setUploadMethod(value);
    setFiles([]);
  }, []);
  const onSuccess = () => {
    MessagePlugin.success('上传成功');
  };
  const onFail = () => {
    MessagePlugin.error('上传失败');
  };
  return (
    <Space direction="vertical" size="large">
      <Radio.Group variant="default-filled" value={uploadMethod} onChange={onChangeUploadMethod}>
        <Radio.Button value="requestSuccessMethod">上传成功示例</Radio.Button>
        <Radio.Button value="requestFailMethod">上传失败示例</Radio.Button>
      </Radio.Group>

      <Upload
        ref={uploadRef}
        files={files}
        onChange={setFiles}
        requestMethod={uploadMethod === 'requestSuccessMethod' ? requestSuccessMethod : requestFailMethod}
        placeholder="自定义上传方法需要返回成功或失败信息"
        onSuccess={onSuccess}
        onFail={onFail}
      />
    </Space>
  );
};
export default RequestMethod;

                  ===SPLIT===组建:<Upload/>
                  使用描述：使用 trigger 自定义上传的触发元素，文件列表在上传组件外部自定义。
                  代码示例：import React, { useCallback, useState } from 'react';
import { Button, message, Upload, Space } from 'tdesign-react';

export default function SingleCustom() {
  const MAX_UPLOAD_SIZE = 1;
  const [tips, setTips] = useState(`上传文件大小在 ${MAX_UPLOAD_SIZE}M 以内`);
  const [files, setFiles] = useState([]);
  const [name, setName] = useState('name');
  const handleChange = useCallback((files) => {
    setFiles(files);
  }, []);
  const handleFail = useCallback(({ file }) => {
    message.error(`文件 ${file.name} 上传失败`);
  }, []);
  const handleSuccess = useCallback(() => {
    setTips('');
    message.success('上传成功');
  }, []);
  const beforeUpload = useCallback(
    () =>
      new Promise((resolve) => {
        setName('name2');
        // 在这里写文件上传前的校验
        resolve(true);
      }),
    [],
  );

  // 也可以使用 useUpload 自定义上传组件，该 Hook 包含上传组件的所有的逻辑
  return (
    <Space direction="vertical">
      <Upload
        headers={{
          name,
        }}
        action="https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
        tips={tips}
        files={files}
        onChange={handleChange}
        onFail={handleFail}
        onSuccess={handleSuccess}
        theme="custom"
        beforeUpload={beforeUpload}
        method="put"
        multiple
      >
        <Button theme="primary">自定义上传</Button>
      </Upload>
      {files?.length > 0 && (
        <div
          style={{
            fontSize: '13px',
          }}
        >
          <ul
            style={{
              padding: 0,
            }}
          >
            {files.map((file, index) => (
              <li
                key={index}
                style={{
                  listStyleType: 'none',
                }}
              >
                {file.name}
              </li>
            ))}
          </ul>
        </div>
      )}
    </Space>
  );
}

                  ===SPLIT===组建:<Upload/>
                  使用描述：使用 dragContent 自定义拖拽区域的元素内容，如果需要额外的上传触发元素可以在上传组件外部自定义。
                  代码示例：import React, { useCallback, useState } from 'react';
import { Button, message, Upload, Space } from 'tdesign-react';
import { CloudUploadIcon } from 'tdesign-icons-react';

export default function CustomDrag() {
  const [files, setFiles] = useState([]);
  const [progress, setProgress] = useState(0);
  const uploadDom = React.useRef(null);
  const handleChange = useCallback((files) => {
    setFiles(files.slice(-1));
  }, []);
  const handleFail = useCallback(({ file }) => {
    message.error(`文件 ${file.name} 上传失败`);
  }, []);
  const handleSuccess = useCallback(({ file }) => {
    message.success(`文件 ${file.name} 上传成功`);
  }, []);
  const upload = useCallback(() => {
    uploadDom.current.triggerUpload();
  }, [uploadDom]);
  const onProgress = useCallback((val) => {
    setProgress(val.percent);
  }, []);
  const customDraggerRender = useCallback(
    (triggerContext) => {
      const { dragActive } = triggerContext;
      function renderCustomDrag() {
        if (dragActive) {
          return <p>释放鼠标</p>;
        }
        return progress < 1 ? <Button>自定义拖拽区域</Button> : null;
      }
      function renderFiles(files) {
        return (
          <ul
            style={{
              padding: '0',
            }}
          >
            {files.map((file) => (
              <li
                key={file.name}
                style={{
                  listStyleType: 'none',
                }}
              >
                {file.name}
              </li>
            ))}
          </ul>
        );
      }
      return (
        <>
          {files?.length ? renderFiles(files) : renderCustomDrag()}
          {files?.length > 0 && (
            <Button
              variant="base"
              style={{
                marginTop: '16px',
              }}
            >
              更换文件
            </Button>
          )}
          <br />
          <br />
        </>
      );
    },
    [files, progress],
  );
  return (
    <Space direction="vertical">
      <Button variant="outline" icon={<CloudUploadIcon />} onClick={upload}>
        点击上传
      </Button>
      <Upload
        ref={uploadDom}
        files={files}
        action="https://service-bv448zsw-1257786608.gz.apigw.tencentcs.com/api/upload-demo"
        draggable
        theme="custom"
        dragContent={customDraggerRender}
        onChange={handleChange}
        // onTrigger={handleChange}
        onFail={handleFail}
        onSuccess={handleSuccess}
        onProgress={onProgress}
      />
    </Space>
  );
}

                  组建:<Avatar/>
                  使用描述：头像提供了 3 种不同类型的头像：图标头像、图片头像、字符头像
                  代码示例：import React from 'react';
import { Avatar, Space } from 'tdesign-react';
import { UserIcon } from 'tdesign-icons-react';

export default function BasicAvatar() {
  return (
    <Space>
      <Avatar
        icon={<UserIcon />}
        style={{
          marginRight: '40px',
        }}
      />
      <Avatar
        image="https://tdesign.gtimg.com/site/avatar.jpg"
        hideOnLoadFailed={false}
        style={{
          marginRight: '40px',
        }}
      />
      <Avatar
        style={{
          marginRight: '40px',
        }}
      >
        W
      </Avatar>
    </Space>
  );
}

                  ===SPLIT===组建:<Avatar/>
                  使用描述：头像默认支持两种形状：round、circle，用户也可自定义设置头像形状
                  代码示例：import React from 'react';
import { Avatar, Space } from 'tdesign-react';

export default function ShapeAvatar() {
  return (
    <Space>
      <Avatar
        style={{
          marginRight: '40px',
        }}
      >
        W
      </Avatar>
      <Avatar
        shape="round"
        style={{
          marginRight: '40px',
        }}
      >
        W
      </Avatar>
    </Space>
  );
}

                  ===SPLIT===组建:<Avatar/>
                  使用描述：头像默认支持三种大小：small、medium、large，用户可自定义设置大小
                  代码示例：import React from 'react';
import { Avatar, Space } from 'tdesign-react';

export default function SizeAvatar() {
  return (
    <Space direction="vertical" size="large">
      <Space align="center">
        <Avatar
          size="small"
          style={{
            marginRight: '40px',
          }}
        >
          W
        </Avatar>
        <Avatar
          size="medium"
          style={{
            marginRight: '40px',
          }}
        >
          W
        </Avatar>
        <Avatar
          size="large"
          style={{
            marginRight: '40px',
          }}
        >
          W
        </Avatar>
        <Avatar
          size="100px"
          style={{
            marginRight: '40px',
          }}
        >
          W
        </Avatar>
      </Space>
      <Space align="center">
        <Avatar
          shape="round"
          size="small"
          style={{
            marginRight: '40px',
          }}
        >
          W
        </Avatar>
        <Avatar
          shape="round"
          size="medium"
          style={{
            marginRight: '40px',
          }}
        >
          W
        </Avatar>
        <Avatar
          shape="round"
          size="large"
          style={{
            marginRight: '40px',
          }}
        >
          W
        </Avatar>
        <Avatar
          shape="round"
          size="100px"
          style={{
            marginRight: '40px',
          }}
        >
          W
        </Avatar>
      </Space>
      <Space align="center">
        <Avatar
          alt="test"
          image="https://tdesign.gtimg.com/site/avatar.jpg"
          shape="round"
          size="small"
          style={{
            marginRight: '40px',
          }}
        ></Avatar>
        <Avatar
          image="https://tdesign.gtimg.com/site/avatar.jpg"
          shape="round"
          size="medium"
          style={{
            marginRight: '40px',
          }}
        ></Avatar>
        <Avatar
          image="https://tdesign.gtimg.com/site/avatar.jpg"
          shape="round"
          size="large"
          style={{
            marginRight: '40px',
          }}
        ></Avatar>
        <Avatar
          image="https://tdesign.gtimg.com/site/avatar.jpg"
          shape="round"
          size="100px"
          style={{
            marginRight: '40px',
          }}
        ></Avatar>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Avatar/>
                  使用描述：头像支持字符自适应，即字符长度过长时，头像可自动调整字符以便呈现完整内容
                  代码示例：import React from 'react';
import { Avatar, Space } from 'tdesign-react';

export default function AdjustAvatar() {
  return (
    <Space>
      <Avatar
        style={{
          marginRight: '40px',
        }}
      >
        王
      </Avatar>
      <Avatar
        style={{
          marginRight: '40px',
        }}
      >
        王亿
      </Avatar>
      <Avatar
        style={{
          marginRight: '40px',
        }}
      >
        王亿亿
      </Avatar>
    </Space>
  );
}

                  ===SPLIT===组建:<Avatar/>
                  使用描述：组合头像展现
                  代码示例：import React from 'react';
import { Avatar, Space } from 'tdesign-react';
import { UserIcon } from 'tdesign-icons-react';

const { Group: AvatarGroup } = Avatar;
export default function GroupAvatar() {
  return (
    <Space direction="vertical">
      <AvatarGroup>
        <Avatar image="https://tdesign.gtimg.com/site/avatar.jpg"></Avatar>
        <Avatar>W</Avatar>
        <Avatar icon={<UserIcon />}></Avatar>
      </AvatarGroup>

      <AvatarGroup size="large">
        <Avatar image="https://tdesign.gtimg.com/site/avatar.jpg"></Avatar>
        <Avatar>W</Avatar>
        <Avatar icon={<UserIcon />}></Avatar>
      </AvatarGroup>
    </Space>
  );
}

                  ===SPLIT===组建:<Avatar/>
                  使用描述：组合头像可控制层叠方向
                  代码示例：import React from 'react';
import { Avatar, Space } from 'tdesign-react';
import { UserIcon } from 'tdesign-icons-react';

const { Group: AvatarGroup } = Avatar;
export default function GroupCascadingAvatar() {
  return (
    <Space direction="vertical">
      <AvatarGroup>
        <Avatar image="https://tdesign.gtimg.com/site/avatar.jpg"></Avatar>
        <Avatar>W</Avatar>
        <Avatar icon={<UserIcon />}></Avatar>
      </AvatarGroup>

      <AvatarGroup cascading="left-up">
        <Avatar image="https://tdesign.gtimg.com/site/avatar.jpg"></Avatar>
        <Avatar>W</Avatar>
        <Avatar icon={<UserIcon />}></Avatar>
      </AvatarGroup>
    </Space>
  );
}

                  ===SPLIT===组建:<Avatar/>
                  使用描述：组合头像可设置最大展示个数，超过则隐藏显示
                  代码示例：import React from 'react';
import { Avatar, Space } from 'tdesign-react';
import { UserIcon, EllipsisIcon } from 'tdesign-icons-react';

const { Group: AvatarGroup } = Avatar;
export default function GroupMaxAvatar() {
  return (
    <Space direction="vertical">
      <AvatarGroup size="large" max={2}>
        <Avatar image="https://tdesign.gtimg.com/site/avatar.jpg"></Avatar>
        <Avatar>Avatar</Avatar>
        <Avatar image="https://tdesign.gtimg.com/site/avatar.jpg"></Avatar>
      </AvatarGroup>

      <AvatarGroup size="large" max={2} collapseAvatar={<EllipsisIcon />}>
        <Avatar image="https://tdesign.gtimg.com/site/avatar.jpg"></Avatar>
        <Avatar>Avatar</Avatar>
        <Avatar icon={<UserIcon />}></Avatar>
      </AvatarGroup>

      <AvatarGroup size="large" max={2} collapseAvatar="more">
        <Avatar image="https://tdesign.gtimg.com/site/avatar.jpg"></Avatar>
        <Avatar>Avatar</Avatar>
        <Avatar icon={<UserIcon />}></Avatar>
      </AvatarGroup>
    </Space>
  );
}

                  组建:<Badge/>
                  使用描述：仅显示为圆点的徽标，有图标时位于图标右上角，无图标时位于文字标题后侧。弱提示场景下，不显示数量，需要用户去手动点击查看进行消除。
                  代码示例：import React from 'react';
import { Badge, Button } from 'tdesign-react';
import { UserIcon } from 'tdesign-icons-react';

export default function BadgeExample() {
  return (
    <>
      <Badge dot count={2}>
        <Button size="large"> </Button>
      </Badge>
      <Badge dot count={99}>
        解锁新徽章
      </Badge>
      <Badge dot count={100}>
        <UserIcon size={24} />
      </Badge>
    </>
  );
}

                  ===SPLIT===组建:<Badge/>
                  使用描述：含数字的徽标，适用于需要较强提醒的场景，直接提醒用户相关信息数量。
                  代码示例：import React from 'react';
import { Badge, Button } from 'tdesign-react';

export default function BadgeExample() {
  return (
    <>
      <Badge count={2}>
        <Button size="large"> </Button>
      </Badge>
      <Badge count={99}>
        <Button size="large"> </Button>
      </Badge>
      <Badge count={100}>
        <Button size="large"> </Button>
      </Badge>
    </>
  );
}

                  ===SPLIT===组建:<Badge/>
                  使用描述：可对显示信息进行自定义配置，如展示为“热门hot”“最新new”等。
                  代码示例：import React from 'react';
import { Badge, Space } from 'tdesign-react';

export default function BadgeExample() {
  const badgeBlockStyle = {
    width: '40px',
    height: '40px',
    background: '#EEEEEE',
    border: '1px solid #DCDCDC',
    borderRadius: '3px',
  };
  return (
    <Space direction="vertical">
      <Space size={24}>
        <Badge count="2" dot>
          <div style={badgeBlockStyle}></div>
        </Badge>
        <Badge count="hot">
          <div style={badgeBlockStyle}></div>
        </Badge>
        <Badge count="new" color="var(--td-success-color)">
          <div style={badgeBlockStyle}></div>
        </Badge>
        <Badge count="100" color="var(--brand-main)" shape="round">
          <div style={badgeBlockStyle}></div>
        </Badge>
      </Space>

      <Space size={24}>
        <Badge count="2" dot>
          <div style={badgeBlockStyle}></div>
        </Badge>
        <Badge
          count={
            <span
              style={{
                color: 'var(--td-error-color)',
              }}
            >
              hot
            </span>
          }
          color="var(--td-error-color-1)"
        >
          <div style={badgeBlockStyle}></div>
        </Badge>
        <Badge
          count={
            <span
              style={{
                color: 'var(--td-success-color)',
              }}
            >
              new
            </span>
          }
          color="var(--td-success-color-1)"
        >
          <div style={badgeBlockStyle}></div>
        </Badge>
        <Badge
          count={
            <span
              style={{
                color: 'var(--td-brand-color)',
              }}
            >
              new
            </span>
          }
          color="var(--td-brand-color-1)"
        >
          <div style={badgeBlockStyle}></div>
        </Badge>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Badge/>
                  使用描述：提供标准（默认）、小两种尺寸。
                  代码示例：import React from 'react';
import { Badge, Button } from 'tdesign-react';

export default function BadgeExample() {
  return (
    <>
      <h3
        style={{
          marginBottom: 16,
        }}
      >
        1.默认大小
      </h3>
      <Badge count={2}>
        <Button>按钮</Button>
      </Badge>
      <Badge count={99}>
        <Button>按钮</Button>
      </Badge>
      <Badge count={999}>
        <Button>按钮</Button>
      </Badge>
      <h3
        style={{
          marginBottom: 16,
          marginTop: 32,
        }}
      >
        2.小
      </h3>
      <Badge count={2} size="small">
        <Button>按钮</Button>
      </Badge>
      <Badge count={99} size="small">
        <Button>按钮</Button>
      </Badge>
      <Badge count={999} size="small">
        <Button>按钮</Button>
      </Badge>
    </>
  );
}

                  ===SPLIT===组建:<Badge/>
                  使用描述：提供圆形和方形两种不同形状的徽标展示。
                  代码示例：import React from 'react';
import { Badge, Button } from 'tdesign-react';

export default function BadgeExample() {
  return (
    <>
      <Badge shape={'circle'} count={2}>
        <Button> circle</Button>
      </Badge>
      <Badge shape={'round'} count={99}>
        <Button>round</Button>
      </Badge>
    </>
  );
}

                  ===SPLIT===组建:<Badge/>
                  使用描述：控制徽标显示偏移位置 
                  代码示例：import React from 'react';
import { Badge, Button } from 'tdesign-react';

export default function BadgeExample() {
  return (
    <>
      <Badge count={2}>
        <Button>默认</Button>
      </Badge>
      <Badge count={2} offset={[10, 10]}>
        <Button>[10,10]</Button>
      </Badge>
      <Badge count={2} offset={[-10, 10]}>
        <Button>[-10,10]</Button>
      </Badge>
      <Badge count={2} offset={[-10, -10]}>
        <Button>[-10,-10]</Button>
      </Badge>
      <Badge count={2} offset={[10, -10]}>
        <Button>[10,-10]</Button>
      </Badge>
    </>
  );
}

                  组建:<Calendar/>
                  使用描述：在日期中可显示事项的日期显示容器。常用于有足够空间，且需要承载或显示事项信息时使用。
                  代码示例：import React from 'react';
import { Calendar } from 'tdesign-react';

export default function CalendarExample() {
  return <Calendar />;
}

                  ===SPLIT===组建:<Calendar/>
                  使用描述：以独立日期为单位，嵌套在空间有限的容器内，用以展示日期等信息。
                  代码示例：import React from 'react';
import { Button, Calendar, Select, Switch, Space } from 'tdesign-react';

export default function CalendarExample() {
  const ref = React.useRef(null);
  const [theme, setTheme] = React.useState('card');
  const [fillWithZero, setFillWithZero] = React.useState(false);
  const toCurrent = React.useCallback(() => {
    ref.current.toCurrent();
  }, [ref]);
  return (
    <Space direction="vertical" size="large">
      <Space align="center">
        <label>请选择风格：</label>
        <Select
          style={{
            width: '200px',
            display: 'inline-block',
            margin: '0 10px 0 0',
          }}
          value={theme}
          options={[
            {
              label: '卡片风格',
              value: 'card',
            },
            {
              label: '全屏风格',
              value: 'full',
            },
          ]}
          onChange={(value) => setTheme(value)}
        />
        <Button
          theme="primary"
          style={{
            marginLeft: '12px',
          }}
          onClick={toCurrent}
        >
          回到今天
        </Button>
      </Space>
      <Space align="center">
        <label>日期补零：</label>
        <Switch size="large" value={fillWithZero} onChange={(val) => setFillWithZero(val)}></Switch>
      </Space>
      <Calendar ref={ref} theme={theme} isShowWeekendDefault={true} fillWithZero={fillWithZero} />
    </Space>
  );
}

                  ===SPLIT===组建:<Calendar/>
                  使用描述：通过组件属性自定义指定高亮日期。组件默认高亮“今天”或“当前月份”。使用 value 属性可以设置这个高亮的日期。
                  代码示例：import React from 'react';
import { Calendar } from 'tdesign-react';

export default function CalendarExample() {
  const value = '1998-11-11'; // new Date(1998, 10, 11)
  return <Calendar value={value} />;
}

                  ===SPLIT===组建:<Calendar/>
                  使用描述：通过组件属性指定组件的展示形式。组件默认以日历的形式展示，并提供了 “日历”，“月历” 两种模式切换按钮，开发者可以通过修改 mode 属性切换模式。
                  代码示例：import React from 'react';
import { Select, Calendar, Space } from 'tdesign-react';

export default function CalendarExample() {
  const [mode, setMode] = React.useState('year');
  return (
    <div>
      <Space
        align="center"
        style={{
          margin: '12px 0',
        }}
      >
        <label>可以在组件外切换成：</label>
        <Select
          style={{
            width: '200px',
            display: 'inline-block',
            margin: '0 10px 0 0',
          }}
          value={mode}
          options={[
            {
              label: '月历',
              value: 'year',
            },
            {
              label: '日历',
              value: 'month',
            },
          ]}
          onChange={(value) => setMode(value)}
        />
      </Space>
      <Calendar mode={mode} />
    </div>
  );
}

                  ===SPLIT===组建:<Calendar/>
                  使用描述：通过组件属性指定日历首列星期。组件默认第一列为“周一”，可以通过 firstDayOfWeek 属性设置成其他星期(只对 mode 为 month 有效)。
                  代码示例：import React from 'react';
import { Select, Calendar, Space } from 'tdesign-react';

export default function CalendarExample() {
  const [firstDayOfWeek, setFirstDayOfWeek] = React.useState(3);
  return (
    <div>
      <Space
        align="center"
        style={{
          margin: '12px 0',
        }}
      >
        <label>日历的第一列为：</label>
        <Select
          style={{
            width: '200px',
            display: 'inline-block',
            margin: '0 10px 0 0',
          }}
          value={firstDayOfWeek}
          options={[
            {
              label: '周一',
              value: 1,
            },
            {
              label: '周二',
              value: 2,
            },
            {
              label: '周三',
              value: 3,
            },
            {
              label: '周四',
              value: 4,
            },
            {
              label: '周五',
              value: 5,
            },
            {
              label: '周六',
              value: 6,
            },
            {
              label: '周日',
              value: 7,
            },
          ]}
          onChange={(value) => setFirstDayOfWeek(value)}
        />
      </Space>
      <Calendar firstDayOfWeek={firstDayOfWeek} />
    </div>
  );
}

                  ===SPLIT===组建:<Calendar/>
                  使用描述：通过组件属性对组件的控件做自定义配置，某些业务场景下可能需要全局隐藏或禁用控件，也可以通过 controllerConfig 属性来实现局部的控制。
                  代码示例：import React, { useEffect } from 'react';
import { Calendar, Switch } from 'tdesign-react';

const classStyles = `
  <style>
    .controllerConfig-demo fieldset {
      border: solid 1px #eee;
      padding: 10px 20px 10px 0;
      margin-bottom: 10px;
    }
    .controllerConfig-demo fieldset legend {
      margin-left: 20px;
      padding: 0 10px;
    }
    .controllerConfig-demo fieldset p {
      margin-bottom: 5px;
    }
    .controllerConfig-demo fieldset p label {
      margin-left: 20px;
    }
    .outerWarper {
      width: 100%;
      height: 100%;
      position: relative;

      .shadow {
        position: absolute;
        width: 100%;
        height: 12px;
        bottom: 0;
        background: linear-gradient(180deg, rgba(255, 255, 255, 0) 0%, #ffffff 100%);
      }
      .number {
        font-weight: bold;
        position: absolute;
        top: 3px;
        right: 5px;
        font-size: 14px;
      }
      .item {
        position: relative;
        display: flex;
        align-items: center;
        color: rgba(0, 0, 0, 0.6);
        span {
          display: block;
          left: 1px;
          width: 5px;
          height: 5px;
          border-radius: 10px;
          margin-right: 4px;
        }
      }
      .error {
        background: #e34d59;
      }
      .warning {
        background: #ed7b2f;
      }
      .success {
        background: #00a870;
      }

      .slotWarper {
        position: absolute;
        bottom: 2px;
        left: 5px;
      }
    }
    .cellAppend {
      margin: 10px;
      background-color: #ebf2ff;
      color: #888;
      border-radius: 3px;
      padding: 2px 4px;
    }
    .cellAppend.belongCurrent {
      color: #0052d9;
    }
    .cellAppend.actived {
      background-color: #0052d9;
      color: #ebf2ff;
    }
  </style>
`;
export default function CalendarExample() {
  const [visible, setVisible] = React.useState(true);
  const [disabled, setDisabled] = React.useState(false);
  const [modeVisible, setModeVisible] = React.useState(true);
  const [modeDisabled, setModeDisabled] = React.useState(false);
  const [yearVisible, setYearVisible] = React.useState(true);
  const [yearDisabled, setYearDisabled] = React.useState(false);
  const [monthVisible, setMonthVisible] = React.useState(true);
  const [monthDisabled, setMonthDisabled] = React.useState(false);
  const [weekendToggleVisible, setWeekendToggleVisible] = React.useState(true);
  const [weekendShowButtonDisabled, setWeekendShowButtonDisabled] = React.useState(false);
  const [weekendHideButtonDisabled, setWeekendHideButtonDisabled] = React.useState(false);
  const [currentVisible, setCurrentVisible] = React.useState(true);
  const [currentDayButtonDisabled, setCurrentDayButtonDisabled] = React.useState(false);
  const [currentMonthButtonDisabled, setCurrentMonthButtonDisabled] = React.useState(false);
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  return (
    <div className="controllerConfig-demo">
      <div
        style={{
          margin: '12px 0',
        }}
      >
        <fieldset>
          <legend>控件全局</legend>
          <p>
            <label>是否显示（全部控件）：</label>
            <Switch value={visible} onChange={(val) => setVisible(val)} />
          </p>
          <br />
          <p>
            <label>是否禁用（全部控件）：</label>
            <Switch value={disabled} onChange={(val) => setDisabled(val)} />
          </p>
          <br />
        </fieldset>
        <fieldset>
          <legend>控件局部</legend>
          <p>
            <label>是否显示“模式切换”控件：</label>
            <Switch value={modeVisible} onChange={(val) => setModeVisible(val)} />
            <label>是否禁用“模式切换”控件：</label>
            <Switch value={modeDisabled} onChange={(val) => setModeDisabled(val)} />
          </p>
          <br />
          <p>
            <label>是否显示“年份选择”控件：</label>
            <Switch value={yearVisible} onChange={(val) => setYearVisible(val)} />
            <label>是否禁用“年份选择”控件：</label>
            <Switch value={yearDisabled} onChange={(val) => setYearDisabled(val)} />
          </p>
          <br />
          <p>
            <label>是否显示“月份选择”控件：</label>
            <Switch value={monthVisible} onChange={(val) => setMonthVisible(val)} />
            <label>是否禁用“月份选择”控件：</label>
            <Switch value={monthDisabled} onChange={(val) => setMonthDisabled(val)} />
          </p>
          <br />
          <p>
            <label>是否禁用“隐藏周末”控件：</label>
            <Switch value={weekendHideButtonDisabled} onChange={(val) => setWeekendHideButtonDisabled(val)} />
            <label>是否禁用“显示周末”控件：</label>
            <Switch value={weekendShowButtonDisabled} onChange={(val) => setWeekendShowButtonDisabled(val)} />
            <label>是否显示“隐藏\显示周末”控件：</label>
            <Switch value={weekendToggleVisible} onChange={(val) => setWeekendToggleVisible(val)} />
          </p>
          <br />
          <p>
            <label>是否显示“今天\本月”控件：</label>
            <Switch value={currentVisible} onChange={(val) => setCurrentVisible(val)} />
            <label>是否禁用“今天”按钮控件：</label>
            <Switch value={currentDayButtonDisabled} onChange={(val) => setCurrentDayButtonDisabled(val)} />
            <label>是否禁用“本月”按钮控件：</label>
            <Switch value={currentMonthButtonDisabled} onChange={(val) => setCurrentMonthButtonDisabled(val)} />
          </p>
          <br />
          <Calendar
            controllerConfig={
              visible
                ? {
                    disabled,
                    mode: {
                      visible: modeVisible,
                      radioGroupProps: {
                        disabled: modeDisabled,
                        variant: 'default-filled',
                      },
                    },
                    year: {
                      visible: yearVisible,
                      selectProps: {
                        disabled: yearDisabled,
                      },
                    },
                    month: {
                      visible: monthVisible,
                      selectProps: {
                        disabled: monthDisabled,
                      },
                    },
                    weekend: {
                      visible: weekendToggleVisible,
                      showWeekendButtonProps: {
                        disabled: weekendShowButtonDisabled,
                      },
                      hideWeekendButtonProps: {
                        disabled: weekendHideButtonDisabled,
                      },
                    },
                    current: {
                      visible: currentVisible,
                      currentDayButtonProps: {
                        disabled: currentDayButtonDisabled,
                      },
                      currentMonthButtonProps: {
                        disabled: currentMonthButtonDisabled,
                      },
                    },
                  }
                : false
            }
          />
        </fieldset>
      </div>
    </div>
  );
}

                  ===SPLIT===组建:<Calendar/>
                  使用描述：通过组件属性指定年月份选择框的值范围。组件默认情况下，年份可以选择 1970 - ∞，月份没有限制。可以通过 range 属性来设置日历的可选范围。
                  代码示例：import React from 'react';
import { Calendar } from 'tdesign-react';

export default function CalendarExample() {
  const range = [
    '2018-08',
    // new Date(2018, 7),
    '2027-04', // new Date(2027, 3),
  ];
  return <Calendar range={range} />;
}

                  ===SPLIT===组建:<Calendar/>
                  使用描述：通过 week 属性或者插槽自定义周的展示。 默认情况下日历的周我们用 “一” 到 “日” 显示，但有些场景下希望自定义展示。
                  代码示例：import React from 'react';
import { Calendar } from 'tdesign-react';

export default function CalendarExample() {
  const getWeekText = React.useCallback((calendarWeek) => {
    const output = `星期${calendarWeek.day}`;
    return output;
  }, []);
  return <Calendar week={(calendarWeek) => <div>{getWeekText(calendarWeek)}</div>} />;
}

                  ===SPLIT===组建:<Calendar/>
                  使用描述：通过 methods 来定义事件的执行逻辑。 开发者可以使用这些事件去实现一些更加定制化的功能。
                  代码示例：import React from 'react';
import { Switch, Calendar } from 'tdesign-react';

export default function CalendarExample() {
  const [preventCellContextmenu, setPreventCellContextmenu] = React.useState(false);
  const cellClick = (options) => {
    console.log(`鼠标左键单击单元格 ${options.cell.formattedDate}`);
  };
  const cellDoubleClick = (options) => {
    console.log(`鼠标双击单元格 ${options.cell.formattedDate}`);
  };
  const cellRightClick = (options) => {
    console.log(`鼠标右键点击元格 ${options.cell.formattedDate}`);
  };
  const controllerChange = (data) => {
    console.log('控件值变化', data);
  };
  const monthChange = (data) => {
    console.log('月份变化', data);
  };
  return (
    <div>
      <div
        style={{
          margin: '12px 0',
        }}
      >
        <label>禁用单元格右键菜单：</label>
        <Switch value={preventCellContextmenu} onChange={(val) => setPreventCellContextmenu(val)} />
      </div>
      <Calendar
        preventCellContextmenu={preventCellContextmenu}
        onCellClick={cellClick}
        onCellDoubleClick={cellDoubleClick}
        onCellRightClick={cellRightClick}
        onControllerChange={controllerChange}
        onMonthChange={monthChange}
      />
    </div>
  );
}

                  ===SPLIT===组建:<Calendar/>
                  使用描述：在组件左上角展示内容。某些业务场景下，可能需要在组件左上角显示一个标题之类的内容，那么就可以使用 head 具名插槽了。
                  代码示例：import React from 'react';
import { Calendar } from 'tdesign-react';

export default function CalendarExample() {
  return <Calendar head={<div>🗓 TDesign开发计划</div>} />;
}

                  ===SPLIT===组建:<Calendar/>
                  使用描述：在现有单元格展示内容的基础上追加展示内容。默认情况下日历单元格中会显示当前日期，如果还需要额外显示其他信息，可以通过 cellAppend 具名插槽来实现。
                  代码示例：import React from 'react';
import { Calendar, Tag } from 'tdesign-react';
import dayjs from 'dayjs';

export default function CalendarExample() {
  const getShow = (data) =>
    data.mode === 'month'
      ? dayjs().format('YYYY-MM-DD') === data.formattedDate
      : data.date.getMonth() === new Date().getMonth();
  return (
    <Calendar
      cellAppend={(cellData) =>
        getShow(cellData) && (
          <div className="cell-append-demo-outer">
            <Tag
              theme="success"
              variant="light"
              size="small"
              className="activeTag"
              style={{
                width: '100%',
              }}
            >
              {cellData.mode === 'month' ? '我们的纪念日' : '我们的纪念月'}
            </Tag>
            <Tag
              theme="warning"
              variant="light"
              size="small"
              className="activeTag"
              style={{
                width: '100%',
              }}
            >
              {cellData.mode === 'month' ? '家庭聚会' : '家庭聚会'}
            </Tag>
          </div>
        )
      }
    />
  );
}

                  ===SPLIT===组建:<Calendar/>
                  使用描述：完全重写单元格展示的内容。和 cellAppend 具名插槽不同，cell 具名插槽可以完全自定义单元格内容。
                  代码示例：import React from 'react';
import { Calendar, Tag, Space } from 'tdesign-react';
import dayjs from 'dayjs';

export default function CalendarExample() {
  const displayNum = React.useCallback((date) => {
    if (date.mode === 'month') {
      return date.date.getDate();
    }
    return date.date.getMonth() + 1;
  }, []);
  const isShow = (data) =>
    data.mode === 'month' ? dayjs(data.formattedDate).date() === 15 : dayjs(data.formattedDate).month() === 7;
  const dataList = [
    {
      value: 'danger',
      label: '错误事件',
    },
    {
      value: 'warning',
      label: '警告事件',
    },
    {
      value: 'success',
      label: '正常事件',
    },
  ];
  return (
    <Calendar
      cell={(cellData) => (
        <div
          style={{
            width: '100%',
          }}
        >
          <div>{displayNum(cellData)}</div>
          {isShow(cellData) && (
            <Space direction="vertical" size={2}>
              {dataList.map((item, index) => (
                <Tag key={index} theme={item.value}>
                  {item.label}
                </Tag>
              ))}
            </Space>
          )}
        </div>
      )}
    />
  );
}

                  ===SPLIT===组建:<Calendar/>
                  使用描述：通过 Props API 来使用插槽。某些场景下可能希望通过 Props API 来渲染插槽内容，head、cell、cellAppend 都有其对应的 Props API，以下简单演示了 head、cell 的 Props API
                  代码示例：import React from 'react';
import { Calendar, Space, Tag } from 'tdesign-react';
import dayjs from 'dayjs';

export default function CalendarExample() {
  const displayNum = React.useCallback((date) => {
    if (date.mode === 'month') {
      return date.date.getDate();
    }
    return date.date.getMonth() + 1;
  }, []);
  const isShow = (data) =>
    data.mode === 'month' ? dayjs(data.formattedDate).date() === 15 : dayjs(data.formattedDate).month() === 7;
  const dataList = [
    {
      value: 'danger',
      label: '错误事件',
    },
    {
      value: 'warning',
      label: '警告事件',
    },
    {
      value: 'success',
      label: '正常事件',
    },
  ];
  const renderHead = (params) => {
    let title = `${params.filterDate.getFullYear()}`;
    if (params.mode === 'month') {
      title += `-${params.filterDate.getMonth() + 1}`;
    }
    title += ' 工作安排';
    return <div>{title}</div>;
  };
  return (
    <Calendar
      head={renderHead}
      cell={(cellData) => (
        <>
          <div
            style={{
              width: '100%',
            }}
          >
            <div>{displayNum(cellData)}</div>
            {isShow(cellData) && (
              <Space direction="vertical" size={2}>
                {dataList.map((item, index) => (
                  <Tag key={index} theme={item.value}>
                    {item.label}
                  </Tag>
                ))}
              </Space>
            )}
          </div>
        </>
      )}
    />
  );
}

                  组建:<Card/>
                  使用描述：有边框 
                  代码示例：import React from 'react';
import { Card } from 'tdesign-react';

export default function BorderedCard() {
  return (
    <Card
      bordered
      style={{
        width: '400px',
      }}
    >
      仅有内容区域的卡片形式。卡片内容区域可以是文字、图片、表单、表格等形式信息内容。可使用大中小不同的卡片尺寸，按业务需求进行呈现。
    </Card>
  );
}

                  ===SPLIT===组建:<Card/>
                  使用描述：无边框 
                  代码示例：import React from 'react';
import { Card, MessagePlugin } from 'tdesign-react';

const clickHandler = () => {
  MessagePlugin.success('操作');
};
export default function BorderedNoneCard() {
  return (
    <div
      style={{
        padding: '16px',
        backgroundColor: 'var(--td-bg-color-container-hover)',
      }}
    >
      <Card
        title="标题"
        actions={
          <a
            href={null}
            onClick={clickHandler}
            style={{
              cursor: 'pointer',
            }}
          >
            操作
          </a>
        }
        hoverShadow
        style={{
          width: '400px',
        }}
      >
        仅有内容区域的卡片形式。卡片内容区域可以是文字、图片、表单、表格等形式信息内容。可使用大中小不同的卡片尺寸，按业务需求进行呈现。
      </Card>
    </div>
  );
}

                  ===SPLIT===组建:<Card/>
                  使用描述：不带分割线 
                  代码示例：import React from 'react';
import { Card, MessagePlugin } from 'tdesign-react';

const clickHandler = () => {
  MessagePlugin.success('操作');
};
export default function HeaderCard() {
  return (
    <Card
      title="标题"
      actions={
        <a
          href={null}
          onClick={clickHandler}
          style={{
            cursor: 'pointer',
          }}
        >
          操作
        </a>
      }
      bordered
      hoverShadow
      style={{
        width: '400px',
      }}
    >
      卡片内容，以描述性为主，可以是文字、图片或图文组合的形式。按业务需求进行自定义组合。
    </Card>
  );
}

                  ===SPLIT===组建:<Card/>
                  使用描述：带分割线 
                  代码示例：import React from 'react';
import { Card, MessagePlugin } from 'tdesign-react';

const clickHandler = () => {
  MessagePlugin.success('操作');
};
export default function HeaderBorderedCard() {
  return (
    <Card
      title="标题"
      actions={
        <a
          href={null}
          onClick={clickHandler}
          style={{
            cursor: 'pointer',
          }}
        >
          操作
        </a>
      }
      bordered
      headerBordered
      style={{
        width: '400px',
      }}
    >
      卡片内容，以描述性为主，可以是文字、图片或图文组合的形式。按业务需求进行自定义组合。
    </Card>
  );
}

                  ===SPLIT===组建:<Card/>
                  使用描述：由极简卡片下方的底部栏组成，可包含标题、图片、操作区、状态等内容。
                  代码示例：import React from 'react';
import { Card, Tag, Avatar, Row, Col, Button, Divider } from 'tdesign-react';
import { UserIcon, ChatIcon, ShareIcon, ThumbUpIcon } from 'tdesign-icons-react';

export default function FooterCard() {
  return (
    <Card
      actions={<Tag theme="success">默认标签</Tag>}
      bordered
      cover="https://tdesign.gtimg.com/site/source/card-demo.png"
      style={{
        width: '400px',
      }}
      avatar={
        <Avatar size="56px">
          <UserIcon></UserIcon>
        </Avatar>
      }
      footer={
        <Row align="middle" justify="center">
          <Col flex="auto">
            <Button variant="text">
              <ThumbUpIcon></ThumbUpIcon>
            </Button>
          </Col>
          <Divider layout="vertical"></Divider>
          <Col flex="auto">
            <Button variant="text">
              <ChatIcon></ChatIcon>
            </Button>
          </Col>
          <Divider layout="vertical"></Divider>
          <Col flex="auto">
            <Button variant="text">
              <ShareIcon></ShareIcon>
            </Button>
          </Col>
        </Row>
      }
    ></Card>
  );
}

                  ===SPLIT===组建:<Card/>
                  使用描述：全部为操作内容的底部栏 
                  代码示例：import React from 'react';
import { Card, Avatar, Row, Col, Button, Divider, Dropdown, MessagePlugin, Space } from 'tdesign-react';
import { UserIcon, ChatIcon, ShareIcon, ThumbUpIcon, HeartIcon, MoreIcon } from 'tdesign-icons-react';

const { Group: AvatarGroup } = Avatar;
const options = [
  {
    content: '操作一',
    value: 1,
  },
  {
    content: '操作二',
    value: 2,
  },
];
const clickHandler = (data) => {
  MessagePlugin.success(`选中【${data.value}】`);
};
export default function FooterActionsCard() {
  return (
    <Space direction="vertical">
      <Card
        bordered
        theme="poster2"
        cover="https://tdesign.gtimg.com/site/source/card-demo.png"
        style={{
          width: '400px',
        }}
        footer={
          <Row align="middle" justify="center">
            <Col flex="auto">
              <Button variant="text" shape="square">
                <ThumbUpIcon></ThumbUpIcon>
              </Button>
            </Col>
            <Divider layout="vertical"></Divider>
            <Col flex="auto">
              <Button variant="text" shape="square">
                <ChatIcon></ChatIcon>
              </Button>
            </Col>
            <Divider layout="vertical"></Divider>
            <Col flex="auto">
              <Button variant="text" shape="square">
                <ShareIcon></ShareIcon>
              </Button>
            </Col>
          </Row>
        }
      ></Card>
      <Card
        bordered
        theme="poster2"
        cover="https://tdesign.gtimg.com/site/source/card-demo.png"
        style={{
          width: '400px',
        }}
        actions={
          <Col flex="auto">
            <Dropdown options={options} onClick={clickHandler}>
              <Button variant="text" shape="square">
                <MoreIcon></MoreIcon>
              </Button>
            </Dropdown>
          </Col>
        }
        footer={
          <Row align="middle" justify="center">
            <Col flex="auto">
              <Button
                variant="text"
                shape="square"
                style={{
                  marginRight: '8px',
                }}
              >
                <HeartIcon size={16}></HeartIcon>
              </Button>
              <Button variant="text" shape="square">
                <ShareIcon size={16}></ShareIcon>
              </Button>
            </Col>
          </Row>
        }
      ></Card>
      <Card
        bordered
        theme="poster2"
        cover="https://tdesign.gtimg.com/site/source/card-demo.png"
        style={{
          width: '400px',
        }}
        actions={
          <Col flex="auto">
            <Dropdown options={options} onClick={clickHandler}>
              <Button variant="text" shape="square">
                <MoreIcon></MoreIcon>
              </Button>
            </Dropdown>
          </Col>
        }
        footer={
          <AvatarGroup max={2} cascading="left-up">
            <Avatar image="https://tdesign.gtimg.com/site/avatar-boy.jpg"></Avatar>
            <Avatar>Q</Avatar>
            <Avatar>C</Avatar>
            <Avatar>G</Avatar>
            <Avatar icon={<UserIcon />}></Avatar>
          </AvatarGroup>
        }
      ></Card>
    </Space>
  );
}

                  ===SPLIT===组建:<Card/>
                  使用描述：全部为展示内容的底部栏 
                  代码示例：import React from 'react';
import { Card, Comment } from 'tdesign-react';

export default function FooterContentCard() {
  return (
    <Card
      bordered
      theme="poster2"
      cover="https://tdesign.gtimg.com/site/source/card-demo.png"
      style={{
        width: '400px',
      }}
      footer={
        <Comment author="标题" content="卡片内容" avatar="https://tdesign.gtimg.com/site/avatar-boy.jpg"></Comment>
      }
    ></Card>
  );
}

                  ===SPLIT===组建:<Card/>
                  使用描述：同时带展示内容与操作内容的底部栏 
                  代码示例：import React from 'react';
import { Card, Button, Dropdown, MessagePlugin, Comment } from 'tdesign-react';
import { Icon } from 'tdesign-icons-react';

const options = [
  {
    content: '操作一',
    value: 1,
  },
  {
    content: '操作二',
    value: 2,
  },
];
const clickHandler = (data) => {
  MessagePlugin.success(`选中【${data.value}】`);
};
export default function FooterContentActionsCard() {
  return (
    <Card
      actions={
        <Dropdown options={options} onClick={clickHandler} minColumnWidth="112">
          <Button variant="text" shape="square">
            <Icon name="more" />
          </Button>
        </Dropdown>
      }
      bordered
      theme="poster2"
      cover="https://tdesign.gtimg.com/site/source/card-demo.png"
      style={{
        width: '400px',
      }}
      footer={
        <Comment author="标题" content="卡片内容" avatar="https://tdesign.gtimg.com/site/avatar-boy.jpg"></Comment>
      }
    ></Card>
  );
}

                  ===SPLIT===组建:<Card/>
                  使用描述：由顶部栏、底部栏和极简卡片组成的复杂卡片，三个区域内容可根据需要对内容进行配置。
                  代码示例：import React from 'react';
import { Card, Row, Col, Button, Divider, Dropdown, MessagePlugin } from 'tdesign-react';
import { ChatIcon, ShareIcon, ThumbUpIcon, Icon } from 'tdesign-icons-react';

const options = [
  {
    content: '操作一',
    value: 1,
  },
  {
    content: '操作二',
    value: 2,
  },
];
const clickHandler = (data) => {
  MessagePlugin.success(`选中【${data.value}】`);
};
export default function HeaderSubtitleFooterActionsCard() {
  return (
    <Card
      title="标题"
      subtitle="副标题"
      actions={
        <Dropdown options={options} onClick={clickHandler} minColumnWidth="112">
          <Button variant="text" shape="square">
            <Icon name="more" />
          </Button>
        </Dropdown>
      }
      bordered
      cover="https://tdesign.gtimg.com/site/source/card-demo.png"
      style={{
        width: '400px',
      }}
      footer={
        <Row align="middle" justify="center">
          <Col flex="auto">
            <Button variant="text">
              <ThumbUpIcon></ThumbUpIcon>
            </Button>
          </Col>
          <Divider layout="vertical"></Divider>
          <Col flex="auto">
            <Button variant="text">
              <ChatIcon></ChatIcon>
            </Button>
          </Col>
          <Divider layout="vertical"></Divider>
          <Col flex="auto">
            <Button variant="text">
              <ShareIcon></ShareIcon>
            </Button>
          </Col>
        </Row>
      }
    ></Card>
  );
}

                  ===SPLIT===组建:<Card/>
                  使用描述：标题副标题
                  代码示例：import React from 'react';
import { Card, Row, Col, Button, Divider, Avatar, Dropdown, MessagePlugin } from 'tdesign-react';
import { ChatIcon, ShareIcon, ThumbUpIcon, Icon } from 'tdesign-icons-react';

const options = [
  {
    content: '操作一',
    value: 1,
  },
  {
    content: '操作二',
    value: 2,
  },
];
const clickHandler = (data) => {
  MessagePlugin.success(`选中【${data.value}】`);
};
export default function HeaderFooterActionsCard() {
  return (
    <Card
      title="标题"
      description="卡片内容"
      actions={
        <Dropdown options={options} onClick={clickHandler} minColumnWidth="112">
          <Button variant="text" shape="square">
            <Icon name="more" />
          </Button>
        </Dropdown>
      }
      bordered
      cover="https://tdesign.gtimg.com/site/source/card-demo.png"
      style={{
        width: '400px',
      }}
      avatar={<Avatar size="40px" image="https://tdesign.gtimg.com/site/avatar-boy.jpg"></Avatar>}
      footer={
        <Row align="middle" justify="center">
          <Col flex="auto">
            <Button variant="text">
              <ThumbUpIcon></ThumbUpIcon>
            </Button>
          </Col>
          <Divider layout="vertical"></Divider>
          <Col flex="auto">
            <Button variant="text">
              <ChatIcon></ChatIcon>
            </Button>
          </Col>
          <Divider layout="vertical"></Divider>
          <Col flex="auto">
            <Button variant="text">
              <ShareIcon></ShareIcon>
            </Button>
          </Col>
        </Row>
      }
    ></Card>
  );
}

                  ===SPLIT===组建:<Card/>
                  使用描述：带主副标题的卡片 
                  代码示例：import React from 'react';
import { Card } from 'tdesign-react';

export default function HeaderSubtitleCard() {
  return (
    <Card
      title="标题"
      subtitle="副标题"
      actions="操作"
      bordered
      hoverShadow
      style={{
        width: '400px',
      }}
    >
      卡片内容，以描述性为主，可以是文字、图片或图文组合的形式。按业务需求进行自定义组合。
    </Card>
  );
}

                  ===SPLIT===组建:<Card/>
                  使用描述：带标题描述的卡片 
                  代码示例：import React from 'react';
import { Card } from 'tdesign-react';

export default function HeaderDescriptionCard() {
  return (
    <Card
      title="标题"
      description="描述"
      actions="操作"
      bordered
      hoverShadow
      style={{
        width: '400px',
      }}
    >
      卡片内容，以描述性为主，可以是文字、图片或图文组合的形式。按业务需求进行自定义组合。
    </Card>
  );
}

                  ===SPLIT===组建:<Card/>
                  使用描述：同时带主副标题与标题描述的卡片 
                  代码示例：import React from 'react';
import { Card } from 'tdesign-react';

export default function HeaderAllPropsCard() {
  return (
    <Card
      title="标题"
      subtitle="副标题"
      description="描述"
      actions="操作"
      bordered
      hoverShadow
      style={{
        width: '400px',
      }}
    >
      卡片内容，以描述性为主，可以是文字、图片或图文组合的形式。按业务需求进行自定义组合。
    </Card>
  );
}

                  ===SPLIT===组建:<Card/>
                  使用描述：自定义loadingProps的卡片 
                  代码示例：import React from 'react';
import { Card } from 'tdesign-react';

export default function CustomLoadingProps() {
  const customProps = {
    text: 'TDesign努力加载中...',
  };
  return (
    <Card
      title="自定义loadingProps Card"
      loading
      bordered
      style={{
        width: '400px',
      }}
      loadingProps={customProps}
    >
      仅有内容区域的卡片形式。卡片内容区域可以是文字、图片、表单、表格等形式信息内容。可使用大中小不同的卡片尺寸，按业务需求进行呈现。
    </Card>
  );
}

                  组建:<Collapse/>
                  使用描述：基础折叠面板，可自定义面板内容。
                  代码示例：import React from 'react';
import { Collapse, TagInput } from 'tdesign-react';

export default function CollapseExample() {
  const { Panel } = Collapse;
  return (
    <Collapse defaultValue={['default']}>
      <Panel header="这是一个折叠标题">
        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。
      </Panel>
      <Panel header="设置默认展开项" value="default">
        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。
      </Panel>
      <Panel header="自定义折叠面板内容">
        <div
          style={{
            width: '80%',
          }}
        >
          <TagInput defaultValue={['Vue', 'React']} clearable />
        </div>
      </Panel>
      <Panel destroyOnCollapse header="当前折叠面板折叠时，销毁面板内容">
        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。
      </Panel>
      <Panel header="嵌套使用折叠面板">
        <Collapse defaultExpandAll>
          <Panel header="这是一个折叠标题">
            这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。
          </Panel>
          <Panel header="这是一个折叠标题">
            这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。
          </Panel>
        </Collapse>
      </Panel>
    </Collapse>
  );
}

                  ===SPLIT===组建:<Collapse/>
                  使用描述：手风琴模式折叠面板，一次只能打开一个面板。
                  代码示例：import React from 'react';
import { Collapse, TagInput } from 'tdesign-react';

export default function CollapseExample() {
  const { Panel } = Collapse;
  return (
    <Collapse expandMutex>
      <Panel header="这是一个折叠标题">
        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。
      </Panel>
      <Panel destroyOnCollapse header="折叠后自动销毁">
        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。
      </Panel>
      <Panel header="自定义折叠面板内容">
        <div
          className="tdesign-demo-block-column"
          style={{
            width: '80%',
          }}
        >
          <TagInput defaultValue={['Vue', 'React']} clearable />
        </div>
      </Panel>
    </Collapse>
  );
}

                  ===SPLIT===组建:<Collapse/>
                  使用描述：可设置是否显示展开图标以及图标展示的位置
                  代码示例：import React, { useState } from 'react';
import { Collapse, TagInput, Radio, Checkbox, Space } from 'tdesign-react';
import { StarIcon } from 'tdesign-icons-react';

const { Panel } = Collapse;
export default function CollapseExample() {
  const [radio, setRadio] = useState(1);
  const [checked, setChecked] = useState(false);
  const options = [
    {
      value: 1,
      label: '左边',
    },
    {
      value: 2,
      label: '右边',
    },
  ];
  return (
    <Space direction="vertical">
      <Collapse
        expandIcon={[1, 2].includes(radio)}
        expandIconPlacement={radio === 1 ? 'left' : 'right'}
        expandOnRowClick={!checked}
      >
        <Panel header="这是一个折叠标题">
          这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。
        </Panel>
        <Panel destroyOnCollapse header="折叠后自动销毁">
          这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。
        </Panel>
        <Panel header="自定义折叠面板内容">
          <div
            className="tdesign-demo-block-column"
            style={{
              width: '80%',
            }}
          >
            <TagInput defaultValue={['Vue', 'React']} clearable />
          </div>
        </Panel>
        <Panel header="自定义图标" expandIcon={<StarIcon />}>
          这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。
        </Panel>
      </Collapse>
      <Space direction="vertical">
        <Radio.Group value={radio} options={options} onChange={(value) => setRadio(Number(value))} />
        <div>
          <Checkbox
            checked={checked}
            onChange={() => {
              setChecked(!checked);
            }}
          >
            仅图标响应点击
          </Checkbox>
        </div>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Collapse/>
                  使用描述：可自定义面板右侧操作区域
                  代码示例：import React, { useState } from 'react';
import { Collapse, Button, Checkbox, Space } from 'tdesign-react';

const { Panel } = Collapse;
export default function CollapseExample() {
  const [disable, setDisable] = useState(false);
  return (
    <Collapse>
      <Panel header="这是一个折叠标题" headerRightContent={<Button size="small">操作</Button>}>
        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。
      </Panel>
      <Panel header="这是一个折叠标题" headerRightContent={<Button size="small">操作</Button>}>
        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。
      </Panel>
      <Panel
        header="这是一个折叠标题"
        headerRightContent={
          <Space>
            <Checkbox
              checked={disable}
              onClick={(ctx) => {
                setDisable(!disable);
                ctx.e.stopPropagation();
              }}
            >
              是否禁止
            </Checkbox>
            <Button size="small">操作</Button>
          </Space>
        }
        disabled={disable}
      >
        这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。
      </Panel>
    </Collapse>
  );
}

                  ===SPLIT===组建:<Collapse/>
                  使用描述：不同模式的折叠面板 
                  代码示例：import React, { useState } from 'react';
import { Collapse, TagInput, Checkbox, Space } from 'tdesign-react';

const { Panel } = Collapse;
export default function CollapseExample() {
  const [collapseValue, setCollapseValue] = useState([]);
  const [disabledAll, setDisabledAll] = useState(false);
  const [borderless, setBorderless] = useState(false);
  const [showIcon, setShowIcon] = useState(true);
  return (
    <Space direction="vertical">
      <Collapse
        expandIcon={showIcon}
        value={collapseValue}
        borderless={borderless}
        disabled={disabledAll}
        onChange={setCollapseValue}
      >
        <Panel header="这是一个折叠标题">
          这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。
        </Panel>
        <Panel destroyOnCollapse header="折叠后自动销毁">
          这部分是每个折叠面板折叠或展开的内容，可根据不同业务或用户的使用诉求，进行自定义填充。可以是纯文本、图文、子列表等内容形式。
        </Panel>
        <Panel header="自定义折叠面板内容">
          <div
            className="tdesign-demo-block-column"
            style={{
              width: '80%',
            }}
          >
            <TagInput defaultValue={['Vue', 'React']} clearable />
          </div>
        </Panel>
      </Collapse>
      <Space direction="vertical">
        <Checkbox
          checked={disabledAll}
          onChange={() => {
            setDisabledAll(!disabledAll);
          }}
        >
          禁止全部
        </Checkbox>
        <Checkbox
          checked={borderless}
          onChange={() => {
            setBorderless(!borderless);
          }}
        >
          无边框模式
        </Checkbox>
        <Checkbox
          checked={showIcon}
          onChange={() => {
            setShowIcon(!showIcon);
          }}
        >
          显示icon
        </Checkbox>
        <div
          style={{
            marginTop: 10,
          }}
        >
          当前展开的Collapse Panel: {collapseValue.map((item) => `${item} `)}
        </div>
      </Space>
    </Space>
  );
}

                  组建:<Comment/>
                  使用描述：评论最基本的组件，包括头像、作者、时间、评论内容，适用于各种需要进行评论展示的场景。
                  代码示例：import React from 'react';
import { Comment } from 'tdesign-react';

export default function BasicComment() {
  return (
    <Comment
      avatar="https://tdesign.gtimg.com/site/avatar.jpg"
      author="评论作者名"
      datetime="今天16:38"
      content="评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。"
    />
  );
}

                  ===SPLIT===组建:<Comment/>
                  使用描述：可对评论内容进行相关操作的组件，适用于需要自定义操作列的场景。
                  代码示例：import React from 'react';
import { Comment } from 'tdesign-react';
import { ThumbUpIcon, ChatIcon } from 'tdesign-icons-react';

export default function OperationComment() {
  const actions = [
    <React.Fragment key="ThumbUp">
      <ThumbUpIcon size="16px" />
      <span>6</span>
    </React.Fragment>,
    <React.Fragment key="Chat">
      <ChatIcon size="16px" />
      <span>回复</span>
    </React.Fragment>,
  ];
  return (
    <Comment
      avatar="https://tdesign.gtimg.com/site/avatar.jpg"
      author="评论作者名"
      datetime="今天16:38"
      content="评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。"
      actions={actions}
    />
  );
}

                  ===SPLIT===组建:<Comment/>
                  使用描述：以列表形式展示的评论。
                  代码示例：import React from 'react';
import { Comment, List } from 'tdesign-react';
import { ThumbUpIcon, ChatIcon } from 'tdesign-icons-react';

const { ListItem } = List;
export default function ListComment() {
  const actions = [
    <React.Fragment key="ThumbUp">
      <ThumbUpIcon size="16px" />
      <span>6</span>
    </React.Fragment>,
    <React.Fragment key="Chat">
      <ChatIcon size="16px" />
      <span>回复</span>
    </React.Fragment>,
  ];
  const commentsData = [
    {
      id: 'A',
      avatar: 'https://tdesign.gtimg.com/site/avatar.jpg',
      author: '评论作者名A',
      datetime: '今天16:38',
      content:
        'A评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。',
      actions,
    },
    {
      id: 'B',
      avatar: 'https://tdesign.gtimg.com/site/avatar.jpg',
      author: '评论作者名B',
      datetime: '今天16:38',
      content:
        'B评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。',
      actions,
    },
    {
      id: 'C',
      avatar: 'https://tdesign.gtimg.com/site/avatar.jpg',
      author: '评论作者名C',
      datetime: '今天16:38',
      content:
        'C评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。',
      actions,
    },
  ];
  return (
    <List split={true}>
      {commentsData.map((item) => (
        <ListItem key={item.id}>
          <Comment
            avatar={item.avatar}
            author={item.author}
            datetime={item.datetime}
            content={item.content}
            actions={actions}
          />
        </ListItem>
      ))}
    </List>
  );
}

                  ===SPLIT===组建:<Comment/>
                  使用描述：展示一条评论的回复内容的组件，适用于对评论进行回复的场景，作者名称后可标明回复对象的名称。
                  代码示例：import React from 'react';
import { Comment } from 'tdesign-react';
import { CaretRightSmallIcon, ThumbUpIcon, ChatIcon } from 'tdesign-icons-react';

const classStyles = `
<style>
.comment-reply > .t-comment__inner > .t-comment__content > .t-comment__actions {
  margin-right: 24px;
}
</style>
`;
export default function ReplyComment() {
  React.useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  const actions = [
    <React.Fragment key="ThumbUp">
      <ThumbUpIcon size="16px" />
      <span>6</span>
    </React.Fragment>,
    <React.Fragment key="Chat">
      <ChatIcon size="16px" />
      <span>回复</span>
    </React.Fragment>,
  ];
  const replyAuthor = (
    <>
      <span>评论作者名B</span>
      <CaretRightSmallIcon size="small" />
      <span>评论作者名A</span>
    </>
  );
  const replyElement = (
    <Comment
      avatar="https://tdesign.gtimg.com/site/avatar.jpg"
      author={replyAuthor}
      datetime="今天16:38"
      content="B评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。"
      actions={actions}
    />
  );
  return (
    <Comment
      className="comment-reply"
      avatar="https://tdesign.gtimg.com/site/avatar.jpg"
      author="评论作者名A"
      datetime="今天16:38"
      content="A评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。"
      actions={actions}
      reply={replyElement}
    />
  );
}

                  ===SPLIT===组建:<Comment/>
                  使用描述：评论可以引用其他内容，表示评论和其他内容的引用关系。
                  代码示例：import React from 'react';
import { Comment } from 'tdesign-react';
import { ThumbUpIcon, ChatIcon } from 'tdesign-icons-react';

export default function quoteComment() {
  const actions = [
    <React.Fragment key="ThumbUp">
      <ThumbUpIcon size="16px" />
      <span>6</span>
    </React.Fragment>,
    <React.Fragment key="Chat">
      <ChatIcon size="16px" />
      <span>回复</span>
    </React.Fragment>,
  ];
  const quoteElement = (
    <Comment
      author="引用内容标题"
      content="引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容引用内容。"
    />
  );
  return (
    <Comment
      avatar="https://tdesign.gtimg.com/site/avatar.jpg"
      author="评论作者名A"
      datetime="今天16:38"
      content="A评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容。"
      actions={actions}
      quote={quoteElement}
    />
  );
}

                  ===SPLIT===组建:<Comment/>
                  使用描述：对评论内容进行回复操作的组件，可在回复框内直接输入内容进行回复。
                  代码示例：import React, { useState } from 'react';
import { Comment, Textarea, Button, NotificationPlugin, Space } from 'tdesign-react';

export default function BasicComment() {
  const [replyData, setReplayData] = useState('');
  function submitReply() {
    NotificationPlugin.info({
      title: '回复内容',
      content: replyData,
      duration: 3000,
    });
  }
  const replyForm = (
    <Space
      direction="vertical"
      align="end"
      style={{
        width: '100%',
      }}
    >
      <Textarea placeholder="请输入内容" value={replyData} onChange={setReplayData} />
      <Button
        style={{
          float: 'right',
        }}
        onClick={submitReply}
      >
        回复
      </Button>
    </Space>
  );
  return <Comment avatar="https://tdesign.gtimg.com/site/avatar.jpg" content={replyForm} />;
}

                  组建:<Descriptions/>
                  使用描述：基础 
                  代码示例：import React from 'react';
import { Descriptions, Space } from 'tdesign-react';

// const { DescriptionsItem } = Descriptions;

export default function BasicDescriptions() {
  const items = [
    {
      label: 'Name',
      content: 'TDesign',
    },
    {
      label: 'Telephone Number',
      content: '139****0609',
    },
    {
      label: 'Area',
      content: 'China Tencent Headquarters',
    },
    {
      label: 'Address',
      content: 'Shenzhen Penguin Island D1 4A Mail Center',
    },
  ];
  return (
    <Space direction="vertical">
      {/* <h3>推荐：数据写法</h3> */}
      <Descriptions items={items} title="Shipping address" />
      {/* <h3>JSX写法</h3>
       <Descriptions title="Shipping address">
        <DescriptionsItem label="Name">TDesign</DescriptionsItem>
        <DescriptionsItem label="Telephone Number">139****0609</DescriptionsItem>
        <DescriptionsItem label="Area">China Tencent Headquarters</DescriptionsItem>
        <DescriptionsItem label="Address" content="test">
          Shenzhen Penguin Island D1 4A Mail Center
        </DescriptionsItem>
       </Descriptions> */}
    </Space>
  );
}

                  ===SPLIT===组建:<Descriptions/>
                  使用描述：边框 
                  代码示例：import React from 'react';
import { Descriptions } from 'tdesign-react';

export default function Bordered() {
  const items = [
    {
      label: 'Name',
      content: 'TDesign',
    },
    {
      label: 'Telephone Number',
      content: '139****0609',
    },
    {
      label: 'Area',
      content: 'China Tencent Headquarters',
    },
    {
      label: 'Address',
      content: 'Shenzhen Penguin Island D1 4A Mail Center',
    },
  ];
  return <Descriptions items={items} title="Shipping address" bordered />;
}

                  ===SPLIT===组建:<Descriptions/>
                  使用描述：标签引号 
                  代码示例：import React from 'react';
import { Descriptions, Space, Switch } from 'tdesign-react';

export default function Colon() {
  const [checked, setChecked] = React.useState(false);
  const items = [
    {
      label: 'Name',
      content: 'TDesign',
    },
    {
      label: 'Telephone Number',
      content: '139****0609',
    },
    {
      label: 'Area',
      content: 'China Tencent Headquarters',
    },
    {
      label: 'Address',
      content: 'Shenzhen Penguin Island D1 4A Mail Center',
    },
  ];
  return (
    <Space direction="vertical">
      <Space align="center">
        <Switch size="large" value={checked} onChange={(val) => setChecked(val)} />
        展示冒号
      </Space>
      <Descriptions items={items} title="Shipping address" bordered colon={checked} />
    </Space>
  );
}

                  ===SPLIT===组建:<Descriptions/>
                  使用描述：布局方式 
                  代码示例：import React from 'react';
import { Descriptions, Space, Row, Col, Radio } from 'tdesign-react';

export default function Layout() {
  const [layout, setLayout] = React.useState('horizontal');
  const [itemLayout, setItemLayout] = React.useState('horizontal');
  const items = [
    {
      label: 'Name',
      content: 'TDesign',
    },
    {
      label: 'Telephone Number',
      content: '139****0609',
    },
    {
      label: 'Area',
      content: 'China Tencent Headquarters',
    },
    {
      label: 'Address',
      content: 'Shenzhen Penguin Island D1 4A Mail Center',
    },
  ];
  const layoutOptions = ['horizontal', 'vertical'];
  const itemLayoutOptions = ['horizontal', 'vertical'];
  return (
    <Space direction="vertical">
      <Row align="middle">
        <Col>
          <span>layout：</span>
        </Col>
        <Col>
          <Radio.Group
            variant="default-filled"
            value={layout}
            onChange={(val) => setLayout(val)}
            options={layoutOptions}
          />
        </Col>
      </Row>
      <Row align="middle">
        <Col>
          <span>itemLayout：</span>
        </Col>
        <Col>
          <Radio.Group
            variant="default-filled"
            value={itemLayout}
            onChange={(val) => setItemLayout(val)}
            options={itemLayoutOptions}
          />
        </Col>
      </Row>
      <Descriptions items={items} title="Shipping address" bordered layout={layout} itemLayout={itemLayout} />
    </Space>
  );
}

                  ===SPLIT===组建:<Descriptions/>
                  使用描述：自定义列数量 
                  代码示例：import React from 'react';
import { Descriptions, Space, Radio } from 'tdesign-react';

export default function Column() {
  const [column, setColumn] = React.useState(2);
  const columnOptions = [2, 3, 4];
  const items = [
    {
      label: 'Name',
      content: 'TDesign',
    },
    {
      label: 'Telephone Number',
      content: '139****0609',
    },
    {
      label: 'Area',
      content: 'China Tencent Headquarters',
    },
    {
      label: 'Address',
      content: 'Shenzhen Penguin Island D1 4A Mail Center',
    },
  ];
  return (
    <Space direction="vertical">
      <Radio.Group options={columnOptions} value={column} onChange={(val) => setColumn(val)} variant="default-filled" />
      <Descriptions items={items} title="Shipping address" bordered column={column} />
    </Space>
  );
}

                  ===SPLIT===组建:<Descriptions/>
                  使用描述：fixed: 使用固定表格布局算法。此模式下，每列的宽度按以下方式确定：使用显示设定的列宽度否则，使用第一行中显示设定的的单元格宽度作为对应列的宽度否则，均分剩余宽度auto: 使用自动表格布局算法。表格及其单元格的宽度会根据内容进行调整。
                  代码示例：import React from 'react';
import { Descriptions, Space, Radio } from 'tdesign-react';

export default function Column() {
  const [tableLayout, setTableLayout] = React.useState('fixed');
  const tableLayoutOptions = ['fixed', 'auto'];
  const items = [
    {
      label: 'Name',
      content: 'TDesign',
    },
    {
      label: 'Telephone Number',
      content: '139****0609',
    },
    {
      label: 'Area',
      content: 'China Tencent Headquarters',
    },
    {
      label: 'Address',
      content: 'Shenzhen Penguin Island D1 4A Mail Center',
    },
  ];
  return (
    <Space direction="vertical">
      <Radio.Group
        options={tableLayoutOptions}
        value={tableLayout}
        onChange={(val) => setTableLayout(val)}
        variant="default-filled"
      />
      <Descriptions items={items} title="Shipping address" bordered tableLayout={tableLayout} />
    </Space>
  );
}

                  ===SPLIT===组建:<Descriptions/>
                  使用描述：自定义样式 
                  代码示例：import React from 'react';
import { Descriptions } from 'tdesign-react';

export default function CustomStyle() {
  const customLabelClassName = {
    width: '100px',
    textAlign: 'left',
  };
  const customContentClassName = {
    textAlign: 'center',
  };
  const items = [
    {
      label: 'Name',
      content: 'TDesign',
    },
    {
      label: 'Telephone Number',
      content: '139****0609',
    },
    {
      label: 'Area',
      content: 'China Tencent Headquarters',
    },
    {
      label: 'Address',
      content: 'Shenzhen Penguin Island D1 4A Mail Center',
    },
  ];
  return (
    <Descriptions
      items={items}
      title="Shipping address"
      bordered
      labelStyle={customLabelClassName}
      contentStyle={customContentClassName}
    />
  );
}

                  ===SPLIT===组建:<Descriptions/>
                  使用描述：嵌套使用 
                  代码示例：import React from 'react';
import { Descriptions, Space } from 'tdesign-react';

// const { DescriptionsItem } = Descriptions;

export default function Nest() {
  const itemsContent = [
    {
      label: 'City',
      content: 'Shenzhen',
    },
    {
      label: 'Detail',
      content: 'Penguin Island D1 4A Mail Center',
    },
  ];
  const items = [
    {
      label: 'Name',
      content: 'TDesign',
    },
    {
      label: 'Telephone Number',
      content: '139****0609',
    },
    {
      label: 'Area',
      content: 'China Tencent Headquarters',
    },
    {
      label: 'Address',
      content: (
        <Descriptions
          items={itemsContent}
          labelStyle={{
            background: '#f4f4f4',
          }}
          colon
        />
      ),
    },
  ];
  return (
    <Space direction="vertical">
      <Descriptions items={items} title="Shipping address" bordered />
      {/* <Descriptions title="Shipping address" bordered>
        <DescriptionsItem label="Name">TDesign</DescriptionsItem>
        <DescriptionsItem label="Telephone Number">139****0609</DescriptionsItem>
        <DescriptionsItem label="Area">China Tencent Headquarters</DescriptionsItem>
        <DescriptionsItem label="Address">
          <Descriptions labelStyle={{ background: '#f4f4f4' }} colon>
            <DescriptionsItem label="City">Shenzhen</DescriptionsItem>
            <DescriptionsItem label="Detail">Penguin Island D1 4A Mail Center</DescriptionsItem>
          </Descriptions>
        </DescriptionsItem>
       </Descriptions> */}
    </Space>
  );
}

                  组建:<Empty/>
                  使用描述：基础的空状态 
                  代码示例：import React from 'react';
import { Empty } from 'tdesign-react';

export default function BasicGrid() {
  return <Empty />;
}

                  ===SPLIT===组建:<Empty/>
                  使用描述：带描述的空状态 
                  代码示例：import React from 'react';
import { Empty, Button } from 'tdesign-react';

export default function Operation() {
  function goToIndex() {
    console.log('go to index');
    location.href = '/';
  }
  return <Empty action={<Button onClick={goToIndex}>返回首页</Button>} description="description" />;
}

                  ===SPLIT===组建:<Empty/>
                  使用描述：带操作的空状态 
                  代码示例：import React from 'react';
import { Empty, Button } from 'tdesign-react';

export default function Operation() {
  function goToIndex() {
    console.log('go to index');
    location.href = '/';
  }
  return <Empty action={<Button onClick={goToIndex}>返回首页</Button>} />;
}

                  ===SPLIT===组建:<Empty/>
                  使用描述：自带的状态类型 
                  代码示例：import React from 'react';
import { Empty, Row, Col } from 'tdesign-react';

export default function StatusExample() {
  return (
    <Row gutter={40}>
      <Col>
        <Empty type="empty" />
      </Col>
      <Col>
        <Empty type="maintenance" />
      </Col>
      <Col>
        <Empty type="network-error" />
      </Col>
      <Col>
        <Empty type="success" />
      </Col>
      <Col>
        <Empty type="fail" />
      </Col>
    </Row>
  );
}

                  ===SPLIT===组建:<Empty/>
                  使用描述：不同尺寸的空状态 
                  代码示例：import React, { useState } from 'react';
import { Empty, Row, Col, Space, Radio } from 'tdesign-react';

const options = [
  {
    label: 'small',
    value: 'small',
  },
  {
    label: 'medium',
    value: 'medium',
  },
  {
    label: 'large',
    value: 'large',
  },
];
export default function StatusExample() {
  const [size, setSize] = useState('medium');
  return (
    <Space direction="vertical">
      <Radio.Group variant="default-filled" options={options} value={size} onChange={(value) => setSize(value)} />
      <div
        style={{
          marginTop: '20px',
          height: '100px',
        }}
      >
        <Row gutter={40}>
          <Col>
            <Empty type="empty" size={size} />
          </Col>
          <Col>
            <Empty type="maintenance" size={size} />
          </Col>
          <Col>
            <Empty type="network-error" size={size} />
          </Col>
          <Col>
            <Empty type="success" size={size} />
          </Col>
          <Col>
            <Empty type="fail" size={size} />
          </Col>
        </Row>
      </div>
    </Space>
  );
}

                  ===SPLIT===组建:<Empty/>
                  使用描述：自定义内容的空状态 
                  代码示例：import React from 'react';
import { Empty, Row, Col } from 'tdesign-react';
import { ErrorCircleIcon } from 'tdesign-icons-react';

export default function BasicGrid() {
  const CustomImageContainer = (
    <div
      style={{
        width: '64px',
        height: '64px',
        backgroundImage: 'url(https://tdesign.gtimg.com/demo/demo-image-1.png)',
        backgroundSize: '100% 100%',
      }}
    />
  );
  return (
    <Row gutter={40}>
      <Col>
        <Empty image={<ErrorCircleIcon size={64} color="var(--td-text-color-placeholder)" />} description="暂无数据" />
      </Col>
      <Col>
        <Empty description="暂无数据" image={CustomImageContainer} />
      </Col>
    </Row>
  );
}

                  组建:<Image/>
                  使用描述：提供 fill、contain、cover、none、scale-down 5 种填充类型。
                  代码示例：import React, { useEffect, useState } from 'react';
import { Image, Space } from 'tdesign-react';

export default function FillModeImage() {
  const [src, setSrc] = useState('');
  useEffect(() => {
    const timer = setTimeout(() => {
      setSrc('https://tdesign.gtimg.com/demo/demo-image-1.png');
    }, 100);
    return () => {
      clearTimeout(timer);
    };
  }, []);
  return (
    <Space breakLine size={16}>
      {['fill', 'contain', 'cover', 'none', 'scale-down'].map((item) => (
        <Space direction="vertical" align="start" key={item}>
          <Image
            src={src}
            fit={item}
            // fallback='https://tdesign.gtimg.com/demo/demo-image-1.png'
            style={{
              width: 120,
              height: 120,
            }}
          />
          {item}
        </Space>
      ))}
    </Space>
  );
}

                  ===SPLIT===组建:<Image/>
                  使用描述：图片相对于容器的位置。当图片过大时，提供显示图片的局部左侧对齐、或右侧对齐的不同位置。
                  代码示例：import React from 'react';
import { Image, Space } from 'tdesign-react';

export default function FillPositionImage() {
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Space breakLine>
        <Space direction="vertical" align="start">
          <Image
            src="https://tdesign.gtimg.com/demo/demo-image-1.png"
            fit="cover"
            position="center"
            style={{
              width: 120,
              height: 120,
            }}
          />
          cover center
        </Space>
        <Space direction="vertical" align="start">
          <Image
            src="https://tdesign.gtimg.com/demo/demo-image-1.png"
            fit="cover"
            style={{
              width: 120,
              height: 120,
            }}
            position="left"
          />
          cover left
        </Space>
        <Space direction="vertical" align="start">
          <Image
            src="https://tdesign.gtimg.com/demo/demo-image-1.png"
            fit="cover"
            style={{
              width: 120,
              height: 120,
            }}
            position="right"
          />
          cover right
        </Space>
      </Space>
      <Space
        style={{
          marginTop: 20,
        }}
        breakLine
      >
        <Space direction="vertical" align="start">
          <Image
            src="https://tdesign.gtimg.com/demo/demo-image-1.png"
            fit="cover"
            style={{
              width: 280,
              height: 120,
            }}
            position="top"
          />
          cover top
        </Space>
        <Space direction="vertical" align="start">
          <Image
            src="https://tdesign.gtimg.com/demo/demo-image-1.png"
            fit="cover"
            style={{
              width: 280,
              height: 120,
            }}
            position="bottom"
          />
          cover bottom
        </Space>
      </Space>
      <Space
        style={{
          marginTop: 20,
        }}
        breakLine
      >
        <Space direction="vertical" align="start">
          <Image
            src="https://tdesign.gtimg.com/demo/demo-image-1.png"
            fit="contain"
            style={{
              width: 120,
              height: 200,
            }}
            position="top"
          />
          contain top
        </Space>
        <Space direction="vertical" align="start">
          <Image
            src="https://tdesign.gtimg.com/demo/demo-image-1.png"
            fit="contain"
            style={{
              width: 120,
              height: 200,
            }}
            position="bottom"
          />
          contain bottom
        </Space>
        <Space direction="vertical" align="start">
          <Image
            src="https://tdesign.gtimg.com/demo/demo-image-1.png"
            fit="contain"
            style={{
              width: 120,
              height: 200,
            }}
            position="center"
          />
          contain center
        </Space>
        <Space
          style={{
            marginTop: 20,
          }}
          breakLine
        >
          <Space direction="vertical" align="start">
            <Image
              src="https://tdesign.gtimg.com/demo/demo-image-1.png"
              fit="contain"
              style={{
                width: 280,
                height: 120,
              }}
              position="left"
            />
            contain left
          </Space>
          <Space direction="vertical" align="start">
            <Image
              src="https://tdesign.gtimg.com/demo/demo-image-1.png"
              fit="contain"
              style={{
                width: 280,
                height: 120,
              }}
              position="right"
            />
            contain right
          </Space>
        </Space>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Image/>
                  使用描述：当图片长宽不相等时，无法使用 circle 展示一个正圆。
                  代码示例：import React from 'react';
import { Image, Space } from 'tdesign-react';

export default function ShapeImage() {
  return (
    <Space>
      <Space direction="vertical" align="center">
        <Image
          src="https://tdesign.gtimg.com/demo/demo-image-1.png"
          shape="square"
          style={{
            width: 160,
            height: 160,
          }}
          fit="cover"
        />
        square
      </Space>
      <Space direction="vertical" align="center">
        <Image
          src="https://tdesign.gtimg.com/demo/demo-image-1.png"
          style={{
            width: 160,
            height: 160,
          }}
          fit="cover"
          shape="round"
        />
        round
      </Space>
      <Space direction="vertical" align="center">
        <Image
          src="https://tdesign.gtimg.com/demo/demo-image-1.png"
          style={{
            width: 160,
            height: 160,
          }}
          shape="circle"
          fit="cover"
        />
        circle
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Image/>
                  使用描述：图片呈现图集样式的效果。
                  代码示例：import React from 'react';
import { Image, Tag } from 'tdesign-react';

export default function AlbumCoverImage() {
  const label = (
    <Tag
      shape="mark"
      theme="warning"
      style={{
        margin: 8,
        borderRadius: 3,
        background: 'rgba(236,242,254,1)',
        color: 'rgba(0,82,217,1)',
      }}
    >
      标签一
    </Tag>
  );
  return (
    <Image
      src="https://tdesign.gtimg.com/demo/demo-image-1.png"
      style={{
        width: 284,
        height: 160,
      }}
      gallery
      overlayContent={label}
    />
  );
}

                  ===SPLIT===组建:<Image/>
                  使用描述：显示加载的不同状态，提供默认、自定义两种占位样式。
                  代码示例：import React, { useState } from 'react';
import { Image, Space, Button } from 'tdesign-react';
import { RefreshIcon, ImageErrorIcon } from 'tdesign-icons-react';

export default function PlaceholderImage() {
  const [loadingCount, setLoadingCount] = useState(0);
  const handleReload = () => {
    setLoadingCount(loadingCount + 1);
  };
  const [errorCount, setErrorCount] = useState(0);
  const handleReplayError = () => {
    setErrorCount(errorCount + 1);
  };
  return (
    <Space size={24} direction="vertical">
      <div>
        <h3
          style={{
            marginBottom: 15,
          }}
        >
          加载中的图片
        </h3>
        <Space>
          <Space direction="vertical">
            默认占位
            <Image
              src="https://tdesign.gtimg.com/demo/demo-image-1.png"
              key={loadingCount}
              style={{
                width: 284,
                height: 160,
              }}
            />
            <Button variant="outline" icon={<RefreshIcon />} onClick={handleReload}>
              重演 loading
            </Button>
          </Space>
          <Space direction="vertical">
            自定义占位
            <Image
              key={loadingCount}
              src="https://tdesign.gtimg.com/demo/demo-image-1.png"
              style={{
                width: 284,
                height: 160,
              }}
              loading={<ImageErrorIcon size={24} />}
            />
          </Space>
        </Space>
      </div>
      <div>
        <h3
          style={{
            marginBottom: 15,
          }}
        >
          加载失败的图片
        </h3>
        <Space>
          <Space direction="vertical">
            默认错误
            <Image
              src="error url"
              key={errorCount}
              style={{
                width: 284,
                height: 160,
              }}
              onError={(e) => {
                console.log(e);
              }}
            />
            <Button variant="outline" icon={<RefreshIcon />} onClick={handleReplayError}>
              重演 error
            </Button>
          </Space>
          <Space direction="vertical">
            自定义错误
            <Image
              src="error url"
              key={errorCount}
              style={{
                width: 284,
                height: 160,
              }}
              error={<ImageErrorIcon size={24} />}
            />
          </Space>
        </Space>
      </div>
    </Space>
  );
}

                  ===SPLIT===组建:<Image/>
                  使用描述：placeholder 在图像加载时占位显示。
                  代码示例：import React, { useState } from 'react';
import { Image, Space, Button, Loading } from 'tdesign-react';
import { RefreshIcon } from 'tdesign-icons-react';

export default function LazySingleImage() {
  const [loadCount, setLoadCount] = useState(0);
  const handleReload = () => {
    setLoadCount(loadCount + 1);
  };
  const loading = (
    <div
      style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        width: '100%',
        height: '100%',
        background: 'rgba(255,255,255,.4)',
        backdropFilter: 'blur(10px)',
      }}
    >
      <Loading
        delay={0}
        fullscreen={false}
        indicator
        inheritColor={false}
        loading
        preventScrollThrough
        showOverlay
        size="small"
      />
    </div>
  );
  return (
    <Space direction="vertical">
      <Image
        src="https://tdesign.gtimg.com/demo/demo-image-1.png"
        style={{
          width: 284,
          height: 160,
        }}
        lazy
        placeholder={<img width="100%" height="100%" src="https://tdesign.gtimg.com/demo/demo-image-5.png" />}
        loading={loading}
        key={loadCount}
      />
      <Button variant="outline" icon={<RefreshIcon />} onClick={handleReload}>
        重演 lazy load
      </Button>
    </Space>
  );
}

                  ===SPLIT===组建:<Image/>
                  使用描述：多张图片滚动下拉时，尚未出现的图片会用占位图表示，呈现懒加载的效果。
                  代码示例：import React, { useState } from 'react';
import { Image, Space, Button } from 'tdesign-react';
import { RefreshIcon } from 'tdesign-icons-react';

export default function LazyListImage() {
  const [loadCount, setLoadCount] = useState(0);
  const handleReload = () => {
    setLoadCount(loadCount + 1);
  };
  return (
    <Space direction="vertical" key={loadCount}>
      <Space
        breakLine
        style={{
          height: 240,
          overflowY: 'scroll',
        }}
      >
        {Array.from({
          length: 24,
        }).map((_, index) => (
          <Image
            key={index}
            src="https://tdesign.gtimg.com/demo/demo-image-1.png"
            style={{
              width: 230,
              height: 120,
            }}
            lazy
          />
        ))}
      </Space>
      <Button variant="outline" icon={<RefreshIcon />} onClick={handleReload}>
        重演 lazy load
      </Button>
    </Space>
  );
}

                  ===SPLIT===组建:<Image/>
                  使用描述：悬浮层常驻显示，不因用户操作出现或消失。
                  代码示例：import React from 'react';
import { Image, Space, Tag } from 'tdesign-react';
import { PrintIcon } from 'tdesign-icons-react';

export default function ExtraAlwaysImage() {
  const mask = (
    <div
      style={{
        background: 'rgba(0,0,0,.4)',
        height: '100%',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        fontSize: 14,
        lineHeight: 22,
      }}
    >
      <Tag
        shape="mark"
        theme="warning"
        style={{
          borderRadius: 3,
          background: 'transparent',
          color: '#fff',
        }}
      >
        <PrintIcon size={16} /> 高清
      </Tag>
    </div>
  );
  const button = (
    <Tag
      shape="mark"
      theme="warning"
      style={{
        position: 'absolute',
        right: 8,
        bottom: 8,
        borderRadius: 3,
        background: 'rgba(236,242,254,1)',
        color: 'rgba(0,82,217,1)',
      }}
    >
      <PrintIcon size={16} /> 高清
    </Tag>
  );
  return (
    <Space size={32}>
      <Space direction="vertical">
        <strong
          style={{
            fontSize: 20,
          }}
        >
          有遮罩
        </strong>
        <Image
          src="https://tdesign.gtimg.com/demo/demo-image-1.png"
          style={{
            width: 284,
            height: 160,
          }}
          overlayContent={mask}
        />
      </Space>
      <Space direction="vertical">
        <strong
          style={{
            fontSize: 20,
          }}
        >
          无遮罩
        </strong>
        <Image
          src="https://tdesign.gtimg.com/demo/demo-image-1.png"
          style={{
            width: 284,
            height: 160,
          }}
          overlayContent={button}
        />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Image/>
                  使用描述：默认不显示悬浮层，鼠标悬浮到图片区域后悬浮层出现。
                  代码示例：import React from 'react';
import { Image } from 'tdesign-react';

export default function ExtraHoverImage() {
  const mask = (
    <div
      style={{
        background: 'rgba(0,0,0,.4)',
        color: '#fff',
        height: '100%',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
      }}
    >
      预览
    </div>
  );
  return (
    <Image
      src="https://tdesign.gtimg.com/demo/demo-image-1.png"
      style={{
        width: 284,
        height: 160,
      }}
      overlayContent={mask}
      overlayTrigger="hover"
    />
  );
}

                  ===SPLIT===组建:<Image/>
                  使用描述：支持使用 srcset 设置特殊格式的图片渲染，如 .avif 和 .webp。图片转码为 AVIF/WEBP 推荐使用腾讯云数据万象图片压缩服务。
                  代码示例：import React from 'react';
import { Image } from 'tdesign-react';

export default function AvifImage() {
  return (
    <Image
      src="https://tdesign.gtimg.com/img/tdesign-image.avif"
      srcset={{
        'image/avif': 'https://tdesign.gtimg.com/img/tdesign-image.avif',
        'image/webp': 'https://tdesign.gtimg.com/img/tdesign-image.webp',
      }}
      shape="square"
      style={{
        maxWidth: '100%',
      }}
      fit="scale-down"
    />
  );
}

                  组建:<ImageViewer/>
                  使用描述：通过图片缩略图，查看完整图片。
                  代码示例：import React from 'react';
import { ImageViewer, Image, Space } from 'tdesign-react';
import { BrowseIcon } from 'tdesign-icons-react';

const img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';
export default function BasicImageViewer() {
  const trigger = ({ open }) => {
    const mask = (
      <div
        style={{
          background: 'rgba(0,0,0,.6)',
          color: '#fff',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
        onClick={open}
      >
        <span>
          <BrowseIcon size="16px" name={'browse'} /> 预览
        </span>
      </div>
    );
    return (
      <Image
        alt={'test'}
        src={img}
        overlayContent={mask}
        overlayTrigger="hover"
        fit="contain"
        style={{
          width: 160,
          height: 160,
          border: '4px solid var(--td-bg-color-secondarycontainer)',
          borderRadius: 'var(--td-radius-medium)',
          backgroundColor: '#fff',
        }}
      />
    );
  };
  return (
    <Space breakLine size={16}>
      <ImageViewer trigger={trigger} images={[img]} />

      {/* TODO: fix visible=true can not show image previewer */}
      {/* <ImageViewer images={[img]} visible={true} /> */}
    </Space>
  );
}

                  ===SPLIT===组建:<ImageViewer/>
                  使用描述：通过图片缩略图，查看完整图片。支持移动的小窗口展示。
                  代码示例：import React from 'react';
import { ImageViewer, Image, Space } from 'tdesign-react';
import { BrowseIcon } from 'tdesign-icons-react';

const img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';
export default function BasicImageViewer() {
  const trigger = ({ open }) => {
    const mask = (
      <div
        style={{
          background: 'rgba(0,0,0,.6)',
          color: '#fff',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
        onClick={open}
      >
        <span>
          <BrowseIcon size="16px" name={'browse'} /> 预览
        </span>
      </div>
    );
    return (
      <Image
        alt={'test'}
        src={img}
        overlayContent={mask}
        overlayTrigger="hover"
        fit="contain"
        style={{
          width: 160,
          height: 160,
          border: '4px solid var(--td-bg-color-secondarycontainer)',
          borderRadius: 'var(--td-radius-medium)',
          backgroundColor: '#fff',
        }}
      />
    );
  };
  return (
    <Space breakLine size={16}>
      <ImageViewer draggable mode="modeless" title="预览单张图片" trigger={trigger} images={[img]} />
    </Space>
  );
}

                  ===SPLIT===组建:<ImageViewer/>
                  使用描述：通过点击文字按钮，查看图片。
                  代码示例：import React from 'react';
import { ImageViewer, Button } from 'tdesign-react';

const img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';
export default function BasicImageViewer() {
  const trigger = ({ open }) => <Button onClick={open}>预览单张图片</Button>;
  return <ImageViewer trigger={trigger} images={[img]} />;
}

                  ===SPLIT===组建:<ImageViewer/>
                  使用描述：当有多个图片时，在查看器内可以展开预览所有图片。
                  代码示例：import React from 'react';
import { Image, ImageViewer, Space } from 'tdesign-react';
import { BrowseIcon } from 'tdesign-icons-react';

const imgH = 'https://tdesign.gtimg.com/demo/demo-image-3.png';
const imgV = 'https://tdesign.gtimg.com/demo/demo-image-2.png';
const img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';
export default function BasicImageViewer() {
  const images = [
    img,
    {
      mainImage: imgH,
      download: true,
      thumbnail: imgH,
    },
    imgV,
  ];
  return (
    <Space breakLine size={16}>
      {images.map((imgSrc, index) => {
        const trigger = ({ open }) => {
          const mask = (
            <div
              style={{
                background: 'rgba(0,0,0,.6)',
                color: '#fff',
                height: '100%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
              }}
              onClick={open}
            >
              <span>
                <BrowseIcon size="16px" name={'browse'} /> 预览
              </span>
            </div>
          );
          return (
            <Image
              alt={'test'}
              src={typeof imgSrc === 'string' ? imgSrc : imgSrc.mainImage}
              overlayContent={mask}
              overlayTrigger="hover"
              fit="contain"
              style={{
                width: 160,
                height: 160,
                border: '4px solid var(--td-bg-color-secondarycontainer)',
                borderRadius: 'var(--td-radius-medium)',
                backgroundColor: '#fff',
              }}
            />
          );
        };
        return <ImageViewer key={index} trigger={trigger} images={images} defaultIndex={index} />;
      })}
    </Space>
  );
}

                  ===SPLIT===组建:<ImageViewer/>
                  使用描述：通过相册封面图，触发预览多张图片。
                  代码示例：import React from 'react';
import { Image, ImageViewer, Space } from 'tdesign-react';
import { BrowseIcon } from 'tdesign-icons-react';

const imgH = 'https://tdesign.gtimg.com/demo/demo-image-3.png';
const imgV = 'https://tdesign.gtimg.com/demo/demo-image-2.png';
const img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';
export default function BasicImageViewer() {
  const trigger = ({ open }) => {
    const mask = (
      <div
        style={{
          background: 'rgba(0,0,0,.6)',
          color: '#fff',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
        onClick={open}
      >
        <span>
          <BrowseIcon size="16px" name={'browse'} /> 预览
        </span>
      </div>
    );
    return (
      <div
        style={{
          position: 'relative',
          overflow: 'hidden',
          boxSizing: 'content-box',
          border: '4px solid var(--td-bg-color-secondarycontainer)',
          borderRadius: 'var(--td-radius-medium)',
        }}
      >
        <Image
          alt={'test'}
          src={img}
          overlayContent={mask}
          overlayTrigger="hover"
          fit="contain"
          style={{
            width: 240,
            height: 240,
            backgroundColor: '#fff',
          }}
        />
        <div
          style={{
            width: '100%',
            height: '56px',
            padding: '0 16px',
            lineHeight: '56px',
            position: 'absolute',
            bottom: '0',
            color: 'var(--td-text-color-anti)',
            backgroundImage: 'linear-gradient(0deg, rgba(0, 0, 0, .4) 0%, rgba(0, 0, 0, 0) 100%)',
            boxSizing: 'border-box',
            zIndex: 1,
          }}
        >
          <span>相册封面标题</span>
        </div>
      </div>
    );
  };
  const images = [img, imgV, imgH];
  return (
    <Space breakLine size={16}>
      <ImageViewer trigger={trigger} images={images} title="相册封面标题" />
    </Space>
  );
}

                  ===SPLIT===组建:<ImageViewer/>
                  使用描述：在原图未成功加载之前，渐进显示加载状态。
                  代码示例：import React from 'react';
import { Image, Space, ImageViewer } from 'tdesign-react';
import { BrowseIcon } from 'tdesign-icons-react';

const imgV = 'https://tdesign.gtimg.com/demo/demo-image-2.png';
const img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';
export default function BasicImageViewer() {
  const trigger = ({ open }) => {
    const mask = (
      <div
        style={{
          background: 'rgba(0,0,0,.6)',
          color: '#fff',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
        onClick={open}
      >
        <span>
          <BrowseIcon size="16px" name={'browse'} /> 预览
        </span>
      </div>
    );
    return (
      <Image
        alt={'test'}
        src={img}
        overlayContent={mask}
        overlayTrigger="hover"
        fit="contain"
        style={{
          width: 160,
          height: 160,
          border: '4px solid var(--td-bg-color-secondarycontainer)',
          borderRadius: 'var(--td-radius-medium)',
          backgroundColor: '#fff',
        }}
      />
    );
  };
  const images = [
    {
      mainImage: imgV,
      thumbnail: img,
    },
  ];
  return (
    <Space breakLine size={16}>
      <ImageViewer trigger={trigger} images={images} />
      <ImageViewer trigger={trigger} images={[images[0].mainImage]} />
    </Space>
  );
}

                  ===SPLIT===组建:<ImageViewer/>
                  使用描述：加载失败的图片，用占位图显示，并提供相应的失败说明。可使用默认占位图，或自定义占位图。
                  代码示例：import React from 'react';
import { Image, ImageViewer, Space } from 'tdesign-react';
import { BrowseIcon } from 'tdesign-icons-react';

const img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';
export default function BasicImageViewer() {
  const images = [
    img,
    'https://tdesign.gtimg.com/demo/demo-image-error1.png',
    'https://tdesign.gtimg.com/demo/demo-image-error2.png',
    'https://tdesign.gtimg.com/demo/demo-image-error3.png',
  ];
  return (
    <Space>
      {images.map((imgSrc, index) => {
        const trigger = ({ open }) => {
          const mask = (
            <div
              style={{
                background: 'rgba(0,0,0,.6)',
                color: '#fff',
                height: '100%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
              }}
              onClick={open}
            >
              <span>
                <BrowseIcon size="16px" name={'browse'} /> 预览
              </span>
            </div>
          );
          return (
            <Image
              alt={'test'}
              src={imgSrc}
              overlayContent={mask}
              overlayTrigger="hover"
              fit="contain"
              style={{
                width: 160,
                height: 160,
                border: '4px solid var(--td-bg-color-secondarycontainer)',
                borderRadius: 'var(--td-radius-medium)',
                backgroundColor: '#fff',
              }}
            />
          );
        };
        return <ImageViewer key={imgSrc} trigger={trigger} images={images} defaultIndex={index} />;
      })}
    </Space>
  );
}

                  ===SPLIT===组建:<ImageViewer/>
                  使用描述：通过操作栏相关按钮，点击查看图片。
                  代码示例：import React from 'react';
import { Image, ImageViewer, Popup, Space } from 'tdesign-react';
import { BrowseIcon, EllipsisIcon } from 'tdesign-icons-react';

const imgH = 'https://tdesign.gtimg.com/demo/demo-image-3.png';
const imgV = 'https://tdesign.gtimg.com/demo/demo-image-2.png';
const img = 'https://tdesign.gtimg.com/demo/demo-image-1.png';
const listItemStyle = {
  display: 'block',
  borderRadius: 'var(--td-radius-default)',
  height: '28px',
  lineHeight: '20px',
  cursor: 'pointer',
  padding: '3px 5px',
  color: 'var(--td-text-color-primary)',
  transition: 'background-color .2s cubic-bezier(.38,0,.24,1)',
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  '--ripple-color': 'var(--td-bg-color-container-active)',
};
const ImageViewerIconList = ({ list, onClick }) => (
  <ul
    style={{
      padding: '2px',
    }}
  >
    {list.map((it, index) => (
      <li key={index} style={listItemStyle} onClick={() => onClick(it, index)}>
        <span>{it.label}</span>
      </li>
    ))}
  </ul>
);
export default function BasicImageViewer() {
  const images = [img, imgH, imgV];
  const trigger = ({ open }) => {
    const listCommon = (
      <ImageViewerIconList
        onClick={open}
        list={images.map((i, index) => ({
          label: `图片${index}`,
        }))}
      />
    );
    const mask = (
      <div
        style={{
          background: 'rgba(0,0,0,.6)',
          color: '#fff',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
        onClick={open}
      >
        <span>
          <BrowseIcon size="16px" name={'browse'} /> 预览
        </span>
      </div>
    );
    return (
      <div
        style={{
          position: 'relative',
          overflow: 'hidden',
          boxSizing: 'content-box',
          border: '4px solid var(--td-bg-color-secondarycontainer)',
          borderRadius: 'var(--td-radius-medium)',
        }}
      >
        <Image
          alt={'test'}
          src={img}
          overlayContent={mask}
          overlayTrigger="hover"
          fit="contain"
          style={{
            width: 240,
            height: 240,
            backgroundColor: '#fff',
          }}
        />
        <div
          style={{
            width: '100%',
            height: '56px',
            padding: '0 16px',
            lineHeight: '56px',
            position: 'absolute',
            bottom: '0',
            color: 'var(--td-text-color-anti)',
            backgroundImage: 'linear-gradient(0deg, rgba(0, 0, 0, .4) 0%, rgba(0, 0, 0, 0) 100%)',
            display: 'flex',
            boxSizing: 'border-box',
            zIndex: 1,
          }}
        >
          <span
            style={{
              flex: 1,
            }}
          >
            相册封面标题
          </span>
          <span
            style={{
              cursor: 'pointer',
            }}
          >
            <BrowseIcon size={16} onClick={open} />
            <Popup
              trigger="click"
              content={listCommon}
              placement="right-bottom"
              overlayStyle={{
                width: '140px',
                padding: '6px',
              }}
              destroyOnClose
            >
              <EllipsisIcon size={16} />
            </Popup>
          </span>
        </div>
      </div>
    );
  };
  return (
    <Space breakLine size={16}>
      <ImageViewer trigger={trigger} images={images} title="相册封面标题" />
    </Space>
  );
}

                  ===SPLIT===组建:<ImageViewer/>
                  使用描述：开启 isSvg 配置，可将SVG插入Shadow不受外部样式干扰，可以支持到SVG内的链接等交互，有些SVG图片背景会是完全透明，使用时再展示的盒子处理即可
                  代码示例：import React from 'react';
import { ImageViewer, Image } from 'tdesign-react';
import { BrowseIcon } from 'tdesign-icons-react';

const img = [
  {
    mainImage: 'https://tdesign.gtimg.com/demo/tdesign-logo.svg',
    isSvg: true,
  },
  {
    mainImage: 'https://tdesign.gtimg.com/demo/demo-image-1.png',
  },
];
const Svg = () => {
  const trigger = ({ open }) => {
    const mask = (
      <div
        style={{
          background: 'rgba(0,0,0,.6)',
          color: '#fff',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
        onClick={open}
      >
        <span>
          <BrowseIcon size="16px" name={'browse'} /> 预览
        </span>
      </div>
    );
    return (
      <Image
        alt={'test'}
        src={img[0].mainImage}
        overlayContent={mask}
        overlayTrigger="hover"
        fit="contain"
        style={{
          width: 160,
          height: 160,
          border: '4px solid var(--td-bg-color-secondarycontainer)',
          borderRadius: 'var(--td-radius-medium)',
          backgroundColor: '#fff',
        }}
      />
    );
  };
  return (
    <div>
      <ImageViewer trigger={trigger} images={img} />
    </div>
  );
};
export default Svg;

                  组建:<List/>
                  使用描述：仅包含简单文字的列表。对较简单的信息进行陈列时使用。
                  代码示例：import React from 'react';
import { List, Link, Space } from 'tdesign-react';

const { ListItem } = List;
export default function BasicList() {
  return (
    <List>
      <ListItem
        action={
          <Space>
            <Link theme="primary" hover="color">
              操作1
            </Link>
            <Link theme="primary" hover="color">
              操作2
            </Link>
            <Link theme="primary" hover="color">
              操作3
            </Link>
          </Space>
        }
      >
        列表内容的描述性文字
      </ListItem>
      <ListItem
        action={
          <Space>
            <Link theme="primary" hover="color">
              操作1
            </Link>
            <Link theme="primary" hover="color">
              操作2
            </Link>
            <Link theme="primary" hover="color">
              操作3
            </Link>
          </Space>
        }
      >
        列表内容的描述性文字
      </ListItem>
    </List>
  );
}

                  ===SPLIT===组建:<List/>
                  使用描述：仅包含主要文字及描述性文字的列表。对较复杂的，包含多个字段或内容的信息进行展示时使用。
                  代码示例：import React from 'react';
import { List } from 'tdesign-react';

const { ListItem, ListItemMeta } = List;
export default function BasicList() {
  const listData = [
    {
      id: 1,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 2,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 3,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 4,
      content: '列表内容列表内容列表内容',
    },
  ];
  return (
    <List>
      {listData.map((item) => (
        <ListItem key={item.id}>
          <ListItemMeta title="列表主内容" description={item.content} />
        </ListItem>
      ))}
    </List>
  );
}

                  ===SPLIT===组建:<List/>
                  使用描述：包含简单图文的列表。需使用图片和文字结合展示信息。
                  代码示例：import React from 'react';
import { List } from 'tdesign-react';

const { ListItem, ListItemMeta } = List;
export default function BasicList() {
  const avatarUrl = 'https://tdesign.gtimg.com/list-icon.png';
  const listData = [
    {
      id: 1,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 2,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 3,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 4,
      content: '列表内容列表内容列表内容',
    },
  ];
  return (
    <List size="small">
      {listData.map((item) => (
        <ListItem key={item.id}>
          <ListItemMeta image={avatarUrl} title="列表主内容" description="列表内容列表内容列表内容" />
        </ListItem>
      ))}
    </List>
  );
}

                  ===SPLIT===组建:<List/>
                  使用描述：包含操作的列表。需要对所在列进行操作时使用。
                  代码示例：import React from 'react';
import { List, Space, Link, Button } from 'tdesign-react';
import { EditIcon, DownloadIcon } from 'tdesign-icons-react';

const { ListItem, ListItemMeta } = List;
const avatarUrl = 'https://tdesign.gtimg.com/site/avatar.jpg';
export default function BasicList() {
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <List>
        <ListItem
          action={
            <Space>
              <Link theme="primary" hover="color">
                操作1
              </Link>
              <Link theme="primary" hover="color">
                操作2
              </Link>
              <Link theme="primary" hover="color">
                操作3
              </Link>
            </Space>
          }
        >
          <ListItemMeta image={avatarUrl} title="列表主内容" description="列表内容列表内容" />
        </ListItem>
        <ListItem
          action={
            <Space>
              <Link theme="primary" hover="color">
                操作1
              </Link>
              <Link theme="primary" hover="color">
                操作2
              </Link>
              <Link theme="primary" hover="color">
                操作3
              </Link>
            </Space>
          }
        >
          <ListItemMeta image={avatarUrl} title="列表主内容" description="列表内容列表内容" />
        </ListItem>
      </List>

      <List split>
        <ListItem
          action={
            <Space>
              <Button variant="text" shape="square">
                <EditIcon />
              </Button>
              <Button variant="text" shape="square">
                <DownloadIcon />
              </Button>
            </Space>
          }
        >
          <ListItemMeta image={avatarUrl} title="列表主内容" description="列表内容列表内容" />
        </ListItem>
        <ListItem
          action={
            <Space>
              <Button variant="text" shape="square">
                <EditIcon />
              </Button>
              <Button variant="text" shape="square">
                <DownloadIcon />
              </Button>
            </Space>
          }
        >
          <ListItemMeta image={avatarUrl} title="列表主内容" description="列表内容列表内容" />
        </ListItem>
      </List>
    </Space>
  );
}

                  ===SPLIT===组建:<List/>
                  使用描述：提供大、中（默认）、小三种尺寸。
                  代码示例：import React from 'react';
import { List } from 'tdesign-react';

const { ListItem } = List;
export default function BasicList() {
  const listData = [
    {
      id: 1,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 2,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 3,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 4,
      content: '列表内容列表内容列表内容',
    },
  ];
  return (
    <div className="tdesign-demo-item__body tdesign-demo-item__body--list">
      <h4>尺寸-小</h4>
      <List size="small">
        {listData.map((item) => (
          <ListItem key={item.id}>{item.content}</ListItem>
        ))}
      </List>

      <h4
        style={{
          marginTop: 32,
        }}
      >
        尺寸-中（默认）
      </h4>
      <List>
        {listData.map((item) => (
          <ListItem key={item.id}>{item.content}</ListItem>
        ))}
      </List>

      <h4
        style={{
          marginTop: 32,
        }}
      >
        尺寸-大
      </h4>
      <List size="large">
        {listData.map((item) => (
          <ListItem key={item.id}>{item.content}</ListItem>
        ))}
      </List>
    </div>
  );
}

                  ===SPLIT===组建:<List/>
                  使用描述：当列表内容较多时，可以使用斑马纹样式，便于用户获取信息。
                  代码示例：import React from 'react';
import { List } from 'tdesign-react';

const { ListItem } = List;
export default function BasicList() {
  const listData = [
    {
      id: 1,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 2,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 3,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 4,
      content: '列表内容列表内容列表内容',
    },
  ];
  return (
    <List stripe={true} split={false}>
      {listData.map((item) => (
        <ListItem key={item.id}>{item.content}</ListItem>
      ))}
    </List>
  );
}

                  ===SPLIT===组建:<List/>
                  使用描述：当列表需要展示头部或尾部信息时，可以通过header或footer来配置。
                  代码示例：import React from 'react';
import { List } from 'tdesign-react';

const { ListItem } = List;
export default function BasicList() {
  const listData = [
    {
      id: 1,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 2,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 3,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 4,
      content: '列表内容列表内容列表内容',
    },
  ];
  return (
    <>
      <List header="这里是 Header" footer="这里是 Footer">
        {listData.map((item) => (
          <ListItem key={item.id}>{item.content}</ListItem>
        ))}
      </List>
      <div
        style={{
          marginBottom: '16px',
        }}
      ></div>
      <List header={<p>通过 TNode 插入的 Header</p>} footer={<p>通过 TNode 插入的 Footer</p>}>
        {listData.map((item) => (
          <ListItem key={item.id}>{item.content}</ListItem>
        ))}
      </List>
    </>
  );
}

                  ===SPLIT===组建:<List/>
                  使用描述：当列表较长时，可以配置滚动条及事件来进行滚动处理
                  代码示例：import React, { useState, useEffect } from 'react';
import { List } from 'tdesign-react';

const { ListItem, ListItemMeta } = List;
export default function BasicList() {
  const [listData, setListData] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [pageNum, setPageNum] = useState(1);
  const pageSize = 5;
  const dataSource = [];
  const total = 30;
  for (let i = 0; i < total; i++) {
    dataSource.push({
      id: i,
      content: '列表内容列表内容列表内容',
      icon: 'https://tdesign.gtimg.com/list-icon.png',
      title: '列表主内容',
    });
  }
  const height = 300;
  const style = {
    height: `${height}px`,
    overflow: 'auto',
  };

  // 模拟请求
  const fetchData = async (pageInfo) => {
    if (isLoading) return;
    setIsLoading(true);
    try {
      setTimeout(() => {
        const { pageNum, pageSize } = pageInfo;
        const newDataSource = dataSource.slice((pageNum - 1) * pageSize, pageNum * pageSize);
        setListData(listData.concat(newDataSource));
        setPageNum(pageNum);
        setIsLoading(false);
      }, 300);
    } catch (err) {
      setListData([]);
    }
  };
  const handleScroll = ({ scrollBottom }) => {
    if (!scrollBottom && listData.length < total) {
      fetchData({
        pageNum: pageNum + 1,
        pageSize,
      });
    }
  };
  useEffect(() => {
    fetchData({
      pageNum,
      pageSize,
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return (
    <List asyncLoading={isLoading ? 'loading' : ''} size="small" style={style} onScroll={handleScroll}>
      {listData.map((item) => (
        <ListItem key={item.id}>
          <ListItemMeta image={item.icon} title={item.title} description={item.content} />
        </ListItem>
      ))}
    </List>
  );
}

                  ===SPLIT===组建:<List/>
                  使用描述：支持开启虚拟滚动，适用于一次性加载长列表的场景
                  代码示例：import React, { useEffect, useRef, useState } from 'react';
import { List, Space, Button } from 'tdesign-react';

const { ListItem, ListItemMeta } = List;
const imageUrl = 'https://tdesign.gtimg.com/site/avatar.jpg';
const VirtualScroll = () => {
  const [data, setData] = useState([]); // 存储列表数据
  const listRef = useRef(null);
  const handleScroll = () => {
    // scroll 属性需要设置 rowHeight 参数
    listRef.current?.scrollTo({
      // list 不存在嵌套，key 与 index 相同
      index: 30,
      behavior: 'smooth',
    });
  };
  useEffect(() => {
    const list = [];
    for (let i = 0; i < 3000; i++) {
      list.push({
        content: `第${i + 1}个列表内容的描述性文字`,
      });
    }
    setData(list);
  }, []);
  return (
    <Space
      style={{
        width: '100%',
      }}
      direction="vertical"
    >
      <List
        ref={listRef}
        style={{
          height: '300px',
        }}
        scroll={{
          type: 'virtual',
          rowHeight: 80,
          bufferSize: 10,
          threshold: 10,
        }}
      >
        {data.map((item, index) => (
          <ListItem key={index}>
            <ListItemMeta image={imageUrl} title="列表标题" description={item.content} />
          </ListItem>
        ))}
      </List>
      <Space>
        <Button onClick={handleScroll}>滚动到指定节点</Button>
      </Space>
    </Space>
  );
};
export default VirtualScroll;

                  ===SPLIT===组建:<List/>
                  使用描述：斑马纹区分列表 
                  代码示例：import React from 'react';
import { List } from 'tdesign-react';

const { ListItem } = List;
export default function BasicList() {
  const listData = [
    {
      id: 1,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 2,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 3,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 4,
      content: '列表内容列表内容列表内容',
    },
  ];
  return (
    <List stripe={true} split={false}>
      {listData.map((item) => (
        <ListItem key={item.id}>{item.content}</ListItem>
      ))}
    </List>
  );
}

                  ===SPLIT===组建:<List/>
                  使用描述：异步加载的列表 
                  代码示例：import React, { useState } from 'react';
import { List, Radio } from 'tdesign-react';

const { ListItem } = List;
export default function BasicList() {
  const [asyncLoading, setAsyncLoading] = useState('');
  const listData = [
    {
      id: 1,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 2,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 3,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 4,
      content: '列表内容列表内容列表内容',
    },
  ];
  const handleAsyncLoading = (val) => {
    if (val === 'loading-custom') {
      setAsyncLoading(
        <div
          style={{
            textAlign: 'center',
            marginTop: 12,
          }}
        >
          {' '}
          没有更多数据了{' '}
        </div>,
      );
    } else {
      setAsyncLoading(val);
    }
  };
  const onLoadMore = ({ e }) => {
    console.log(e);
    handleAsyncLoading('loading');
  };
  return (
    <>
      <Radio.Group size="large" onChange={(value) => handleAsyncLoading(value)}>
        <Radio.Button value="load-more">加载更多</Radio.Button>
        <Radio.Button value="loading">加载中</Radio.Button>
        <Radio.Button value="loading-custom">自定义加载更多</Radio.Button>
        <Radio.Button value="">加载完成</Radio.Button>
      </Radio.Group>
      <div
        style={{
          marginBottom: '16px',
        }}
      ></div>
      <List
        asyncLoading={asyncLoading}
        onLoadMore={({ e }) =>
          onLoadMore({
            e,
          })
        }
      >
        {listData.map((item) => (
          <ListItem key={item.id}>{item.content}</ListItem>
        ))}
      </List>
    </>
  );
}

                  ===SPLIT===组建:<List/>
                  使用描述：带头部及尾部的列表 
                  代码示例：import React from 'react';
import { List } from 'tdesign-react';

const { ListItem } = List;
export default function BasicList() {
  const listData = [
    {
      id: 1,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 2,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 3,
      content: '列表内容列表内容列表内容',
    },
    {
      id: 4,
      content: '列表内容列表内容列表内容',
    },
  ];
  return (
    <>
      <List header="这里是 Header" footer="这里是 Footer">
        {listData.map((item) => (
          <ListItem key={item.id}>{item.content}</ListItem>
        ))}
      </List>
      <div
        style={{
          marginBottom: '16px',
        }}
      ></div>
      <List header={<p>通过 TNode 插入的 Header</p>} footer={<p>通过 TNode 插入的 Footer</p>}>
        {listData.map((item) => (
          <ListItem key={item.id}>{item.content}</ListItem>
        ))}
      </List>
    </>
  );
}

                  ===SPLIT===组建:<List/>
                  使用描述：带滚动事件的列表 
                  代码示例：import React, { useState, useEffect } from 'react';
import { List } from 'tdesign-react';

const { ListItem, ListItemMeta } = List;
export default function BasicList() {
  const [listData, setListData] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [pageNum, setPageNum] = useState(1);
  const pageSize = 5;
  const dataSource = [];
  const total = 30;
  for (let i = 0; i < total; i++) {
    dataSource.push({
      id: i,
      content: '列表内容列表内容列表内容',
      icon: 'https://tdesign.gtimg.com/list-icon.png',
      title: '列表主内容',
    });
  }
  const height = 300;
  const style = {
    height: `${height}px`,
    overflow: 'auto',
  };

  // 模拟请求
  const fetchData = async (pageInfo) => {
    if (isLoading) return;
    setIsLoading(true);
    try {
      setTimeout(() => {
        const { pageNum, pageSize } = pageInfo;
        const newDataSource = dataSource.slice((pageNum - 1) * pageSize, pageNum * pageSize);
        setListData(listData.concat(newDataSource));
        setPageNum(pageNum);
        setIsLoading(false);
      }, 300);
    } catch (err) {
      setListData([]);
    }
  };
  const handleScroll = ({ scrollBottom }) => {
    if (!scrollBottom && listData.length < total) {
      fetchData({
        pageNum: pageNum + 1,
        pageSize,
      });
    }
  };
  useEffect(() => {
    fetchData({
      pageNum,
      pageSize,
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return (
    <List asyncLoading={isLoading ? 'loading' : ''} size="small" style={style} onScroll={handleScroll}>
      {listData.map((item) => (
        <ListItem key={item.id}>
          <ListItemMeta image={item.icon} title={item.title} description={item.content} />
        </ListItem>
      ))}
    </List>
  );
}

                  组建:<Loading/>
                  使用描述：加载过程中只有图标显示。适用于打开页面或操作完成后模块内等待刷新的加载场景。
                  代码示例：import React from 'react';
import { Loading } from 'tdesign-react';

export default function BaseLoadingExample() {
  return <Loading></Loading>;
}

                  ===SPLIT===组建:<Loading/>
                  使用描述：加载过程中有文字显示。适用于打开页面或操作完成后模块内等待刷新的加载场景。
                  代码示例：import React from 'react';
import { Loading } from 'tdesign-react';

export default function TextExample() {
  return <Loading loading={true} text="静态文字加载中..." indicator={false}></Loading>;
}

                  ===SPLIT===组建:<Loading/>
                  使用描述：加载过程中有文字和图标共同显示。适用于打开页面或操作完成后页面内等待刷新的加载场景。
                  代码示例：import React from 'react';
import { Loading } from 'tdesign-react';

export default function IconTextExample() {
  return <Loading loading={true} text="拼命加载中..." size="small"></Loading>;
}

                  ===SPLIT===组建:<Loading/>
                  使用描述：小尺寸适用于组件内加载场景，中尺寸适用于容器如卡片、表格等区域的加载场景，大尺寸适用于页面全屏加载场景。
                  代码示例：import React from 'react';
import { Loading, Space } from 'tdesign-react';

export default function LoadingSize() {
  return (
    <Space direction="vertical">
      <Loading text="加载中...（小）" loading size="small"></Loading>
      <Loading text="加载中...（中）" loading size="medium"></Loading>
      <Loading text="加载中...（大）" loading size="large"></Loading>
    </Space>
  );
}

                  ===SPLIT===组建:<Loading/>
                  使用描述：Loading 组件可以作为容器包裹需要显示加载状态的内容。
                  代码示例：import React, { useState } from 'react';
import { Loading, Button, Space } from 'tdesign-react';

export default function WrapLoading() {
  const [loading, setLoading] = useState(true);
  return (
    <Space direction="vertical">
      <div
        style={{
          width: 170,
        }}
      >
        <Loading size="small" loading={loading} showOverlay>
          <div>this is loading component</div>
          <div>this is loading component</div>
          <div>this is loading component</div>
          <div>this is loading component</div>
          <div>this is loading component</div>
        </Loading>
      </div>
      <Space>
        <Button size="small" onClick={() => setLoading(true)}>
          加载中
        </Button>
        <Button size="small" onClick={() => setLoading(false)}>
          加载完成
        </Button>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Loading/>
                  使用描述：设置最短延迟响应时间，低于响应时间的操作不显示加载状态，在作为包裹元素场景有效。
                  代码示例：import React, { useEffect, useState } from 'react';
import { Loading, Button, Space } from 'tdesign-react';

export default function LoadingDelay() {
  const [data, setData] = useState('');
  const [loading, setLoading] = useState(false);
  const loadingData = (time) => {
    setLoading(true);
    setData('');
    const timer = setTimeout(() => {
      setLoading(false);
      setData('数据加载完成，短时间的数据加载并未出现 loading');
      clearTimeout(timer);
    }, time || 100);
  };
  useEffect(() => {
    loadingData();
  }, []);
  return (
    <Space direction="vertical">
      <div>
        <Loading delay={500} size="small" loading={loading}></Loading>
        {data ? <div>{`loading 作为独立元素：${data}`}</div> : null}
      </div>

      <div>
        <Loading loading={loading} delay={500} size="small" showOverlay>
          <div>{data ? `loading 作为包裹元素：${data}` : ''}</div>
        </Loading>
      </div>

      <div className="tdesign-demo-block-row">
        <Button onClick={() => loadingData()} size="small">
          快速重新加载数据（无loading）
        </Button>
        <Button onClick={() => loadingData(1000)} size="small">
          慢速重新加载数据
        </Button>
      </div>
    </Space>
  );
}

                  ===SPLIT===组建:<Loading/>
                  使用描述：全屏展示加载状态，阻止用户操作。
                  代码示例：import React, { useState } from 'react';
import { Switch, Loading } from 'tdesign-react';

export default function LoadingFullscreen() {
  const [checked, setChecked] = useState(false);
  const [loading, setLoading] = useState(false);
  const onChange = (value) => {
    setChecked(value);
    setLoading(value);
    if (value)
      setTimeout(() => {
        setChecked(false);
        setLoading(false);
      }, 2000);
  };
  return (
    <>
      <Loading loading={loading} fullscreen preventScrollThrough={true} text="加载中"></Loading>
      Loading state:
      <Switch value={checked} onChange={onChange} />
    </>
  );
}

                  ===SPLIT===组建:<Loading/>
                  使用描述：函数方式调用 
                  代码示例：import React from 'react';
import { loading, Button } from 'tdesign-react';

export default function Service() {
  const handleFullscreen = () => {
    const loadInstance = loading(true);
    setTimeout(() => loadInstance.hide(), 1000);
  };
  const handleAttach = () => {
    const loadInstance = loading({
      attach: () => document.querySelector('#loading-service'),
    });
    setTimeout(() => loadInstance.hide(), 1000);
  };
  return (
    <>
      <div
        id="loading-service"
        style={{
          width: '100%',
          height: '60px',
          textAlign: 'center',
          lineHeight: '60px',
          position: 'relative',
        }}
      >
        我是service的容器
      </div>

      <div>
        <Button
          onClick={handleFullscreen}
          style={{
            marginRight: 20,
          }}
        >
          服务加载方式（全屏）
        </Button>
        <Button onClick={handleAttach}>服务加载方式（局部）</Button>
      </div>
    </>
  );
}

                  组建:<Progress/>
                  使用描述：以线形表示进度的组件，可以选择性地配有文字或图标补充显示进度和状态。多用于信息量较为丰富的情况。
                  代码示例：import React, { useState, useEffect } from 'react';
import { Progress, Space } from 'tdesign-react';

export default function LineProgress() {
  const [percent, setPercent] = useState(0);
  useEffect(() => {
    const timer = setInterval(() => setPercent((percent) => (percent % 100) + 10), 1000);
    return () => clearInterval(timer);
  }, []);
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <h3>默认在线形外展示进度和状态</h3>
      <div>默认样式</div>
      <Progress percentage={percent}></Progress>

      <div>进度被中断</div>
      <Progress status={'warning'} percentage={percent}></Progress>

      <div>进度状态发生重大错误</div>
      <Progress status={'error'} percentage={percent}></Progress>

      <div>进度正常更新</div>
      <Progress status={'active'} percentage={percent}></Progress>

      <div>不显示数字</div>
      <Progress label={false} percentage={percent}></Progress>

      <div>自定义内容</div>
      <Progress label={<div>自定义文本</div>} percentage={percent}></Progress>

      <div>自定义颜色与高度</div>
      <Progress strokeWidth={30} color={'#00f'} trackColor={'#0f0'} percentage={percent}></Progress>

      <div>进度条渐变色</div>
      <Progress color={['#f00', '#0ff', '#f0f']} percentage={percent}></Progress>
      <Progress
        color={{
          '0%': '#f00',
          '100%': '#0ff',
        }}
        trackColor={'#0f0'}
        percentage={percent}
      ></Progress>
      <Progress
        strokeWidth={30}
        color={{
          direction: 'to right',
          from: '#f00',
          to: '#0ff',
        }}
        percentage={percent}
      ></Progress>

      <h3>可以在线形内展示进度信息</h3>
      <Space
        direction="vertical"
        style={{
          width: '100%',
        }}
      >
        <div>默认样式</div>
        <Progress theme="plump" percentage={30} />
        <div>进度0-10%时数字数字位置出现在目前进度的右边区域</div>
        <Progress theme="plump" percentage={5} />
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Progress/>
                  使用描述：以线形表示进度的组件，环内可选择性地配有文字或图标补充显示进度和状态。多用于需要强调进度百分比的情况。
                  代码示例：import React, { useState, useEffect } from 'react';
import { Progress, Space } from 'tdesign-react';

const commonStyle = {
  textAlign: 'center',
};
export default function LineProgress() {
  const [percent, setPercent] = useState(0);
  useEffect(() => {
    const timer = setInterval(() => setPercent((percent) => (percent % 100) + 10), 1000);
    return () => clearInterval(timer);
  }, []);
  return (
    <Space direction="vertical" size="large">
      <Space style={commonStyle}>
        <Space direction="vertical">
          <div>默认样式</div>
          <Progress theme={'circle'} percentage={percent}></Progress>
        </Space>
        <Space direction="vertical">
          <div>不显示数字</div>
          <Progress theme={'circle'} label={false} percentage={percent}></Progress>
        </Space>
        <Space direction="vertical">
          <div>自定义内容</div>
          <Progress theme={'circle'} label={<div>75 day</div>} percentage={percent}></Progress>
        </Space>
      </Space>

      <Space style={commonStyle}>
        <Space direction="vertical">
          <div>进度完成</div>
          <Progress theme={'circle'} status={'success'} percentage={100}></Progress>
        </Space>
        <Space direction="vertical">
          <div>进度发生错误</div>
          <Progress theme={'circle'} status={'error'} percentage={percent}></Progress>
        </Space>
        <Space direction="vertical">
          <div>进度被中断</div>
          <Progress theme={'circle'} status={'warning'} percentage={percent}></Progress>
        </Space>
        <Space direction="vertical">
          <div>自定义颜色</div>
          <Progress
            theme={'circle'}
            status={'error'}
            color={'#00f'}
            trackColor={'#0f0'}
            percentage={percent}
          ></Progress>
        </Space>
      </Space>

      <Space align="center" style={commonStyle}>
        <Space direction="vertical">
          <div>小尺寸</div>
          <Progress theme={'circle'} size={'small'} percentage={percent}></Progress>
        </Space>
        <Space direction="vertical">
          <div>默认尺寸</div>
          <Progress theme={'circle'} percentage={percent}></Progress>
        </Space>
        <Space direction="vertical">
          <div>大尺寸</div>
          <Progress theme={'circle'} size={'large'} percentage={percent}></Progress>
        </Space>
        <Space direction="vertical">
          <div>自定义尺寸</div>
          <Progress theme={'circle'} percentage={percent} strokeWidth={50}></Progress>
        </Space>
      </Space>
    </Space>
  );
}

                  组建:<Skeleton/>
                  使用描述：最简单的骨架屏效果。
                  代码示例：import React, { useState } from 'react';
import { Skeleton, Switch } from 'tdesign-react';

const style = {
  'mb-20': {
    marginBottom: '20px',
  },
  't-skeleton-demo-paragraph': {
    lineHeight: '25px',
  },
};
export default function BasicSkeleton() {
  const [checked, setChecked] = useState(true);
  const onChange = (value) => {
    console.log('value', value);
    setChecked(value);
  };
  return (
    <div>
      <div>
        <Switch style={style['mb-20']} value={checked} onChange={onChange}></Switch>
      </div>
      <div>
        <Skeleton loading={checked}>
          <div style={style['t-skeleton-demo-paragraph']}>
            <p>
              骨架屏组件，是指当网络较慢时，在页面真实数据加载之前，给用户展示出页面的大致结构。
              一方面让用户对页面有一定的心理预期，另一方面可以改善长期停留在空白屏给用户带来的枯燥和不适感。它可以为用户提供更好视觉效果和使用体验。
            </p>
          </div>
        </Skeleton>
      </div>
    </div>
  );
}

                  ===SPLIT===组建:<Skeleton/>
                  使用描述：提供渐变和闪烁两种动画效果。
                  代码示例：import React from 'react';
import { Skeleton } from 'tdesign-react';

const animations = [
  {
    label: '渐变加载动画',
    value: 'gradient',
  },
  {
    label: '闪烁加载动画',
    value: 'flashed',
  },
];
export default function AnimationSkeleton() {
  return (
    <div className="t-skeleton-demo">
      {animations.map((animation, index) => (
        <div className="t-skeleton-demo-card" key={`animation-${index}`}>
          <div className="header">{animation.label}</div>
          <div className="content">
            <Skeleton animation={animation.value}></Skeleton>
          </div>
        </div>
      ))}
    </div>
  );
}

                  ===SPLIT===组建:<Skeleton/>
                  使用描述：设置最短延迟响应时间，低于响应时间的操作不显示加载状态。
                  代码示例：import React, { useState } from 'react';
import { Skeleton, Switch } from 'tdesign-react';

const style = {
  'mb-20': {
    marginBottom: '20px',
  },
  't-skeleton-demo-paragraph': {
    lineHeight: '25px',
  },
};
export default function BasicSkeleton() {
  const [checked, setChecked] = useState(true);
  const onChange = (value) => {
    console.log('value', value);
    setChecked(value);
  };
  return (
    <div>
      <div>
        <Switch style={style['mb-20']} value={checked} onChange={onChange}></Switch>
      </div>
      <div>
        <Skeleton loading={checked} delay={1500} animation="flashed">
          <div style={style['t-skeleton-demo-paragraph']}>
            <p>设置最短延迟响应时间，低于响应时间的操作不显示加载状态。</p>
          </div>
        </Skeleton>
      </div>
    </div>
  );
}

                  ===SPLIT===组建:<Skeleton/>
                  使用描述：可以通过 theme 属性快速定义不同主题风格的骨架屏。
                  代码示例：import React from 'react';
import { Skeleton } from 'tdesign-react';

const themes = [
  {
    label: '文本',
    value: 'text',
  },
  {
    label: '头像',
    value: 'avatar',
  },
  {
    label: '段落',
    value: 'paragraph',
  },
  {
    label: '头像描述',
    value: 'avatar-text',
  },
  {
    label: '选项卡',
    value: 'tab',
  },
  {
    label: '文章',
    value: 'article',
  },
];
export default function ThemeSkeleton() {
  return (
    <div className="t-skeleton-demo">
      {themes.map((theme, index) => (
        <div className="t-skeleton-demo-card" key={`animation-${index}`}>
          <div className="header">{theme.label}</div>
          <div className="content">
            <Skeleton theme={theme.value}></Skeleton>
          </div>
        </div>
      ))}
    </div>
  );
}

                  ===SPLIT===组建:<Skeleton/>
                  使用描述：包含图片、文字、按钮、输入框、头像、标签等多种元素组合在一起的占位效果。
                  代码示例：import React from 'react';
import { Skeleton } from 'tdesign-react';

const style = {
  't-skeleton-demo': {
    width: '100%',
  },
  't-skeleton-demo-list-li': {
    padding: '16px 0',
    display: 'flex',
  },
  't-skeleton-demo-list-avatar': {
    display: 'inline-block',
    height: '56px',
    margin: '6px 16px 6px 0px',
    flexShrink: '0',
  },
  't-skeleton-demo-list-paragraph': {
    display: 'inline-block',
    width: '90%',
  },
  'row-col-content': {
    width: '100%',
    textAlign: 'center',
  },
  'row-col-content__header': {
    padding: '10px',
    borderBottom: '1px solid #ccc',
  },
  'row-col-content__content': {
    padding: '10px',
    height: '200px',
  },
};
const rowCol = [
  [1, 1, 1].map(() => ({
    type: 'rect',
    content: 'image',
    width: '33%',
    height: '180px',
  })),
  [
    {
      type: 'circle',
      size: '50px',
    },
    {
      type: 'rect',
      margin: '20px 0',
      width: 'calc(100% - 170px)',
      height: '30px',
    },
    {
      type: 'rect',
      marginLeft: '20px',
      width: '80px',
      height: '30px',
      content: '确定',
    },
  ],
  1,
  1,
  {
    type: 'text',
    width: '70%',
    margin: '0 0 16px 0',
  },
  {
    type: 'rect',
    width: '100%',
    height: '300px',
    content: (
      <div className="row-col-content">
        <h3 className="row-col-content__header">标题</h3>
        <div className="row-col-content__content">内容</div>
      </div>
    ),
  },
];
export default function AdvanceSkeleton() {
  return (
    <div style={style['t-skeleton-demo']}>
      <div className="t-skeleton-demo-card">
        <div className="header">组合成网页效果</div>
        <div className="content">
          <Skeleton rowCol={rowCol}></Skeleton>
        </div>
      </div>

      <div className="t-skeleton-demo-card">
        <div className="header">组合成列表效果</div>
        <div className="content">
          <ul style={style['t-skeleton-demo-list']}>
            {new Array(3).fill(0).map((_, index) => (
              <li key={index} style={style['t-skeleton-demo-list-li']}>
                <Skeleton style={style['t-skeleton-demo-list-avatar']} theme={'avatar'}></Skeleton>
                <Skeleton style={style['t-skeleton-demo-list-paragraph']} theme={'paragraph'}></Skeleton>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
}

                  组建:<Statistic/>
                  使用描述：当需要突出某个或某组数字或展示带描述的统计类数据时使用。
                  代码示例：import React from 'react';
import { Space, Statistic } from 'tdesign-react';

const BaseStatistic = () => (
  <Space size={100}>
    <Statistic title="Total Assets" value={82.76} unit="%" trend="increase" />
    <Statistic title="Total Assets" value={82.76} unit="USD" trend="increase" />
  </Space>
);
export default BaseStatistic;

                  ===SPLIT===组建:<Statistic/>
                  使用描述：通过 trend 设置组件的趋势状态，配合 trendPlacement 控制趋势展示的位置。
                  代码示例：import React from 'react';
import { Space, Statistic } from 'tdesign-react';

const TrendStatistic = () => (
  <Space size={100}>
    <Statistic title="Total Assets" value={82.76} unit="%" trend="increase" />
    <Statistic title="Total Assets" value={82.76} unit="%" trend="decrease" />
    <Statistic title="Total Assets" value={82.76} unit="%" trend="decrease" trendPlacement="right" />
  </Space>
);
export default TrendStatistic;

                  ===SPLIT===组建:<Statistic/>
                  使用描述：颜色风格默认提供 TDesign 风格的五种颜色值，也可以使用自定义色值。
                  代码示例：import React from 'react';
import { Space, Statistic } from 'tdesign-react';

const ColorStatistic = () => (
  <Space>
    <Statistic title="Total Assets" value={82.76} unit="%" trend="increase" color="black" />
    <Statistic title="Total Assets" value={82.76} unit="%" trend="increase" color="blue" />
    <Statistic title="Total Assets" value={82.76} unit="%" trend="increase" color="red" />
    <Statistic title="Total Assets" value={82.76} unit="%" trend="increase" color="orange" />
    <Statistic title="Total Assets" value={82.76} unit="%" trend="increase" color="green" />
  </Space>
);
export default ColorStatistic;

                  ===SPLIT===组建:<Statistic/>
                  使用描述：通过 prefix 和 suffix 插槽自定义。
                  代码示例：import React from 'react';
import { Space, Statistic } from 'tdesign-react';
import { ControlPlatformIcon, ArrowTriangleDownFilledIcon } from 'tdesign-icons-react';

const SlotStatistic = () => (
  <Space size={32}>
    <Statistic title="Total Assets" value={56.32} unit="%" prefix={<ControlPlatformIcon />}></Statistic>
    <Statistic title="Total Assets" value={176059} prefix="$" unit="%" trend="increase" />

    <Statistic
      title="Total Assets"
      value={62.58}
      unit="%"
      suffix={
        <ArrowTriangleDownFilledIcon
          style={{
            color: '#ee4d38',
          }}
        />
      }
    ></Statistic>
  </Space>
);
export default SlotStatistic;

                  ===SPLIT===组建:<Statistic/>
                  使用描述：通过 animation 配置动画的初始值和持续时间。使用 animationStart属性可以控制动画开始时刻。 如果有特殊需求时也可以通过 ref 获取实例，调用start进行控制。
                  代码示例：import React from 'react';
import { Space, Button, Statistic } from 'tdesign-react';

const AnimationStatistic = () => {
  const [start, setStart] = React.useState(false);
  const [value, setValue] = React.useState(56.32);
  const statisticRef = React.useRef(null);
  return (
    <Space direction="vertical">
      <Space>
        <Button onClick={() => setStart(true)}>Start</Button>
        <Button onClick={() => setValue(98.12)}>Update value</Button>
        <Button onClick={() => statisticRef.current?.start()}>refs</Button>
      </Space>
      <Statistic
        ref={statisticRef}
        title="Total Assets"
        suffix="%"
        value={value}
        animation={{
          valueFrom: 0,
          duration: 2000,
        }}
        decimalPlaces={2}
        animationStart={start}
      />
    </Space>
  );
};
export default AnimationStatistic;

                  ===SPLIT===组建:<Statistic/>
                  使用描述：通过 loading 可以控制数值的加载状态。
                  代码示例：import React from 'react';
import { Space, Switch, Statistic } from 'tdesign-react';

const LoadingStatistic = () => {
  const [loading, setLoading] = React.useState(true);
  return (
    <Space direction="vertical">
      <Switch value={loading} onChange={(value) => setLoading(value)} size="large" />
      <Statistic title="Downloads" value={123456} loading={loading} />
    </Space>
  );
};
export default LoadingStatistic;

                  ===SPLIT===组建:<Statistic/>
                  使用描述：组合使用 
                  代码示例：import React from 'react';
import { Space, Statistic, Card, Divider } from 'tdesign-react';
import { IconFont } from 'tdesign-icons-react';

const CombinationStatistic = () => {
  const iconStyle = {
    fontSize: '32px',
    color: 'var(--td-brand-color)',
    background: 'var(--td-brand-color-light)',
    borderRadius: 'var(--td-radius-medium)',
    padding: '12px',
  };
  const separator = (
    <Divider
      layout="vertical"
      style={{
        height: '100%',
      }}
    />
  );
  return (
    <Space size={100} breakLine>
      <Space align="center">
        <IconFont name="chart" style={iconStyle} />
        <Statistic title="Total Assets" value={82.76} unit="%" trend="increase" trendPlacement="right" />
      </Space>

      <Space align="center">
        <Statistic title="Total Assets" value={52.18} unit="%" trend="decrease" />
        <IconFont
          name="internet"
          style={{
            ...iconStyle,
            borderRadius: '50%',
          }}
        />
      </Space>

      <Card title="Yesterday traffic" headerBordered hoverShadow>
        <Space separator={separator}>
          <Statistic title="Voice duration" value={789} unit="minute" extra="the day before 9%" />
          <Statistic
            title="Total number of voice DAUs"
            value={188}
            color="red"
            extra={
              <Space direction="vertical" size={0}>
                <Space align="center" size={7}>
                  <div
                    style={{
                      width: '120px',
                    }}
                  >
                    the day before
                  </div>
                  <IconFont
                    name="arrow-up"
                    style={{
                      color: '#d54941',
                      fontSize: 'var(--td-font-size-body-large)',
                    }}
                  />
                  9%
                </Space>
                <Space align="center" size={7}>
                  <div
                    style={{
                      width: '120px',
                    }}
                  >
                    last week
                  </div>
                  <IconFont
                    name="arrow-down"
                    style={{
                      color: '#2ba471',
                      fontSize: 'var(--td-font-size-body-large)',
                    }}
                  />
                  9%
                </Space>
              </Space>
            }
          ></Statistic>
          <Statistic title="Total Assets" value={52.18} unit="%" trend="decrease" color="green" />
        </Space>
      </Card>
    </Space>
  );
};
export default CombinationStatistic;

                  组建:<Swiper/>
                  使用描述：轮播框组件最基本的使用
                  代码示例：import React from 'react';
import { Swiper } from 'tdesign-react';

const { SwiperItem } = Swiper;
export default function BasicSwiper() {
  return (
    <div className="tdesign-demo-block--swiper">
      <Swiper duration={300} interval={2000}>
        <SwiperItem>
          <div className="demo-item">1</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">2</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">3</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">4</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">5</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">6</div>
        </SwiperItem>
      </Swiper>
    </div>
  );
}

                  ===SPLIT===组建:<Swiper/>
                  使用描述：通过设置direction为vertical使轮播框在垂直方向上轮播，默认为horizontal。
                  代码示例：import React from 'react';
import { Swiper } from 'tdesign-react';

const { SwiperItem } = Swiper;
export default function BasicSwiper() {
  return (
    <div className="tdesign-demo-block--swiper">
      <Swiper
        direction={'vertical'}
        navigation={{
          showSlideBtn: 'never',
        }}
        height={280}
      >
        <SwiperItem>
          <div className="demo-item">1</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">2</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">3</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">4</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">5</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">6</div>
        </SwiperItem>
      </Swiper>
    </div>
  );
}

                  ===SPLIT===组建:<Swiper/>
                  使用描述：通过设置navigation中的placement属性值来控制导航器位置，可设置位于主体的内侧或是外侧。
                  代码示例：import React from 'react';
import { Swiper } from 'tdesign-react';

const { SwiperItem } = Swiper;
export default function BasicSwiper() {
  return (
    <div className="tdesign-demo-block--swiper">
      <Swiper
        navigation={{
          placement: 'outside',
        }}
      >
        <SwiperItem>
          <div className="demo-item">1</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">2</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">3</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">4</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">5</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">6</div>
        </SwiperItem>
      </Swiper>
    </div>
  );
}

                  ===SPLIT===组建:<Swiper/>
                  使用描述：通过设置navigation中的type属性值为fraction来控制导航器以分式的样式展示，默认为bars。
                  代码示例：import React from 'react';
import { Swiper } from 'tdesign-react';

const { SwiperItem } = Swiper;
export default function BasicSwiper() {
  return (
    <div className="tdesign-demo-block--swiper">
      <Swiper
        navigation={{
          type: 'fraction',
        }}
      >
        <SwiperItem>
          <div className="demo-item">1</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">2</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">3</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">4</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">5</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">6</div>
        </SwiperItem>
      </Swiper>
    </div>
  );
}

                  ===SPLIT===组建:<Swiper/>
                  使用描述：通过设置animation属性值为fade来控制轮播框以渐隐的样式展示，默认为slide。
                  代码示例：import React from 'react';
import { Swiper } from 'tdesign-react';

const { SwiperItem } = Swiper;
export default function BasicSwiper() {
  return (
    <div className="tdesign-demo-block--swiper">
      <Swiper animation={'fade'} height={280}>
        <SwiperItem>
          <div className="demo-item">1</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">2</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">3</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">4</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">5</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">6</div>
        </SwiperItem>
      </Swiper>
    </div>
  );
}

                  ===SPLIT===组建:<Swiper/>
                  使用描述：通过设置type属性值为card来控制导航器以卡片的样式展示。
                  代码示例：import React from 'react';
import { Swiper } from 'tdesign-react';

const { SwiperItem } = Swiper;
export default function BasicSwiper() {
  return (
    <div className="tdesign-demo-block--swiper">
      <Swiper type={'card'} height={280}>
        <SwiperItem>
          <div className="demo-item">1</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">2</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">3</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">4</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">5</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">6</div>
        </SwiperItem>
      </Swiper>
    </div>
  );
}

                  ===SPLIT===组建:<Swiper/>
                  使用描述：通过设置current属性值来控制轮播框播放哪一项，current起始值为0。
                  代码示例：import React, { useState } from 'react';
import { Swiper, Button, Space } from 'tdesign-react';

const { SwiperItem } = Swiper;
export default function BasicSwiper() {
  const [current, setCurrent] = useState(0);
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
      className="tdesign-demo-block--swiper"
    >
      <Swiper
        current={current}
        navigation={{
          showSlideBtn: 'never',
        }}
      >
        <SwiperItem>
          <div className="demo-item">1</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">2</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">3</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">4</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">5</div>
        </SwiperItem>
        <SwiperItem>
          <div className="demo-item">6</div>
        </SwiperItem>
      </Swiper>

      <Button
        size={'small'}
        onClick={() => {
          setCurrent(current + 2 > 6 ? 0 : current + 1);
        }}
      >
        跳转到第 {current + 2 >= 7 ? 1 : current + 2} 项
      </Button>
    </Space>
  );
}

                  ===SPLIT===组建:<Swiper/>
                  使用描述：通过设置navigation中的size属性值来控制轮播框导航器的大小。
                  代码示例：import React from 'react';
import { Swiper } from 'tdesign-react';

const { SwiperItem } = Swiper;
export default function BasicSwiper() {
  return (
    <>
      <div
        className="tdesign-demo-block--swiper"
        style={{
          width: '1000px',
        }}
      >
        <h3>large</h3>
        <Swiper
          navigation={{
            size: 'large',
          }}
        >
          <SwiperItem>
            <div className="demo-item demo-large">1</div>
          </SwiperItem>
          <SwiperItem>
            <div className="demo-item demo-large">2</div>
          </SwiperItem>
          <SwiperItem>
            <div className="demo-item demo-large">3</div>
          </SwiperItem>
          <SwiperItem>
            <div className="demo-item demo-large">4</div>
          </SwiperItem>
          <SwiperItem>
            <div className="demo-item demo-large">5</div>
          </SwiperItem>
          <SwiperItem>
            <div className="demo-item demo-large">6</div>
          </SwiperItem>
        </Swiper>
      </div>
      <div
        className="tdesign-demo-block--swiper"
        style={{
          width: '500px',
          marginTop: '20px',
        }}
      >
        <h3>small</h3>
        <Swiper
          navigation={{
            size: 'small',
          }}
        >
          <SwiperItem>
            <div className="demo-item demo-small">1</div>
          </SwiperItem>
          <SwiperItem>
            <div className="demo-item demo-small">2</div>
          </SwiperItem>
          <SwiperItem>
            <div className="demo-item demo-small">3</div>
          </SwiperItem>
          <SwiperItem>
            <div className="demo-item demo-small">4</div>
          </SwiperItem>
          <SwiperItem>
            <div className="demo-item demo-small">5</div>
          </SwiperItem>
          <SwiperItem>
            <div className="demo-item demo-small">6</div>
          </SwiperItem>
        </Swiper>
      </div>
    </>
  );
}

                  组建:<Table/>
                  使用描述：表格宽度模式有两种：fixed 和 auto，MDN 详细解释，组件默认为 fixed。
                  代码示例：import React, { useState } from 'react';
import { Table, Checkbox, Radio, Space, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const RadioButton = Radio.Button;
const RadioGroup = Radio.Group;
const data = [];
const total = 28;
for (let i = 0; i < total; i++) {
  data.push({
    index: i + 1,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}
const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
export default function TableBasic() {
  const [stripe, setStripe] = useState(false);
  const [bordered, setBordered] = useState(false);
  const [hover, setHover] = useState(false);
  const [tableLayout, setTableLayout] = useState(false);
  const [size, setSize] = useState('medium');
  const [showHeader, setShowHeader] = useState(true);

  // <!-- 当数据为空需要占位时，会显示 cellEmptyContent -->
  const table = (
    <Table
      data={data}
      columns={[
        {
          colKey: 'applicant',
          title: '申请人',
          width: '100',
        },
        {
          colKey: 'status',
          title: '申请状态',
          cell: ({ row }) => (
            <Tag
              shape="round"
              theme={statusNameListMap[row.status].theme}
              variant="light-outline"
              icon={statusNameListMap[row.status].icon}
            >
              {statusNameListMap[row.status].label}
            </Tag>
          ),
        },
        {
          colKey: 'channel',
          title: '签署方式',
        },
        {
          colKey: 'detail.email',
          title: '邮箱地址',
          ellipsis: true,
        },
        {
          colKey: 'createTime',
          title: '申请时间',
        },
      ]}
      rowKey="index"
      verticalAlign="top"
      size={size}
      bordered={bordered}
      hover={hover}
      stripe={stripe}
      showHeader={showHeader}
      tableLayout={tableLayout ? 'auto' : 'fixed'}
      rowClassName={({ rowIndex }) => `${rowIndex}-class`}
      cellEmptyContent={'-'}
      resizable
      // 与pagination对齐
      pagination={{
        defaultCurrent: 2,
        defaultPageSize: 5,
        total,
        showJumper: true,
        onChange(pageInfo) {
          console.log(pageInfo, 'onChange pageInfo');
        },
        onCurrentChange(current, pageInfo) {
          console.log(current, pageInfo, 'onCurrentChange current');
        },
        onPageSizeChange(size, pageInfo) {
          console.log(size, pageInfo, 'onPageSizeChange size');
        },
      }}
      onPageChange={(pageInfo) => {
        console.log(pageInfo, 'onPageChange');
      }}
      onRowClick={({ row, index, e }) => {
        console.log('onRowClick', {
          row,
          index,
          e,
        });
      }}
    />
  );
  return (
    <Space direction="vertical">
      <RadioGroup value={size} variant="default-filled" onChange={(size) => setSize(size)}>
        <RadioButton value="small">小尺寸</RadioButton>
        <RadioButton value="medium">中尺寸</RadioButton>
        <RadioButton value="large">大尺寸</RadioButton>
      </RadioGroup>
      <Space>
        <Checkbox value={stripe} onChange={setStripe}>
          显示斑马纹
        </Checkbox>
        <Checkbox value={bordered} onChange={setBordered}>
          显示表格边框
        </Checkbox>
        <Checkbox value={hover} onChange={setHover}>
          显示悬浮效果
        </Checkbox>
        <Checkbox value={tableLayout} onChange={setTableLayout}>
          宽度自适应
        </Checkbox>
        <Checkbox value={showHeader} onChange={setShowHeader}>
          显示表头
        </Checkbox>
      </Space>

      {table}
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：使用表格属性 rowClassName 设置行类名。使用列属性 className 设置列类名，或具体的某一个或某一些单元格类名。使用列属性 attr: { style: {} } 设置列内联样式，或具体的某一个或某一些单元格内联样式。
                  代码示例：import React, { useEffect } from 'react';
import { Table, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const classStyles = `
<style>
.t-demo__style .t-table .custom-third-class-name > td {
  color: green;
  font-weight: bold;
}

.t-demo__style .t-table td.last-column-class-name {
  color: orange;
  font-weight: bold;
}

.t-table td.custom-cell-class-name {
  color: orange;
  font-size: 18px;
  font-weight: bold;
}
</style>
`;
const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
export default function TableStyle() {
  const data = [];
  const total = 5;
  for (let i = 0; i < total; i++) {
    data.push({
      applicant: ['贾明', '张三', '王芳'][i % 3],
      status: i % 3,
      channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
      detail: {
        email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
      },
      matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
      time: [2, 10, 1][i % 3],
      createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
    });
  }
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  const columns = [
    {
      colKey: 'applicant',
      title: '申请人',
      width: 100,
    },
    {
      colKey: 'status',
      title: '审批状态',
      width: 120,
      cell: ({ row }) => (
        <Tag
          shape="round"
          theme={statusNameListMap[row.status].theme}
          variant="light-outline"
          icon={statusNameListMap[row.status].icon}
        >
          {statusNameListMap[row.status].label}
        </Tag>
      ),
    },
    {
      colKey: 'time',
      title: '申请耗时(天)',
      width: 120,
      align: 'center',
      // 设置单元格类名
      className: ({ row }) => {
        if (row.time >= 9) {
          return 'custom-cell-class-name';
        }
        return '';
      },
      attrs: ({ row }) => {
        if (row.time >= 9) {
          return {
            style: {
              fontWeight: 600,
              backgroundColor: 'var(--td-warning-color-light)',
            },
          };
        }
      },
    },
    {
      colKey: 'channel',
      title: '签署方式',
      width: 120,
      align: 'right',
      className: () => 'custom-cell-class-name',
    },
    {
      colKey: 'detail.email',
      title: '邮箱地址',
      width: 160,
      ellipsis: true,
    },
    {
      colKey: 'createTime',
      title: '申请时间',
    },
  ];
  const getRowClassName = ({ rowIndex }) => {
    //  console.log(row, rowIndex);
    if (rowIndex === 2) return 'custom-third-class-name';
    return '';
  };
  return (
    <div className="t-demo__style">
      {/* rowClassName 设置行类名 */}
      <Table
        rowKey="id"
        data={data}
        columns={columns}
        rowClassName={getRowClassName}
        footerSummary={<div className="t-table__row-filter-inner">汇总：近期数据波动较大</div>}
      ></Table>
    </div>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：使用 ellipsis 设置列文本超出省略显示，默认会同时控制表头的超出省略显示；只要 ellipsis 为真，无论是何种数据类型都会出现超出省略。使用 ellipsisTitle 单独设置表头超出省略显示，优先级高于 ellipsis。
                  代码示例：import React from 'react';
import { MessagePlugin, Table, Tag } from 'tdesign-react';
import { FileCopyIcon, ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';
// thanks to https://www.zhangxinxu.com/wordpress/2021/10/js-copy-paste-clipboard/
function copyToClipboard(text) {
  if (navigator.clipboard) {
    navigator.clipboard.writeText(text);
  } else {
    const textarea = document.createElement('textarea');
    document.body.appendChild(textarea);
    textarea.style.position = 'fixed';
    textarea.style.clip = 'rect(0 0 0 0)';
    textarea.style.top = '10px';
    textarea.value = text;
    textarea.select();
    document.execCommand('copy', true);
    document.body.removeChild(textarea);
  }
  MessagePlugin.success('文本复制成功');
}
export default function TableEllipsis() {
  const data = [];
  const total = 5;
  for (let i = 0; i < total; i++) {
    data.push({
      id: i + 1,
      applicant: ['贾明（kyrieJia）', '张三（threeZhang)', '王芳（fangWang)'][i % 3],
      status: i % 3,
      channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
      desc: ['单元格文本超出省略设置', '这是普通文本的超出省略'][i % 2],
      link: '点击查看审批详情',
      something: '仅标题省略',
      // 透传 Tooltip Props 到浮层组件
      ellipsisProps: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
      // 完全自定义超出省略的 Tips 内容
      ellipsisContent: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
      propsAndContent1: ['2021-11-01', '2021-12-01', '2022-01-01', '2022-02-01', '2022-03-01'][i % 4],
      propsAndContent2: [2, 3, 1, 4][i % 4],
    });
  }
  const statusNameListMap = {
    0: {
      label: '审批通过',
      theme: 'success',
      icon: <CheckCircleFilledIcon />,
    },
    1: {
      label: '审批失败',
      theme: 'danger',
      icon: <CloseCircleFilledIcon />,
    },
    2: {
      label: '审批过期',
      theme: 'warning',
      icon: <ErrorCircleFilledIcon />,
    },
  };
  const columns = [
    {
      colKey: 'applicant',
      title: '申请人',
      ellipsis: true,
    },
    {
      colKey: 'status',
      title: '审批状态',
      width: 120,
      cell: ({ row }) => (
        <Tag
          shape="round"
          theme={statusNameListMap[row.status].theme}
          variant="light-outline"
          icon={statusNameListMap[row.status].icon}
        >
          {statusNameListMap[row.status].label}
        </Tag>
      ),
    },
    {
      title: '签署方式（超长标题示例）',
      colKey: 'channel',
      width: 120,
      ellipsisTitle: true,
    },
    {
      title: '邮箱地址',
      colKey: 'ellipsisProps',
      // 浮层浅色背景，方向默认朝下出现
      ellipsis: {
        theme: 'light',
        placement: 'bottom',
      },
    },
    {
      title: '申请事项',
      colKey: 'ellipsisContent',
      // ellipsis 定义超出省略的浮层内容，cell 定义单元格内容
      ellipsis: ({ row }) => (
        <div>
          {row.ellipsisContent}
          <FileCopyIcon
            style={{
              cursor: 'pointer',
              marginLeft: '4px',
            }}
            onClick={() => copyToClipboard(row.ellipsisContent)}
          />
        </div>
      ),
    },
    {
      title: '审核时间',
      colKey: 'propsAndContent1',
      // 支持同时设置 tooltipProps 和 浮层内容,
      width: 100,
      ellipsis: {
        props: {
          theme: 'light',
          placement: 'bottom-right',
        },
        content: ({ row }) => (
          <div>
            <p>
              <b>创建日期:</b> {row.propsAndContent1}
            </p>
            <p>
              <b>审核时长(天):</b> {row.propsAndContent2}
            </p>
          </div>
        ),
      },
    },
    {
      title: '操作',
      colKey: 'link',
      // 超出省略的内容显示纯文本，不带任何样式和元素
      ellipsis: ({ row }) => row.link,
      // 注意这种 JSX 写法需设置 <script lang="jsx" setup>
      cell: ({ row }) => (
        <a href="/vue-next/components/table" target="_blank">
          {row.link}
        </a>
      ),
    },
  ];
  return (
    <div>
      <Table rowKey="index" data={data} columns={columns} lazyLoad />
    </div>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：刷新表格 DOM 元素请使用组件实例方法 refreshTable。
                  代码示例：import React, { useState } from 'react';
import { Table, Radio, Checkbox, Space, Tag, Link } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const RadioGroup = Radio.Group;
const RadioButton = Radio.Button;
const data = [];
for (let i = 0; i < 20; i++) {
  data.push({
    index: i + 1,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}
export default function TableFixHeader() {
  const [tableLayout, setTableLayout] = useState('fixed');
  const [fixedTopAndBottomRows, setFixedTopAndBottomRows] = useState(false);
  // 如果希望表格列宽自适应，设置 `table-layout: auto` 即可。如果列字段过多超出表格宽度，还需同时设置 table-content-width
  // fixedRows: [2, 2] 表示冻结表格的头两行和尾两行
  // footData 可以是多行，均支持固定在底部，用法同 data
  const table = (
    <Table
      data={data}
      footData={[{}]}
      tableLayout={tableLayout}
      maxHeight={fixedTopAndBottomRows ? 500 : 300}
      fixedRows={fixedTopAndBottomRows ? [2, 2] : undefined}
      bordered
      columns={[
        {
          colKey: 'applicant',
          title: '申请人',
          width: 100,
          foot: '-',
        },
        {
          colKey: 'status',
          title: '审批状态',
          width: 120,
          foot: '-',
          cell: ({ rowIndex }) => {
            const status = rowIndex % 3;
            return (
              <Tag
                shape="round"
                theme={statusNameListMap[status].theme}
                variant="light-outline"
                icon={statusNameListMap[status].icon}
              >
                {statusNameListMap[status].label}
              </Tag>
            );
          },
        },
        {
          colKey: 'matters',
          title: '申请事项',
          width: 150,
          foot: '-',
        },
        {
          colKey: 'detail.email',
          title: '邮箱地址',
          width: 160,
          foot: '-',
          ellipsis: true,
        },
        {
          colKey: 'createTime',
          title: '申请日期',
          width: 120,
          foot: '-',
        },
        {
          colKey: 'operation',
          title: '操作',
          width: 120,
          foot: '-',
          cell: ({ row }) => (
            <Link theme="primary" hover="color">
              {row.status === 0 ? '查看详情' : '再次申请'}
            </Link>
          ),
        },
      ]}
      rowKey="index"
      lazyLoad
    />
  );
  return (
    <Space direction="vertical" size="large">
      <RadioGroup value={tableLayout} variant="default-filled" onChange={(val) => setTableLayout(val)}>
        <RadioButton value="fixed">table-layout: fixed</RadioButton>
        <RadioButton value="auto">table-layout: auto</RadioButton>
      </RadioGroup>
      <Checkbox value={fixedTopAndBottomRows} onChange={setFixedTopAndBottomRows}>
        是否冻结首尾两行
      </Checkbox>

      {table}
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：⚠️ Windows 操作系统横向滚动操作：按下 Shift 键的同时，鼠标操作滚轮进行滚动。纵向滚动操作：直接鼠标操作滚轮进行滚动。
                  代码示例：import React, { useRef, useState } from 'react';
import { Table, Radio, Checkbox, Space, Tag, Link } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const data = [];
for (let i = 0; i < 5; i++) {
  data.push({
    index: i + 1,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}
const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
export default function TableFixedColumn() {
  const [tableLayout, setTableLayout] = useState('fixed');
  const [emptyData, setEmptyData] = useState(false);
  const [leftFixedColumn, setLeftFixedColumn] = useState(2);
  const [rightFixedColumn, setReftFixedColumn] = useState(1);
  const tableRef = useRef(null);
  // eslint-disable-next-line
  const scrollToCreateTime = () => {
    // 横向滚动到指定列，一般用于列数量较多的场景
    tableRef.current.scrollColumnIntoView('createTime');
  };
  const table = (
    <Table
      ref={tableRef}
      bordered
      rowKey="index"
      data={emptyData ? [] : data}
      tableLayout={tableLayout}
      tableContentWidth={tableLayout === 'fixed' ? undefined : '1200px'}
      resizable={true}
      lazyLoad
      columns={[
        {
          colKey: 'applicant',
          title: '申请人',
          width: 100,
          fixed: 'left',
        },
        {
          colKey: 'status',
          title: '审批状态',
          width: 150,
          fixed: leftFixedColumn >= 2 ? 'left' : undefined,
          cell: ({ row }) => (
            <Tag
              shape="round"
              theme={statusNameListMap[row.status].theme}
              variant="light-outline"
              icon={statusNameListMap[row.status].icon}
            >
              {statusNameListMap[row.status].label}
            </Tag>
          ),
        },
        {
          colKey: 'detail.email',
          title: '邮箱地址',
          width: 180,
        },
        {
          colKey: 'matters',
          title: '申请事项',
          width: 200,
        },
        {
          colKey: 'createTime',
          title: '申请日期',
          width: 120,
          fixed: rightFixedColumn >= 2 ? 'right' : undefined,
        },
        {
          colKey: 'operation',
          title: '操作',
          width: 100,
          fixed: 'right',
          cell: ({ row }) => (
            <Link theme="primary" hover="color">
              {row.status === 0 ? '查看详情' : '再次申请'}
            </Link>
          ),
        },
      ]}
    />
  );
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Radio.Group value={leftFixedColumn} variant="default-filled" onChange={(val) => setLeftFixedColumn(val)}>
        <Radio.Button value={1}>左侧固定一列</Radio.Button>
        <Radio.Button value={2}>左侧固定两列</Radio.Button>
      </Radio.Group>

      <Radio.Group value={rightFixedColumn} variant="default-filled" onChange={(val) => setReftFixedColumn(val)}>
        <Radio.Button value={1}>右侧固定一列</Radio.Button>
        <Radio.Button value={2}>右侧固定两列</Radio.Button>
      </Radio.Group>

      <div>
        <Radio.Group value={tableLayout} variant="default-filled" onChange={(val) => setTableLayout(val)}>
          <Radio.Button value="fixed">table-layout: fixed</Radio.Button>
          <Radio.Button value="auto">table-layout: auto</Radio.Button>
        </Radio.Group>
        <Checkbox
          value={emptyData}
          onChange={setEmptyData}
          style={{
            marginLeft: '16px',
            verticalAlign: 'middle',
          }}
        >
          空数据
        </Checkbox>
      </div>

      {table}
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：多级表头中的固定列，必须指定每一个固定列的 colKey 和 fixed 属性。
                  代码示例：import React, { useState } from 'react';
import { Table, Radio, Checkbox, Space, Tag, Link } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const RadioGroup = Radio.Group;
const RadioButton = Radio.Button;
const data = [];
const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
for (let i = 0; i < 20; i++) {
  data.push({
    index: i,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}
export default function TableFixedColumn() {
  const [tableLayout, setTableLayout] = useState('auto');
  const [fixedTopAndBottomRows, setFixedTopAndBottomRows] = useState(false);
  // <!-- 如果希望表格列宽自适应，设置 `table-layout: auto` 即可。需同时设置 table-content-width -->
  // <!-- fixedRows: [2, 2] 表示冻结表格的头两行和尾两行 -->
  // <!-- footData 可以是多行，均支持固定在底部 -->
  const table = (
    <Table
      bordered
      data={data}
      footData={[{}]}
      tableLayout={tableLayout}
      tableContentWidth={tableLayout === 'fixed' ? undefined : '1600px'}
      maxHeight={fixedTopAndBottomRows ? 500 : 300}
      fixedRows={fixedTopAndBottomRows ? [2, 2] : undefined}
      columns={[
        {
          colKey: 'applicant',
          title: '申请人',
          width: '100',
          foot: '共20条',
          fixed: 'left',
        },
        {
          colKey: 'status',
          title: '审批状态',
          width: '150',
          foot: '-',
          cell: ({ rowIndex }) => {
            const status = rowIndex % 3;
            return (
              <Tag
                shape="round"
                theme={statusNameListMap[status].theme}
                variant="light-outline"
                icon={statusNameListMap[status].icon}
              >
                {statusNameListMap[status].label}
              </Tag>
            );
          },
        },
        {
          colKey: 'channel',
          title: '签署方式',
        },
        {
          colKey: 'matters',
          title: '申请事项',
          width: '150',
          foot: '-',
        },
        {
          colKey: 'detail.email',
          title: '邮箱地址',
        },
        {
          colKey: 'createTime',
          title: '申请日期',
          width: '120',
          foot: '-',
        },
        {
          colKey: 'operation',
          title: '操作',
          width: '150',
          foot: '-',
          fixed: 'right',
          cell: ({ row }) => (
            <Link theme="primary" hover="color">
              {row.status === 0 ? '查看详情' : '再次申请'}
            </Link>
          ),
        },
      ]}
      rowKey="index"
      lazyLoad
    />
  );
  return (
    <Space
      direction="vertical"
      size="large"
      style={{
        width: '100%',
      }}
    >
      <RadioGroup value={tableLayout} variant="default-filled" onChange={(val) => setTableLayout(val)}>
        <RadioButton value="fixed">table-layout: fixed</RadioButton>
        <RadioButton value="auto">table-layout: auto</RadioButton>
      </RadioGroup>
      <Checkbox value={fixedTopAndBottomRows} onChange={setFixedTopAndBottomRows}>
        是否冻结首尾两行
      </Checkbox>

      {table}
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：使用 cell 作为渲染函数，函数参数为：{col, colIndex, row, rowIndex}。对于有插槽特性的框架，支持插槽，使用 cell 的值作为插槽名称；如果 cell 值为空，则默认取 colKey 作为插槽名称。注意插槽名称保持 kebab-case 或 camelCase 命名。【不推荐使用】使用 render 渲染函数，函数参数为：{col, colIndex, row, rowIndex, type}，其中 type 的值为 cell。
                  代码示例：import React from 'react';
import { Table, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, UserIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const data = [];
const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
for (let i = 0; i < 5; i++) {
  data.push({
    index: i + 1,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}
const columns = [
  {
    colKey: 'applicant',
    width: 120,
    title: () => (
      <span
        style={{
          display: 'flex',
          alignItems: 'center',
        }}
      >
        <UserIcon
          style={{
            marginRight: 5,
          }}
        ></UserIcon>
        申请人
      </span>
    ),
  },
  {
    title: '审批状态',
    // 没有 cell 的情况下， platform 会被用作自定义单元格的插槽名称
    colKey: 'status',
    width: 120,
    cell: ({ row }) => (
      <Tag
        shape="round"
        theme={statusNameListMap[row.status].theme}
        variant="light-outline"
        icon={statusNameListMap[row.status].icon}
      >
        {statusNameListMap[row.status].label}
      </Tag>
    ),
  },
  {
    colKey: 'matters',
    title: '申请事项',
    // 使用 cell 方法自定义单元格：
    cell: ({ col, row }) => <div>{row[col.colKey]}</div>,
  },
  {
    title: '邮箱地址',
    colKey: 'email',
    // render 即可渲染表头，也可以渲染单元格。但 cell 只能渲染单元格，title 只能渲染表头
    render(context) {
      const { type, row, col } = context;
      if (type === 'title') return '邮箱地址';
      return <div>{row[col.colKey]}</div>;
    },
  },
  {
    colKey: 'createTime',
    title: '申请时间',
  },
];
export default function TableFixHeader() {
  return <Table bordered data={data} columns={columns} rowKey="property" />;
}

                  ===SPLIT===组建:<Table/>
                  使用描述：使用 title 作为渲染函数，函数参数为：title({ col, colIndex })。对于有插槽特性的框架，支持插槽，使用 title 的值作为插槽名称。注意插槽名称保持 kebab-case 或 camelCase 命名。【不推荐使用】使用 render 作为渲染函数，函数参数为：render({ col, colIndex, row, rowIndex, type })，其中 type 值为 title。使用排序、过滤等功能时不能使用该方法。
                  代码示例：import React from 'react';
import { Table, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const data = [];
for (let i = 0; i < 5; i++) {
  data.push({
    index: i + 1,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}
const columns = [
  {
    colKey: 'applicant',
    title: '申请人',
    width: 120,
  },
  {
    colKey: 'matters',
    title: ({ colIndex }) => (
      <b
        style={{
          fontWeight: 'bold',
        }}
      >
        {['', '申请事项'][colIndex]}
      </b>
    ),
  },
  {
    title: '审批状态',
    colKey: 'status',
    // 使用 cell 方法自定义单元格：
    cell: ({ row }) => (
      <Tag
        shape="round"
        theme={statusNameListMap[row.status].theme}
        variant="light-outline"
        icon={statusNameListMap[row.status].icon}
      >
        {statusNameListMap[row.status].label}
      </Tag>
    ),
  },
  {
    title: '邮箱地址',
    colKey: 'detail.email',
    width: 200,
  },
  {
    colKey: 'createTime',
    // render 可以渲染表头，也可以渲染单元格。但 title 只能渲染表头，cell 只能渲染单元格
    render(context) {
      const { type, row, col } = context;
      return {
        title: '申请时间',
        cell: row && row[col.colKey],
      }[type];
    },
  },
];
export default function TableFixHeader() {
  return <Table bordered data={data} columns={columns} rowKey="index" />;
}

                  ===SPLIT===组建:<Table/>
                  使用描述：默认输出 column.foot 字符串，如果 foot 类型为函数，则作为表尾渲染函数自定义表尾内容。对于有插槽特性的框架，支持插槽，使用 foot 值作为插槽名称。注意插槽名称保持 kebab-case 或 camelCase 命名。如果想定义通栏表尾，请使用 footerSummary如果想自定义表尾合并单元格信息，请使用 rowspanAndColspanInFooter，类似表格内容的合并单元格方法 rowspanAndColspan。
                  代码示例：import React, { useState } from 'react';
import { Table, Radio, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const columns = [
  {
    align: 'left',
    colKey: 'applicant',
    title: '申请人',
    foot: () => (
      <b
        style={{
          fontWeight: 'bold',
        }}
      >
        表尾信息
      </b>
    ),
    width: '120',
  },
  {
    title: '审批状态',
    colKey: 'status',
    width: '150',
    // 使用 cell 方法自定义单元格：
    cell: ({ row }) => (
      <Tag
        shape="round"
        theme={statusNameListMap[row.status].theme}
        variant="light-outline"
        icon={statusNameListMap[row.status].icon}
      >
        {statusNameListMap[row.status].label}
      </Tag>
    ),
    foot: () => (
      <div
        style={{
          width: '100%',
        }}
      >
        表尾信息{' '}
      </div>
    ),
  },
  {
    colKey: 'channel',
    title: '签署方式',
    foot: '表尾信息',
  },
  {
    colKey: 'detail.email',
    title: '邮箱地址',
    ellipsis: true,
    foot: () => <div>表尾信息</div>,
  },
  {
    colKey: 'createTime',
    title: '申请时间',
    foot: () => (
      <div
        style={{
          textAlign: 'left',
        }}
      >
        表尾信息
      </div>
    ),
  },
];
const data = [];
for (let i = 0; i < 3; i++) {
  data.push({
    index: i + 1,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}

// 表尾有一行数据
const footData = [
  {
    index: '123',
    type: '全部类型',
    default: '',
    description: '-',
    required: '未知',
  },
];
export default function TableFixHeader() {
  // 自定义表尾方式一：普通表尾
  const [footerType, setFooterType] = useState('normal');

  // 自定义表尾方式二：通栏表尾
  const footerSummary = <div className="t-table__row-filter-inner">通栏总结行信息</div>;

  // 自定义表尾方式三：自定义合并单元格表尾
  const rowspanAndColspanInFooter = ({ rowIndex, colIndex }) => {
    console.log(rowIndex, colIndex);
    // 中间列合并，收尾两列不合并
    if (rowIndex === 0 && colIndex === 1)
      return {
        colspan: columns.length - 2,
      };
    return {};
  };
  return (
    <div className="tdesign-demo-block-column-large tdesign-demo__table">
      <div>
        {/* <!-- 表尾有 3 种方式 --> */}
        <Radio.Group value={footerType} onChange={(val) => setFooterType(val)} variant="default-filled">
          <Radio.Button value="normal">普通表尾</Radio.Button>
          <Radio.Button value="full">通栏表尾</Radio.Button>
          <Radio.Button value="custom">自定义表尾合并列</Radio.Button>
        </Radio.Group>
      </div>
      <Table
        bordered
        data={data}
        columns={columns}
        rowKey="index"
        footData={['normal', 'custom'].includes(footerType) ? footData : []}
        footerSummary={footerType === 'full' ? footerSummary : null}
        rowspanAndColspanInFooter={footerType === 'custom' ? rowspanAndColspanInFooter : undefined}
      />
    </div>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：表头吸顶，设置 headerAffixedTop=true 即可。如果需要调整吸顶位置及更多配置，使用 headerAffixedTop: { offsetTop: 80 }。表尾吸底，设置 footAffixedBottom=true 即可。如果需要调整吸底位置及更多配置，使用 footAffixedBottom: { offsetBottom: 60 }。滚动条吸底，设置 horizontalScrollAffixedBottom=true 即可。如果需要调整吸底位置及更多配置，使用 horizontalScrollAffixedBottom: { offsetBottom: 60 }。分页器吸底，设置 paginationAffixedBottom=true 即可。如果需要调整吸底位置及更多配置，使用 paginationAffixedBottom: { offsetBottom: 60 }。
                  代码示例：import React, { useState, useEffect } from 'react';
import { Table, Checkbox, Space, Link, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const classStyles = `
<style>
/*
 * table-layout: auto 模式下，table 元素的宽度设置很重要很重要。
 * 如果不设置，列多了之后会挤在一起
 * **/
.tdesign-demo__table-affix table {
  width: 1200px;
}

.tdesign-demo__table-affix .t-table {
  max-width: 800px;
}
</style>
`;
function getData(count) {
  const data = [];
  for (let i = 0; i < count; i++) {
    data.push({
      index: i + 1,
      applicant: ['贾明', '张三', '王芳'][i % 3],
      status: i % 3,
      channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
      detail: {
        email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
      },
      matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
      time: [2, 3, 1, 4][i % 4],
      createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
    });
  }
  return data;
}
const TOTAL = 38;
const getColumns = ({ fixedLeftColumn, fixedRightColumn }) => [
  {
    align: 'left',
    colKey: 'applicant',
    title: '申请人',
    foot: () => (
      <b
        style={{
          fontWeight: 'bold',
        }}
      >
        表尾信息
      </b>
    ),
    width: '120',
    fixed: fixedLeftColumn ? 'left' : undefined,
  },
  {
    colKey: 'status',
    title: '申请状态',
    width: '150',
    cell: ({ row }) => (
      <Tag
        shape="round"
        theme={statusNameListMap[row.status].theme}
        variant="light-outline"
        icon={statusNameListMap[row.status].icon}
      >
        {statusNameListMap[row.status].label}
      </Tag>
    ),
  },
  {
    colKey: 'channel',
    title: '签署方式',
    width: '120',
  },
  {
    colKey: 'detail.email',
    title: '邮箱地址',
    ellipsis: true,
  },
  {
    colKey: 'matters',
    title: '申请事项',
    ellipsis: true,
  },
  {
    colKey: 'createTime',
    title: '申请时间',
  },
  {
    colKey: 'operation',
    title: '操作',
    cell: ({ row }) => (
      <Link hover="color" theme="primary">
        {row.status === 0 ? '查看详情' : '再次申请'}
      </Link>
    ),
    width: 120,
    foot: '-',
    fixed: fixedRightColumn ? 'right' : undefined,
  },
];
const TableAffixDemo = () => {
  const data = getData(TOTAL);
  // 表尾有一行数据
  const footData = [
    {
      channel: 'footer-row-1',
      applicant: '全部类型',
      createTime: '-',
    },
  ];
  const [columns, setColumns] = useState([]);

  // 重要：如果在预渲染场景下，初次渲染的表格宽度和最终呈现宽度不一样，请异步设置表头吸顶
  const [headerAffixedTop, setHeaderAffixedTop] = useState(true);
  const [footerAffixedBottom, setFooterAffixedBottom] = useState(true);
  const [fixedLeftColumn, setFixedLeftColumn] = useState(true);
  const [fixedRightColumn, setFixedRightColumn] = useState(true);
  const [horizontalScrollAffixedBottom, setHorizontalScrollAffixedBottom] = useState(false);
  const [paginationAffixedBottom, setPaginationAffixedBottom] = useState(false);

  // type 可选值：foot 和 body
  const rowClassName = ({ type }) => {
    if (type === 'foot') return 't-tdesign__custom-footer-tr';
    return 't-tdesign__custom-body-tr';
  };
  const onDragSortChange = ({ newData }) => {
    setColumns(newData);
  };

  // 表尾吸顶和底部滚动条，二选一即可，也只能二选一
  useEffect(() => {
    horizontalScrollAffixedBottom && setFooterAffixedBottom(false);
  }, [horizontalScrollAffixedBottom]);

  // 表尾吸顶和底部滚动条，二选一即可，也只能二选一
  useEffect(() => {
    footerAffixedBottom && setHorizontalScrollAffixedBottom(false);
  }, [footerAffixedBottom]);

  // 左侧固定列或者右侧固定列发生变化时
  useEffect(() => {
    const tmp = getColumns({
      fixedLeftColumn,
      fixedRightColumn,
    });
    setColumns(tmp);
  }, [fixedLeftColumn, fixedRightColumn]);
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  const marginStyle = {
    marginLeft: '32px',
  };
  return (
    <Space
      direction="vertical"
      size="large"
      className="tdesign-demo__table-affix"
      style={{
        width: '100%',
      }}
    >
      <div>
        <Checkbox checked={headerAffixedTop} onChange={setHeaderAffixedTop}>
          表头吸顶
        </Checkbox>
        <Checkbox checked={footerAffixedBottom} onChange={setFooterAffixedBottom} style={marginStyle}>
          表尾吸底
        </Checkbox>
        <Checkbox
          checked={horizontalScrollAffixedBottom}
          onChange={setHorizontalScrollAffixedBottom}
          style={marginStyle}
        >
          滚动条吸底
        </Checkbox>
        <Checkbox checked={paginationAffixedBottom} onChange={setPaginationAffixedBottom} style={marginStyle}>
          分页器吸底
        </Checkbox>
        <Checkbox checked={fixedLeftColumn} onChange={setFixedLeftColumn} style={marginStyle}>
          固定左侧列
        </Checkbox>
        <Checkbox checked={fixedRightColumn} onChange={setFixedRightColumn} style={marginStyle}>
          固定右侧列
        </Checkbox>
      </div>
      <Table
        rowKey="index"
        data={data}
        columns={columns}
        footData={footData}
        rowClassName={rowClassName}
        pagination={{
          defaultCurrent: 1,
          defaultPageSize: 5,
          total: TOTAL,
        }}
        headerAffixedTop={{
          offsetTop: 87,
          zIndex: 1000,
        }}
        footerAffixedBottom={
          footerAffixedBottom
            ? {
                offsetBottom: paginationAffixedBottom ? 60 : 0,
                zIndex: 1000,
              }
            : false
        }
        horizontalScrollAffixedBottom={
          horizontalScrollAffixedBottom
            ? {
                offsetBottom: paginationAffixedBottom ? 61 : 0,
                zIndex: 1000,
              }
            : false
        }
        paginationAffixedBottom={paginationAffixedBottom}
        tableLayout="fixed"
        dragSort="col"
        bordered
        resizable
        onDragSort={onDragSortChange}
        lazyLoad
      ></Table>
    </Space>
  );
};
TableAffixDemo.displayName = 'TableAffixDemo';
export default TableAffixDemo;

                  ===SPLIT===组建:<Table/>
                  使用描述：expandedRowKeys 用于存储展开行的值，支持非受控属性 defaultExpandedRowKeys。expandedRow 用于定义展开行显示的具体内容，参数有 { row, rowIndex }。expandIcon 用于自定义展开图标，值为 true 显示默认图标，值为 false 不显示图标，值为函数则表示完全自定义图标。expandOnRowClick 表示是否允许点击表格行时展开。展开行发生变化时会触发展开行变化事件。
                  代码示例：import React, { useState, useEffect } from 'react';
import { Table, Radio, Checkbox, Space, Tag, Link } from 'tdesign-react';
import {
  ChevronRightCircleIcon,
  ChevronRightIcon,
  CheckCircleFilledIcon,
  ErrorCircleFilledIcon,
  CloseCircleFilledIcon,
} from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const classStyles = `
<style>
.more-detail > p {
  display: inline-block;
  margin: 4px 0;
}
.more-detail > p.title {
  width: 120px;
}
</style>
`;
export default function TableExpandable() {
  const getColumns = (isFixedColumn) => [
    isFixedColumn
      ? {
          colKey: 'applicant',
          title: '申请人',
          width: '80',
          fixed: 'left',
        }
      : {
          colKey: 'applicant',
          title: '申请人',
          width: '80',
        },
    {
      colKey: 'status',
      title: '申请状态',
      cell: ({ row }) => (
        <Tag
          shape="round"
          theme={statusNameListMap[row.status].theme}
          variant="light-outline"
          icon={statusNameListMap[row.status].icon}
        >
          {statusNameListMap[row.status].label}
        </Tag>
      ),
    },
    {
      colKey: 'channel',
      title: '签署方式',
    },
    {
      colKey: 'detail.email',
      title: '邮箱地址',
      ellipsis: true,
    },
    {
      colKey: 'createTime',
      title: '申请时间',
    },
    isFixedColumn
      ? {
          colKey: 'operation',
          title: '操作',
          fixed: 'right',
          cell: ({ row }) => (
            <Link theme="primary" hover="color">
              {row.status === 0 ? '查看详情' : '再次申请'}
            </Link>
          ),
        }
      : {
          colKey: 'operation',
          title: '操作',
          cell: ({ row }) => (
            <Link theme="primary" hover="color">
              {row.status === 0 ? '查看详情' : '再次申请'}
            </Link>
          ),
        },
  ];
  const initialData = new Array(5).fill(null).map((item, i) => ({
    index: i + 1,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  }));
  const [data] = useState(initialData);
  const [expandControl, setExpandControl] = useState('true');
  const [expandIcon, setExpandIcon] = useState(true);
  const [expandOnRowClick, setExpandOnRowClick] = useState(true);
  const [expandedRowKeys, setExpandedRowKeys] = useState(['2']);
  const [fixedColumns, setFixedColumns] = useState(false);
  const [emptyData, setEmptyData] = useState(false);
  const columns = getColumns(fixedColumns);
  const expandedRow = ({ row }) => (
    <div className="more-detail">
      <p className="title">
        <b>申请人:</b>
      </p>
      <p className="content">{row.applicant}</p>
      <br />
      <p className="title">
        <b>邮箱地址:</b>
      </p>
      <p className="content">{row.detail.email}</p>
      <br />
      <p className="title">
        <b>签署方式:</b>
      </p>
      <p className="content">{row.channel}</p>
    </div>
  );
  const rehandleExpandChange = (value, params) => {
    setExpandedRowKeys(value);
    console.log('rehandleExpandChange', value, params);
  };

  // 完全自由控制表格的每一行是否显示展开图标，以及显示什么内容
  const tmpExpandIcon = ({ index }) => {
    // 第一行不显示展开图标
    if (index === 0) return false;
    // 第三行，使用自定义展开图标
    if (index === 3) return <ChevronRightIcon />;
    // 其他行，使用表格同款展开图标
    return <ChevronRightCircleIcon />;
  };
  useEffect(() => {
    const val = expandControl;
    if (val === 'true') {
      // expandIcon 默认为 true，表示显示默认展开图标
      setExpandIcon(true);
    } else if (val === 'false') {
      // expandIcon 值为 false，则表示隐藏全部展开图标
      setExpandIcon(false);
    } else if (val === 'custom') {
      setExpandIcon(val);
    }
  }, [expandControl]);
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      {/* <!-- expanded-row-keys 为受控属性 --> */}
      {/* <!-- default-expanded-row-keys 为非受控属性 --> */}
      <div>
        <Radio.Group value={expandControl} onChange={(val) => setExpandControl(val)} variant="default-filled">
          <Radio.Button value="true"> 显示展开图标 </Radio.Button>
          <Radio.Button value="false"> 隐藏展开图标 </Radio.Button>
          <Radio.Button value="custom"> 自由控制展开图标 </Radio.Button>
        </Radio.Group>
      </div>

      <div>
        <Checkbox checked={expandOnRowClick} onChange={setExpandOnRowClick}>
          允许点击行之后展开/收起
        </Checkbox>
        <Checkbox
          checked={fixedColumns}
          onChange={setFixedColumns}
          style={{
            marginLeft: '32px',
          }}
        >
          固定列
        </Checkbox>
        <Checkbox
          checked={emptyData}
          onChange={setEmptyData}
          style={{
            marginLeft: '32px',
          }}
        >
          空数据
        </Checkbox>
      </div>

      {/* <!-- :defaultExpandedRowKeys="defaultExpandedRowKeys" --> */}
      <Table
        rowKey="index"
        columns={columns}
        data={emptyData ? [] : data}
        expandedRowKeys={expandedRowKeys}
        expandedRow={expandedRow}
        expandOnRowClick={expandOnRowClick}
        expandIcon={expandIcon === 'custom' ? tmpExpandIcon : expandIcon}
        tableContentWidth="1200"
        onExpandChange={rehandleExpandChange}
        lazyLoad
        resizable
      ></Table>
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：示例一：包含配置按钮的列配置功能示例 
                  代码示例：import React, { useState } from 'react';
import { Table, Radio, Checkbox, Space, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

export default function TableCustomColButton() {
  const [placement, setPlacement] = useState('top-right');
  const [bordered, setBordered] = useState(true);
  const [customText, setCustomText] = useState(false);
  const initialData = [];
  for (let i = 0; i < 100; i++) {
    initialData.push({
      index: i,
      applicant: ['贾明', '张三', '王芳'][i % 3],
      status: i % 3,
      channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
      detail: {
        email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
      },
      matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
      time: [2, 3, 1, 4][i % 4],
      createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
    });
  }
  const [data] = useState([...initialData]);
  const staticColumn = ['applicant', 'status'];
  const [displayColumns, setDisplayColumns] = useState(staticColumn.concat(['channel', 'detail.email', 'createTime']));
  const columns = [
    {
      colKey: 'applicant',
      title: '申请人',
      width: '100',
    },
    {
      colKey: 'status',
      title: '申请状态',
      width: '150',
      cell: ({ row }) => {
        const statusNameListMap = {
          0: {
            label: '审批通过',
            theme: 'success',
            icon: <CheckCircleFilledIcon />,
          },
          1: {
            label: '审批失败',
            theme: 'danger',
            icon: <CloseCircleFilledIcon />,
          },
          2: {
            label: '审批过期',
            theme: 'warning',
            icon: <ErrorCircleFilledIcon />,
          },
        };
        return (
          <Tag
            shape="round"
            theme={statusNameListMap[row.status].theme}
            variant="light-outline"
            icon={statusNameListMap[row.status].icon}
          >
            {statusNameListMap[row.status].label}
          </Tag>
        );
      },
    },
    {
      colKey: 'channel',
      title: '签署方式',
      width: '120',
    },
    {
      colKey: 'detail.email',
      title: '邮箱地址',
      ellipsis: true,
    },
    {
      colKey: 'createTime',
      title: '申请时间',
    },
  ];
  const onColumnChange = (params) => {
    console.log(params);
  };
  const tableNode = (
    <Table
      // defaultDisplayColumns={displayColumns}
      displayColumns={displayColumns}
      onDisplayColumnsChange={setDisplayColumns}
      rowKey="index"
      data={data}
      columns={columns}
      columnController={{
        placement,
        fields: ['channel', 'detail.email', 'createTime'],
        dialogProps: {
          preventScrollThrough: true,
        },
        buttonProps: customText
          ? {
              content: '显示列控制',
              theme: 'primary',
              variant: 'base',
            }
          : undefined,
      }}
      pagination={{
        defaultPageSize: 5,
        defaultCurrent: 1,
        total: 100,
      }}
      bordered={bordered}
      tableLayout="auto"
      onColumnChange={onColumnChange}
      stripe
      lazyLoad
    ></Table>
  );
  return (
    <Space direction="vertical" size="large">
      <Radio.Group value={placement} onChange={(val) => setPlacement(val)} variant="default-filled">
        <Radio.Button value="top-left">左上角</Radio.Button>
        <Radio.Button value="top-right">右上角</Radio.Button>
        <Radio.Button value="bottom-left">左下角</Radio.Button>
        <Radio.Button value="bottom-right">右下角</Radio.Button>
      </Radio.Group>
      <Space direction="horizontal" align="center">
        <Checkbox checked={bordered} onChange={setBordered}>
          是否显示边框
        </Checkbox>
        <Checkbox checked={customText} onChange={setCustomText}>
          自定义列配置按钮
        </Checkbox>
      </Space>

      {tableNode}
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：使用 columnControllerVisible 控制是否显示列配置弹框，onColumnControllerVisibleChange 用于监听相关变化。一般应用于需要完全自定义列配置按钮内容和位置的场景。
                  代码示例：import React, { useState } from 'react';
import { Table, Button, Space, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

export default function TableCustomCol() {
  const initialData = [];
  for (let i = 0; i < 100; i++) {
    initialData.push({
      index: i,
      applicant: ['贾明', '张三', '王芳'][i % 3],
      status: i % 3,
      channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
      detail: {
        email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
      },
      matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
      time: [2, 3, 1, 4][i % 4],
      createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
    });
  }
  const [data] = useState([...initialData]);
  const staticColumn = ['applicant', 'status'];
  const [displayColumns, setDisplayColumns] = useState(staticColumn.concat(['channel', 'detail.email', 'createTime']));
  const [columnControllerVisible, setColumnControllerVisible] = useState(false);
  const columns = [
    {
      colKey: 'applicant',
      title: '申请人',
      width: '100',
    },
    {
      colKey: 'status',
      title: '申请状态',
      width: '150',
      cell: ({ row }) => {
        const statusNameListMap = {
          0: {
            label: '审批通过',
            theme: 'success',
            icon: <CheckCircleFilledIcon />,
          },
          1: {
            label: '审批失败',
            theme: 'danger',
            icon: <CloseCircleFilledIcon />,
          },
          2: {
            label: '审批过期',
            theme: 'warning',
            icon: <ErrorCircleFilledIcon />,
          },
        };
        return (
          <Tag
            shape="round"
            theme={statusNameListMap[row.status].theme}
            variant="light-outline"
            icon={statusNameListMap[row.status].icon}
          >
            {statusNameListMap[row.status].label}
          </Tag>
        );
      },
    },
    {
      colKey: 'channel',
      title: '签署方式',
      width: '120',
    },
    {
      colKey: 'detail.email',
      title: '邮箱地址',
      ellipsis: true,
    },
    {
      colKey: 'createTime',
      title: '申请时间',
    },
  ];
  const onColumnChange = (params) => {
    console.log(params);
  };

  // Do not use `resizable` and `tableLayout=auto` at the same time !
  return (
    <Space
      direction="vertical"
      size="large"
      style={{
        maxWidth: '100%',
      }}
    >
      <Button onClick={() => setColumnControllerVisible(true)}>显示列配置弹窗</Button>
      <Table
        displayColumns={displayColumns}
        onDisplayColumnsChange={setDisplayColumns}
        columnControllerVisible={columnControllerVisible}
        onColumnControllerVisibleChange={setColumnControllerVisible}
        rowKey="index"
        data={data}
        columns={columns}
        columnController={{
          fields: ['channel', 'detail.email', 'createTime'],
          dialogProps: {
            preventScrollThrough: true,
          },
          hideTriggerButton: true,
        }}
        pagination={{
          defaultPageSize: 5,
          defaultCurrent: 1,
          total: 100,
        }}
        stripe
        resizable
        onColumnChange={onColumnChange}
      ></Table>
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：提供列属性 sortType，用于自定义支持排序方式。可选值有 desc/asc/all，分别表示只能降序徘、只能升序徘、降序和升序。
                  代码示例：import React, { useState } from 'react';
import { Table, Checkbox, Space, Tag } from 'tdesign-react';
import { CheckCircleFilledIcon, ErrorCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const columns = [
  {
    colKey: 'applicant',
    title: '申请人',
    width: '100',
  },
  {
    colKey: 'status',
    title: '申请状态',
    width: '150',
    sortType: 'all',
    sorter: true,
    cell: ({ rowIndex }) => {
      const status = rowIndex % 3;
      return (
        <Tag
          shape="round"
          theme={statusNameListMap[status].theme}
          variant="light-outline"
          icon={statusNameListMap[status].icon}
        >
          {statusNameListMap[status].label}
        </Tag>
      );
    },
  },
  {
    colKey: 'time',
    title: '申请耗时(天)',
    width: '140',
    align: 'center',
    sortType: 'all',
    sorter: true,
  },
  {
    colKey: 'channel',
    title: '签署方式',
    width: '120',
  },
  {
    colKey: 'createTime',
    title: '申请时间',
  },
];
const initialData = new Array(4).fill(null).map((_, i) => ({
  index: i + 1,
  applicant: ['贾明', '张三', '王芳'][i % 3],
  status: i % 3,
  channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
  detail: {
    email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
  },
  matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
  time: [2, 3, 1, 4][i % 4],
  createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
}));
export default function TableSingleSort() {
  const [data, setData] = useState([...initialData]);
  const [sort, setSort] = useState({
    // 按照 status 字段进行排序
    sortBy: 'status',
    // 是否按照降序进行排序
    descending: true,
  });
  const [hideSortTips, setHideSortTips] = useState(false);
  const request = (sort) => {
    // 模拟异步请求，进行数据排序
    const timer = setTimeout(() => {
      if (!sort || !sort.sortBy) {
        setData([...initialData]);
        return;
      }
      const dataNew = initialData
        .concat()
        .sort((a, b) => (sort.descending ? b[sort.sortBy] - a[sort.sortBy] : a[sort.sortBy] - b[sort.sortBy]));
      setData([...dataNew]);
      clearTimeout(timer);
    }, 100);
  };
  const onSortChange = (sort) => {
    setSort(sort);
    request(sort);
  };
  return (
    <Space direction="vertical">
      <div>
        <Checkbox checked={hideSortTips} onChange={setHideSortTips}>
          隐藏排序文本提示
        </Checkbox>
        <span
          style={{
            paddingLeft: '16px',
            verticalAlign: 'top',
          }}
        >
          排序方式：{JSON.stringify(sort)}
        </span>
      </div>

      <Table
        rowKey="index"
        data={data}
        columns={columns}
        sort={sort}
        hideSortTips={hideSortTips}
        showSortColumnBgColor={true}
        onSortChange={onSortChange}
        lazyLoad
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：设置表格属性 multipleSort 为 true。将需要排序的列属性 sorter 设置为 true，可以设置多个列，示例：[{ colKey: 'date', title: '日期', sorter: true }, { colKey: 'cost', title: '花费', sorter: true }]。设置表格排序属性 sort 的值为 [{ sortBy: 'date', descending: true }, { sortBy: 'cost', descending: false }]
                  代码示例：import React, { useState } from 'react';
import { Table, Space, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const columns = [
  {
    colKey: 'applicant',
    title: '申请人',
    width: '100',
  },
  {
    colKey: 'status',
    title: '申请状态',
    width: '150',
    sortType: 'all',
    sorter: true,
    cell: ({ rowIndex }) => {
      const status = rowIndex % 3;
      return (
        <Tag
          shape="round"
          theme={statusNameListMap[status].theme}
          variant="light-outline"
          icon={statusNameListMap[status].icon}
        >
          {statusNameListMap[status].label}
        </Tag>
      );
    },
  },
  {
    colKey: 'time',
    title: '申请耗时(天)',
    align: 'center',
    width: '140',
    sortType: 'all',
    sorter: true,
  },
  {
    colKey: 'channel',
    title: '签署方式',
    width: '120',
  },
  {
    colKey: 'detail.email',
    title: '邮箱地址',
    ellipsis: true,
  },
  {
    colKey: 'createTime',
    title: '申请时间',
  },
];
const initialData = [];
for (let i = 0; i < 5; i++) {
  initialData.push({
    index: i + 1,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}
export default function TableSingleSort() {
  const [sort, setSort] = useState([
    {
      sortBy: 'status',
      descending: true,
    },
    {
      sortBy: 'survivalTime',
      descending: false,
    },
  ]);
  function onSortChange(sort) {
    setSort(sort);
    // Request: 发起远程请求进行排序
    console.log('发起远程请求进行排序（未模拟请求数据）');
  }
  return (
    <Space direction="vertical">
      <div>排序方式：{JSON.stringify(sort)}</div>
      <Table
        rowKey="index"
        data={initialData}
        columns={columns}
        sort={sort}
        multipleSort
        onSortChange={onSortChange}
        lazyLoad
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：将需要排序的列属性 sorter 设置为排序函数，示例：{ colKey: 'date', title: '日期', sorter: (a, b) => a.status - b.status }。设置表格排序属性 sort 的值为 { sortBy: 'date', descending: true }。排序发生变化时，监听事件 onSortChange，在事件处理程序中添加业务逻辑。排序发生变化时，因为是本地数据排序，因此数据也会发生变化，需要监听 onDatachange，事件处理受控数据。
                  代码示例：import React, { useEffect, useState } from 'react';
import { Table, Checkbox, Space, Tag } from 'tdesign-react';
import { CheckCircleFilledIcon, ErrorCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const columns = [
  {
    colKey: 'applicant',
    title: '申请人',
    width: '100',
  },
  {
    colKey: 'status',
    title: '申请状态',
    width: '150',
    sortType: 'all',
    sorter: (a, b) => a.status - b.status,
    cell: ({ row }) => (
      <Tag
        shape="round"
        theme={statusNameListMap[row.status].theme}
        variant="light-outline"
        icon={statusNameListMap[row.status].icon}
      >
        {statusNameListMap[row.status].label}
      </Tag>
    ),
  },
  {
    title: '申请耗时(天)',
    colKey: 'time',
    width: '140',
    align: 'center',
    sortType: 'all',
    sorter: (a, b) => a.time - b.time,
  },
  {
    colKey: 'channel',
    title: '签署方式',
    width: '120',
  },
  {
    colKey: 'detail.email',
    title: '邮箱地址',
    ellipsis: true,
  },
  {
    colKey: 'createTime',
    title: '申请时间',
  },
];
const initialData = [];
for (let i = 0; i < 5; i++) {
  initialData.push({
    index: i + 1,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}
const SINGLE_SORT = {
  sortBy: 'status',
  descending: true,
};
const MULTIPLE_SORT = [
  {
    sortBy: 'status',
    descending: true,
  },
];
export default function TableSingleSort() {
  const [data, setData] = useState(initialData);
  const [sortInfo, setSortInfo] = useState(SINGLE_SORT);
  const [multipleSort, setMultipleSort] = useState(false);
  const onSortChange = (sort, options) => {
    console.log(sort, options);
    setSortInfo(sort);
    // 默认不存在排序时，也可以在这里设置 data 的值
    // setData(options.currentDataSource);
  };

  // 默认存在排序时，必须在这里给 data 赋值
  const onDataChange = (newData) => {
    setData(newData);
  };
  useEffect(() => {
    setSortInfo(multipleSort ? MULTIPLE_SORT : SINGLE_SORT);
  }, [multipleSort]);
  return (
    <Space direction="vertical">
      <Checkbox
        style={{
          marginBottom: 16,
        }}
        value={multipleSort}
        onChange={setMultipleSort}
      >
        是否允许多字段排序
      </Checkbox>
      <Table
        rowKey="index"
        data={data}
        columns={columns}
        sort={sortInfo}
        multipleSort={multipleSort}
        onSortChange={onSortChange}
        onDataChange={onDataChange}
        lazyLoad
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：selectedRowKeys 表示当前选中行的唯一标识数组，支持非受控属性 defaultSelectedRowKeysonSelectChange 会在选中行发生变化时触发设置 columns: [{ colKey: 'row-select', type: 'single' }] 可以将任意列定义为行选中操作列。
                  代码示例：import React, { useState } from 'react';
import { Table, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const initData = [];
for (let i = 0; i < 5; i++) {
  initData.push({
    index: i + 1,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}
const columns = [
  {
    // title: '单选',
    // align: 'center',
    colKey: 'row-select',
    type: 'single',
    // 允许单选(Radio)取消行选中
    checkProps: {
      allowUncheck: true,
    },
    // 禁用行选中方式一：使用 disabled 禁用行（示例代码有效，勿删，随时需要测试）。disabled 参数：{row: RowData; rowIndex: number })
    // 这种方式禁用行选中，当前行会添加行类名 t-table__row--disabled，禁用行文字变灰
    disabled: ({ rowIndex }) => rowIndex === 1 || rowIndex === 3,
    // 禁用行选中方式二：使用 checkProps 禁用行（示例代码有效，勿删，随时需要测试）
    // 这种方式禁用行选中，行文本不会变灰，不会添加类名 t-table__row--disabled
    // checkProps: ({ rowIndex }) => ({ disabled: rowIndex % 2 !== 0 }),
    width: 50,
  },
  {
    colKey: 'applicant',
    title: '申请人',
    width: '100',
  },
  {
    colKey: 'status',
    title: '申请状态',
    width: '150',
    cell: ({ rowIndex }) => {
      const status = rowIndex % 3;
      return (
        <Tag
          shape="round"
          theme={statusNameListMap[status].theme}
          variant="light-outline"
          icon={statusNameListMap[status].icon}
        >
          {statusNameListMap[status].label}
        </Tag>
      );
    },
  },
  {
    colKey: 'channel',
    title: '签署方式',
    width: '120',
  },
  {
    colKey: 'detail.email',
    title: '邮箱地址',
    ellipsis: true,
  },
  {
    colKey: 'createTime',
    title: '申请时间',
  },
];
export default function TableSingleSort() {
  const [data] = useState([...initData]);
  const [selectedRowKeys, setSelectedRowKeys] = useState([]);
  const onSelectChange = (value, { selectedRowData }) => {
    console.log(value, selectedRowData);
    setSelectedRowKeys(value);
  };
  return (
    <Table
      rowKey="index"
      data={data}
      columns={columns}
      selectOnRowClick={true}
      selectedRowKeys={selectedRowKeys}
      onSelectChange={onSelectChange}
      lazyLoad
    />
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：selectedRowKeys 表示当前选中行的唯一标识数组，支持非受控属性 defaultSelectedRowKeysonSelectChange 会在选中行发生变化时触发设置 columns: [{ colKey: 'row-select', type: 'multiple' }] 可以将任意列定义为行选中操作列。分页场景下的行选中，默认允许跨分页选中，即翻页时，上一页选中结果依然保存。如果希望每一页单独控制选中，互不影响，可设置 reserveSelectedRowOnPaginate=false注意：如果发现点击某一行便选中了全部，说明 rowKey 设置不正确，或者没有设置，请确保 rowKey 的值为 data 中的字段。
                  代码示例：import React, { useState } from 'react';
import { Table, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const columns = [
  {
    colKey: 'row-select',
    type: 'multiple',
    // 禁用行选中方式一：使用 disabled 禁用行（示例代码有效，勿删）。disabled 参数：{row: RowData; rowIndex: number })
    // 这种方式禁用行选中，当前行会添加行类名 t-table__row--disabled，禁用行文字变灰
    // disabled: ({ rowIndex }) => rowIndex === 1 || rowIndex === 3,

    // 禁用行选中方式二：使用 checkProps 禁用行（示例代码有效，勿删）
    // 这种方式禁用行选中，行文本不会变灰
    checkProps: ({ rowIndex }) => ({
      disabled: rowIndex % 2 !== 0,
      title: rowIndex % 2 !== 0 ? '不可选' : null,
    }),
    width: 50,
  },
  {
    colKey: 'applicant',
    title: '申请人',
    width: '100',
  },
  {
    colKey: 'status',
    title: '申请状态',
    width: '150',
    cell: ({ rowIndex }) => {
      const status = rowIndex % 3;
      return (
        <Tag
          shape="round"
          theme={statusNameListMap[status].theme}
          variant="light-outline"
          icon={statusNameListMap[status].icon}
        >
          {statusNameListMap[status].label}
        </Tag>
      );
    },
  },
  {
    colKey: 'channel',
    title: '签署方式',
    width: '120',
  },
  {
    colKey: 'detail.email',
    title: '邮箱地址',
    ellipsis: true,
  },
  {
    colKey: 'createTime',
    title: '申请时间',
  },
];
const initData = [];
for (let i = 0; i < 5; i++) {
  initData.push({
    index: i + 100,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}
export default function TableSingleSort() {
  const [data] = useState([...initData]);
  const [selectedRowKeys, setSelectedRowKeys] = useState([]);
  const onSelectChange = (value, { selectedRowData }) => {
    console.log(value, selectedRowData);
    setSelectedRowKeys(value);
  };
  return (
    <Table
      rowKey="index"
      data={data}
      columns={columns}
      selectOnRowClick={true}
      selectedRowKeys={selectedRowKeys}
      onSelectChange={onSelectChange}
      lazyLoad
    />
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：远程数据分页，表示组件内部不会对参数 data 进行分页。只输出分页信息，以供远程请求进行分页。
                  代码示例：import React, { useEffect, useState } from 'react';
import { Table, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const columns = [
  {
    colKey: 'row-select',
    type: 'multiple',
    width: 46,
  },
  {
    width: 200,
    colKey: 'name',
    title: '姓名',
    render({ type, row: { name } }) {
      if (type === 'title') return '申请人';
      return name ? `${name.first} ${name.last}` : 'UNKNOWN_USER';
    },
  },
  {
    colKey: 'status',
    title: '申请状态',
    width: '150',
    cell: ({ rowIndex }) => {
      const status = rowIndex % 3;
      return (
        <Tag
          shape="round"
          theme={statusNameListMap[status].theme}
          variant="light-outline"
          icon={statusNameListMap[status].icon}
        >
          {statusNameListMap[status].label}
        </Tag>
      );
    },
  },
  {
    width: 200,
    colKey: 'phone',
    title: '联系方式',
    render({ row: { phone } }) {
      return phone;
    },
  },
  {
    colKey: 'email',
    title: '邮箱',
    width: 180,
    ellipsis: true,
  },
];
export default function TableBasic() {
  const [isLoading, setIsLoading] = useState(false);
  const [data, setData] = useState([]);
  const [total, setTotal] = useState(0);
  const [current, setCurrent] = useState(1);
  const [pageSize, setPageSize] = useState(5);
  const [selectedRowKeys, setSelectedRowKeys] = useState([]);

  // 分页数据变化
  async function rehandleChange(pageInfo) {
    const { current, pageSize } = pageInfo;
    setCurrent(current);
    setPageSize(pageSize);
    await fetchData(pageInfo);
  }

  // 模拟远程请求
  async function fetchData(pageInfo) {
    setIsLoading(true);
    try {
      const { current, pageSize } = pageInfo;
      // 请求可能存在跨域问题
      const url = new URL('https://randomuser.me/api');
      const params = {
        page: current,
        results: pageSize,
      };
      Object.keys(params).forEach((key) => url.searchParams.append(key, params[key]));
      const response = await fetch(url.toString()).then((x) => x.json());
      setData(response.results);
      setTotal(120);
      setIsLoading(false);
    } catch (err) {
      setData([]);
      setTotal(120);
      setIsLoading(false);
    }
  }
  const onSelectChange = (value, { selectedRowData }) => {
    setSelectedRowKeys(value);
    console.log(value, selectedRowData);
  };
  useEffect(() => {
    fetchData({
      current,
      pageSize,
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return (
    <Table
      data={data}
      columns={columns}
      rowKey="phone"
      loading={isLoading}
      pagination={{
        current,
        pageSize,
        // 支持非受控用法
        // defaultCurrent: 1,
        // defaultPageSize: 5,
        total,
        showJumper: true,
        onChange(pageInfo) {
          console.log(pageInfo, 'onChange pageInfo');
          rehandleChange(pageInfo);
        },
      }}
      onPageChange={(pageInfo) => {
        console.log(pageInfo, 'onPageChange pageInfo');
      }}
      selectedRowKeys={selectedRowKeys}
      onSelectChange={onSelectChange}
      // reserveSelectedRowOnPaginate={false}
      lazyLoad
    />
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：当 data.length 长度超过 pageSize，单页已无法完整地显示数据，此时会自动开启本地数据分页，组件内部会对 data 进行分页。 如果希望禁用组件内部分页，可以设置 disableDataPage=true。
                  代码示例：import React, { useState } from 'react';
import { Table, Space, Radio, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const data = [];
const total = 59;
for (let i = 0; i < total; i++) {
  data.push({
    index: i,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}
const columns = [
  {
    colKey: 'serial-number',
    width: 80,
    title: '序号',
  },
  {
    colKey: 'applicant',
    title: '申请人',
    width: '100',
  },
  {
    colKey: 'status',
    title: '申请状态',
    width: '150',
    cell: ({ rowIndex }) => {
      const status = rowIndex % 3;
      return (
        <Tag
          shape="round"
          theme={statusNameListMap[status].theme}
          variant="light-outline"
          icon={statusNameListMap[status].icon}
        >
          {statusNameListMap[status].label}
        </Tag>
      );
    },
  },
  {
    colKey: 'channel',
    title: '签署方式',
    width: '120',
  },
  // { colKey: 'detail.email', title: '邮箱地址', ellipsis: true },
  {
    colKey: 'createTime',
    title: '申请时间',
  },
  {
    colKey: 'row-select',
    type: 'multiple',
    width: 46,
  },
];
export default function TableBasic() {
  const [reserveSelectedRowOnPaginate, setReserveSelectedRowOnPaginate] = useState(true);
  const [selectedRowKeys, setSelectedRowKeys] = useState([]);
  // const [current, setCurrent] = useState(2);
  // const [pageSize, setPageSize] = useState(5);

  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Radio.Group
        variant="default-filled"
        value={reserveSelectedRowOnPaginate}
        onChange={(val) => setReserveSelectedRowOnPaginate(val)}
      >
        <Radio.Button value={true}>跨分页选中</Radio.Button>
        <Radio.Button value={false}>当前页选中</Radio.Button>
      </Radio.Group>

      <Table
        // todo(type): fix id props
        // @ts-ignore
        id="pagination-table"
        data={data}
        columns={columns}
        rowKey="index"
        // 非受控写法
        pagination={{
          defaultCurrent: 2,
          defaultPageSize: 5,
          total,
          showJumper: true,
          onChange(pageInfo) {
            console.log(pageInfo, 'onChange pageInfo');
          },
          onCurrentChange(current, pageInfo) {
            console.log(current, 'onCurrentChange current');
            console.log(pageInfo, 'onCurrentChange pageInfo');
          },
          onPageSizeChange(size, pageInfo) {
            console.log(size, 'onPageSizeChange size');
            console.log(pageInfo, 'onPageSizeChange pageInfo');
          },
          selectProps: {
            popupProps: {
              attach: () => document.getElementById('pagination-table'),
              overlayInnerStyle: {
                fontWeight: 'normal',
              },
              overlayStyle: {
                fontWeight: 'normal',
              },
              overlayClassName: 'table-pagination-custom-overlay-class',
              overlayInnerClassName: 'table-pagination-custom-overlay-inner-class',
            },
          },
        }}
        // 受控用法：与分页组件对齐
        // pagination={{
        //   current,
        //   pageSize,
        //   showJumper: true,
        //   total,
        //   onChange(pageInfo) {
        //     console.log(pageInfo, 'onChange pageInfo');
        //     setCurrent(pageInfo.current);
        //     setPageSize(pageInfo.pageSize);
        //   },
        // }}
        onPageChange={(pageInfo, newDataSource) => {
          console.log(pageInfo, 'onPageChange pageInfo');
          console.log(newDataSource, 'onPageChange newDataSource');
        }}
        selectedRowKeys={selectedRowKeys}
        onSelectChange={(val, context) => {
          setSelectedRowKeys(val);
          console.log(val, context);
        }}
        reserveSelectedRowOnPaginate={reserveSelectedRowOnPaginate}
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：表格属性 filterValue 用于设置过滤功能默认值，示例：{ firstName: '' }。表格属性 filterIcon 用于设置自定义过滤图标。筛选器值发生变化时，会触发 filterChange 事件。列配置 filter.type 决定使用哪一种筛选器，可选值有：single/multiple/input，分别表示：单选按钮筛选器、复选框筛选器、输入框筛选器。也可以使用 filter.component 自定义筛选组件。列配置 filter.list 用于配置当前筛选器可选值有哪些，仅当 filter.type 等于 single 或 multiple 时有效。列配置 filter.props 用于透传筛选器属性，可以对筛选器进行任何原组件支持的属性配置.列配置 filter.component 用于自定义筛选器，只要保证自定义筛选器包含 value 属性 和 change 事件，即可像内置筛选器一样正常使用。列配置 filter.showConfirmAndReset 用于控制是否显示“确认”“重置”按钮.列配置 filter.resetValue 用于设置点击“重置”按钮时的重置值，并非每个场景都会重置为 '' 或 [] null，默认重置为 ''。表格属性 filterRow 可完全自定义过滤结果行显示内容，设置 filterRow=null 隐藏过滤行。更多功能属性请查看 API 文档中的 TableColumnFilter
                  代码示例：import React, { useState } from 'react';
import { isNumber } from 'lodash-es';
import { Table, Button, DateRangePickerPanel, Space, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const columns = [
  {
    colKey: 'applicant',
    title: '申请人',
    width: 100,
    foot: '-',
  },
  {
    title: '申请状态',
    colKey: 'status',
    // 单选过滤配置
    filter: {
      type: 'single',
      list: [
        {
          label: '审批通过',
          value: 0,
        },
        {
          label: '已过期',
          value: 1,
        },
        {
          label: '审批失败',
          value: 2,
        },
      ],
      // 透传浮层全部属性，示例代码
      // popupProps: {
      //   placement: 'right',
      //   attach: () => document.body
      // },
    },
    cell: ({ row }) => (
      <Tag
        shape="round"
        theme={statusNameListMap[row.status].theme}
        variant="light-outline"
        icon={statusNameListMap[row.status].icon}
      >
        {statusNameListMap[row.status].label}
      </Tag>
    ),
  },
  {
    title: '签署方式',
    colKey: 'channel',
    // 多选过滤配置
    filter: {
      type: 'multiple',
      resetValue: [],
      list: [
        {
          label: 'All',
          checkAll: true,
        },
        {
          label: '电子签署',
          value: '电子签署',
        },
        {
          label: '纸质签署',
          value: '纸质签署',
        },
      ],
      // 是否显示重置取消按钮，一般情况不需要显示
      showConfirmAndReset: true,
    },
  },
  {
    title: 'Email',
    colKey: 'email',
    // 输入框过滤配置
    filter: {
      type: 'input',
      // 文本域搜索
      // component: Textarea,

      resetValue: '',
      // 按下 Enter 键时也触发确认搜索
      confirmEvents: ['onEnter'],
      props: {
        placeholder: '输入关键词过滤',
      },
      // 是否显示重置取消按钮，一般情况不需要显示
      showConfirmAndReset: true,
    },
  },
  {
    title: 'Date',
    colKey: 'createTime',
    // 用于查看同时存在排序和过滤时的图标显示是否正常
    sorter: true,
    // 自定义过滤组件：日期过滤配置，请确保自定义组件包含 value 和 onChange 属性
    filter: {
      // todo(type): 类型缺陷
      type: 'custom',
      component: DateRangePickerPanel,
      props: {
        firstDayOfWeek: 7,
      },
      style: {
        fontSize: '14px',
      },
      classNames: 'custom-class-name',
      attrs: {
        'data-type': 'DateRangePickerPanel',
      },
      // 是否显示重置取消按钮，一般情况不需要显示
      showConfirmAndReset: true,
      // 日期范围是一个组件，重置时需赋值为 []
      resetValue: [],
    },
  },
];

// eslint-disable-next-line
// function IconText(props = {}) {
//   // 根据不同的 Props，允许定义不同的筛选图标（col, colIndex 在 Table 组件内部已经注入）
//   const { col, colIndx } = props;
//   console.log(col, colIndx);
//   if (col.colKey === 'email') return <div>EmailIcon</div>;
//   return <i>Icon</i>;
// }

const initData = new Array(5).fill(null).map((_, i) => ({
  key: String(i + 1),
  applicant: ['贾明', '张三', '王芳'][i % 3],
  status: i % 3,
  channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
  email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
  matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
  time: [2, 3, 1, 4][i % 4],
  createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
}));
export default function TableSingleSort() {
  const [data, setData] = useState([...initData]);
  //  survivalTime: [300, 500]
  const [filterValue, setFilterValue] = useState({
    lastName: [],
  });
  const request = (filters) => {
    const timer = setTimeout(() => {
      clearTimeout(timer);
      const newData = initData.filter((item) => {
        let result = true;
        if (isNumber(filters.status)) {
          result = item.status === filters.status;
        }
        if (result && filters.channel && filters.channel.length) {
          result = filters.channel.includes(item.channel);
        }
        if (result && filters.email) {
          result = item.email.indexOf(filters.email) !== -1;
        }
        if (result && filters.createTime && filters.createTime.length) {
          result = item.createTime === filters.createTime;
        }
        return result;
      });
      setData(newData);
    }, 100);
  };
  const onFilterChange = (filters, col) => {
    console.log(filters, col);
    setFilterValue({
      ...filters,
      createTime: filters.createTime || [],
      lastName: filters.lastName || [],
    });
    // 在此处理过滤数据效果，以达到更真实的过滤效果
    request(filters);
  };
  const onChange = (info, context) => {
    console.log('onChange', info, context);
  };

  // 受控方式，打开模拟排序（可用，勿删）
  // useEffect(() => {
  //   request(filterValue);
  // }, [filterValue]);

  // 模拟异步请求，进行数据排序（可用，勿删）
  // function request(filterVal) {
  //   const timer = setTimeout(() => {
  //     if (!filterVal) {
  //       setData([...initData]);
  //       return;
  //     }
  //     let dataNew = initData;
  //     for (const k in filterVal) {
  //       if (typeof filterVal?.[k] === 'string') {
  //         dataNew = dataNew.filter((item) => item?.[k].indexOf(filterVal?.[k]) != -1);
  //       }
  //       if (typeof filterVal?.[k] === 'object' && filterVal?.[k].length > 0) {
  //         dataNew = dataNew
  //           .filter((item) => filterVal?.[k].indexOf(item?.[k]) != -1)
  //           .map((item) => ({ ...item, instance: `${item.instance}_TDesign_Filter` }));
  //       }
  //     }
  //     setData([...dataNew]);
  //     clearTimeout(timer);
  //   }, 100);
  // }
  return (
    <Space direction="vertical">
      <Space direction="horizontal" align="center">
        <Button
          onClick={() => {
            setFilterValue({});
            setData([...initData]);
          }}
        >
          清空已筛选
        </Button>
        <span>已选筛选条件：{JSON.stringify(filterValue)}</span>
      </Space>
      <Table
        rowKey="key"
        data={data}
        columns={columns}
        // filterIcon={<IconText />}
        filterValue={filterValue}
        // defaultFilterValue={filterValue}
        onFilterChange={onFilterChange}
        onChange={onChange}
        // filterRow={() => null}
        // 非受控写法
        pagination={{
          defaultCurrent: 1,
          defaultPageSize: 5,
          showJumper: true,
          pageSizeOptions: [1, 3, 5, 10],
        }}
        lazyLoad
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：使用表格属性 rowspanAndColspan 设置表格内容合并元格。使用表格属性 rowspanAndColspanInFooter 设置表尾合并单元格。使用列属性 colspan 设置表头合并。如果是多行表头，请参考下方「多级表头」示例。
                  代码示例：import React from 'react';
import { Table, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const data = new Array(6).fill(null).map((_, i) => ({
  i,
  status: i % 3,
  applicant: ['贾明', '张三', '王芳'][i % 3],
  channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
  type: ['审批通过', '已过期', '审批失败', '审批中'][i % 4],
  detail: {
    email: [
      'w.cezkdudy@lhll.au',
      'r.nmgw@peurezgn.sl',
      'p.cumx@rampblpa.ru',
      'b.nmgw@peurezgn.sl',
      'd.cumx@rampblpa.ru',
    ][i % 5],
  },
  needed: ['Y', 'N'][i % 1],
  description: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
  createTime: '2021-11-01',
}));
const columns = [
  {
    colKey: 'applicant',
    title: '申请人',
    width: '100',
  },
  {
    colKey: 'status',
    title: '申请状态',
    width: '150',
    cell: ({ rowIndex }) => {
      const status = rowIndex % 3;
      return (
        <Tag
          shape="round"
          theme={statusNameListMap[status].theme}
          variant="light-outline"
          icon={statusNameListMap[status].icon}
        >
          {statusNameListMap[status].label}
        </Tag>
      );
    },
  },
  {
    colKey: 'description',
    title: '审批事项',
    width: 150,
  },
  {
    colKey: 'detail.email',
    title: '邮箱地址',
  },
  {
    colKey: 'channel',
    // 多行表头合并请参考「多级表头示例」
    title: '其他信息',
    // 仅适用于单行表头合并列
    colspan: 2,
    // 设置列样式，注释的示例代码有效
    // attrs: ({ type, col, row, colIndex, rowIndex }) => ({
    //   style: {
    //     color: 'blue',
    //   },
    // }),
  },
  {
    colKey: 'createTime',
    title: '创建时间',
  },
];
export default function TableExample() {
  const rowspanAndColspan = ({ col, rowIndex, colIndex }) => {
    if (colIndex === 0 && rowIndex % 2 === 0) {
      return {
        rowspan: 2,
      };
    }
    if (col.colKey === 'description' && rowIndex === 1) {
      return {
        colspan: 2,
        rowspan: 2,
      };
    }
    if (col.colKey === 'email' && rowIndex === 4) {
      return {
        colspan: 2,
        rowspan: 2,
      };
    }
  };
  return (
    <Table data={data} bordered={true} columns={columns} rowKey="i" rowspanAndColspan={rowspanAndColspan} lazyLoad />
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：多级表头的配置只需要在列配置中添加 children 子列配置即可。多级表头中的固定列，必须指定每一个固定列的 colKey 和 fixed 属性。多级表表头中的列宽设置，只需指定最后一层表头宽度。
                  代码示例：import React, { useState } from 'react';
import { Table, Checkbox, Space, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const initialData = [];
for (let i = 0; i < 20; i++) {
  initialData.push({
    index: i + 1,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    time: [3, 2, 4, 1][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
    property: ['组长审批', '部门审批', '财务审批'][i % 3],
    default: i,
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
      position: `读取 ${i} 个数据的嵌套信息值`,
    },
    needed: i % 4 === 0 ? '是' : '否',
    type_default: '-',
    description: '数据源',
    field1: [100, 200, 400, 500][i % 4],
    field2: [100, 200, 400, 500][i % 4],
    field3: [100, 200, 400, 500][i % 4],
    field4: [100, 200, 400, 500][i % 4],
    field5: '字段5',
    field6: '字段6',
    field7: `审批单号00${i + 1}`,
  });
}
export default function TableExample() {
  const [data, setData] = useState([...initialData]);
  const [bordered, setBordered] = useState(true);
  const [fixedHeader, setFixedHeader] = useState(true);
  const [fixedLeftCol, setFixedLeftCol] = useState(false);
  const [fixedRightCol, setFixedRightCol] = useState(false);
  const [headerAffixedTop, setHeaderAffixedTop] = useState(false);
  const [sort, setSort] = useState({
    sortBy: 'default',
    descending: false,
  });
  const onSortChange = (sortInfo, context) => {
    setSort(sortInfo);
    setData([...context.currentDataSource]);
    console.log(context);
  };
  const columns = [
    {
      title: '申请人',
      colKey: 'applicant',
      fixed: fixedLeftCol ? 'left' : undefined,
      width: 100,
    },
    {
      title: '申请汇总',
      fixed: fixedLeftCol ? 'left' : undefined,
      width: 100,
      colKey: 'total_info',
      children: [
        {
          align: 'left',
          colKey: 'platform',
          title: '申请状态',
          fixed: fixedLeftCol ? 'left' : undefined,
          width: 120,
          sorter: (a, b) => a.default - b.default,
          cell: ({ rowIndex }) => {
            const status = rowIndex % 3;
            return (
              <Tag
                shape="round"
                theme={statusNameListMap[status].theme}
                variant="light-outline"
                icon={statusNameListMap[status].icon}
              >
                {statusNameListMap[status].label}
              </Tag>
            );
          },
        },
        {
          title: '申请渠道和金额',
          colKey: 'type_default',
          fixed: fixedLeftCol ? 'left' : undefined,
          width: 100,
          children: [
            {
              align: 'left',
              colKey: 'channel',
              title: '类型',
              fixed: fixedLeftCol ? 'left' : undefined,
              width: 110,
            },
            {
              align: 'center',
              colKey: 'time',
              title: '申请耗时(天)',
              fixed: fixedLeftCol ? 'left' : undefined,
              width: 150,
            },
          ],
        },
      ],
    },
    {
      colKey: 'field1',
      title: '住宿费',
      width: 100,
    },
    {
      colKey: 'field3',
      title: '交通费',
      width: 100,
    },
    {
      colKey: 'field4',
      title: '物料费',
      width: 100,
    },
    {
      colKey: 'field2',
      title: '奖品激励费',
      width: 120,
    },
    {
      title: '审批汇总',
      colKey: 'instruction',
      fixed: fixedRightCol ? 'right' : undefined,
      width: 100,
      children: [
        {
          align: 'left',
          colKey: 'property',
          title: '审批状态',
          fixed: fixedRightCol ? 'right' : undefined,
          width: 120,
          filter: {
            type: 'single',
            list: [
              {
                label: '所有状态',
                value: '',
              },
              {
                label: '组长审批',
                value: '组长审批',
              },
              {
                label: '部门审批',
                value: '部门审批',
              },
              {
                label: '财务审批',
                value: '财务审批',
              },
            ],
          },
        },
        {
          align: 'left',
          ellipsis: true,
          colKey: 'description',
          title: '说明',
          fixed: fixedRightCol ? 'right' : undefined,
          width: 100,
          children: [
            {
              colKey: 'field7',
              title: '审批单号',
              fixed: fixedRightCol ? 'right' : undefined,
              width: 120,
            },
            {
              colKey: 'detail.email',
              title: '邮箱地址',
              fixed: fixedRightCol ? 'right' : undefined,
              ellipsis: true,
              width: 150,
            },
          ],
        },
      ],
    },
    {
      colKey: 'createTime',
      title: '申请时间',
      fixed: fixedRightCol ? 'right' : undefined,
      width: '120',
    },
  ];
  return (
    <Space
      direction="vertical"
      size="large"
      style={{
        width: '100%',
      }}
    >
      {/* <!-- 按钮操作区域 --> */}
      <Space>
        <Checkbox checked={bordered} onChange={setBordered}>
          显示表格边框
        </Checkbox>
        <Checkbox checked={fixedHeader} onChange={setFixedHeader}>
          显示固定表头
        </Checkbox>
        <Checkbox checked={fixedLeftCol} onChange={setFixedLeftCol}>
          固定左侧列
        </Checkbox>
        <Checkbox checked={fixedRightCol} onChange={setFixedRightCol}>
          固定右侧列
        </Checkbox>
        <Checkbox checked={headerAffixedTop} onChange={setHeaderAffixedTop}>
          表头吸顶
        </Checkbox>
      </Space>

      <Table
        data={data}
        bordered={bordered}
        columns={columns}
        rowKey="index"
        maxHeight={fixedHeader ? 380 : undefined}
        headerAffixProps={{
          offsetTop: 0,
        }}
        headerAffixedTop={headerAffixedTop}
        columnController={{
          displayType: 'auto-width',
        }}
        sort={sort}
        onSortChange={onSortChange}
        lazyLoad
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：loading=true 显示默认加载状态；loading=false 不显示加载状态；loading值类型为函数，则表示自定义加载状态文本内容，对于支持插槽的框架还支持同名插槽（不包含加载图标）。loadingProps 用于透传加载组件全部属性，可以使用该特性定制化更多个性加载状态。
                  代码示例：import React from 'react';
import { Table } from 'tdesign-react';
import { LoadingIcon } from 'tdesign-icons-react';

export default function EmptyTable() {
  const columns = [
    {
      colKey: 'instance',
      title: '集群名称',
    },
    {
      colKey: 'status',
      title: '状态',
    },
    {
      colKey: 'owner',
      title: '管理员',
    },
    {
      colKey: 'description',
      title: '描述',
    },
  ];
  return (
    <div>
      <Table data={[]} columns={columns} rowKey="id" loading={true}></Table>

      <Table data={[]} columns={columns} rowKey="id" loading={'自定义加载状态文本'}></Table>

      <Table
        data={[]}
        columns={columns}
        rowKey="id"
        loadingProps={{
          indicator: false,
        }}
        loading={
          <div>
            <LoadingIcon name="loading" size="20px" />
            &nbsp;&nbsp;<span>渲染函数自定义加载中（可单独去除内置加载图标）</span>
          </div>
        }
        lazyLoad
      ></Table>
    </div>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：asyncLoading='' 表示非加载状态或加载完成状态；asyncLoading='load-more' 表格底部显示“加载更多”；asyncLoading='loading' 表格底部显示“正在加载中，请稍后”；asyncLoading 值类型为函数，则表示完全自定义底部异步加载内容。
                  代码示例：import React, { useMemo, useState } from 'react';
import { Table, Radio, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const data = [];
for (let i = 0; i < 5; i++) {
  data.push({
    index: i + 1,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}
const columns = [
  {
    colKey: 'applicant',
    title: '申请人',
    width: '100',
  },
  {
    colKey: 'status',
    title: '申请状态',
    width: '150',
    cell: ({ row }) => (
      <Tag
        shape="round"
        theme={statusNameListMap[row.status].theme}
        variant="light-outline"
        icon={statusNameListMap[row.status].icon}
      >
        {statusNameListMap[row.status].label}
      </Tag>
    ),
  },
  {
    colKey: 'channel',
    title: '签署方式',
    width: '120',
  },
  {
    colKey: 'detail.email',
    title: '邮箱地址',
    ellipsis: true,
  },
  {
    colKey: 'createTime',
    title: '申请时间',
  },
];
export default function EmptyTable() {
  const [asyncLoading, setAsyncLoading] = useState('loading');
  const loadingNode = useMemo(
    () =>
      asyncLoading === 'loading-custom' ? (
        <>
          <div
            className={`t-table--loading-progressbar`}
            style={{
              width: '50%',
            }}
          />
          <div className="t-table__async-loading">这是自定义加载状态和内容</div>
        </>
      ) : (
        asyncLoading
      ),
    [asyncLoading],
  );
  function onAsyncLoadingClick({ status }) {
    console.log('status', status);
    if (status === 'load-more') {
      setAsyncLoading('loading');
    }
  }
  return (
    <div>
      <Radio.Group value={asyncLoading} onChange={(val) => setAsyncLoading(val)}>
        <Radio.Button value="load-more">加载更多</Radio.Button>
        <Radio.Button value="loading">加载中</Radio.Button>
        <Radio.Button value="loading-custom">自定义加载更多</Radio.Button>
        <Radio.Button value="">加载完成</Radio.Button>
      </Radio.Group>

      <Table
        data={data}
        columns={columns}
        rowKey="index"
        asyncLoading={loadingNode}
        onAsyncLoadingClick={onAsyncLoadingClick}
      ></Table>
    </div>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：使用默认空表格样式。
                  代码示例：import React from 'react';
import { Table } from 'tdesign-react';

export default function EmptyTable() {
  const TableData = [];
  return (
    <>
      <Table
        data={TableData}
        columns={[
          {
            colKey: 'project',
            title: '项目名称',
            width: '150px',
            cell: ({ row }) => row.projectName,
          },
          {
            colKey: 'member',
            title: '管理员',
            width: '300px',
            cell: ({ row }) => row.manager.join(','),
          },
          {
            colKey: 'company',
            title: '所属公司',
            width: '150px',
            cell: ({ row }) => row.company,
          },
        ]}
        rowKey="projectName"
      />
      <Table
        data={TableData}
        empty={
          <span
            style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              height: 100,
            }}
          >
            😄 it is empty. 😁
          </span>
        }
        columns={[
          {
            colKey: 'project',
            title: '项目名称',
            width: '150px',
            cell: ({ row }) => row.projectName,
          },
          {
            colKey: 'member',
            title: '管理员',
            width: '300px',
            cell: ({ row }) => row.manager.join(','),
          },
          {
            colKey: 'company',
            title: '所属公司',
            width: '150px',
            cell: ({ row }) => row.company,
          },
        ]}
        rowKey="projectName"
      />
    </>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：设置参数 dragSort='row' 即可。
                  代码示例：import React, { useState } from 'react';
import { Table, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const columns = [
  {
    colKey: 'applicant',
    title: '申请人',
    width: '100',
  },
  {
    colKey: 'status',
    title: '申请状态',
    width: '150',
    cell: ({ row }) => (
      <Tag
        shape="round"
        theme={statusNameListMap[row.status].theme}
        variant="light-outline"
        icon={statusNameListMap[row.status].icon}
      >
        {statusNameListMap[row.status].label}
      </Tag>
    ),
  },
  {
    colKey: 'channel',
    title: '签署方式',
    width: '120',
  },
  {
    colKey: 'detail.email',
    title: '邮箱地址',
    ellipsis: true,
  },
  {
    colKey: 'createTime',
    title: '申请时间',
  },
];
const initialData = [];
for (let i = 0; i < 5; i++) {
  initialData.push({
    index: i + 1,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}
export default function TableDragSort() {
  const [data, setData] = useState(initialData);

  // currentData is going to be deprecated.
  const onDragSort = ({ currentIndex, targetIndex, current, target, data, newData, e }) => {
    console.log('交换行', currentIndex, targetIndex, current, target, data, newData, e);
    // 数据受控实现
    setData(newData);
  };

  // 拖拽排序涉及到 data 的变更，相对比较慎重，因此仅支持受控用法
  return <Table rowKey="index" data={data} columns={columns} dragSort="row" onDragSort={onDragSort} lazyLoad />;
}

                  ===SPLIT===组建:<Table/>
                  使用描述：设置参数 dragSort='row-handler' 的同时，还需要添加手柄列：{ colKey: 'sort', cell: () => <MoveIcon /> }。
                  代码示例：import React, { useState } from 'react';
import { Table, Checkbox, Space, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon, MoveIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const columns = [
  {
    colKey: 'drag',
    // 列拖拽排序必要参数
    title: '排序',
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    cell: (h) => (
      <span>
        <MoveIcon />
      </span>
    ),
    width: 46,
  },
  {
    colKey: 'applicant',
    title: '申请人',
    width: '100',
  },
  {
    colKey: 'status',
    title: '申请状态',
    width: '150',
    cell: ({ row }) => (
      <Tag
        shape="round"
        theme={statusNameListMap[row.status].theme}
        variant="light-outline"
        icon={statusNameListMap[row.status].icon}
      >
        {statusNameListMap[row.status].label}
      </Tag>
    ),
  },
  {
    colKey: 'channel',
    title: '签署方式',
    width: '120',
  },
  {
    colKey: 'detail.email',
    title: '邮箱地址',
    ellipsis: true,
  },
  {
    colKey: 'createTime',
    title: '申请时间',
  },
];
const initialData = [];
for (let i = 0; i < 5; i++) {
  initialData.push({
    index: i + 1,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}
export default function TableDragSort() {
  const [data, setData] = useState([...initialData]);
  const [loading, setLoading] = useState(false);

  // { currentIndex, targetIndex, current, target, data, newData, e }
  const onDragSort = (params) => {
    console.log('交换行', params);
    // 数据受控实现
    setData(params.newData);
  };
  return (
    <Space direction="vertical">
      <Checkbox value={loading} onChange={setLoading}>
        加载状态
      </Checkbox>
      {/* 拖拽排序涉及到 data 的变更，相对比较慎重，因此仅支持受控用法 */}
      <Table
        rowKey="index"
        data={data}
        columns={columns}
        dragSort="row-handler"
        loading={loading}
        onDragSort={onDragSort}
        lazyLoad
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：【持续完善中】调整列顺序。设置参数 dragSort='col' 即可。列拖拽排序场景中，必须指定列唯一标识 colKey。
                  代码示例：import React, { useState } from 'react';
import { Table, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const initialColumns = [
  {
    colKey: 'applicant',
    title: '申请人',
    width: '100',
    fixed: 'left',
  },
  {
    colKey: 'status',
    title: '申请状态',
    width: '150',
    cell: ({ row }) => (
      <Tag
        shape="round"
        theme={statusNameListMap[row.status].theme}
        variant="light-outline"
        icon={statusNameListMap[row.status].icon}
      >
        {statusNameListMap[row.status].label}
      </Tag>
    ),
  },
  {
    colKey: 'channel',
    title: '签署方式',
    width: '120',
  },
  {
    colKey: 'detail.email',
    title: '邮箱地址',
    ellipsis: true,
  },
  {
    colKey: 'createTime',
    title: '申请时间',
  },
];
const initData = [];
for (let i = 0; i < 5; i++) {
  initData.push({
    index: i + 1,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    detail: {
      email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    },
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  });
}
export default function TableDragSort() {
  const [data] = useState(initData);
  const [columns, setColumns] = useState(initialColumns);

  // { currentIndex, targetIndex, current, target, data, newData, e, sort }
  const onDragSort = (params) => {
    console.log('交换行', params);
    // 数据受控实现
    if (params.sort === 'col') {
      setColumns(params.newData);
    }
  };

  // 拖拽排序涉及到 data 的变更，相对比较慎重，因此仅支持受控用法
  return <Table rowKey="index" data={data} columns={columns} dragSort="col" onDragSort={onDragSort} lazyLoad />;
}

                  ===SPLIT===组建:<Table/>
                  使用描述：懒加载一般用于数据量较大的场景，设置 scroll={ type: 'lazy' } 即可开启懒加载模式，通过 scroll.bufferSize 预设加载过程中提前加载的数据数量。
                  代码示例：import React, { useState } from 'react';
import { Table, Button, Space, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
export default function TableLazy() {
  const columns = [
    {
      colKey: 'applicant',
      title: '申请人',
      width: '100',
    },
    {
      colKey: 'status',
      title: '申请状态',
      width: '150',
      cell: ({ rowIndex }) => {
        const status = rowIndex % 3;
        return (
          <Tag
            shape="round"
            theme={statusNameListMap[status].theme}
            variant="light-outline"
            icon={statusNameListMap[status].icon}
          >
            {statusNameListMap[status].label}
          </Tag>
        );
      },
    },
    {
      colKey: 'matters',
      title: '申请事项',
      width: '140',
    },
    {
      colKey: 'detail.email',
      title: '邮箱地址',
    },
    {
      colKey: 'createTime',
      title: '申请时间',
    },
  ];

  // 本地数据排序，表示组件内部会对参数 data 进行数据排序。如果 data 数据为 10 条，就仅对这 10 条数据进行排序。
  const initialData = [];
  for (let i = 0; i < 10; i++) {
    initialData.push({
      id: i + 1,
      applicant: ['贾明', '张三', '王芳'][i % 3],
      channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
      detail: {
        email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
      },
      matters: ['部分宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
      time: [2, 3, 1, 4][i % 4],
      createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
    });
  }
  const times = Array.from(new Array(1000), () => ''); // 测试共计1k条数据
  const testData = [];
  times.forEach((item, i) => {
    const k = i % 10;
    testData[i] = {
      ...initialData[k],
      id: i + 1,
    };
  });
  const [data, setData] = useState([...testData]);
  const reset = () => {
    setData([]);
    setTimeout(() => {
      setData(testData);
    });
  };
  return (
    <Space direction="vertical">
      <Button
        theme="default"
        style={{
          marginTop: '10px',
        }}
        onClick={reset}
      >
        列表恢复初始状态
      </Button>
      <Table
        rowKey="id"
        columns={columns}
        data={data}
        height={300}
        scroll={{
          type: 'lazy',
          bufferSize: 10,
        }}
        bordered
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：虚拟滚动一般用于超大数据渲染的场景，以提供更优的前端性能表现，设置 scroll={ type: 'virtual' } 即可开启虚拟滚动模式。为保证组件收益最大化，当数据量小于 threshold 时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动，threshold 默认为 100。
                  代码示例：import React, { useRef, useState } from 'react';
import { Table, Space, Button, Checkbox, Tag } from 'tdesign-react';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

function getTableData() {
  const initialData = [];
  for (let i = 0; i < 10; i++) {
    initialData.push({
      id: i + 1,
      applicant: ['贾明', '张三', '王芳'][i % 3],
      channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
      detail: {
        email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
      },
      matters: ['部分宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
      time: [2, 3, 1, 4][i % 4],
      createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
    });
  }
  const times = Array.from(new Array(1000), () => '');
  const testData = [];
  times.forEach((item, i) => {
    const k = i % 10;
    testData[i] = {
      ...initialData[k],
      id: i + 1,
    };
  });
  return testData;
}
const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};

/**
 * Start Here
 */
const TableVirtualScroll = () => {
  const tableRef = useRef(null);
  const [bordered, setBordered] = useState(true);
  const [data] = useState([...getTableData()]);
  const scrollToElement = () => {
    tableRef.current.scrollToElement({
      // 跳转元素下标（第 256 个元素位置）
      index: 255,
      // 滚动元素距离顶部的距离（如表头高度）
      top: 47,
      // 高度动态变化场景下，即 isFixedRowHeight = false。延迟设置元素位置，一般用于依赖不同高度异步渲染等场景，单位：毫秒。（固定高度不需要这个）
      time: 60,
    });
  };
  const columns = [
    {
      colKey: 'serial-number',
      width: 70,
      title: '序号',
    },
    {
      colKey: 'applicant',
      title: '申请人',
      width: '100',
    },
    {
      colKey: 'status',
      title: '申请状态',
      width: '150',
      cell: ({ rowIndex }) => {
        const status = rowIndex % 3;
        return (
          <Tag
            shape="round"
            theme={statusNameListMap[status].theme}
            variant="light-outline"
            icon={statusNameListMap[status].icon}
          >
            {statusNameListMap[status].label}
          </Tag>
        );
      },
    },
    {
      colKey: 'matters',
      title: '申请事项',
      width: '140',
    },
    {
      colKey: 'detail.email',
      title: '邮箱地址',
    },
    {
      colKey: 'createTime',
      title: '申请时间',
    },
  ];
  const height = 300;
  // const [height, setHeight] = useState(300);

  // const setLowerHeight = () => {
  //   setHeight(150);
  // };

  // const setHigherHeight = () => {
  //   setHeight(600);
  // };

  return (
    <Space direction="vertical">
      <Space align="center">
        <Button onClick={scrollToElement}>滚动到指定元素</Button>
        <Checkbox checked={bordered} onChange={setBordered}>
          是否显示边框
        </Checkbox>
        {/* 高度变化代码保留；用于测试 Table 高度变化时，是否表现正常 */}
        {/* <Button onClick={setLowerHeight}>Lower Height</Button> */}
        {/* <Button onClick={setHigherHeight}>Higher Height</Button> */}
      </Space>

      <Table
        ref={tableRef}
        rowKey="id"
        data={data}
        columns={columns}
        bordered={bordered}
        height={height}
        scroll={{
          type: 'virtual',
          rowHeight: 48,
          bufferSize: 10,
        }}
        lazyLoad
      ></Table>
    </Space>
  );
};
TableVirtualScroll.displayName = 'TableVirtualScroll';
export default TableVirtualScroll;

                  ===SPLIT===组建:<Table/>
                  使用描述：column.edit.component 表示进行编辑的组件，示例：Input、Select、DatePicker。需保证组件包含 value 和 onChange 两个属性。如果还需要支持校验规则，则组件还需实现 tips 和 status 两个 API，实现规则可参考 Input 组件。column.edit.props 表示传给编辑组件 column.edit.component 的参数。column.edit.onEdited 表示编辑完成后，退出编辑模式时触发。column.edit.rules 指校验规则，和表单的校验规则配置一样 FormRule。column.edit.abortEditOnEvent 表示除了点击非自身元素退出编辑态之外，还有哪些事件退出编辑态。如：单选框值变化事件 onChange，一般情况无需配置。column.edit.defaultEditable 默认状态是否为编辑态。editableCellState 表格全局属性，用于控制单元格是否允许编辑。返回值为 true 则表示可编辑；返回值为 false 则表示不可编辑，只读状态
                  代码示例：import React, { useState, useMemo } from 'react';
import { Table, Input, Select, DatePicker, MessagePlugin } from 'tdesign-react';
import dayjs from 'dayjs';

export default function EditableCellTable() {
  const initData = new Array(5).fill(null).map((_, i) => ({
    key: String(i + 1),
    firstName: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    email: [
      'espinke0@apache.org',
      'gpurves1@issuu.com',
      'hkment2@nsw.gov.au',
      'lskures3@apache.org',
      'zcroson5@virginia.edu',
    ][i % 4],
    letters: [
      ['宣传物料制作费用'],
      ['宣传物料制作费用'],
      ['宣传物料制作费用'],
      ['宣传物料制作费用', 'algolia 服务报销'],
    ][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
  }));
  const STATUS_OPTIONS = [
    {
      label: '审批通过',
      value: 0,
    },
    {
      label: '审批过期',
      value: 1,
    },
    {
      label: '审批失败',
      value: 2,
    },
  ];
  const [data, setData] = useState([...initData]);
  const [relationSelect, setRelationSelect] = useState({});
  const editableCellState = (cellParams) =>
    // 第一行不允许编辑
    // return cellParams.status !== 2;
    cellParams.rowIndex !== 2;
  const columns = useMemo(
    () => [
      {
        title: '申请人',
        colKey: 'firstName',
        align: 'left',
        // 编辑状态相关配置，全部集中在 edit
        edit: {
          // 1. 支持任意组件。需保证组件包含 `value` 和 `onChange` 两个属性，且 onChange 的第一个参数值为 new value。
          // 2. 如果希望支持校验，组件还需包含 `status` 和 `tips` 属性。具体 API 含义参考 Input 组件
          component: Input,
          // props, 透传全部属性到 Input 组件
          props: {
            clearable: true,
            autofocus: true,
          },
          // 触发校验的时机（when to validate)
          validateTrigger: 'change',
          // 透传给 component: Input 的事件（也可以在 edit.props 中添加）
          on: (editContext) => ({
            onBlur: () => {
              console.log('失去焦点', editContext);
            },
            onEnter: (ctx) => {
              ctx?.e?.preventDefault();
              console.log('onEnter', ctx);
            },
          }),
          // 除了点击非自身元素退出编辑态之外，还有哪些事件退出编辑态
          abortEditOnEvent: ['onEnter'],
          // 编辑完成，退出编辑态后触发
          onEdited: (context) => {
            data.splice(context.rowIndex, 1, context.newRowData);
            setData([...data]);
            console.log('Edit firstName:', context);
            MessagePlugin.success('Success');
          },
          // 校验规则，此处同 Form 表单
          rules: [
            {
              required: true,
              message: '不能为空',
            },
            {
              max: 10,
              message: '字符数量不能超过 10',
              type: 'warning',
            },
          ],
        },
        // 默认是否为编辑状态
        defaultEditable: true,
      },
      {
        title: '申请状态',
        colKey: 'status',
        cell: ({ row }) => STATUS_OPTIONS.find((t) => t.value === row.status)?.label,
        edit: {
          component: Select,
          // props, 透传全部属性到 Select 组件
          props: {
            clearable: true,
            options: STATUS_OPTIONS,
          },
          // 除了点击非自身元素退出编辑态之外，还有哪些事件退出编辑态
          // abortEditOnEvent: ['onChange'],
          // 编辑完成，退出编辑态后触发
          onEdited: (context) => {
            data.splice(context.rowIndex, 1, context.newRowData);
            setData([...data]);
            console.log('Edit Framework:', context);
            MessagePlugin.success('Success');
            // 记录编辑结果
            const { newRowData } = context;
            setRelationSelect({
              ...relationSelect,
              [newRowData.key]: newRowData.framework,
            });
          },
        },
      },
      {
        title: '申请事项',
        colKey: 'letters',
        cell: ({ row }) => row?.letters?.join('、'),
        width: 280,
        edit: {
          keepEditMode: true,
          component: Select,
          // props, 透传全部属性到 Select 组件
          // props 为函数时，参数有：col, row, rowIndex, colIndex, editedRow。一般用于实现编辑组件之间的联动
          props: ({ editedRow }) => ({
            multiple: true,
            minCollapsedNum: 1,
            options: [
              {
                label: '宣传物料制作费用',
                value: '宣传物料制作费用',
              },
              {
                label: 'algolia 服务报销',
                value: 'algolia 服务报销',
              },
              // 如果状态选择了 已过期，则 Letters 隐藏 G 和 H
              {
                label: '相关周边制作费',
                value: '相关周边制作费',
                show: () => editedRow.status !== 0,
              },
              {
                label: '激励奖品快递费',
                value: '激励奖品快递费',
                show: () => editedRow.status !== 0,
              },
            ].filter((t) => (t.show === undefined ? true : t.show())),
          }),
          // abortEditOnEvent: ['onChange'],
          onEdited: (context) => {
            data.splice(context.rowIndex, 1, context.newRowData);
            setData([...data]);
            console.log('Edit Letters:', context);
            MessagePlugin.success('Success');
          },
          rules: [
            {
              validator: (val) => val.length > 0,
              message: '至少选择一种',
            },
          ],
        },
      },
      {
        title: '创建日期',
        colKey: 'createTime',
        // props, 透传全部属性到 DatePicker 组件
        edit: {
          component: DatePicker,
          props: {
            mode: 'date',
          },
          // 除了点击非自身元素退出编辑态之外，还有哪些事件退出编辑态
          abortEditOnEvent: ['onChange'],
          onEdited: (context) => {
            data.splice(context.rowIndex, 1, context.newRowData);
            setData([...data]);
            console.log('Edit Date:', context);
            MessagePlugin.success('Success');
          },
          // 校验规则，此处同 Form 表单
          rules: () => [
            {
              validator: (val) => dayjs(val).isAfter(dayjs()),
              message: '只能选择今天以后日期',
            },
          ],
        },
      },
    ],
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [data, relationSelect],
  );

  // 当前示例包含：输入框、单选、多选、日期 等场景
  return <Table rowKey="key" columns={columns} data={data} editableCellState={editableCellState} bordered lazyLoad />;
}

                  ===SPLIT===组建:<Table/>
                  使用描述：editableRowKeys 用于控制处于编辑状态的行。onRowEdit 会在行编辑时触发。实例方法 validateRowData 用于进行表格行数据校验，onRowValidate 在行编辑校验完成时触发。实例方法 validateTableData 用于进行表格全部数据校验，onValidate 在全部数据校验完成时触发。
                  代码示例：import React, { useState, useMemo, useRef, useEffect } from 'react';
import { Table, Input, Radio, Select, DatePicker, MessagePlugin, Button, Link } from 'tdesign-react';
import dayjs from 'dayjs';

const classStyles = `
<style>
.t-table-demo__editable-row .table-operations > .t-link {
  padding: 0 8px;
  line-height: 22px;
  height: 22px;
}
.t-table-demo__editable-row .t-demo-col__datepicker .t-date-picker {
  width: 120px;
}
</style>
`;
const initData = new Array(5).fill(null).map((_, i) => ({
  key: String(i + 1),
  firstName: ['贾明', '张三', '王芳'][i % 3],
  status: i % 3,
  email: [
    'espinke0@apache.org',
    'gpurves1@issuu.com',
    'hkment2@nsw.gov.au',
    'lskures3@apache.org',
    'zcroson5@virginia.edu',
  ][i % 4],
  letters: [
    ['激励奖品快递费'],
    ['相关周边制作费', '激励奖品快递费'],
    ['相关周边制作费'],
    ['激励奖品快递费', '相关周边制作费'],
  ][i % 4],
  createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
}));
const STATUS_OPTIONS = [
  {
    label: '审批通过',
    value: 0,
  },
  {
    label: '审批过期',
    value: 1,
  },
  {
    label: '审批失败',
    value: 2,
  },
];
export default function EditableRowTable() {
  const tableRef = useRef(null);
  const [data, setData] = useState([...initData]);
  const [editableRowKeys, setEditableRowKeys] = useState(['1']);
  let currentSaveId = '';
  // 保存变化过的行信息
  const editMap = {};
  const [openCheckAll, setOpenCheckAll] = useState(false);
  const onEdit = (e) => {
    const { id } = e.currentTarget.dataset;
    // 如果rowKey本身是number类型，在这里进行number转换,保证功能正常
    // id = Number(id);
    if (!editableRowKeys.includes(id)) {
      setEditableRowKeys(editableRowKeys.concat(id));
    }
  };

  // 更新 editableRowKeys
  const updateEditState = (id) => {
    const index = editableRowKeys.findIndex((t) => t === id);
    editableRowKeys.splice(index, 1);
    setEditableRowKeys([...editableRowKeys]);
  };
  const onCancel = (e) => {
    const { id } = e.currentTarget.dataset;
    // 如果rowKey本身是number类型，在这里进行number转换,保证功能正常
    // id = Number(id);
    updateEditState(id);
    tableRef.current.clearValidateData();
  };
  const onSave = (e) => {
    const { id } = e.currentTarget.dataset;
    // 如果rowKey本身是number类型，在这里进行number转换,保证功能正常
    // id = Number(id);
    currentSaveId = id;
    // 触发内部校验，可异步接收校验结果，也可在 onRowValidate 中接收异步校验结果
    tableRef.current.validateRowData(id).then((params) => {
      console.log('Promise Row Validate:', params);
      if (params.result.length) {
        const r = params.result[0];
        MessagePlugin.error(`${r.col.title} ${r.errorList[0].message}`);
        return;
      }
      // 如果是 table 的父组件主动触发校验
      if (params.trigger === 'parent' && !params.result.length) {
        const current = editMap[currentSaveId];
        // 单行数据校验：校验通过再保存数据
        if (current) {
          data.splice(current.rowIndex, 1, current.editedRow);
          setData([...data]);
          MessagePlugin.success('保存成功');
        }
        updateEditState(currentSaveId);
      }
    });
  };
  const onRowValidate = (params) => {
    console.log('Event Row Validate:', params);
  };

  // 行数据编辑时触发，返回最新输入结果
  const onRowEdit = (params) => {
    const { row, rowIndex, col, value } = params;
    const oldRowData = editMap[row.key]?.editedRow || row;
    const editedRow = {
      ...oldRowData,
      [col.colKey]: value,
    };
    editMap[row.key] = {
      ...params,
      editedRow,
    };

    // 以下内容应用于全量数据校验（单独的行校验不需要）
    if (openCheckAll) {
      data[rowIndex] = editedRow;
      setData([...data]);
    }
  };
  function onValidateTableData() {
    // 执行结束后触发事件 validate
    tableRef.current.validateTableData().then((params) => {
      console.log('Promise Table Date Validate:', params);
      const cellKeys = Object.keys(params.result);
      const firstError = params.result[cellKeys[0]];
      if (firstError) {
        MessagePlugin.warning(firstError[0].message);
      }
    });
  }

  // 表格全量数据校验反馈事件，tableRef.current.validateTableData() 执行结束后触发
  const onValidate = (params) => {
    console.log('Event Table Data Validate:', params);
  };
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  const columns = useMemo(
    () => [
      {
        title: '申请人',
        colKey: 'firstName',
        align: 'left',
        width: 120,
        // 编辑状态相关配置，全部集中在 edit
        edit: {
          // 1. 支持任意组件。需保证组件包含 `value` 和 `onChange` 两个属性，且 onChange 的第一个参数值为 new value。
          // 2. 如果希望支持校验，组件还需包含 `status` 和 `tips` 属性。具体 API 含义参考 Input 组件
          component: Input,
          // props, 透传全部属性到 Input 组件
          props: {
            clearable: true,
            autofocus: true,
            autoWidth: true,
          },
          // 校验规则，此处同 Form 表单
          rules: [
            {
              required: true,
              message: '不能为空',
            },
            {
              max: 10,
              message: '字符数量不能超过 10',
              type: 'warning',
            },
          ],
          showEditIcon: false,
        },
      },
      {
        title: '申请状态',
        colKey: 'status',
        cell: ({ row }) => STATUS_OPTIONS.find((t) => t.value === row.status)?.label,
        width: 150,
        edit: {
          component: Select,
          // props, 透传全部属性到 Select 组件
          props: {
            clearable: true,
            autoWidth: true,
            options: STATUS_OPTIONS,
          },
          showEditIcon: false,
          // 校验规则，此处同 Form 表单
          rules: [
            {
              required: true,
              message: '不能为空',
            },
          ],
        },
      },
      {
        title: '申请事项',
        colKey: 'letters',
        cell: ({ row }) => row?.letters?.join('、'),
        width: 200,
        edit: {
          component: Select,
          // props, 透传全部属性到 Select 组件
          // props 为函数时，参数有：col, row, rowIndex, colIndex, editedRow。一般用于实现编辑组件之间的联动
          props: ({ editedRow }) => ({
            multiple: true,
            minCollapsedNum: 1,
            autoWidth: true,
            options: [
              {
                label: '宣传物料制作费用',
                value: '宣传物料制作费用',
              },
              {
                label: 'algolia 服务报销',
                value: 'algolia 服务报销',
              },
              // 如果状态选择了 已过期，则 Letters 隐藏 G 和 H
              {
                label: '相关周边制作费',
                value: '相关周边制作费',
                show: () => editedRow.status !== 1,
              },
              {
                label: '激励奖品快递费',
                value: '激励奖品快递费',
                show: () => editedRow.status !== 1,
              },
            ].filter((t) => (t.show === undefined ? true : t.show())),
          }),
          showEditIcon: false,
          // 校验规则，此处同 Form 表单
          rules: [
            {
              validator: (val) => val && val.length < 3,
              message: '数量不能超过 2 个',
            },
          ],
        },
      },
      {
        title: '创建日期',
        colKey: 'createTime',
        width: 150,
        className: 't-demo-col__datepicker',
        // props, 透传全部属性到 DatePicker 组件
        edit: {
          component: DatePicker,
          showEditIcon: false,
          // 校验规则，此处同 Form 表单
          rules: [
            {
              validator: (val) => dayjs(val).isAfter(dayjs()),
              message: '只能选择今天以后日期',
            },
          ],
        },
      },
      {
        title: '操作栏',
        colKey: 'operate',
        cell: ({ row }) => {
          const editable = editableRowKeys.includes(row.key);
          return (
            <div className="table-operations">
              {!editable && (
                <Link theme="primary" hover="color" data-id={row.key} onClick={onEdit}>
                  编辑
                </Link>
              )}
              {editable && (
                <Link theme="primary" hover="color" data-id={row.key} onClick={onSave}>
                  保存
                </Link>
              )}
              {editable && (
                <Link theme="primary" hover="color" data-id={row.key} onClick={onCancel}>
                  取消
                </Link>
              )}
            </div>
          );
        },
      },
    ],
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [data, editableRowKeys],
  );

  // 当前示例包含：输入框、单选、多选、日期 等场景
  return (
    <div className="t-table-demo__editable-row">
      <div>
        <Radio.Group value={openCheckAll} onChange={(val) => setOpenCheckAll(val)}>
          <Radio.Button value={true}>全量校验</Radio.Button>
          <Radio.Button value={false}>单行校验</Radio.Button>
        </Radio.Group>
      </div>
      <br />
      {openCheckAll && (
        <div>
          <Button onClick={onValidateTableData}>校验全部</Button>
        </div>
      )}

      <br />
      <Table
        ref={tableRef}
        rowKey="key"
        columns={columns}
        data={data}
        editableRowKeys={editableRowKeys}
        onRowEdit={onRowEdit}
        onRowValidate={onRowValidate}
        onValidate={onValidate}
        table-layout="auto"
        bordered
        lazyLoad
      />
    </div>
  );
}
EditableRowTable.displayName = 'EditableRowTable';

                  ===SPLIT===组建:<Table/>
                  使用描述：树形结构显示 
                  代码示例：import React, { useState, useRef, useMemo } from 'react';
import { EnhancedTable, MessagePlugin, Button, Popconfirm, Checkbox, Space, Loading, Link } from 'tdesign-react';
import { ChevronRightIcon, ChevronDownIcon, MoveIcon, AddRectangleIcon, MinusRectangleIcon } from 'tdesign-icons-react';

function getObject(i, currentPage) {
  return {
    id: i,
    key: `申请人 ${i}_${currentPage} 号`,
    platform: i % 2 === 0 ? '电子签署' : '纸质签署',
    type: ['String', 'Number', 'Array', 'Object'][i % 4],
    default: ['-', '0', '[]', '{}'][i % 4],
    detail: {
      position: `读取 ${i} 个数据的嵌套信息值`,
    },
    needed: i % 4 === 0 ? '是' : '否',
    description: '数据源',
    list: [],
  };
}
function getData(currentPage = 1) {
  const data = [];
  const pageInfo = `第 ${currentPage} 页`;
  for (let i = 0; i < 5; i++) {
    const obj = getObject(i, currentPage);
    // 第一行不设置子节点
    obj.list = new Array(2).fill(null).map((t, j) => {
      const secondIndex = 100 * j + (i + 1) * 10;
      const secondObj = {
        ...obj,
        id: secondIndex,
        key: `申请人 ${secondIndex}_${currentPage} 号（${pageInfo}）`,
      };
      secondObj.list = new Array(3).fill(null).map((m, n) => {
        const thirdIndex = secondIndex * 1000 + 100 * m + (n + 1) * 10;
        return {
          ...obj,
          id: thirdIndex,
          key: `申请人 ${thirdIndex}_${currentPage} 号（${pageInfo}）`,
          // 子节点懒加载
          list: true,
        };
      });
      return secondObj;
    });
    // 第一行不设置子节点
    if (i === 0) {
      obj.list = [];
    }
    data.push(obj);
  }
  // 懒加载1
  data.push({
    ...getObject(66666, currentPage),
    /** 如果子节点为懒加载，则初始值设置为 true */
    list: true,
    key: '申请人懒加载节点 66666，点我体验',
  });
  // 懒加载2
  data.push({
    ...getObject(88888, currentPage),
    /** 如果子节点为懒加载，则初始值设置为 true */
    list: true,
    key: '申请人懒加载节点 88888，点我体验 ',
  });
  return data;
}
export default function TableTree() {
  const tableRef = useRef(null);
  const [data, setData] = useState(getData());
  const [lazyLoadingData, setLazyLoadingData] = useState(null);
  const [expandAll, setExpandAll] = useState(false);
  const [customTreeExpandAndFoldIcon, setCustomTreeExpandAndFoldIcon] = useState(false);
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10,
    total: 100,
  });
  const [expandedTreeNodes, setExpandedTreeNodes] = useState([]);
  const resetData = () => {
    const data = getData();
    // 方式一
    setData(data);
    setExpandedTreeNodes([]);

    // 方式二
    // tableRef.current.resetData(data);
  };
  const onEditClick = (row) => {
    const newData = {
      ...row,
      platform: '电子签署',
      type: 'Symbol',
      default: 'undefined',
    };
    tableRef.current.setData(row.key, newData);
    MessagePlugin.success('数据已更新');
  };
  const onDeleteConfirm = (row) => {
    tableRef.current.remove(row.key);
    // tableRef.current.removeChildren(row.key);
    MessagePlugin.success('删除成功');
  };
  const onLookUp = (row) => {
    const allRowData = tableRef.current.getData(row.key);
    const message = '当前行全部数据，包含节点路径、父节点、子节点、是否展开、是否禁用等';
    MessagePlugin.success(`打开控制台查看${message}`);
    console.log(`${message}：`, allRowData);
  };
  const appendTo = (row) => {
    const randomKey1 = Math.round(Math.random() * Math.random() * 1000) + 10000;
    tableRef.current.appendTo(row.key, {
      id: randomKey1,
      key: `申请人 ${randomKey1} 号`,
      platform: '电子签署',
      type: 'Number',
    });
    MessagePlugin.success(`已插入子节点申请人 ${randomKey1} 号，请展开查看`);

    // 一次性添加多个子节点。示例代码有效，勿删！!!
    // appendMultipleDataTo(row);
  };
  function appendMultipleDataTo(row) {
    const randomKey1 = Math.round(Math.random() * Math.random() * 1000) + 10000;
    const randomKey2 = Math.round(Math.random() * Math.random() * 1000) + 10000;
    const appendList = [
      {
        id: randomKey1,
        key: `申请人 ${randomKey1} 号`,
        platform: '电子签署',
        type: 'Number',
      },
      {
        id: randomKey2,
        key: `申请人 ${randomKey2} 号`,
        platform: '纸质签署',
        type: 'Number',
      },
    ];
    tableRef.current.appendTo(row?.key, appendList);
    MessagePlugin.success(`已插入子节点申请人 ${randomKey1} 和 ${randomKey2} 号，请展开查看`);
  }

  // 当前节点之前，新增兄弟节前
  const insertBefore = (row) => {
    const randomKey = Math.round(Math.random() * Math.random() * 1000) + 10000;
    tableRef.current.insertBefore(row.key, {
      id: randomKey,
      key: `申请人 ${randomKey} 号`,
      platform: '纸质签署',
      type: 'Number',
    });
    MessagePlugin.success(`已插入子节点申请人 ${randomKey} 号，请展开查看`);
  };

  // 当前节点之后，新增兄弟节前
  const insertAfter = (row) => {
    const randomKey = Math.round(Math.random() * Math.random() * 1000) + 10000;
    tableRef.current.insertAfter(row.key, {
      id: randomKey,
      key: `申请人 ${randomKey} 号`,
      platform: '纸质签署',
      type: 'Number',
    });
    MessagePlugin.success(`已插入子节点申请人 ${randomKey} 号，请展开查看`);
  };
  const columns = [
    // 实验中
    {
      // 列拖拽排序必要参数
      colKey: 'drag',
      title: '排序',
      cell: () => <MoveIcon />,
      width: 46,
      align: 'center',
    },
    {
      colKey: 'id',
      title: '编号',
      ellipsis: true,
      width: 80,
    },
    {
      width: 180,
      colKey: 'key',
      title: '名称',
      ellipsis: true,
    },
    {
      colKey: 'platform',
      title: '签署方式',
      width: 100,
    },
    {
      colKey: 'operate',
      width: 340,
      title: '操作',
      align: 'center',
      // 增、删、改、查 等操作
      cell: ({ row }) => (
        <div className="tdesign-table-demo__table-operations">
          <Link
            hover="color"
            style={{
              padding: '0 8px',
            }}
            onClick={() => appendTo(row)}
          >
            插入
          </Link>
          <Link
            hover="color"
            style={{
              padding: '0 8px',
            }}
            onClick={() => insertBefore(row)}
          >
            前插
          </Link>
          <Link
            hover="color"
            style={{
              padding: '0 8px',
            }}
            onClick={() => insertAfter(row)}
          >
            后插
          </Link>
          <Link
            hover="color"
            style={{
              padding: '0 8px',
            }}
            onClick={() => onEditClick(row)}
          >
            更新
          </Link>
          <Link
            hover="color"
            style={{
              padding: '0 8px',
            }}
            onClick={() => onLookUp(row)}
          >
            查看
          </Link>
          <Popconfirm content="确认删除吗" onConfirm={() => onDeleteConfirm(row)}>
            <Link
              hover="color"
              style={{
                padding: '0 8px',
              }}
            >
              删除
            </Link>
          </Popconfirm>
        </div>
      ),
    },
  ];
  const onRowToggle = () => {
    const rowIds = ['申请人 1_1 号', '申请人 2_1 号', '申请人 3_1 号', '申请人 4_1 号'];
    rowIds.forEach((id) => {
      // getData 参数为行唯一标识，lodash.get(row, rowKey)
      const rowData = tableRef.current.getData(id);
      tableRef.current.toggleExpandData(rowData);
      // 或者
      // tableRef.current.toggleExpandData({ rowIndex: rowData.rowIndex, row: rowData.row });
    });
  };
  const appendToRoot = () => {
    const key = Math.round(Math.random() * 10010);
    tableRef.current.appendTo('', {
      id: key,
      key: `申请人 ${key}_${1} 号`,
      platform: key % 2 === 0 ? '电子签署' : '纸质签署',
      type: ['String', 'Number', 'Array', 'Object'][key % 4],
      default: ['-', '0', '[]', '{}'][key % 4],
      detail: {
        position: `读取 ${key} 个数据的嵌套信息值`,
      },
      needed: key % 4 === 0 ? '是' : '否',
      description: '数据源',
    });

    // 同时添加多个元素，示例代码有效勿删
    // appendMultipleDataTo();
  };
  const onExpandAllToggle = () => {
    setExpandAll(!expandAll);
    !expandAll ? tableRef.current.expandAll() : tableRef.current.foldAll();
  };
  const getTreeNode = () => {
    // 查看树形结构平铺数据
    // tableRef.current.dataSource
    const treeData = tableRef.current.getTreeNode();
    console.log(treeData);
    MessagePlugin.success('树形结构获取成功，请打开控制台查看');
  };
  const renderTreeExpandAndFoldIcon = ({ type, row }) => {
    if (lazyLoadingData?.key === row?.key) {
      return <Loading size="14px" />;
    }
    return type === 'expand' ? <ChevronRightIcon /> : <ChevronDownIcon />;
  };
  const onPageChange = (pageInfo) => {
    setPagination({
      ...pagination,
      ...pageInfo,
    });
    setData(getData(pageInfo.current));
  };

  // 懒加载图标渲染
  function lazyLoadingTreeIconRender(params) {
    const { type, row } = params;
    if (lazyLoadingData?.key === row?.key) {
      return <Loading size="14px" />;
    }
    return type === 'expand' ? <AddRectangleIcon /> : <MinusRectangleIcon />;
  }
  const treeExpandIconRender = useMemo(() => {
    // 自定义展开图标
    if (customTreeExpandAndFoldIcon) {
      return renderTreeExpandAndFoldIcon;
    }
    return lazyLoadingTreeIconRender;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [lazyLoadingData, customTreeExpandAndFoldIcon]);
  const onTreeExpandChange = (context) => {
    console.log(context.rowState.expanded ? '展开' : '收起', context);
    /**
     * 如果是懒加载，请确认自己完成了以下几个步骤
     * 1. 提前设置 children 值为 true；
     * 2. 在 onTreeExpandChange 事件中处理异步数据；
     * 3. 自定义展开图标渲染 lazyLoadingTreeIconRender
     */
    if (context.row.list === true) {
      setLazyLoadingData(context.row);
      const timer = setTimeout(() => {
        appendMultipleDataTo(context.row);
        setLazyLoadingData(null);
        clearTimeout(timer);
      }, 200);
    }
  };
  return (
    <Space direction="vertical">
      <Space>
        <Button onClick={appendToRoot}>添加根节点</Button>
        <Button
          theme="default"
          style={{
            marginLeft: '16px',
          }}
          onClick={resetData}
        >
          重置/更新数据
        </Button>
        <Button
          theme="default"
          style={{
            marginLeft: '16px',
          }}
          onClick={onRowToggle}
        >
          展开/收起可见行
        </Button>
        <Button
          theme="default"
          style={{
            marginLeft: '16px',
          }}
          onClick={onExpandAllToggle}
        >
          {expandAll ? '收起全部' : '展开全部'}
        </Button>
        <Button
          theme="default"
          style={{
            marginLeft: '16px',
          }}
          onClick={getTreeNode}
        >
          获取全部树形结构
        </Button>
      </Space>
      <Checkbox
        checked={customTreeExpandAndFoldIcon}
        onChange={setCustomTreeExpandAndFoldIcon}
        style={{
          verticalAlign: 'middle',
        }}
      >
        自定义折叠/展开图标
      </Checkbox>
      {/* <!-- !!! 树形结构 EnhancedTable 才支持，普通 Table 不支持 !!! --> */}
      {/* treeNodeColumnIndex 定义第几列作为树结点展开列，默认为第一列 --> */}
      {/* defaultExpandAll 默认展开全部，也可通过实例方法 tableRef.current.expandAll() 自由控制展开或收起 */}
      {/* expandedTreeNodes + onExpandedTreeNodesChange 用于自由控制展开行，非必须 */}
      <EnhancedTable
        ref={tableRef}
        rowKey="key"
        data={data}
        columns={columns}
        tree={{
          childrenKey: 'list',
          treeNodeColumnIndex: 2 /** , defaultExpandAll: true */,
        }}
        expandedTreeNodes={expandedTreeNodes}
        onExpandedTreeNodesChange={setExpandedTreeNodes}
        dragSort="row-handler"
        treeExpandAndFoldIcon={treeExpandIconRender}
        pagination={pagination}
        onPageChange={onPageChange}
        onTreeExpandChange={onTreeExpandChange}
        lazyLoad
      ></EnhancedTable>

      {/* <!-- 第二列展开树结点，缩进为 12px，示例代码有效，勿删 -->
       <!-- indent 定义缩进距离 -->
       <!-- 如果子结点字段不是 'children'，可以使用 childrenKey 定义字段别名，如 `:tree="{ childrenKey: 'list' }"` --> */}
      {/* <EnhancedTable
        ref={tableRef}
        rowKey="key"
        data={data}
        columns={columns}
        tree={{ indent: 12, treeNodeColumnIndex: 1, childrenKey: 'list', defaultExpandAll: true }}
       ></EnhancedTable> */}
    </Space>
  );
}

                  ===SPLIT===组建:<Table/>
                  使用描述：树形结构行选中 
                  代码示例：import React, { useState, useEffect, useRef } from 'react';
import { EnhancedTable, Radio, Space, Button, MessagePlugin, Tag } from 'tdesign-react';
import { cloneDeep } from 'lodash-es';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';

const statusNameListMap = {
  0: {
    label: '审批通过',
    theme: 'success',
    icon: <CheckCircleFilledIcon />,
  },
  1: {
    label: '审批失败',
    theme: 'danger',
    icon: <CloseCircleFilledIcon />,
  },
  2: {
    label: '审批过期',
    theme: 'warning',
    icon: <ErrorCircleFilledIcon />,
  },
};
const CHILDREN_KEY = 'childrenList';
const initData = [];
for (let i = 0; i < 500; i++) {
  const obj = {
    key: `first_level_${i}`,
    applicant: ['贾明', '张三', '王芳'][i % 3],
    status: i % 3,
    channel: ['电子签署', '纸质签署', '纸质签署'][i % 3],
    email: ['w.cezkdudy@lhll.au', 'r.nmgw@peurezgn.sl', 'p.cumx@rampblpa.ru'][i % 3],
    matters: ['宣传物料制作费用', 'algolia 服务报销', '相关周边制作费', '激励奖品快递费'][i % 4],
    time: [2, 3, 1, 4][i % 4],
    createTime: ['2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01'][i % 4],
    childrenList: [],
  };
  obj.childrenList = new Array(5).fill(null).map((t, j) => {
    const secondIndex = 100 * j + (i + 1) * 10;
    const secondObj = {
      ...obj,
      status: secondIndex % 3,
      key: `second_level_${secondIndex}`,
      applicant: ['贾明', '张三', '王芳'][secondIndex % 3],
    };
    secondObj.childrenList = new Array(3).fill(null).map((m, n) => {
      const thirdIndex = secondIndex * 1000 + 100 * m + (n + 1) * 10;
      return {
        ...obj,
        status: thirdIndex % 3,
        key: `third_level_${thirdIndex}`,
        applicant: ['贾明', '张三', '王芳'][thirdIndex % 3],
      };
    });
    return secondObj;
  });
  initData.push(obj);
}
const columns = [
  {
    colKey: 'row-select',
    type: 'multiple',
    // 禁用行选中方式一：使用 disabled 禁用行（示例代码有效，勿删）。disabled 参数：{row: RowData; rowIndex: number })
    // 这种方式禁用行选中，当前行会添加行类名 t-table__row--disabled，禁用行文字变灰
    // disabled: ({ rowIndex }) => rowIndex === 1 || rowIndex === 3,

    // 禁用行选中方式二：使用 checkProps 禁用行（示例代码有效，勿删）
    // 这种方式禁用行选中，行文本不会变灰
    checkProps: ({ row }) => ({
      disabled: !row.childrenList && row.status !== 0,
    }),
    // 自由调整宽度，如果发现元素看不见，请加大宽度
    width: 50,
  },
  {
    colKey: 'serial-number',
    title: '序号',
  },
  {
    colKey: 'applicant',
    title: '申请人',
  },
  {
    colKey: 'status',
    title: '状态',
    cell: ({ row }) => (
      <Tag
        shape="round"
        theme={statusNameListMap[row.status].theme}
        variant="light-outline"
        icon={statusNameListMap[row.status].icon}
      >
        {statusNameListMap[row.status].label}
      </Tag>
    ),
  },
  {
    colKey: 'matters',
    title: '申请事项',
  },
  // { colKey: 'email', title: '邮箱地址' },
];
const defaultSelectedRowKeys = [];
export default function TableSingleSort() {
  const [data, setData] = useState([...initData]);
  const [selectedRowKeys, setSelectedRowKeys] = useState(defaultSelectedRowKeys);
  const [checkStrictly, setCheckStrictly] = useState(false);
  const [expandedRowKeys, setExpandedRowKeys] = useState([]);
  const treeTableRef = useRef(null);
  useEffect(() => {
    // 包含 treeDataMap 及各类树形操作方法
    console.log(treeTableRef.current);
  }, []);
  useEffect(
    () => {
      setSelectedRowKeys(defaultSelectedRowKeys);
      setData(cloneDeep(data));
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [checkStrictly],
  );

  // 可使用 treeTableRef.current.treeDataMap 判断是否为叶子结点，或任意结点的层级
  const onSelectChange = (value, selectOptions) => {
    console.log('onSelectChange', value, selectOptions);
    setSelectedRowKeys(value);
  };
  const onExpandChange = (val) => {
    setExpandedRowKeys(val);
  };
  const getTreeExpandedRow = () => {
    const treeExpandedRowKeys = treeTableRef.current.getTreeExpandedRow('unique');
    console.log('行唯一标识值：', treeExpandedRowKeys);
    const treeExpandedRow = treeTableRef.current.getTreeExpandedRow('data');
    console.log('行数据：', treeExpandedRow);
    const treeExpandedRowState = treeTableRef.current.getTreeExpandedRow('all');
    console.log('全部行信息：', treeExpandedRowState);
    MessagePlugin.success('获取成功，请打开控制台查看');
  };
  const onRowClick = (data) => {
    console.log(data);
  };
  const scrollToElement = () => {
    const treeNodeData = treeTableRef.current.getData('first_level_150');
    console.log(treeNodeData);
    // 因为可能会存在前面的元素节点展开，或行展开，故而下标跟序号不一定一样，不一定是 150
    treeTableRef.current.scrollToElement({
      // 跳转元素下标（第 151 个元素位置，下标/序号不一定是 150）
      index: treeNodeData.rowIndex - selectedRowKeys.length,
      // 滚动元素距离顶部的距离（如表头高度）
      top: 47,
      // 高度动态变化场景下，即 isFixedRowHeight = false。延迟设置元素位置，一般用于依赖不同高度异步渲染等场景，单位：毫秒。（固定高度不需要这个）
      time: 60,
    });
  };

  // 树节点展开，受控示例
  // const [expandedTreeNodes, setExpandedTreeNodes] = useState(['first_level_0']);

  return (
    <Space direction="vertical">
      <Space>
        <Radio.Group value={checkStrictly} onChange={(val) => setCheckStrictly(val)} variant="default-filled">
          <Radio.Button value={true}>父子行选中独立</Radio.Button>
          <Radio.Button value={false}>父子行选中关联</Radio.Button>
        </Radio.Group>
        <Button onClick={getTreeExpandedRow}>获取树形结构展开的节点</Button>
        <Button onClick={scrollToElement}>滚动到指定元素</Button>
      </Space>

      <EnhancedTable
        ref={treeTableRef}
        rowKey="key"
        data={data}
        columns={columns}
        // indeterminateSelectedRowKeys={[1]}
        selectedRowKeys={selectedRowKeys}
        onSelectChange={onSelectChange}
        tree={{
          checkStrictly,
          childrenKey: CHILDREN_KEY,
          treeNodeColumnIndex: 2,
          expandTreeNodeOnClick: true,
        }}
        height={300}
        scroll={{
          type: 'virtual',
        }}
        expandedRow={({ row }) => <div>这是展开项数据，我是 {row.key} 号</div>}
        expandedRowKeys={expandedRowKeys}
        onExpandChange={onExpandChange}
        onRowClick={onRowClick}
        lazyLoad
        // expandedTreeNodes={expandedTreeNodes}
        // onExpandedTreeNodesChange={setExpandedTreeNodes}
      />
    </Space>
  );
}

                  组建:<Tag/>
                  使用描述：基础标签为默认的标签样式。适用于常规表单。
                  代码示例：import React from 'react';
import { Space, Tag } from 'tdesign-react';

export default function ThemeTagExample() {
  return (
    <Space direction="vertical">
      <Space>
        <Tag>标签一</Tag>
        <a href="https://www.tencent.com/zh-cn" target="_blank" rel="noreferrer">
          <Tag>超链接</Tag>
        </a>
      </Space>
      <Space>
        <Tag theme="primary">标签一</Tag>
        <Tag theme="warning">标签二</Tag>
        <Tag theme="danger" variant="dark">
          标签三
        </Tag>
        <Tag theme="success" variant="dark">
          标签四
        </Tag>
      </Space>

      <Space>
        <Tag variant="light">灰标签</Tag>
        <Tag theme="primary" variant="light">
          标签一
        </Tag>
        <Tag theme="warning" variant="light">
          标签二
        </Tag>
        <Tag theme="danger" variant="light">
          标签三
        </Tag>
        <Tag theme="success" variant="light">
          标签四
        </Tag>
      </Space>

      <Space>
        {/* Do not delete the grey tag from demo, it's very useful */}
        <Tag variant="outline">灰标签</Tag>
        <Tag theme="primary" variant="outline">
          标签一
        </Tag>
        <Tag theme="warning" variant="outline">
          标签二
        </Tag>
        <Tag theme="danger" variant="outline">
          标签三
        </Tag>
        <Tag theme="success" variant="outline">
          标签四
        </Tag>
      </Space>

      <Space>
        <Tag variant="light-outline">灰标签</Tag>
        <Tag theme="primary" variant="light-outline">
          标签一
        </Tag>
        <Tag theme="warning" variant="light-outline">
          标签二
        </Tag>
        <Tag theme="danger" variant="light-outline">
          标签三
        </Tag>
        <Tag theme="success" variant="light-outline">
          标签四
        </Tag>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Tag/>
                  使用描述：在标签内嵌入图标。适用于用图标来辅助标签分类，或表达标签的属性。
                  代码示例：import React from 'react';
import { Tag } from 'tdesign-react';
import { DiscountIcon } from 'tdesign-icons-react';

export default function ThemeTagExample() {
  return (
    <Tag icon={<DiscountIcon />} theme="default">
      默认标签
    </Tag>
  );
}

                  ===SPLIT===组建:<Tag/>
                  使用描述：可删除或添加的标签。添加标签可组合输入框组件使用。
                  代码示例：import React, { useState } from 'react';
import { Tag, Input, Space } from 'tdesign-react';
import { DiscountIcon, AddIcon } from 'tdesign-icons-react';

export default function ClosableTagExample() {
  const [inputVisible, toggleInputVisible] = useState(false);
  const [tagList, setTagList] = useState([
    {
      name: '可删除标签',
      showClose: true,
    },
    {
      name: '可删除标签',
      icon: <DiscountIcon />,
      showClose: true,
    },
    {
      name: '可删除标签',
      showClose: true,
      disabled: true,
    },
  ]);

  /**
   * @param {number} i
   */
  const deleteTag = (i) => {
    const newtagList = [...tagList];
    newtagList.splice(i, 1);
    setTagList(newtagList);
  };
  const handleClickAdd = () => {
    toggleInputVisible(true);
  };
  const handleInputEnter = (value) => {
    toggleInputVisible(false);
    if (value)
      setTagList((currentList) =>
        currentList.concat([
          {
            name: value,
            showClose: true,
          },
        ]),
      );
  };
  return (
    <Space direction="vertical">
      <Space>
        {tagList.map((tag, i) => (
          <Tag
            key={i}
            closable
            onClose={() => {
              deleteTag(i);
            }}
            icon={tag.icon}
            disabled={tag.disabled}
            style={{
              marginRight: 30,
            }}
          >
            {tag.name}
            {i}
          </Tag>
        ))}
      </Space>
      <div
        style={{
          display: 'flex',
          cursor: 'pointer',
        }}
      >
        {inputVisible ? (
          <Input
            onBlur={handleInputEnter}
            onEnter={handleInputEnter}
            style={{
              width: '94px',
            }}
          />
        ) : (
          <Tag onClick={handleClickAdd} icon={<AddIcon />}>
            可添加标签
          </Tag>
        )}
      </div>
    </Space>
  );
}

                  ===SPLIT===组建:<Tag/>
                  使用描述：标签有已选和未选两种状态，可以通过点击标签来切换。类似多选框的效果。可以通过 checkedProps 设置任意风格选中态，uncheckedProps设置任意风格未选中状态。
                  代码示例：import React, { useState } from 'react';
import { Space, Tag } from 'tdesign-react';

const { CheckTag } = Tag;
const STYLE_B_UNCHECKED_PROPS = {
  theme: 'default',
  variant: 'outline',
};
const STYLE_C_CHECKED_PROPS = {
  theme: 'primary',
  variant: 'outline',
};
export default function CheckTagExample() {
  const [checked1, setChecked1] = useState(false);
  const [checked2, setChecked2] = useState(false);
  const [checked3, setChecked3] = useState(false);
  return (
    <Space direction="vertical">
      <Space align="center">
        <label>StyleA</label>
        <CheckTag
          checked={checked1}
          onChange={setChecked1}
          style={{
            marginRight: '32px',
          }}
        >
          选中/未选态
        </CheckTag>
        <CheckTag checked={true}>选中态</CheckTag>
        <CheckTag checked={false}>未选态</CheckTag>
        <CheckTag checked={true} disabled>
          选中禁用
        </CheckTag>
        <CheckTag checked={false} disabled>
          未选禁用
        </CheckTag>
      </Space>

      <Space align="center">
        <label>StyleB</label>
        <CheckTag
          checked={checked2}
          onChange={setChecked2}
          uncheckedProps={STYLE_B_UNCHECKED_PROPS}
          style={{
            marginRight: '32px',
          }}
        >
          选中/未选态
        </CheckTag>

        <CheckTag checked={true}>选中态</CheckTag>
        <CheckTag checked={false} uncheckedProps={STYLE_B_UNCHECKED_PROPS}>
          未选态
        </CheckTag>
        <CheckTag checked={true} disabled>
          选中禁用
        </CheckTag>
        <CheckTag checked={false} disabled uncheckedProps={STYLE_B_UNCHECKED_PROPS}>
          未选禁用
        </CheckTag>
      </Space>

      <Space align="center">
        <label>StyleC</label>
        <CheckTag
          checked={checked3}
          onChange={setChecked3}
          checkedProps={STYLE_C_CHECKED_PROPS}
          uncheckedProps={STYLE_B_UNCHECKED_PROPS}
          style={{
            marginRight: '32px',
          }}
        >
          Outline Tag
        </CheckTag>

        <CheckTag checked={true} checkedProps={STYLE_C_CHECKED_PROPS}>
          Checked
        </CheckTag>
        <CheckTag checked={false} uncheckedProps={STYLE_B_UNCHECKED_PROPS}>
          Unchecked
        </CheckTag>
        <CheckTag checked={true} disabled checkedProps={STYLE_C_CHECKED_PROPS}>
          Disabled
        </CheckTag>
        <CheckTag checked={false} disabled uncheckedProps={STYLE_B_UNCHECKED_PROPS}>
          Disabled
        </CheckTag>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Tag/>
                  使用描述：可选择标签组 
                  代码示例：import React, { useState } from 'react';
import { Space, Tag } from 'tdesign-react';

const { CheckTagGroup } = Tag;
const options = [
  {
    label: '标签1',
    value: 1,
  },
  {
    label: '标签2',
    value: 2,
  },
  {
    label: <span>标签3</span>,
    value: 3,
  },
  {
    label: '标签4',
    value: 4,
  },
  {
    label: '标签5',
    value: '5',
  },
  {
    label: '标签6',
    value: 6,
  },
];
const avatarStyle = {
  width: '16px',
  height: '16px',
  borderRadius: '2px',
  verticalAlign: '-4px',
  marginRight: '4px',
};
function CustomTag(option) {
  return (
    <div>
      <img src={option.avatar} style={avatarStyle} />
      <span>
        {option.label}({option.value})
      </span>
    </div>
  );
}
const AVATAR = 'https://tdesign.gtimg.com/site/avatar.jpg';
const options2 = [
  {
    label: 'TAG_A',
    value: 1,
    avatar: AVATAR,
  },
  {
    label: 'TAG_B',
    value: 2,
    avatar: AVATAR,
  },
  {
    label: 'TAG_C',
    value: 3,
    avatar: AVATAR,
  },
  {
    label: 'TAG_D',
    value: 4,
    avatar: AVATAR,
  },
  {
    label: 'TAG_E',
    value: '5',
    avatar: AVATAR,
  },
  {
    label: 'TAG_F',
    value: 6,
    avatar: AVATAR,
  },
].map((option) => ({
  ...option,
  label: <CustomTag {...option} />,
}));
const STYLE_B_UNCHECKED_PROPS = {
  theme: 'default',
  variant: 'outline',
};
const STYLE_C_CHECKED_PROPS = {
  theme: 'primary',
  variant: 'outline',
};
const CheckTagGroupDemo = () => {
  const [checkTagValue1, setCheckTagValue1] = useState([1]);
  const [checkTagValue2, setCheckTagValue2] = useState([2]);
  const [checkTagValue3, setCheckTagValue3] = useState([3]);
  const [checkTagValue4, setCheckTagValue4] = useState([4, 6]);
  return (
    <Space direction="vertical">
      <Space>
        <label>StyleA</label>
        <CheckTagGroup value={checkTagValue1} onChange={setCheckTagValue1} options={options} />
      </Space>

      <Space>
        <label>StyleB</label>
        <CheckTagGroup
          value={checkTagValue2}
          onChange={setCheckTagValue2}
          options={options}
          uncheckedProps={STYLE_B_UNCHECKED_PROPS}
        />
      </Space>

      <Space>
        <label>StyleC</label>
        <CheckTagGroup
          value={checkTagValue3}
          onChange={setCheckTagValue3}
          options={options}
          checkedProps={STYLE_C_CHECKED_PROPS}
          uncheckedProps={STYLE_B_UNCHECKED_PROPS}
        />
      </Space>

      <Space>
        <label>CustomContent</label>
        <CheckTagGroup
          value={checkTagValue4}
          onChange={setCheckTagValue4}
          options={options2}
          checkedProps={STYLE_C_CHECKED_PROPS}
          uncheckedProps={STYLE_B_UNCHECKED_PROPS}
        />
      </Space>
    </Space>
  );
};
export default CheckTagGroupDemo;

                  ===SPLIT===组建:<Tag/>
                  使用描述：通过 maxWidth 设置最大宽度，超出部分自动省略。
                  代码示例：import React from 'react';
import { Tag } from 'tdesign-react';

export default function LongText() {
  return <Tag maxWidth={150}>默认超八个字超长文本标签超长省略文本标签</Tag>;
}

                  ===SPLIT===组建:<Tag/>
                  使用描述：提供大、中（默认）、小三种尺寸。
                  代码示例：import React from 'react';
import { Tag, Space } from 'tdesign-react';

const { CheckTag } = Tag;
export default function Size() {
  return (
    <Space direction="vertical">
      <Space align="center">
        <Tag size="small">小型标签</Tag>
        <Tag size="medium">默认标签</Tag>
        <Tag size="large">大型标签</Tag>
      </Space>
      <Space align="center">
        <CheckTag size="small">小型标签</CheckTag>
        <CheckTag size="medium">默认标签</CheckTag>
        <CheckTag size="large">大型标签</CheckTag>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Tag/>
                  使用描述：提供方形、圆角方形、标记型三种形状。
                  代码示例：import React from 'react';
import { Tag, Space } from 'tdesign-react';

export default function ShapeTagExample() {
  const style = {
    marginRight: 5,
  };
  return (
    <Space direction="vertical">
      <Space>
        <Tag>标签一</Tag>
        <Tag theme="primary">标签一</Tag>
      </Space>
      <Space>
        <Tag shape="round" style={style}>
          标签一
        </Tag>
        <Tag shape="round" theme="primary">
          标签一
        </Tag>
      </Space>
      <Space>
        <Tag shape="mark">标签一</Tag>
        <Tag shape="mark" theme="primary">
          标签一
        </Tag>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Tag/>
                  使用描述： 属性自定义颜色
                  代码示例：import React, { useState } from 'react';
import { Space, Tag, ColorPicker } from 'tdesign-react';

export default function CustomColor() {
  const [selfDefinedColor, changeSelfDefinedColor] = useState('#0052D9');
  return (
    <Space direction="vertical">
      <Space>
        <ColorPicker colorModes={['monochrome']} value={selfDefinedColor} onChange={(v) => changeSelfDefinedColor(v)} />
      </Space>
      <Space>
        <Tag theme="primary" color={selfDefinedColor}>
          default
        </Tag>
        <Tag color={selfDefinedColor} variant="light">
          light
        </Tag>
        <Tag color={selfDefinedColor} variant="outline">
          outline
        </Tag>
        <Tag color={selfDefinedColor} variant="light-outline">
          light-outline
        </Tag>
      </Space>
    </Space>
  );
}

                  组建:<Timeline/>
                  使用描述：基础时间轴 
                  代码示例：import React, { useState } from 'react';
import { Timeline, Space, Radio } from 'tdesign-react';

export default function BasicTimeLine() {
  const [direction, setDirection] = useState('vertical');
  return (
    <Space direction="vertical">
      <Space>
        <h4>时间轴方向</h4>
        <Radio.Group variant="default-filled" value={direction} onChange={(v) => setDirection(v)}>
          <Radio.Button value="vertical">垂直时间轴</Radio.Button>
          <Radio.Button value="horizontal">水平时间轴</Radio.Button>
        </Radio.Group>
      </Space>
      <Timeline layout={direction} mode="same">
        <Timeline.Item label="2022-01-01">事件一</Timeline.Item>
        <Timeline.Item label="2022-02-01">事件二</Timeline.Item>
        <Timeline.Item label="2022-03-01">事件三</Timeline.Item>
        <Timeline.Item label="2022-04-01">事件四</Timeline.Item>
      </Timeline>
    </Space>
  );
}

                  ===SPLIT===组建:<Timeline/>
                  使用描述：控制排序的时间轴 
                  代码示例：import React, { useState } from 'react';
import { Timeline, Space, Switch } from 'tdesign-react';

export default function ReverseTimeLine() {
  const [reverse, setReverse] = useState(false);
  return (
    <Space direction="vertical">
      <Space>
        <h4>是否倒序</h4>
        <Switch value={reverse} onChange={(v) => setReverse(v)}></Switch>
      </Space>
      <Timeline mode="same" reverse={reverse}>
        <Timeline.Item label="2022-01-01">事件一</Timeline.Item>
        <Timeline.Item label="2022-02-01">事件二</Timeline.Item>
        <Timeline.Item label="2022-03-01">事件三</Timeline.Item>
        <Timeline.Item label="2022-04-01">事件四</Timeline.Item>
      </Timeline>
    </Space>
  );
}

                  ===SPLIT===组建:<Timeline/>
                  使用描述：自定义节点 
                  代码示例：import React, { useState } from 'react';
import { Timeline, Space, Radio } from 'tdesign-react';
import { TipsIcon, UserIcon, HeartIcon, HomeIcon } from 'tdesign-icons-react';

const color = 'var(--td-brand-color)';
export default function CustomDotTimeLine() {
  const [dot, setDot] = useState('default');
  return (
    <Space direction="vertical">
      <Space>
        <h4>时间轴样式</h4>
        <Radio.Group variant="default-filled" value={dot} onChange={(v) => setDot(v)}>
          <Radio.Button value="default">默认样式</Radio.Button>
          <Radio.Button value="dot">Dot样式</Radio.Button>
        </Radio.Group>
      </Space>
      <Timeline mode="same" theme={dot}>
        <Timeline.Item label="2022-01-01" dot={<TipsIcon size="medium" color={color} />}>
          事件一
        </Timeline.Item>
        <Timeline.Item label="2022-02-01" dot={<UserIcon size="medium" color={color} />}>
          事件二
        </Timeline.Item>
        <Timeline.Item label="2022-03-01" dot={<HeartIcon size="medium" color={color} />}>
          事件三
        </Timeline.Item>
        <Timeline.Item label="2022-04-01" dot={<HomeIcon size="medium" color={color} />}>
          事件四
        </Timeline.Item>
      </Timeline>
    </Space>
  );
}

                  ===SPLIT===组建:<Timeline/>
                  使用描述：自定义内容 
                  代码示例：import React from 'react';
import { Timeline } from 'tdesign-react';

const CommonStyle = {
  fontSize: 12,
  color: 'rgba(0,0,0,.6)',
};
export default function CustomContentTimeLine() {
  return (
    <Timeline mode="same">
      <Timeline.Item label="2022-01-01">
        <div>事件一</div>
        <div style={CommonStyle}>事件一自定义内容</div>
      </Timeline.Item>
      <Timeline.Item label="2022-02-01">
        <div>事件二</div>
        <div style={CommonStyle}>事件二自定义内容</div>
      </Timeline.Item>
      <Timeline.Item label="2022-03-01">
        <div>事件三</div>
        <div style={CommonStyle}>事件三自定义内容</div>
      </Timeline.Item>
      <Timeline.Item label="2022-04-01">
        <div>事件四</div>
        <div style={CommonStyle}>事件四自定义内容</div>
      </Timeline.Item>
    </Timeline>
  );
}

                  ===SPLIT===组建:<Timeline/>
                  使用描述：布局方式 
                  代码示例：import React, { useState } from 'react';
import { Timeline, Space, Radio } from 'tdesign-react';

export default function LayoutTimeLine() {
  const [direction, setDirection] = useState('left');
  const [mode, setMode] = useState('same');
  const [layout, setLayout] = useState('vertical');
  return (
    <Space direction="vertical">
      <Space>
        <h4>时间轴方向</h4>
        <Radio.Group variant="default-filled" value={layout} onChange={(v) => setLayout(v)}>
          <Radio.Button value="vertical">垂直时间轴</Radio.Button>
          <Radio.Button value="horizontal">水平时间轴</Radio.Button>
        </Radio.Group>
      </Space>
      <Space>
        <h4>对齐方式</h4>
        <Radio.Group variant="default-filled" value={direction} onChange={(v) => setDirection(v)}>
          <Radio.Button value="left">左对齐</Radio.Button>
          <Radio.Button value="alternate">交错对齐</Radio.Button>
          <Radio.Button value="right">右对齐</Radio.Button>
        </Radio.Group>
      </Space>
      <Space>
        <h4>label对齐方式</h4>
        <Radio.Group variant="default-filled" value={mode} onChange={(v) => setMode(v)}>
          <Radio.Button value="same">同侧</Radio.Button>
          <Radio.Button value="alternate">交错</Radio.Button>
        </Radio.Group>
      </Space>
      <Timeline layout={layout} labelAlign={direction} mode={mode}>
        <Timeline.Item label="2022-01-01">事件一</Timeline.Item>
        <Timeline.Item label="2022-02-01">事件二</Timeline.Item>
        <Timeline.Item label="2022-03-01">事件三</Timeline.Item>
        <Timeline.Item label="2022-04-01">事件四</Timeline.Item>
      </Timeline>
    </Space>
  );
}

                  ===SPLIT===组建:<Timeline/>
                  使用描述：加载状态 
                  代码示例：import React, { useState } from 'react';
import { Timeline, Space, Switch } from 'tdesign-react';

export default function LoadingTimeLine() {
  const [loading, setLoading] = useState(false);
  return (
    <Space direction="vertical">
      <Space>
        <h4>加载中</h4>
        <Switch value={loading} onChange={(v) => setLoading(v)}></Switch>
      </Space>
      <Timeline mode="same">
        <Timeline.Item label="2022-01-01">事件一</Timeline.Item>
        <Timeline.Item label="2022-02-01">事件二</Timeline.Item>
        <Timeline.Item label="2022-03-01">事件三</Timeline.Item>
        <Timeline.Item label="2022-04-01" loading={loading}>
          事件四
        </Timeline.Item>
      </Timeline>
    </Space>
  );
}

                  ===SPLIT===组建:<Timeline/>
                  使用描述：主题色 
                  代码示例：import React from 'react';
import { Timeline } from 'tdesign-react';

export default function ThemeTimeLine() {
  return (
    <Timeline mode="same">
      <Timeline.Item label="2022-01-01" dotColor="primary">
        已完成的时间
      </Timeline.Item>
      <Timeline.Item label="2022-02-01" dotColor="success">
        成功的时间
      </Timeline.Item>
      <Timeline.Item label="2022-03-01" dotColor="error">
        危险时间
      </Timeline.Item>
      <Timeline.Item label="2022-04-01" dotColor="warning">
        告警事件
      </Timeline.Item>
      <Timeline.Item label="2022-05-01">默认的时间</Timeline.Item>
      <Timeline.Item label="2022-06-01" dotColor="yellowgreen">
        自定义主题色
      </Timeline.Item>
    </Timeline>
  );
}

                  组建:<Tooltip/>
                  使用描述：基础用法 
                  代码示例：import React from 'react';
import { Button, Tooltip } from 'tdesign-react';

// const Absolute = Position.absolute as const;
const Position = {
  absolute: 'absolute',
  relative: 'relative',
};
const styles = {
  container: {
    margin: '0 auto',
    width: '500px',
    height: '260px',
    position: Position.relative,
  },
  placementTop: {
    position: Position.absolute,
    top: '0',
    left: '42%',
  },
  placementTopLeft: {
    position: Position.absolute,
    top: '0',
    left: '70px',
  },
  placementTopRight: {
    position: Position.absolute,
    top: '0',
    right: '70px',
  },
  placementBottom: {
    position: Position.absolute,
    bottom: '0',
    left: '42%',
  },
  placementBottomLeft: {
    position: Position.absolute,
    bottom: '0',
    left: '70px',
    width: '120px',
  },
  placementBottomRight: {
    position: Position.absolute,
    bottom: '0',
    right: '70px',
  },
  placementLeft: {
    position: Position.absolute,
    left: '0',
    top: '42%',
  },
  placementLeftTop: {
    position: Position.absolute,
    left: '0',
    top: '50px',
  },
  placementLeftBottom: {
    position: Position.absolute,
    left: '0',
    bottom: '50px',
  },
  placementRight: {
    position: Position.absolute,
    right: '0',
    top: '42%',
  },
  placementRightTop: {
    position: Position.absolute,
    right: '0',
    top: '50px',
  },
  placementRightBottom: {
    position: Position.absolute,
    right: '0',
    bottom: '50px',
  },
};
export default function Placements() {
  return (
    <div style={styles.container}>
      <Tooltip content="这是Tooltip内容" placement="top" showArrow destroyOnClose>
        <Button variant="outline" style={styles.placementTop}>
          top
        </Button>
      </Tooltip>
      <Tooltip content="这是Tooltip内容 top-left" placement="top-left" showArrow destroyOnClose>
        <Button variant="outline" style={styles.placementTopLeft}>
          top-left
        </Button>
      </Tooltip>
      <Tooltip content="这是Tooltip内容top-right" placement="top-right" showArrow destroyOnClose>
        <Button variant="outline" style={styles.placementTopRight}>
          top-right
        </Button>
      </Tooltip>
      <Tooltip content="这是Tooltip内容" placement="bottom" showArrow destroyOnClose>
        <Button variant="outline" style={styles.placementBottom}>
          bottom
        </Button>
      </Tooltip>
      <Tooltip content="这是Tooltip内容 bottom-left" placement="bottom-left" showArrow destroyOnClose>
        <Button variant="outline" style={styles.placementBottomLeft}>
          bottom-left
        </Button>
      </Tooltip>
      <Tooltip content="这是Tooltip内容 bottom-right" placement="bottom-right" showArrow destroyOnClose>
        <Button variant="outline" style={styles.placementBottomRight}>
          bottom-right
        </Button>
      </Tooltip>
      <Tooltip content="这是Tooltip内容" placement="left" showArrow destroyOnClose>
        <Button variant="outline" style={styles.placementLeft}>
          left
        </Button>
      </Tooltip>
      <Tooltip
        content="这是Tooltip内容   left-top"
        placement="left-top"
        overlayStyle={{
          width: '140px',
        }}
        showArrow
        destroyOnClose
      >
        <Button variant="outline" style={styles.placementLeftTop}>
          left-top
        </Button>
      </Tooltip>
      <Tooltip
        content="这是Tooltip内容 left-bottom"
        placement="left-bottom"
        overlayStyle={{
          width: '140px',
        }}
        showArrow
        destroyOnClose
      >
        <Button variant="outline" style={styles.placementLeftBottom}>
          left-bottom
        </Button>
      </Tooltip>
      <Tooltip content="这是Tooltip内容" placement="right" showArrow destroyOnClose>
        <Button variant="outline" style={styles.placementRight}>
          right
        </Button>
      </Tooltip>
      <Tooltip
        content="这是Tooltip内容 right-top"
        placement="right-top"
        overlayStyle={{
          width: '140px',
        }}
        showArrow
        destroyOnClose
      >
        <Button variant="outline" style={styles.placementRightTop}>
          right-top
        </Button>
      </Tooltip>
      <Tooltip
        content="这是Tooltip内容 right-bottom"
        placement="right-bottom"
        overlayStyle={{
          width: '140px',
        }}
        showArrow
        destroyOnClose
      >
        <Button variant="outline" style={styles.placementRightBottom}>
          right-bottom
        </Button>
      </Tooltip>
    </div>
  );
}

                  ===SPLIT===组建:<Tooltip/>
                  使用描述：带箭头的文字提示有较明确的指向性。常用于有多个需要提示的信息并列放置时，对某个具体信息进行提示。
                  代码示例：import React from 'react';
import { Button, Tooltip } from 'tdesign-react';

export default function BasicUsage() {
  return (
    <Tooltip
      content="文字提示仅展示文本内容"
      overlayStyle={{
        padding: 2,
      }}
      overlayInnerStyle={{
        padding: 2,
      }}
      overlayClassName="tooltip-custom-overlay-class"
      overlayInnerClassName="tooltip-custom-overlay-inner-class"
    >
      <Button variant="outline">默认文字提示</Button>
    </Tooltip>
  );
}

                  ===SPLIT===组建:<Tooltip/>
                  使用描述：不带箭头的文字提示没有明确指向性。常用于不需要针对性提示的场景中。
                  代码示例：import React from 'react';
import { Button, Tooltip } from 'tdesign-react';

export default function BasicUsage() {
  return (
    <Tooltip content="文字提示仅展示文本内容" showArrow={false}>
      <Button variant="outline">不带箭头等文字提示</Button>
    </Tooltip>
  );
}

                  ===SPLIT===组建:<Tooltip/>
                  使用描述：提供浅灰色、蓝色、绿色、红色、黄色主题的文字提示。
                  代码示例：import React from 'react';
import { Button, Tooltip, Space } from 'tdesign-react';

export default function Cumstomize() {
  return (
    <Space>
      <Tooltip content="文字提示仅展示文本内容">
        <Button theme="default">default</Button>
      </Tooltip>
      <Tooltip content="文字提示仅展示文本内容" theme="primary">
        <Button theme="primary">primary</Button>
      </Tooltip>
      <Tooltip content="文字提示仅展示文本内容" theme="success">
        <Button theme="success">success</Button>
      </Tooltip>
      <Tooltip content="文字提示仅展示文本内容" theme="danger">
        <Button theme="danger">danger</Button>
      </Tooltip>
      <Tooltip content="文字提示仅展示文本内容" theme="warning">
        <Button theme="warning">warning</Button>
      </Tooltip>
      <Tooltip content="文字提示仅展示文本内容" theme="light">
        <Button variant="outline">light</Button>
      </Tooltip>
    </Space>
  );
}

                  ===SPLIT===组建:<Tooltip/>
                  使用描述：支持常见元素事件触发文字提示。
                  代码示例：import React from 'react';
import { Button, Tooltip, Input, Space } from 'tdesign-react';

export default function Cumstomize() {
  return (
    <Space>
      <Tooltip content="文字提示仅展示文本内容">
        <Button variant="outline">悬浮时触发（默认）</Button>
      </Tooltip>
      <Tooltip content="文字提示仅展示文本内容" trigger="focus">
        <Input placeholder="获得焦点时触发" />
      </Tooltip>
      <Tooltip content="文字提示仅展示文本内容" trigger="click">
        <Button variant="outline">点击时触发</Button>
      </Tooltip>
      <Tooltip content="文字提示仅展示文本内容" trigger="context-menu">
        <Button variant="outline">右击时触发</Button>
      </Tooltip>
    </Space>
  );
}

                  ===SPLIT===组建:<Tooltip/>
                  使用描述：悬浮元素出现文字提示，不依赖 Popup，具体 API 请参考 TooltipLite Props
                  代码示例：import React from 'react';
import { Button, TooltipLite, Space } from 'tdesign-react';

export default function BasicUsage() {
  return (
    <Space direction="vertical">
      <Space>
        <TooltipLite
          content="文字提示仅展示文本内容"
          placement="bottom"
          triggerElement={<Button variant="outline">下方文字提示</Button>}
        ></TooltipLite>
        <TooltipLite content="提示" placement="top">
          <Button variant="outline">上方文字提示</Button>
        </TooltipLite>
        <TooltipLite content="提示" placement="mouse">
          <Button variant="outline">鼠标位置显示提示</Button>
        </TooltipLite>
        <TooltipLite content="提示" showArrow={false}>
          <Button variant="outline">无箭头文字提示</Button>
        </TooltipLite>
        <TooltipLite content="提示" showShadow={false}>
          <Button variant="outline">无投影文字提示</Button>
        </TooltipLite>
      </Space>
      <Space>
        <TooltipLite content="浅色提示" theme="light">
          <Button variant="outline">浅色模式</Button>
        </TooltipLite>
        <TooltipLite content="浅色提示" theme="light" showArrow={false} showShadow={true}>
          <Button variant="outline">无箭头浅色模式</Button>
        </TooltipLite>
        <TooltipLite content="不可用提示">
          <Button disabled variant="outline">
            不可用状态下提示
          </Button>
        </TooltipLite>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Tooltip/>
                  使用描述：模拟原生title 
                  代码示例：import React from 'react';
import { TooltipLite } from 'tdesign-react';

export default function MouseTitle() {
  return (
    <TooltipLite content="文案确实很长很长很长很长很长" placement="mouse">
      <a id="testa" href="#">
        文案比较长...
      </a>
    </TooltipLite>
  );
}

                  ===SPLIT===组建:<Tooltip/>
                  使用描述：定时消失 
                  代码示例：import React, { useEffect, useState, useRef } from 'react';
import { Button, Tooltip } from 'tdesign-react';

export default function Placements() {
  const ref = useRef(null);
  const timerRef = useRef(null);
  const [reset, setReset] = useState(true);
  const [count, setCount] = useState(5);
  const countRef = useRef(5);
  const setTimer = () => {
    timerRef.current = setInterval(() => {
      countRef.current -= 1;
      setCount(countRef.current);
      if (countRef.current <= 0) {
        clearInterval(timerRef.current);
        setReset(true);
      }
    }, 1000);
  };
  const onResetClick = () => {
    setReset(false);
    countRef.current = 5;
    setCount(5);
    clearInterval(timerRef.current);
    setTimer();
    ref.current.setVisible(true);
  };
  useEffect(() => {
    setTimer();
    return () => {
      clearInterval(timerRef.current);
    };
  }, []);
  return (
    <>
      <Tooltip content={`提示在${count}秒后消失`} duration={5000} ref={ref}>
        <Button variant="text">定时消失</Button>
      </Tooltip>
      {reset && (
        <Button variant="outline" onClick={onResetClick}>
          点击再次查看
        </Button>
      )}
    </>
  );
}

                  组建:<Tree/>
                  使用描述：可承载存在父子关系的内容的展示，父节点带有展开/折叠操作，提供单个节点的选中标记。常用于系统目录结构、组织架构的展示。
                  代码示例：import React from 'react';
import { Tree } from 'tdesign-react';

const items = [
  {
    label: '第一段',
    children: [
      {
        label: '第二段',
      },
      {
        label: '第二段',
      },
    ],
  },
  {
    label: '第一段',
    children: [
      {
        label: '第二段',
      },
      {
        label: '第二段',
      },
    ],
  },
  {
    label: '第一段',
    children: [
      {
        label: '第二段',
      },
      {
        label: '第二段',
      },
    ],
  },
  {
    label: '第一段',
    children: [
      {
        label: '第二段',
      },
      {
        label: '第二段',
      },
    ],
  },
];
export default () => <Tree data={items} activable hover transition />;

                  ===SPLIT===组建:<Tree/>
                  使用描述：在基础树结构上提供多选框控件，当需要对多个节点进行选择时使用，如选择组织架构中的多个人员。
                  代码示例：import React, { useState } from 'react';
import { Radio, Tree, Form, Switch, Space } from 'tdesign-react';

const valueOptions = [
  {
    value: 'onlyLeaf',
    label: 'onlyLeaf',
  },
  {
    value: 'parentFirst',
    label: 'parentFirst',
  },
  {
    value: 'all',
    label: 'all',
  },
];
const items = [
  {
    value: '1',
    label: '1',
    children: [
      {
        value: '1.1',
        label: '1.1',
        disabled: true,
        children: [
          {
            value: '1.1.1',
            label: '1.1.1',
            children: [
              {
                value: '1.1.1.1',
                label: '1.1.1.1',
              },
              {
                value: '1.1.1.2',
                label: '1.1.1.2',
              },
            ],
          },
          {
            value: '1.1.2',
            label: '1.1.2',
            children: [
              {
                value: '1.1.2.1',
                label: '1.1.2.1',
              },
              {
                value: '1.1.2.2',
                label: '1.1.2.2',
              },
            ],
          },
        ],
      },
      {
        value: '1.2',
        label: '1.2',
        children: [
          {
            value: '1.2.1',
            label: '1.2.1',
            children: [
              {
                value: '1.2.1.1',
                label: '1.2.1.1',
              },
              {
                value: '1.2.1.2',
                label: '1.2.1.2',
                disabled: true,
              },
            ],
          },
          {
            value: '1.2.2',
            label: '1.2.2',
            children: [
              {
                value: '1.2.2.1',
                label: '1.2.2.1',
              },
              {
                value: '1.2.2.2',
                label: '1.2.2.2',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    value: '2',
    label: '2',
    children: [
      {
        value: '2.1',
        label: '2.1',
      },
      {
        value: '2.2',
        label: '2.2',
      },
    ],
  },
];
export default () => {
  const [checkable, setCheckable] = useState(true);
  const [checkStrictly, setCheckStrictly] = useState(false);
  const [valueMode, setValueMode] = useState('onlyLeaf');
  const handleChange = (checked, context) => {
    console.info('onChange:', checked, context);
  };
  const handleClick = (context) => {
    console.info('onClick:', context);
  };
  const handleMode = (value) => {
    setValueMode(value);
  };
  return (
    <Space direction="vertical">
      <Form>
        <Form.FormItem label="可选" initialData={checkable}>
          <Switch onChange={setCheckable} />
        </Form.FormItem>
        <Form.FormItem label="严格模式" initialData={checkStrictly}>
          <Switch onChange={setCheckStrictly} />
        </Form.FormItem>
        <Form.FormItem label="选中值模式" name="valueMode" initialData={valueMode}>
          <Radio.Group onChange={handleMode}>
            {valueOptions.map((v) => (
              <Radio key={v.value} value={v.value}>
                {v.label}
              </Radio>
            ))}
          </Radio.Group>
        </Form.FormItem>
      </Form>
      <Tree
        expandAll
        hover
        data={items}
        checkable={checkable}
        checkStrictly={checkStrictly}
        valueMode={valueMode}
        onChange={handleChange}
        onClick={handleClick}
        checkProps={(node) => ({
          title: node.data.disabled ? 'Disabled' : 'Enabled',
        })}
      />
    </Space>
  );
};

                  ===SPLIT===组建:<Tree/>
                  使用描述：可高亮 
                  代码示例：import React, { useState } from 'react';
import { Form, Switch, Tree, Space } from 'tdesign-react';

const items = [
  {
    label: '1',
    children: [
      {
        label: '1.1',
      },
      {
        label: '1.2',
      },
    ],
  },
  {
    label: '2',
    children: [
      {
        label: '2.1',
      },
      {
        label: '2.2',
      },
    ],
  },
];
export default () => {
  const [activable, setActivable] = useState(true);
  const [activeMultiple, setActiveMultiple] = useState(false);
  const [expandOnClickNode, setExpandOnClickNode] = useState(false);
  const handleClick = (context) => {
    console.info('onClick', context);
  };
  const handleActive = (value, context) => {
    console.info('onActive', value, context);
  };
  return (
    <Space direction="vertical">
      <Form labelWidth={120}>
        <Form.FormItem label="节点可高亮" initialData={activable}>
          <Switch onChange={setActivable} />
        </Form.FormItem>
        <Form.FormItem label="节点可多选高亮" initialData={activeMultiple}>
          <Switch onChange={setActiveMultiple} />
        </Form.FormItem>
        <Form.FormItem label="整个节点可点击" initialData={expandOnClickNode}>
          <Switch onChange={setExpandOnClickNode} />
        </Form.FormItem>
      </Form>
      <Tree
        data={items}
        expandAll
        activable={activable}
        activeMultiple={activeMultiple}
        expandOnClickNode={expandOnClickNode}
        onClick={handleClick}
        onActive={handleActive}
        hover
      />
    </Space>
  );
};

                  ===SPLIT===组建:<Tree/>
                  使用描述：树中的节点可自由的拖拽
                  代码示例：import React from 'react';
import { Tree, Space } from 'tdesign-react';

const items = [
  {
    value: '1',
    label: '1',
    children: [
      {
        value: '1.1',
        label: '1.1',
        children: [
          {
            value: '1.1.1',
            label: '1.1.1',
            children: [
              {
                value: '1.1.1.1',
                label: '1.1.1.1',
              },
              {
                value: '1.1.1.2',
                label: '1.1.1.2',
              },
            ],
          },
          {
            value: '1.1.2',
            label: '1.1.2',
            children: [
              {
                value: '1.1.2.1',
                label: '1.1.2.1',
              },
              {
                value: '1.1.2.2',
                label: '1.1.2.2',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    value: '2',
    label: '2',
    children: [
      {
        value: '2.1',
        label: '2.1',
      },
      {
        value: '2.2',
        label: '2.2 不允许拖放为 2.2 的子节点',
      },
    ],
  },
];
export default () => {
  const handleDragStart = () => {
    console.log('dragStart');
  };
  const handleDragEnd = () => {
    console.log('dragEnd');
  };
  const handleDragOver = () => {
    console.log('dragOver');
  };
  const handleDragLeave = () => {
    console.log('dragLeave');
  };
  const handleDrop = ({ dragNode, dropPosition, e }) => {
    console.log(dragNode, dropPosition, e);
  };
  const handleAllowDrop = (ctx) => {
    const { dropNode, dropPosition } = ctx;
    if (dropNode.value === '2.2' && dropPosition === 0) {
      return false;
    }
  };
  return (
    <Space direction="vertical">
      <Tree
        data={items}
        activable
        hover
        transition
        expandAll
        draggable
        onDrop={handleDrop}
        onDragStart={handleDragStart}
        onDragEnd={handleDragEnd}
        onDragLeave={handleDragLeave}
        onDragOver={handleDragOver}
        allowDrop={handleAllowDrop}
      />
    </Space>
  );
};

                  ===SPLIT===组建:<Tree/>
                  使用描述：过滤动作由 filter 属性的变更触发，故而不能只修改传递给 filter 属性内部的数据，应当在条件变化时变更 filter 属性。清空过滤条件时，通过设置 filter=null 来触发树组件展示状态还原。allowFoldNodeOnFilter=false 时，过滤状态下展开的路径节点无法被收起；allowFoldNodeOnFilter=true 时，过滤状态下展开的节点，允许点击收起，注意这会影响到树组件当前的展开状态数据。每次变更过滤条件时，会重设节点展开状态，将命中节点的路径节点展开。当清空过滤条件时，将会还原为设置过滤条件之前时的展开状态。
                  代码示例：import React, { useState } from 'react';
import { InputAdornment, Input, Tree, Space } from 'tdesign-react';

const items = [
  {
    value: '1',
    label: '1',
    children: [
      {
        value: '1.1',
        label: '1.1',
        children: [
          {
            value: '1.1.1',
            label: '1.1.1',
            children: [
              {
                value: '1.1.1.1',
                label: '1.1.1.1',
              },
              {
                value: '1.1.1.2',
                label: '1.1.1.2',
              },
            ],
          },
          {
            value: '1.1.2',
            label: '1.1.2',
            children: [
              {
                value: '1.1.2.1',
                label: '1.1.2.1',
              },
              {
                value: '1.1.2.2',
                label: '1.1.2.2',
              },
            ],
          },
        ],
      },
      {
        value: '1.2',
        label: '1.2',
        children: [
          {
            value: '1.2.1',
            label: '1.2.1',
            children: [
              {
                value: '1.2.1.1',
                label: '1.2.1.1',
              },
              {
                value: '1.2.1.2',
                label: '1.2.1.2',
              },
            ],
          },
          {
            value: '1.2.2',
            label: '1.2.2',
            children: [
              {
                value: '1.2.2.1',
                label: '1.2.2.1',
              },
              {
                value: '1.2.2.2',
                label: '1.2.2.2',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    value: '2',
    label: '2',
    children: [
      {
        value: '2.1',
        label: '2.1',
      },
      {
        value: '2.2',
        label: '2.2',
      },
    ],
  },
];
export default () => {
  const [filterText, setFilterText] = useState('');
  const [filterText2, setFilterText2] = useState('');
  const filterByText = (node) => {
    const rs = node.data.label.indexOf(filterText) >= 0;
    return rs;
  };
  const filterByText2 = (node) => {
    const rs = node.data.label.indexOf(filterText2) >= 0;
    return rs;
  };
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <InputAdornment prepend="filter:">
        <Input value={filterText} onChange={setFilterText} />
      </InputAdornment>
      <Tree
        data={items}
        allowFoldNodeOnFilter={true}
        expandOnClickNode
        hover
        line
        filter={filterText ? filterByText : null}
      />
      <InputAdornment prepend="filter:">
        <Input value={filterText2} onChange={setFilterText2} />
      </InputAdornment>
      <Tree
        data={items}
        allowFoldNodeOnFilter={false}
        expandOnClickNode
        hover
        line
        filter={filterText2 ? filterByText2 : null}
      />
    </Space>
  );
};

                  ===SPLIT===组建:<Tree/>
                  使用描述：在基础树结构上提供针对节点的操作按钮，当需要对节点进行一系列操作时使用，如增、删、改。
                  代码示例：import React, { useRef, useState } from 'react';
import { InputAdornment, Button, Input, Tree, Form, Switch, Space } from 'tdesign-react';

const items = [
  {
    value: 'node1',
  },
  {
    value: 'node2',
  },
];
let index = 2;
export default () => {
  const [useActived, setUseActived] = useState(false);
  const [expandParent, setExpandParent] = useState(false);
  const [filterText, setFilterText] = useState('');
  const [activeId, setActiveId] = useState('');
  const [activeIds, setActiveIds] = useState([]);
  const getLabelContent = (node) => {
    const pathNodes = node.getPath();
    let label = pathNodes.map((itemNode) => itemNode.getIndex() + 1).join('.');
    label = `${label} | value: ${node.value}`;
    return label;
  };
  const getLabel = (node) => {
    const label = getLabelContent(node);
    const { data } = node;
    data.label = label;
    return label;
  };
  const renderOperations = (node) => `value: ${node.value}`;
  const handleInputChange = (value) => {
    setFilterText(value);
    console.info('on input:', value);
  };
  const filterByText = (node) => {
    const label = node?.data?.label || '';
    const rs = label.indexOf(filterText) >= 0;
    return rs;
  };
  const handleExpand = (vals, state) => {
    console.info('on expand:', vals, state);
  };
  const handleChange = (vals, state) => {
    console.info('on change:', vals, state);
  };
  const handleActive = (vals, state) => {
    console.info('on active:', vals, state);
    setActiveIds(vals);
    setActiveId(vals[0] || '');
  };

  /* ======== 操作 api ======= */
  const treeRef = useRef(null);
  const setLabel = (value) => {
    const node = treeRef.current.getItem(value);
    const label = getLabelContent(node);
    const { data } = node;
    data.label = label;
  };
  const getActivedNode = () => {
    const activeNode = treeRef.current.getItem(activeId);
    return activeNode;
  };
  const getInsertItem = () => {
    let item = null;
    index += 1;
    const value = `t${index}`;
    item = {
      value,
    };
    return item;
  };
  const append = (node) => {
    const item = getInsertItem();
    if (item) {
      if (!node) {
        treeRef.current.appendTo('', item);
      } else {
        treeRef.current.appendTo(node.value, item);
      }
      // setLabel(item.value);
      if (useActived) {
        setActiveIds((v) => [...v, item.value]);
      }
    }
  };
  const insertBefore = (node) => {
    const item = getInsertItem();
    if (item) {
      treeRef.current.insertBefore(node.value, item);
      setLabel(item.value);
    }
  };
  const insertAfter = (node) => {
    const item = getInsertItem();
    if (item) {
      treeRef.current.insertAfter(node.value, item);
      setLabel(item.value);
    }
  };
  const remove = (node) => {
    treeRef.current.remove(node.value);
  };
  const renderOperations2 = (node) => (
    <>
      <Button
        style={{
          marginLeft: '10px',
        }}
        size="small"
        variant="base"
        onClick={() => append(node)}
      >
        添加子节点
      </Button>
      <Button
        style={{
          marginLeft: '10px',
        }}
        size="small"
        variant="outline"
        onClick={() => insertBefore(node)}
      >
        前插节点
      </Button>
      <Button
        style={{
          marginLeft: '10px',
        }}
        size="small"
        variant="outline"
        onClick={() => insertAfter(node)}
      >
        后插节点
      </Button>
      <Button
        style={{
          marginLeft: '10px',
        }}
        size="small"
        variant="base"
        theme="danger"
        onClick={() => remove(node)}
      >
        删除
      </Button>
    </>
  );

  /* ======== API ======= */
  const getItem = () => {
    const node = treeRef.current.getItem('node1');
    console.info('getItem:', node.value);
  };
  const getAllItems = () => {
    const nodes = treeRef.current.getItems();
    console.info(
      'getAllItems:',
      nodes.map((node) => node.value),
    );
  };
  const getActiveChildren = () => {
    console.log(activeIds);
    const node = getActivedNode();
    if (!node) return;
    let nodes = [];
    if (node) {
      const child = node.getChildren(true);
      if (typeof child === 'boolean') {
        // getChildren will never return true value.
        nodes = [];
      } else {
        nodes = child;
      }
    }
    console.info(
      'getActiveChildren:',
      nodes.map((node) => node.value),
    );
  };
  const getAllActived = () => {
    console.info('getActived value:', activeIds.slice(0));
  };
  const getActiveChecked = () => {
    const node = getActivedNode();
    if (!node) return;
    const nodes = treeRef.current.getItems(node.value);
    console.info(
      'getChecked:',
      nodes.filter((node) => node.checked).map((node) => node.value),
    );
  };
  const getActiveParent = () => {
    const node = getActivedNode();
    if (!node) return;
    const parent = treeRef.current.getParent(node.value);
    console.info('getParent', parent?.value);
  };
  const getActiveParents = () => {
    const node = getActivedNode();
    if (!node) return;
    const parents = treeRef.current.getParents(node.value);
    console.info(
      'getParents',
      parents.map((node) => node.value),
    );
  };
  const getActiveIndex = () => {
    const node = getActivedNode();
    if (!node) return;
    const index = treeRef.current.getIndex(node.value);
    console.info('getIndex', index);
  };
  const setActiveChecked = () => {
    const node = getActivedNode();
    if (!node) return;
    treeRef.current.setItem(node.value, {
      checked: true,
    });
  };
  const setActiveExpanded = () => {
    const node = getActivedNode();
    if (!node) return;
    treeRef.current.setItem(node?.value, {
      expanded: true,
    });
  };
  const getPlainData = (item) => {
    const root = item;
    if (!root) return null;
    const children = item.getChildren(true) || [];
    const list = [root].concat(children);
    const nodeMap = {};
    const nodeList = list.map((item) => {
      const node = {
        walkData() {
          const data = {
            ...this.data,
          };
          const itemChildren = this.getChildren();
          if (Array.isArray(itemChildren)) {
            data.children = [];
            itemChildren.forEach((childItem) => {
              const childNode = nodeMap[childItem.value];
              const childData = childNode.walkData();
              data.children.push(childData);
            });
          }
          return data;
        },
        ...item,
      };
      nodeMap[item.value] = node;
      return node;
    });
    const [rootNode] = nodeList;
    const data = rootNode.walkData();
    return data;
  };
  const getActivePlainData = () => {
    const node = getActivedNode();
    if (!node) return;
    const data = getPlainData(node);
    console.log('getActivePlainData:', data);
    return data;
  };
  return (
    <Space direction="vertical">
      <h3 className="title">render:</h3>
      <Tree hover expandAll data={items} label={getLabel} operations={renderOperations} />
      <h3 className="title">api:</h3>
      <div className="operations">
        <Form labelWidth={200}>
          <Form.FormItem label="插入节点使用高亮节点" initialData={useActived}>
            <Switch onChange={setUseActived} />
          </Form.FormItem>
          <Form.FormItem label="子节点展开触发父节点展开" initialData={expandParent}>
            <Switch onChange={setExpandParent} />
          </Form.FormItem>
        </Form>
      </div>
      <div className="operations">
        <InputAdornment prepend="filter:">
          <Input value={filterText} onChange={handleInputChange} />
        </InputAdornment>
      </div>
      <Tree
        ref={treeRef}
        hover
        expandAll
        activable
        checkable
        line
        data={items}
        actived={activeIds}
        activeMultiple
        allowFoldNodeOnFilter
        label={getLabel}
        expandParent={expandParent}
        filter={filterByText}
        operations={renderOperations2}
        onExpand={handleExpand}
        onChange={handleChange}
        onActive={handleActive}
      />
      <h3 className="title">api:</h3>
      <Space breakLine>
        <Button theme="primary" onClick={getItem}>
          {"获取 value 为 'node1' 的单个节点"}
        </Button>
        <Button theme="primary" onClick={getAllItems}>
          获取所有节点
        </Button>
        <Button theme="primary" onClick={getActiveChildren}>
          获取高亮节点的所有子节点
        </Button>
        <Button theme="primary" onClick={getAllActived}>
          获取所有高亮节点
        </Button>
        <Button theme="primary" onClick={getActiveChecked}>
          获取高亮节点下的选中节点
        </Button>
        <Button theme="primary" onClick={() => append()}>
          插入一个根节点
        </Button>
        <Button theme="primary" onClick={getActiveParent}>
          获取高亮节点的父节点
        </Button>
        <Button theme="primary" onClick={getActiveParents}>
          获取高亮节点的所有父节点
        </Button>
        <Button theme="primary" onClick={getActiveIndex}>
          获取高亮节点在子节点中的位置
        </Button>
        <Button theme="primary" onClick={setActiveChecked}>
          选中高亮节点
        </Button>
        <Button theme="primary" onClick={setActiveExpanded}>
          展开高亮节点
        </Button>
        <Button theme="primary" onClick={getActivePlainData}>
          获取高亮节点与其子节点的数据
        </Button>
      </Space>
    </Space>
  );
};

                  ===SPLIT===组建:<Tree/>
                  使用描述：可以对父节点上展开/折叠的图标进行自定义设计。当需要图标与信息名的含义匹配时使用，如文件夹的概念。
                  代码示例：import React from 'react';
import { Tree, Space } from 'tdesign-react';
import { Icon } from 'tdesign-icons-react';

const items = [
  {
    label: '1',
    children: true,
  },
  {
    label: '2',
    children: true,
  },
];
export default () => {
  const load = (node) => {
    console.log('load', load);
    const maxLevel = 2;
    return new Promise((resolve) => {
      setTimeout(() => {
        let nodes = [];
        if (node.getLevel() < maxLevel) {
          nodes = [
            {
              label: `${node.label}.1`,
              children: node.getLevel() < maxLevel - 1,
            },
            {
              label: `${node.label}.2`,
              children: node.getLevel() < maxLevel - 1,
            },
          ];
        }
        resolve(nodes);
      }, 500);
    });
  };
  const renderIcon = (node) => {
    let name = 'file';
    if (node.getChildren(true)) {
      if (node.expanded) {
        name = 'folder-open';
        if (node.loading) {
          name = 'loading';
        }
      } else {
        name = 'folder';
      }
    }
    return <Icon name={name} />;
  };
  const renderIcon2 = (node) => {
    let name = 'attach';
    if (node.getChildren(true)) {
      if (!node.expanded) {
        name = 'caret-right';
      } else if (node.loading) {
        name = 'loading';
      } else {
        name = 'caret-down';
      }
    }
    return <Icon name={name} />;
  };
  return (
    <Space direction="vertical">
      <h3>render 1:</h3>
      <Tree data={items} hover expandAll load={load} icon={renderIcon} />
      <h3>render 2:</h3>
      <Tree data={items} hover lazy load={load} icon={renderIcon2} />
    </Space>
  );
};

                  ===SPLIT===组建:<Tree/>
                  使用描述：空数据 
                  代码示例：import React from 'react';
import { Tree, Space } from 'tdesign-react';

export default () => {
  const empty = <div>😊 空数据（ empty props ）</div>;
  return (
    <Space direction="vertical">
      <Tree data={[]} />

      <Tree data={[]} empty="😊 空数据（string）" />

      <Tree data={[]} empty={empty} />
    </Space>
  );
};

                  ===SPLIT===组建:<Tree/>
                  使用描述：自定义标签 
                  代码示例：import React from 'react';
import { Tree } from 'tdesign-react';

const items = [
  {
    label: '1',
    children: [
      {
        label: '1.1',
      },
      {
        label: '1.2',
      },
    ],
  },
  {
    label: '2',
    children: [
      {
        label: '2.1',
      },
      {
        label: '2.2',
      },
    ],
  },
];
export default () => {
  const renderLabel = (node) => <strong>{`value: ${node.value}, label: ${node.label}`}</strong>;
  return <Tree data={items} expandAll label={renderLabel} />;
};

                  ===SPLIT===组建:<Tree/>
                  使用描述：将树中的父节点与其层级内的子节点进行连线。该用法针对子项层级较深且较多的情况，需要更明确表示从属关系。
                  代码示例：import React, { useState } from 'react';
import { Tree, Form, Switch, Space } from 'tdesign-react';
import { Icon } from 'tdesign-icons-react';
import classNames from 'classnames';

const items = [
  {
    value: '1',
    label: '1',
    children: [
      {
        value: '1.1',
        label: '1.1',
      },
      {
        value: '1.2',
        label: '1.2',
      },
    ],
  },
  {
    value: '2',
    label: '2',
    children: [
      {
        value: '2.1',
        label: '2.1',
        children: [
          {
            value: '2.1.1',
            label: '2.1.1',
            children: [
              {
                value: '2.1.1.1',
                label: '2.1.1.1',
                children: [
                  {
                    value: '2.1.1.1.1',
                    label: '2.1.1.1.1',
                  },
                  {
                    value: '2.1.1.1.2',
                    label: '2.1.1.1.2',
                  },
                ],
              },
            ],
          },
          {
            value: '2.1.2',
            label: '2.1.2',
          },
        ],
      },
      {
        value: '2.2',
        label: '2.2',
      },
    ],
  },
  {
    value: '3',
    label: '3',
    children: [
      {
        value: '3.1',
        label: '3.1',
      },
      {
        value: '3.2',
        label: '3.2',
      },
    ],
  },
  {
    value: '4',
    label: '4',
  },
];
export default () => {
  const [showLine, setShowLine] = useState(true);
  const [showIcon, setShowIcon] = useState(true);
  const getLineNodes = (node) => {
    const nodes = node.getParents().reverse();
    const lineNodes = [];
    nodes.forEach((item, index) => {
      const line = {};
      const nextItem = nodes[index + 1];
      if (index < nodes.length - 1 && nextItem) {
        line.cross = !nextItem.isLast();
      }
      lineNodes.push(line);
    });
    return lineNodes;
  };

  // TODO: complete type
  const renderLine = (node) => {
    if (!showLine) return null;
    return (
      <div
        className={classNames('custom-line', {
          'custom-line-first': node.isFirst(),
          'custom-line-leaf': node.isLeaf(),
          'custom-line-last': node.isLast(),
        })}
      >
        <div className="custom-line-box">
          {getLineNodes(node).map((item, index) => (
            <span
              key={index}
              className={classNames({
                'custom-line-cross': item.cross,
              })}
            />
          ))}
        </div>
        {node.isLeaf() ? (
          <i className="custom-line-icon">
            <Icon name={'heart-filled'} />
          </i>
        ) : null}
      </div>
    );
  };
  return (
    <Space direction="vertical">
      <Form>
        <Form.FormItem label="显示连线" initialData={showLine}>
          <Switch onChange={setShowLine} />
        </Form.FormItem>
        <Form.FormItem label="显示图标" initialData={showIcon}>
          <Switch onChange={setShowIcon} />
        </Form.FormItem>
      </Form>
      <Tree data={items} line={showLine} icon={showIcon} expandAll />
      <h3>render</h3>
      <Tree data={items} line={renderLine} icon={showIcon} expandAll />
    </Space>
  );
};

                  ===SPLIT===组建:<Tree/>
                  使用描述：初始化展开全部 
                  代码示例：import React, { useState } from 'react';
import { Form, Switch, Tree, Space } from 'tdesign-react';

const data1 = [
  {
    label: '1',
    children: [
      {
        label: '1.1',
        children: [
          {
            label: '1.1.1',
          },
          {
            label: '1.1.2',
          },
        ],
      },
      {
        label: '1.2',
        children: [
          {
            label: '1.2.1',
          },
          {
            label: '1.2.2',
          },
        ],
      },
    ],
  },
  {
    label: '2',
    children: [
      {
        label: '2.1',
      },
      {
        label: '2.2',
      },
    ],
  },
];
const data2 = [
  {
    label: '1',
  },
  {
    label: '2',
  },
  {
    label: '3',
    children: [
      {
        label: '3.1',
      },
      {
        label: '3.2',
      },
    ],
  },
];
export default () => {
  const [items, setItems] = useState(data1);
  const [hover, setHover] = useState(true);
  const [transition, setTransition] = useState(true);
  const handleItemsChange = () => {
    setItems((v) => (v === data1 ? data2 : data1));
  };
  return (
    <Space direction="vertical">
      <Form labelWidth={150}>
        <Form.FormItem label="切换数据">
          <Switch onChange={handleItemsChange} />
        </Form.FormItem>
        <Form.FormItem label="提供 hover 状态" initialData={hover}>
          <Switch onChange={setHover} />
        </Form.FormItem>
        <Form.FormItem label="展开动画" initialData={transition}>
          <Switch onChange={setTransition} />
        </Form.FormItem>
      </Form>
      <Tree data={items} expandAll hover={hover} transition={transition} />
    </Space>
  );
};

                  ===SPLIT===组建:<Tree/>
                  使用描述：初始化展开第一级 
                  代码示例：import React from 'react';
import { Tree } from 'tdesign-react';

const items = [
  {
    label: '1',
    children: [
      {
        label: '1.1',
        children: [
          {
            label: '1.1.1',
          },
          {
            label: '1.1.2',
          },
        ],
      },
      {
        label: '1.2',
        children: [
          {
            label: '1.2.1',
          },
          {
            label: '1.2.2',
          },
        ],
      },
    ],
  },
  {
    label: '2',
    children: [
      {
        label: '2.1',
      },
      {
        label: '2.2',
      },
    ],
  },
];
export default () => <Tree hover data={items} expandLevel={1} />;

                  ===SPLIT===组建:<Tree/>
                  使用描述：互斥展开 
                  代码示例：import React, { useState } from 'react';
import { Form, Switch, Tree, Space } from 'tdesign-react';

const items = [
  {
    label: '1',
    children: [
      {
        label: '1.1',
        children: [
          {
            label: '1.1.1',
          },
          {
            label: '1.1.2',
          },
        ],
      },
      {
        label: '1.2',
        children: [
          {
            label: '1.2.1',
          },
          {
            label: '1.2.2',
          },
        ],
      },
    ],
  },
  {
    label: '2',
    children: [
      {
        label: '2.1',
        children: [
          {
            label: '2.1.1',
          },
          {
            label: '2.1.2',
          },
        ],
      },
      {
        label: '2.2',
        children: [
          {
            label: '2.2.1',
          },
          {
            label: '2.2.2',
          },
        ],
      },
    ],
  },
];
export default () => {
  const [mutex, setMutex] = useState(true);
  const [expandOnClickNode, setExpandOnClickNode] = useState(true);
  const handleClick = (context) => {
    console.info('onClick', context);
  };
  const handleExpand = (value, context) => {
    console.info('onExpand', value, context);
  };
  return (
    <Space direction="vertical">
      <Form labelWidth={120}>
        <Form.FormItem label="互斥展开" initialData={mutex}>
          <Switch onChange={(v) => setMutex(v)} />
        </Form.FormItem>
        <Form.FormItem label="整个节点可点击" initialData={expandOnClickNode}>
          <Switch onChange={(v) => setExpandOnClickNode(v)} />
        </Form.FormItem>
      </Form>
      <Tree
        data={items}
        hover
        expandMutex={mutex}
        expandOnClickNode={expandOnClickNode}
        onClick={handleClick}
        onExpand={handleExpand}
      />
    </Space>
  );
};

                  ===SPLIT===组建:<Tree/>
                  使用描述：异步加载节点 
                  代码示例：import React from 'react';
import { Tree } from 'tdesign-react';

const items = [
  {
    label: '1',
    children: true,
  },
  {
    label: '2',
    children: true,
  },
];
export default () => {
  const load = (node) =>
    new Promise((resolve) => {
      setTimeout(() => {
        let nodes = [];
        if (node.getLevel() < 2) {
          nodes = [
            {
              label: `${node.label}.1`,
              children: true,
            },
            {
              label: `${node.label}.2`,
              children: true,
            },
          ];
        }
        resolve(nodes);
      }, 1000);
    });
  return <Tree data={items} hover lazy={false} expandAll load={load} />;
};

                  ===SPLIT===组建:<Tree/>
                  使用描述：默认为点击加载数据。valueMode 默认为 onlyLeaf。选中父节点时，子节点由于未加载，无法更新和获取选中状态，导致无法更新父节点的状态。 所以使用延迟加载时，推荐 valueMode 设置为 all 或者 parentFirst。
                  代码示例：import React from 'react';
import { Tree } from 'tdesign-react';

const items = [
  {
    label: '1',
    children: true,
  },
  {
    label: '2',
    children: true,
  },
];
export default () => {
  const load = (node) =>
    new Promise((resolve) => {
      setTimeout(() => {
        let nodes = [];
        if (node.getLevel() < 2) {
          nodes = [
            {
              label: `${node.label}.1`,
              children: true,
            },
            {
              label: `${node.label}.2`,
              children: true,
            },
          ];
        }
        resolve(nodes);
      }, 1000);
    });
  const handleLoad = (state) => {
    console.log('on load:', state);
  };
  return <Tree data={items} hover expandAll load={load} onLoad={handleLoad} />;
};

                  ===SPLIT===组建:<Tree/>
                  使用描述：受控用法 
                  代码示例：import React, { useEffect, useState } from 'react';
import { InputAdornment, Input, Tree, Space } from 'tdesign-react';

const items = [
  {
    value: '1',
    label: '1',
    children: [
      {
        value: '1.1',
        label: '1.1',
        children: [
          {
            value: '1.1.1',
            label: '1.1.1',
            children: [
              {
                value: '1.1.1.1',
                label: '1.1.1.1',
              },
              {
                value: '1.1.1.2',
                label: '1.1.1.2',
              },
            ],
          },
          {
            value: '1.1.2',
            label: '1.1.2',
            children: [
              {
                value: '1.1.2.1',
                label: '1.1.2.1',
              },
              {
                value: '1.1.2.2',
                label: '1.1.2.2',
              },
            ],
          },
        ],
      },
      {
        value: '1.2',
        label: '1.2',
        children: [
          {
            value: '1.2.1',
            label: '1.2.1',
            children: [
              {
                value: '1.2.1.1',
                label: '1.2.1.1',
              },
              {
                value: '1.2.1.2',
                label: '1.2.1.2',
              },
            ],
          },
          {
            value: '1.2.2',
            label: '1.2.2',
            children: [
              {
                value: '1.2.2.1',
                label: '1.2.2.1',
              },
              {
                value: '1.2.2.2',
                label: '1.2.2.2',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    value: '2',
    label: '2',
    checkable: false,
    children: [
      {
        value: '2.1',
        label: '2.1',
        checkable: false,
      },
      {
        value: '2.2',
        label: '2.2',
        checkable: false,
      },
    ],
  },
];
const formatArrToString = (list) => {
  let arr = [];
  if (Array.isArray(list)) {
    arr = list;
  }
  return arr.map((val) => `{${val}}`).join(', ');
};
const getValueFromString = (val) => {
  const arr = val.split(',');
  const vals = [];
  arr
    .map((str) => str.trim())
    .forEach((tag) => {
      const match = /^\{([^{}]+)\}$/.exec(tag);
      if (match && match[1]) {
        vals.push(match[1]);
      }
    });
  return vals;
};
export default () => {
  const [checked, setChecked] = useState(['1.1.1.1', '1.1.1.2']);
  const [expanded, setExpanded] = useState(['1', '1.1', '1.1.1', '2']);
  const [actived, setActived] = useState(['2']);
  const [allCheckedInput, setAllCheckedInput] = useState(() => formatArrToString(checked));
  const [allExpandedInput, setAllExpandedInput] = useState(() => formatArrToString(expanded));
  const [allActivedInput, setAllActivedInput] = useState(() => formatArrToString(actived));
  const allChecked = formatArrToString(checked);
  const allExpanded = formatArrToString(expanded);
  const allActived = formatArrToString(actived);

  // 因为是字符串，直接通过 useEffect 同步
  useEffect(() => {
    setAllCheckedInput(allChecked);
  }, [allChecked]);
  useEffect(() => {
    setAllExpandedInput(allExpanded);
  }, [allExpanded]);
  useEffect(() => {
    setAllActivedInput(allActived);
  }, [allActived]);
  const handleClick = (context) => {
    console.info('onClick:', context);
  };
  const handleChange = (vals, context) => {
    console.info('onChange:', vals, context);
    const checked = vals.filter((val) => val !== '2.1');
    console.info('节点 2.1 不允许选中');
    setChecked(checked);
  };
  const handleExpand = (vals, context) => {
    console.info('onExpand:', vals, context);
    const expanded = vals.filter((val) => val !== '2');
    console.info('节点 2 不允许展开');
    setExpanded(expanded);
  };
  const handleActive = (vals, context) => {
    console.info('onActive:', vals, context);
    const actived = vals.filter((val) => val !== '2');
    console.info('节点 2 不允许激活');
    setActived(actived);
  };
  const handleAllCheckedChange = (val) => {
    console.log('checked input on change', val);
    setAllCheckedInput(val);
  };
  const handleAllCheckedSubmit = () => {
    console.log('submit checked', allCheckedInput);
    const vals = getValueFromString(allCheckedInput);
    setChecked(vals);
  };
  const handleAllExpandedChange = (val) => {
    console.log('expanded input on change', val);
    setAllExpandedInput(val);
  };
  const handleAllExpandedSubmit = () => {
    console.log('submit expanded', allExpandedInput);
    const vals = getValueFromString(allExpandedInput);
    setExpanded(vals);
  };
  const handleAllActivedInput = (val) => {
    console.log('actived input on change', val);
    setAllActivedInput(val);
  };
  const handleAllActivedSubmit = () => {
    console.log('submit actived', allActivedInput);
    const vals = getValueFromString(allActivedInput);
    setActived(vals);
  };
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <InputAdornment prepend="checked:">
        <Input
          value={allCheckedInput}
          onChange={handleAllCheckedChange}
          onBlur={handleAllCheckedSubmit}
          onEnter={handleAllCheckedSubmit}
        />
      </InputAdornment>
      <InputAdornment prepend="expanded:">
        <Input
          value={allExpandedInput}
          onChange={handleAllExpandedChange}
          onBlur={handleAllExpandedSubmit}
          onEnter={handleAllExpandedSubmit}
        />
      </InputAdornment>
      <InputAdornment prepend="actived:">
        <Input
          value={allActivedInput}
          onChange={handleAllActivedInput}
          onBlur={handleAllActivedSubmit}
          onEnter={handleAllActivedSubmit}
        />
      </InputAdornment>
      <Tree
        data={items}
        checkable
        activable
        expandOnClickNode={false}
        activeMultiple={false}
        expanded={expanded}
        actived={actived}
        value={checked}
        valueMode="onlyLeaf"
        onExpand={handleExpand}
        onClick={handleClick}
        onActive={handleActive}
        onChange={handleChange}
      />
    </Space>
  );
};

                  ===SPLIT===组建:<Tree/>
                  使用描述：虚拟滚动 
                  代码示例：import React, { useEffect, useState, useRef } from 'react';
import { Tree, Switch, Space, Form, Button } from 'tdesign-react';

export default () => {
  const [checkable, setCheckable] = useState(true);
  const [showLine, toggleShowLine] = useState(true);
  const [options, setOptions] = useState([]);
  const treeRef = useRef(null);
  useEffect(() => {
    const newOptions = [];
    for (let i = 1; i <= 3000; i++) {
      newOptions.push({
        label: `第${i}段`,
        value: i,
        children: [
          {
            label: `第${i}段第1个子节点`,
            value: `${i}.1`,
          },
          {
            label: `第${i}段第2个子节点`,
            value: `${i}.2`,
          },
        ],
      });
    }
    setOptions(newOptions);
  }, []);
  const handleScroll = () => {
    treeRef.current.scrollTo({
      key: '10.1',
      behavior: 'smooth',
    });
  };
  const defaultChecked = ['1.2', '2.2'];
  return (
    <Space direction="vertical">
      <Form>
        <Form.FormItem label="可选" initialData={checkable}>
          <Switch onChange={setCheckable} />
        </Form.FormItem>
        <Form.FormItem label="展示连线" initialData={showLine}>
          <Switch onChange={toggleShowLine} />
        </Form.FormItem>
      </Form>
      <Button onClick={handleScroll}>scroll to special node</Button>
      <Tree
        data={options}
        defaultValue={defaultChecked}
        line={showLine}
        checkable={checkable}
        transition
        activable
        expandAll
        hover
        scroll={{
          type: 'virtual',
        }}
        style={{
          height: '300px',
        }}
        ref={treeRef}
      />
    </Space>
  );
};

                  组建:<Watermark/>
                  使用描述：单行文本水印 
                  代码示例：import React from 'react';
import { Watermark } from 'tdesign-react';

export default function BaseWatermark() {
  return (
    <Watermark
      watermarkContent={{
        text: '文字水印',
      }}
      y={120}
      x={80}
    >
      <div
        style={{
          height: 300,
        }}
      ></div>
    </Watermark>
  );
}

                  ===SPLIT===组建:<Watermark/>
                  使用描述：图片水印 
                  代码示例：import React from 'react';
import { Watermark } from 'tdesign-react';

export default function ImageWatermark() {
  return (
    <Watermark
      watermarkContent={{
        url: 'https://tdesign.gtimg.com/site/logo-watermark.svg',
      }}
      width={104}
      height={65.5}
      x={90}
      y={100}
      rotate={0}
    >
      <div
        style={{
          height: 300,
        }}
      ></div>
    </Watermark>
  );
}

                  ===SPLIT===组建:<Watermark/>
                  使用描述：多行文本水印 
                  代码示例：import React from 'react';
import { Watermark } from 'tdesign-react';

export default function MultilineWatermark() {
  return (
    <Watermark
      watermarkContent={[
        {
          text: '水印文本',
          fontColor: 'black',
        },
        {
          url: 'https://tdesign.gtimg.com/starter/brand-logo-light.png',
        },
      ]}
      lineSpace={24}
      x={100}
      y={120}
      width={158}
      height={22}
      alpha={0.3}
    >
      <div
        style={{
          height: 300,
        }}
      ></div>
    </Watermark>
  );
}

                  ===SPLIT===组建:<Watermark/>
                  使用描述：运动文字水印 
                  代码示例：import React from 'react';
import { Watermark } from 'tdesign-react';

export default function MovingTextWatermark() {
  return (
    <Watermark
      watermarkContent={{
        text: '©️版权所有',
      }}
      movable
    >
      <div
        style={{
          height: 300,
        }}
      ></div>
    </Watermark>
  );
}

                  ===SPLIT===组建:<Watermark/>
                  使用描述：运动图片水印 
                  代码示例：import React from 'react';
import { Watermark } from 'tdesign-react';

export default function MovingImageWatermark() {
  return (
    <Watermark
      watermarkContent={{
        url: 'https://tdesign.gtimg.com/starter/brand-logo-light.png',
      }}
      movable
      width={158}
      height={22}
    >
      <div
        style={{
          height: 300,
        }}
      ></div>
    </Watermark>
  );
}

                  ===SPLIT===组建:<Watermark/>
                  使用描述：图片灰阶水印 
                  代码示例：import React from 'react';
import { Watermark } from 'tdesign-react';

export default function GrayscaleWatermark() {
  return (
    <Watermark
      watermarkContent={{
        url: 'https://tdesign.gtimg.com/starter/brand-logo-light.png',
        isGrayscale: true,
      }}
      x={100}
      y={140}
      width={158}
      height={22}
      alpha={0.3}
    >
      <div
        style={{
          height: 300,
        }}
      ></div>
    </Watermark>
  );
}

                  组建:<Rate/>
                  使用描述：实心评分 
                  代码示例：import React from 'react';
import { Rate } from 'tdesign-react';

export default function BasicRate() {
  return <Rate defaultValue={3} />;
}

                  ===SPLIT===组建:<Rate/>
                  使用描述：自定义评分数量 
                  代码示例：import React from 'react';
import { Rate } from 'tdesign-react';

export default function BasicRate() {
  return <Rate count={7} defaultValue={6} />;
}

                  ===SPLIT===组建:<Rate/>
                  使用描述：带描述评分 
                  代码示例：import React from 'react';
import { Rate } from 'tdesign-react';

export default function BasicRate() {
  return <Rate showText defaultValue={4} />;
}

                  ===SPLIT===组建:<Rate/>
                  使用描述：组件状态 
                  代码示例：import React from 'react';
import { Space, Rate } from 'tdesign-react';

export default function BasicRate() {
  return (
    <Space
      direction="vertical"
      style={{
        textAlign: 'center',
      }}
    >
      <h3>未评分状态</h3>
      <Rate />

      <h3>满分状态</h3>
      <Rate defaultValue={5} />

      <h3>半星状态</h3>
      <Rate allowHalf defaultValue={4.5} />
    </Space>
  );
}

                  ===SPLIT===组建:<Rate/>
                  使用描述：可以通过 size 属性调整图标尺寸。
                  代码示例：import React from 'react';
import { Space, Rate } from 'tdesign-react';

export default function BasicRate() {
  return (
    <Space direction="vertical">
      <h3>16px</h3>
      <Rate size={`16`} defaultValue={5} />

      <h3>24px</h3>
      <Rate defaultValue={5} />
    </Space>
  );
}

                  ===SPLIT===组建:<Rate/>
                  使用描述：可以通过 icon 属性自定义高亮图标。
                  代码示例：import React from 'react';
import { Rate, Space } from 'tdesign-react';
import { StarIcon, LogoGithubIcon, HeartFilledIcon } from 'tdesign-icons-react';

export default function BasicRate() {
  return (
    <Space direction="vertical">
      <Rate defaultValue={1} icon={<StarIcon />} />
      <Rate defaultValue={2} icon={<LogoGithubIcon />} />
      <Rate defaultValue={2.5} allowHalf icon={<HeartFilledIcon />} color={'var(--td-error-color-7)'} />
    </Space>
  );
}

                  组建:<Alert/>
                  使用描述：使用简洁文字提示的最基础警告条，包含 4 种情况的提示：普通消息，成功，警示，失败。
                  代码示例：import React from 'react';
import { Alert, Space } from 'tdesign-react';

export default function AlertBase() {
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Alert theme="success" message="这是一条成功的消息提示" />
      <Alert theme="info" message="这是一条普通的消息提示" />
      <Alert theme="warning" message="这是一条警示消息" />
      <Alert theme="error" message="高危操作/出错信息提示" />
    </Space>
  );
}

                  ===SPLIT===组建:<Alert/>
                  使用描述：当需要对此警告做操作，可以配置 operation 来增加相关操作。
                  代码示例：import React from 'react';
import { Alert, Space } from 'tdesign-react';

export default function AlertOperation() {
  const operation = <span>相关操作</span>;
  return (
    <Space
      direction="vertical"
      style={{
        width: '100%',
      }}
    >
      <Alert
        theme="success"
        message="这是一条成功的消息提示"
        operation={operation}
        close
        onClosed={() => {
          console.log('onClosed');
        }}
      />
      <Alert theme="info" message="这是一条普通的消息提示" operation={operation} close />
      <Alert theme="warning" message="这是一条警示消息" operation={operation} close />
      <Alert theme="error" message="高危操作/出错信息提示" operation={operation} close />
    </Space>
  );
}

                  ===SPLIT===组建:<Alert/>
                  使用描述：当信息内容较复杂时，可使用相关描述文字辅助说明。
                  代码示例：import React from 'react';
import { Alert } from 'tdesign-react';

export default function AlertDescription() {
  const operation = <span>相关操作</span>;
  return (
    <Alert
      message="这是一条普通的消息提示描述，这是一条普通的消息提示描述"
      title="这是一条普通的消息提示"
      operation={operation}
      close
    />
  );
}

                  ===SPLIT===组建:<Alert/>
                  使用描述：当信息内容超过 2 行时，可使用折叠的方式将部分信息隐藏。
                  代码示例：import React from 'react';
import { Alert } from 'tdesign-react';

export default function AlertCollapsed() {
  const message = [
    '1.这是一条普通的消息提示描述，',
    '2.这是一条普通的消息提示描述，',
    '3.这是一条普通的消息提示描述，',
    '4.这是一条普通的消息提示描述，',
    '5.这是一条普通的消息提示描述，',
  ];
  return <Alert message={message} maxLine={2} close />;
}

                  组建:<Dialog/>
                  使用描述：指带有取消及主要操作，指导用户进行二次确认的对话框。常用于反馈或容错的场景。
                  代码示例：import React, { useState } from 'react';
import { Dialog, Button } from 'tdesign-react';

export default function BasicUsage() {
  const [visible, setVisible] = useState(false);
  const handleClick = () => {
    setVisible(true);
  };
  const onConfirm = (context) => {
    console.log('点击了确认按钮', context);
    setVisible(false);
  };
  const onCancel = (context) => {
    console.log('点击了取消按钮', context);
  };
  const onClickCloseBtn = (context) => {
    console.log('点击了关闭按钮', context);
  };
  const onKeydownEsc = (context) => {
    console.log('按下了ESC', context);
  };
  const onClickOverlay = (context) => {
    console.log('点击了蒙层', context);
  };
  const handleClose = (context) => {
    console.log('关闭弹窗，点击关闭按钮、按下ESC、点击蒙层等触发', context);
    setVisible(false);
  };
  return (
    <>
      <Button theme="primary" onClick={handleClick}>
        Open Modal
      </Button>
      <Dialog
        header="Basic Modal"
        visible={visible}
        confirmOnEnter
        onClose={handleClose}
        onConfirm={onConfirm}
        onCancel={onCancel}
        onEscKeydown={onKeydownEsc}
        onCloseBtnClick={onClickCloseBtn}
        onOverlayClick={onClickOverlay}
      >
        <p>This is a dialog</p>
      </Dialog>
    </>
  );
}

                  ===SPLIT===组建:<Dialog/>
                  使用描述：指显示某操作结果的对话框，标题区域有图标，仅有一个确认按钮。常用于操作后结果的展示，或危险、警告等信息的展示。
                  代码示例：import React, { useState } from 'react';
import { Dialog, Button, Space } from 'tdesign-react';
import { CloseCircleFilledIcon } from 'tdesign-icons-react';

export default function WarningExample() {
  const [visibleConfirm, setVisibleConfirm] = useState(false);
  const [visibleSuccess, setVisibleSuccess] = useState(false);
  const [visibleWarning, setVisibleWarning] = useState(false);
  const [visibleError, setVisibleError] = useState(false);
  const onClickConfirm = () => {
    setVisibleConfirm(true);
  };
  const onSuccess = () => {
    setVisibleSuccess(true);
  };
  const onWarning = () => {
    setVisibleWarning(true);
  };
  const onError = () => {
    setVisibleError(true);
  };
  const onCloseConfirm = () => {
    setVisibleConfirm(false);
  };
  const onCloseSuccess = () => {
    setVisibleSuccess(false);
  };
  const onCloseWraing = () => {
    setVisibleWarning(false);
  };
  const onCloseError = () => {
    setVisibleError(false);
  };
  return (
    <Space breakLine>
      <Button theme="primary" onClick={onClickConfirm}>
        提示反馈
      </Button>
      <Button theme="primary" onClick={onSuccess}>
        成功反馈
      </Button>
      <Button theme="primary" onClick={onWarning}>
        警示反馈
      </Button>
      <Button theme="primary" onClick={onError}>
        错误反馈
      </Button>

      <Dialog header="提示" theme="info" cancelBtn={false} visible={visibleConfirm} onClose={onCloseConfirm}></Dialog>

      <Dialog
        theme="success"
        header="成功"
        cancelBtn={false}
        visible={visibleSuccess}
        onClose={onCloseSuccess}
      ></Dialog>
      <Dialog theme="warning" header="警示" cancelBtn={false} visible={visibleWarning} onClose={onCloseWraing}></Dialog>
      <Dialog
        header={
          <>
            <CloseCircleFilledIcon
              style={{
                color: 'rgb(227, 77, 89)',
              }}
            />
            <span>我是主要信息，我是主要信息</span>
          </>
        }
        cancelBtn={false}
        visible={visibleError}
        onClose={onCloseError}
      ></Dialog>
    </Space>
  );
}

                  ===SPLIT===组建:<Dialog/>
                  使用描述：按钮带加载标识，操作需要异步完成的对话框。适用于当前操作需要异步完成，等待后再自动关闭对话框。
                  代码示例：import React, { useState } from 'react';
import { Dialog, Button, DialogPlugin } from 'tdesign-react';

async function delay(time) {
  return new Promise((resolve) => setTimeout(resolve, time * 1000));
}
export default function BasicUsage() {
  const [visible, setVisible] = useState(false);
  const [loading, setLoading] = useState(false);
  const handleClick = () => {
    setVisible(true);
  };
  const handleClose = () => {
    setVisible(false);
  };
  const handleCloseAsync = () => {
    setLoading(true);
    setTimeout(() => {
      setVisible(false);
      setLoading(false);
    }, 2000);
  };
  function showFunctionCallDialog() {
    // 函数调用组件
    const myDialog = DialogPlugin({
      header: 'Basic Modal',
      body: 'This is a dialog',
      onConfirm: async ({ e }) => {
        console.log('confirm clicked', e);
        myDialog.setConfirmLoading(true);
        await delay(3);
        myDialog.setConfirmLoading(false);
        myDialog.hide();
      },
      onClose: ({ e, trigger }) => {
        console.log('e: ', e);
        console.log('trigger: ', trigger);
        myDialog.hide();
      },
      onCloseBtnClick: ({ e }) => {
        console.log('close btn: ', e);
      },
    });
  }
  return (
    <>
      <Button
        theme="primary"
        onClick={handleClick}
        style={{
          marginRight: 16,
        }}
      >
        Open Modal
      </Button>

      <Button theme="primary" onClick={showFunctionCallDialog}>
        Open Plugin Modal
      </Button>

      <Dialog
        header="Basic Modal"
        visible={visible}
        confirmLoading={loading}
        onClose={handleClose}
        onConfirm={handleCloseAsync}
      >
        <p>This is a dialog</p>
      </Dialog>
    </>
  );
}

                  ===SPLIT===组建:<Dialog/>
                  使用描述：可自定义对话框内容和底部按钮。
                  代码示例：import React, { useState } from 'react';
import { Dialog, Button } from 'tdesign-react';

export default function CustomFooterExample() {
  const [visibleConfirm, setVisibleConfirm] = useState(false);
  const [visibleBtn, setVisibleBtn] = useState(false);
  const [visibleFooter, setVisibleFooter] = useState(false);
  const handleConfirmClick = () => {
    setVisibleConfirm(true);
  };
  const handleConfirmClose = () => {
    setVisibleConfirm(false);
  };
  const handleBtnClick = () => {
    setVisibleBtn(true);
  };
  const handleBtnClose = () => {
    setVisibleBtn(false);
  };
  const handleFooterClick = () => {
    setVisibleFooter(true);
  };
  const handleFooterClose = () => {
    setVisibleFooter(false);
  };
  return (
    <>
      <Button
        theme="primary"
        onClick={handleConfirmClick}
        style={{
          marginRight: 16,
        }}
      >
        只显示确认按钮
      </Button>
      <Button
        theme="primary"
        onClick={handleBtnClick}
        style={{
          marginRight: 16,
        }}
      >
        自定义按钮内容
      </Button>
      <Button
        theme="primary"
        onClick={handleFooterClick}
        style={{
          marginRight: 16,
        }}
      >
        自定义内容
      </Button>
      <Dialog header="只显示确认按钮" visible={visibleConfirm} cancelBtn={false} onClose={handleConfirmClose}>
        <p>This is a dialog</p>
      </Dialog>
      <Dialog
        header="自定义按钮内容"
        visible={visibleBtn}
        confirmBtn="去意已决"
        cancelBtn="我再想想"
        onClose={handleBtnClose}
      >
        <p>This is a dialog</p>
      </Dialog>
      <Dialog
        header="自定义footer"
        visible={visibleFooter}
        footer={
          <>
            <div
              style={{
                display: 'inline-block',
                marginRight: 8,
              }}
            >
              自定义的footer{' '}
            </div>
            <Button theme="primary" onClick={handleFooterClose}>
              好吧
            </Button>
          </>
        }
        onClose={handleFooterClose}
      >
        <p>This is a dialog</p>
      </Dialog>
    </>
  );
}

                  ===SPLIT===组建:<Dialog/>
                  使用描述：模态对话框会中断用户操作，必须处理当前对话框内容后才能进行其他操作。非模态框不中断用户操作。
                  代码示例：import React, { useState } from 'react';
import { Dialog, DialogCard, Button, Select } from 'tdesign-react';

export default function NotModalExample() {
  const [visible, setVisible] = useState(false);
  const [visible1, setVisible1] = useState(false);
  const [visible2, setVisible2] = useState(false);
  const [value, setValue] = useState('');
  const handleClick = () => {
    setVisible(true);
  };
  const handleClose = () => {
    setVisible(false);
  };
  const handleClose1 = () => {
    setVisible1(false);
  };
  const handleClose2 = () => {
    setVisible2(false);
  };
  const onChange = (value) => {
    setValue(value);
  };
  return (
    <>
      <Button
        theme="primary"
        onClick={handleClick}
        style={{
          marginRight: 16,
        }}
      >
        模态对话框
      </Button>
      <Button
        theme="primary"
        onClick={() => {
          setVisible1(true);
        }}
        style={{
          marginRight: 16,
        }}
      >
        非模态对话框
      </Button>
      <Button
        theme="primary"
        onClick={() => {
          setVisible2(true);
        }}
        style={{
          marginRight: 16,
        }}
      >
        非模态对话框2
      </Button>

      <Dialog
        width={800}
        header="模态对话框"
        visible={visible}
        onClose={handleClose}
        onCloseBtnClick={() => {
          console.log('on click close btn');
        }}
        onOpened={() => {
          console.log('dialog is open');
        }}
      >
        <p>This is a dialog</p>
      </Dialog>
      <Dialog
        mode="modeless"
        header="非模态对话框"
        draggable={true}
        visible={visible1}
        onClose={handleClose1}
        onOpened={() => {
          console.log('dialog is open');
        }}
      >
        <Select
          value={value}
          onChange={onChange}
          style={{
            width: '40%',
          }}
          clearable
          options={[
            {
              label: '架构云',
              value: '1',
            },
            {
              label: '大数据',
              value: '2',
            },
            {
              label: '区块链',
              value: '3',
            },
            {
              label: '物联网',
              value: '4',
              disabled: true,
            },
            {
              label: '人工智能',
              value: '5',
            },
          ]}
        ></Select>
      </Dialog>
      <Dialog
        mode="modeless"
        header="非模态对话框2"
        draggable={true}
        visible={visible2}
        onClose={handleClose2}
        onOpened={() => {
          console.log('dialog is open');
        }}
      >
        <p>This is a dialog</p>
      </Dialog>
      <DialogCard header="普通对话框">
        <p>This is a dialog</p>
      </DialogCard>
    </>
  );
}

                  ===SPLIT===组建:<Dialog/>
                  使用描述：可以通过 placement 和 top 属性来自定义控制对话框位置。
                  代码示例：import React, { useState } from 'react';
import { Dialog, Button } from 'tdesign-react';

export default function PositionExample() {
  const [visible, setVisible] = useState(false);
  const [placement, setPlacement] = useState('center');
  const [topData, setTopData] = useState('');
  const [visible1, setVisible1] = useState(false);
  const handleClick = (placement) => {
    setVisible(true);
    setPlacement(placement);
    setTopData('');
  };
  const handleClose = () => {
    setVisible(false);
  };
  const handleClose1 = () => {
    setVisible1(false);
  };
  return (
    <>
      <Button
        theme="primary"
        onClick={() => handleClick('top')}
        style={{
          marginRight: 16,
        }}
      >
        默认
      </Button>
      <Button
        theme="primary"
        onClick={() => handleClick('center')}
        style={{
          marginRight: 16,
        }}
      >
        垂直居中
      </Button>
      <Button
        theme="primary"
        onClick={() => {
          setVisible(true);
          setTopData('100');
        }}
        style={{
          marginRight: 16,
        }}
      >
        自定义
      </Button>
      <Button
        theme="primary"
        onClick={() => {
          setVisible1(true);
          setTopData('100px');
        }}
      >
        超出屏幕
      </Button>

      <Dialog
        header="位置演示"
        visible={visible}
        top={topData}
        showOverlay
        zIndex={2000}
        placement={placement}
        onClose={handleClose}
        onOpened={() => {
          console.log('dialog is open');
        }}
        onClosed={() => {
          console.log('dialog is closed');
        }}
      >
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
      </Dialog>
      <Dialog
        header="位置演示"
        visible={visible1}
        showOverlay
        zIndex={2000}
        onClose={handleClose1}
        onOpened={() => {
          console.log('dialog is open');
        }}
        onClosed={() => {
          console.log('dialog is closed');
        }}
      >
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
        <p>This is a dialog</p>
      </Dialog>
    </>
  );
}

                  ===SPLIT===组建:<Dialog/>
                  使用描述：指定对话框元素挂载 DOM。
                  代码示例：import React, { useState, useRef } from 'react';
import { Dialog, Button } from 'tdesign-react';

const buttonStyle = {
  marginRight: 16,
};
export default function AttachModalExample() {
  const elRef = useRef(null);
  const [state, setState] = useState({
    visibleBody: false,
    visibleIdAttach: false,
    visibleFunctionAttach: false,
    visibleShowInAttachedElement: false,
  });
  const handleOpen = (visibleName) => {
    setState({
      ...state,
      [visibleName]: true,
    });
  };
  const handleClose = (visibleName) => {
    setState({
      ...state,
      [visibleName]: false,
    });
  };
  const getAttach = () => elRef.current;
  const { visibleBody, visibleIdAttach, visibleFunctionAttach, visibleShowInAttachedElement } = state;
  return (
    <div
      ref={elRef}
      style={{
        position: 'relative',
        height: '400px',
      }}
    >
      <Button theme="primary" onClick={() => handleOpen('visibleBody')} style={buttonStyle}>
        挂载在body
      </Button>
      <Button theme="primary" onClick={() => handleOpen('visibleIdAttach')} style={buttonStyle}>
        挂载特定元素
      </Button>
      <Button theme="primary" onClick={() => handleOpen('visibleFunctionAttach')} style={buttonStyle}>
        挂载函数返回节点
      </Button>
      <Button theme="primary" onClick={() => handleOpen('visibleShowInAttachedElement')} style={buttonStyle}>
        展示在挂载元素区域
      </Button>
      <Dialog
        attach="body"
        header="挂载在body"
        visible={visibleBody}
        onClose={() => handleClose('visibleBody')}
        onOpened={() => {
          console.log('dialog is open');
        }}
      >
        <div>
          <div>我是被挂载到body元素的对话框</div>
          <div>我是内容</div>
          <div>我是内容</div>
          <div>我是内容</div>
          <div>我是内容</div>
        </div>
      </Dialog>
      <Dialog
        attach="#app"
        header="挂载到id为app的元素"
        visible={visibleIdAttach}
        onClose={() => handleClose('visibleIdAttach')}
        onOpened={() => {
          console.log('dialog is open');
        }}
      >
        <div>
          <div>通过querySelect指定元素挂载</div>
          <div>支持原生document.querySelect选择元素</div>
          <div>querySelect获取到的第一个元素为挂载点</div>
          <div>我是内容</div>
          <div>我是内容</div>
        </div>
      </Dialog>
      <Dialog
        attach={getAttach}
        header="函数返回挂载节点"
        visible={visibleFunctionAttach}
        onClose={() => handleClose('visibleFunctionAttach')}
        onOpened={() => {
          console.log('dialog is open');
        }}
      >
        <div>
          <div>指定函数返回的节点为挂载点</div>
          <div>函数返回为DOM节点对象</div>
          <div>我是内容</div>
          <div>我是内容</div>
          <div>我是内容</div>
        </div>
      </Dialog>

      <Dialog
        header="展示在挂载元素区域"
        attach={getAttach}
        showInAttachedElement={true}
        visible={visibleShowInAttachedElement}
        onClose={() => handleClose('visibleShowInAttachedElement')}
        onOpened={() => {
          console.log('dialog is open');
        }}
      >
        <div>
          <div>父元素（挂载元素）需要有定位属性，如：position: relative</div>
          <div>showInAttachedElement API 仅针对模态对话框有效</div>
        </div>
      </Dialog>
    </div>
  );
}

                  ===SPLIT===组建:<Dialog/>
                  使用描述：组件实例方法-更新弹框：DialogInstance.update()
                  代码示例：import React from 'react';
import { DialogPlugin, Button, Space } from 'tdesign-react';

const buttonStyle = {
  marginRight: 16,
};
export default function PluginModalExample() {
  const showDialog = () => {
    const myDialog = DialogPlugin({
      header: 'Dialog-Plugin',
      body: 'Hi, darling! Do you want to be my lover?',
      onConfirm: ({ e }) => {
        console.log('confirm clicked', e);
        myDialog.hide();
      },
      onClose: ({ e, trigger }) => {
        console.log('e: ', e);
        console.log('trigger: ', trigger);
        myDialog.hide();
      },
      onCloseBtnClick: ({ e }) => {
        console.log('close btn: ', e);
      },
    });
  };
  const handleDN = () => {
    const dialogNode = DialogPlugin({
      header: 'Dialog-Plugin',
      body: 'Hi, darling! Do you want to be my lover?',
    });
    dialogNode.update({
      header: 'Updated-Dialog-Plugin',
      cancelBtn: null,
      onConfirm: ({ e }) => {
        console.log('confirm button has been clicked!');
        console.log('e: ', e);
        dialogNode.hide();
        dialogNode.destroy();
      },
      onClose: ({ e, trigger }) => {
        console.log('e: ', e);
        console.log('trigger: ', trigger);
        dialogNode.hide();
      },
    });
  };
  const onConfirm = () => {
    const confirmDia = DialogPlugin.confirm({
      header: 'Dialog-Confirm-Plugin',
      body: 'Are you sure to delete it?',
      confirmBtn: 'ok',
      cancelBtn: 'cancel',
      onConfirm: ({ e }) => {
        console.log('confirm button has been clicked!');
        console.log('e: ', e);
        confirmDia.hide();
      },
      onClose: ({ e, trigger }) => {
        console.log('e: ', e);
        console.log('trigger: ', trigger);
        confirmDia.hide();
      },
    });
  };
  const onAlert = () => {
    const alertDia = DialogPlugin.alert({
      header: 'Dialog-Alert-Plugin',
      body: 'Notice: Your balance is going to be empty.',
      confirmBtn: {
        content: 'Got it!',
        variant: 'base',
        theme: 'danger',
      },
      onConfirm: ({ e }) => {
        console.log('confirm e: ', e);
        alertDia.hide();
      },
      onClose: ({ e, trigger }) => {
        console.log('close e: ', e);
        console.log('trigger: ', trigger);
        alertDia.hide();
      },
    });
  };
  const onDialogPluginConfirm = () => {
    const confirmDia = DialogPlugin.confirm({
      header: 'Dialog-Confirm-Plugin',
      body: 'Are you sure to delete it?',
      confirmBtn: 'ok',
      cancelBtn: 'cancel',
      onConfirm: ({ e }) => {
        console.log('confirm button has been clicked!');
        console.log('e: ', e);
        confirmDia.hide();
      },
      onClose: ({ e, trigger }) => {
        console.log('e: ', e);
        console.log('trigger: ', trigger);
        confirmDia.hide();
      },
    });
  };
  return (
    <Space direction="vertical">
      <p>函数调用方式一：DialogPlugin(options)</p>
      <p>函数调用方式二：DialogPlugin.confirm(options)</p>
      <p>函数调用方式三：DialogPlugin.alert(options)</p>
      <div>
        <Button theme="primary" onClick={showDialog} style={buttonStyle}>
          dialog
        </Button>
        <Button theme="primary" onClick={handleDN} style={buttonStyle}>
          handleDialogNode
        </Button>
        <Button theme="primary" onClick={onConfirm} style={buttonStyle}>
          confirm
        </Button>
        <Button theme="primary" onClick={onAlert} style={buttonStyle}>
          alert
        </Button>
        <Button theme="primary" onClick={onDialogPluginConfirm} style={buttonStyle}>
          DialogPlugin.confirm
        </Button>
      </div>
    </Space>
  );
}

                  组建:<Drawer/>
                  使用描述：承载展示性的信息内容。当页面空间有限时，可用抽屉增大页面扩展性。
                  代码示例：import React, { useState } from 'react';
import { Drawer, Button } from 'tdesign-react';

export default function () {
  const [visible, setVisible] = useState(false);
  const handleClick = () => {
    setVisible(true);
  };
  const handleClose = () => {
    setVisible(false);
  };
  return (
    <>
      <Button theme="primary" onClick={handleClick}>
        打开抽屉
      </Button>
      <Drawer header="抽屉标题" visible={visible} onClose={handleClose}>
        <p>抽屉的内容</p>
      </Drawer>
    </>
  );
}

                  ===SPLIT===组建:<Drawer/>
                  使用描述：操作类抽屉在抽屉中承载需要编辑或操作的表单，可在用户需要操作时使用。
                  代码示例：import React, { useState } from 'react';
import { Drawer, Button, Input, Form } from 'tdesign-react';

export default function () {
  const [visible, setVisible] = useState(false);
  const handleClick = () => {
    setVisible(true);
  };
  const handleClose = () => {
    setVisible(false);
  };
  return (
    <>
      <Button theme="primary" onClick={handleClick}>
        打开抽屉
      </Button>
      <Drawer header="抽屉标题" visible={visible} onClose={handleClose}>
        <Form labelWidth={60}>
          <Form.FormItem label="Label A">
            <Input />
          </Form.FormItem>
          <Form.FormItem label="Label B">
            <Input />
          </Form.FormItem>
        </Form>
      </Drawer>
    </>
  );
}

                  ===SPLIT===组建:<Drawer/>
                  使用描述：通过设置showOverlay，可以控制是否显示抽屉的蒙层。
                  代码示例：import React, { useState } from 'react';
import { Drawer, Button } from 'tdesign-react';

export default function () {
  const [visible, setVisible] = useState(false);
  const handleClick = () => {
    setVisible(true);
  };
  const handleClose = () => {
    setVisible(false);
  };
  return (
    <>
      <Button theme="primary" onClick={handleClick}>
        打开抽屉
      </Button>
      <Drawer header="抽屉标题" visible={visible} onClose={handleClose} showOverlay={false}>
        <p>抽屉的内容</p>
      </Drawer>
    </>
  );
}

                  ===SPLIT===组建:<Drawer/>
                  使用描述：通过placement，可以让抽屉在不同的位置展示。
                  代码示例：import React, { useState } from 'react';
import { Drawer, Radio, Button, Space } from 'tdesign-react';

export default function () {
  const [visible, setVisible] = useState(false);
  const [placement, setPlacement] = useState('right');
  const handleClick = () => {
    setVisible(true);
  };
  const handleClose = () => {
    setVisible(false);
  };
  return (
    <Space>
      <Radio.Group value={placement} onChange={(value) => setPlacement(value)}>
        <Radio.Button value="left">左侧</Radio.Button>
        <Radio.Button value="right">右侧</Radio.Button>
        <Radio.Button value="top">上方</Radio.Button>
        <Radio.Button value="bottom">下方</Radio.Button>
      </Radio.Group>

      <div>
        <Button theme="primary" onClick={handleClick}>
          打开抽屉
        </Button>
      </div>
      <Drawer placement={placement} key={placement} visible={visible} onClose={handleClose}>
        <p>抽屉的内容</p>
      </Drawer>
    </Space>
  );
}

                  ===SPLIT===组建:<Drawer/>
                  使用描述：通过 size 属性控制抽屉展示宽度。
                  代码示例：import React, { useState } from 'react';
import { Drawer, Radio, Button, Space } from 'tdesign-react';

export default function () {
  const [visible, setVisible] = useState(false);
  const [size, setSize] = useState('small');
  const handleClick = () => {
    setVisible(true);
  };
  const handleClose = () => {
    setVisible(false);
  };
  return (
    <Space>
      <Radio.Group value={size} onChange={(value) => setSize(value)}>
        <Radio.Button value="small">small(300px)</Radio.Button>
        <Radio.Button value="medium">medium(500px)</Radio.Button>
        <Radio.Button value="large">large(760px)</Radio.Button>
        <Radio.Button value={200}>200</Radio.Button>
        <Radio.Button value="400px">400px</Radio.Button>
        <Radio.Button value="50%">50%</Radio.Button>
      </Radio.Group>
      <div>
        <Button theme="primary" onClick={handleClick}>
          打开抽屉
        </Button>
      </div>
      <Drawer size={size} header="Drawer" placement="right" visible={visible} onClose={handleClose}>
        <p>抽屉的内容</p>
      </Drawer>
    </Space>
  );
}

                  ===SPLIT===组建:<Drawer/>
                  使用描述：通过header和footer 可以调整抽屉的头部和底部内容。
                  代码示例：import React, { useState } from 'react';
import { Drawer, Button } from 'tdesign-react';

export default function () {
  const [visible, setVisible] = useState(false);
  const handleClick = () => {
    setVisible(true);
  };
  const handleClose = () => {
    setVisible(false);
  };
  return (
    <>
      <Button theme="primary" onClick={handleClick}>
        打开抽屉
      </Button>
      <Drawer
        header={<div>自定义头部</div>}
        body={<div>自定义内容</div>}
        footer={<Button theme="primary">自定义底部按钮</Button>}
        visible={visible}
        onClose={handleClose}
      ></Drawer>
    </>
  );
}

                  ===SPLIT===组建:<Drawer/>
                  使用描述：支持覆盖及推开内容区域的方式展示抽屉， 整个页面的 push 模式需设置 attach 为 body。（抽屉组件默认挂载到元素本身所在的位置）。
                  代码示例：import React, { useState } from 'react';
import { Drawer, Radio, Button, Space } from 'tdesign-react';

export default function () {
  const [visible, setVisible] = useState(false);
  const [mode, setMode] = useState('push');
  const handleClick = () => {
    setVisible(true);
  };
  const handleClose = () => {
    setVisible(false);
  };
  return (
    <Space>
      <div>
        <span>抽屉弹出模式：</span>
        <Radio.Group value={mode} onChange={(value) => setMode(value)}>
          <Radio.Button value="push">push</Radio.Button>
          <Radio.Button value="overlay">overlay</Radio.Button>
        </Radio.Group>
      </div>

      <div>
        <Button theme="primary" onClick={handleClick}>
          打开抽屉
        </Button>
      </div>

      <Drawer placement="right" attach={'body'} header="抽屉标题" visible={visible} onClose={handleClose} mode={mode}>
        <p>抽屉的内容</p>
      </Drawer>
    </Space>
  );
}

                  ===SPLIT===组建:<Drawer/>
                  使用描述：通过 showInAttachedElement 属性指定抽屉出现的父容器元素，父元素需要有定位属性，如：position: relative。
                  代码示例：import React, { useState } from 'react';
import { Drawer, Radio, Button, Space } from 'tdesign-react';

export default function () {
  const [visible, setVisible] = useState(false);
  const [placement, setPlacement] = useState('right');
  const [mode, setMode] = useState('push');
  const handleClick = () => {
    setVisible(true);
  };
  const handleClose = () => {
    setVisible(false);
  };
  return (
    <div
      id="demo-container"
      style={{
        position: 'relative',
        height: '400px',
        padding: '48px',
        overflow: 'hidden',
        background: '#fafafa',
        border: '1px solid #ebedf0',
        borderRadius: '2px',
      }}
    >
      <div id="demo-suf-container">
        <Space direction="vertical">
          <p>渲染在当前元素中。</p>
          <div>
            <span>抽屉弹出方向：</span>
            <Radio.Group value={placement} onChange={(value) => setPlacement(value)}>
              <Radio.Button value="left">左侧</Radio.Button>
              <Radio.Button value="right">右侧</Radio.Button>
              <Radio.Button value="top">上方</Radio.Button>
              <Radio.Button value="bottom">下方</Radio.Button>
            </Radio.Group>
          </div>

          <div>
            <span>抽屉弹出模式：</span>
            <Radio.Group value={mode} onChange={(value) => setMode(value)}>
              <Radio.Button value="push">push</Radio.Button>
              <Radio.Button value="overlay">overlay</Radio.Button>
            </Radio.Group>
          </div>

          <div>
            <Button theme="primary" onClick={handleClick}>
              Open
            </Button>
          </div>

          <Drawer
            showInAttachedElement
            placement={placement}
            header="Drawer"
            visible={visible}
            onClose={handleClose}
            mode={mode}
            attach="#demo-suf-container"
          >
            <p>This is a drawer</p>
          </Drawer>
        </Space>
      </div>
    </div>
  );
}

                  ===SPLIT===组建:<Drawer/>
                  使用描述：通过destroyOnClose，可以在关闭抽屉时将抽屉从页面节点上销毁。
                  代码示例：import React, { useState } from 'react';
import { Drawer, Button } from 'tdesign-react';

export default function () {
  const [visible, setVisible] = useState(false);
  const handleClick = () => {
    setVisible(true);
  };
  const handleClose = () => {
    setVisible(false);
  };
  return (
    <>
      <Button theme="primary" onClick={handleClick}>
        打开抽屉
      </Button>
      <Drawer visible={visible} onClose={handleClose} destroyOnClose>
        <p>抽屉的内容</p>
      </Drawer>
    </>
  );
}

                  ===SPLIT===组建:<Drawer/>
                  使用描述：通过sizeDraggable，可以拖拽抽屉的边缘自由改变抽屉的大小。
                  代码示例：import React, { useState } from 'react';
import { Drawer, Radio, Button, Space } from 'tdesign-react';

export default function () {
  const [visible, setVisible] = useState(false);
  const [placement, setPlacement] = useState('right');
  const handleClick = () => {
    setVisible(true);
  };
  const handleClose = () => {
    setVisible(false);
  };
  return (
    <Space>
      <Radio.Group value={placement} onChange={(value) => setPlacement(value)}>
        <Radio.Button value="left">从左侧拖拽抽屉</Radio.Button>
        <Radio.Button value="right">从右侧拖拽抽屉</Radio.Button>
        <Radio.Button value="top">从上方拖拽抽屉</Radio.Button>
        <Radio.Button value="bottom">从下方拖拽抽屉</Radio.Button>
      </Radio.Group>

      <div>
        <Button theme="primary" onClick={handleClick}>
          打开抽屉
        </Button>
      </div>
      <Drawer placement={placement} key={placement} visible={visible} onClose={handleClose} sizeDraggable={true}>
        <p>抽屉的内容</p>
      </Drawer>
    </Space>
  );
}

                  ===SPLIT===组建:<Drawer/>
                  使用描述：销毁抽屉：DrawerInstance.destroy()隐藏抽屉：DrawerInstance.hide()显示抽屉：DrawerInstance.show()更新抽屉：DrawerInstance.update()
                  代码示例：import React from 'react';
import { DrawerPlugin, Button, Space } from 'tdesign-react';

const buttonStyle = {
  marginRight: 16,
};
export default function PluginModalExample() {
  const showDrawer = () => {
    const myDrawer = DrawerPlugin({
      header: 'Drawer-Plugin',
      body: 'Hi, darling! Do you want to be my lover?',
      onConfirm: ({ e }) => {
        console.log('confirm clicked', e);
        myDrawer.hide();
      },
      onClose: ({ e, trigger }) => {
        console.log('e: ', e);
        console.log('trigger: ', trigger);
        myDrawer.hide();
      },
      onCloseBtnClick: ({ e }) => {
        console.log('close btn: ', e);
      },
    });
  };
  const onDrawerPlugin = () => {
    const Drawer = DrawerPlugin({
      header: 'Drawer-Confirm-Plugin',
      body: 'I am a drawer!',
      confirmBtn: 'hello',
      cancelBtn: 'bye',
      size: 'large',
      className: 't-class-drawer--first',
      onConfirm: ({ e }) => {
        console.log('confirm button has been clicked!');
        console.log('e: ', e);
        Drawer.hide();
      },
      onClose: ({ e, trigger }) => {
        console.log('e: ', e);
        console.log('trigger: ', trigger);
        Drawer.hide();
      },
    });
  };
  return (
    <Space direction="vertical">
      <p>函数调用方式一：DrawerPlugin(options)</p>
      <p>函数调用方式二：drawer(options)</p>
      <div>
        <Button theme="primary" onClick={showDrawer} style={buttonStyle}>
          DrawerPlugin
        </Button>
        <Button theme="primary" onClick={onDrawerPlugin} style={buttonStyle}>
          drawer
        </Button>
      </div>
    </Space>
  );
}

                  组建:<Guide/>
                  使用描述：基本引导 
                  代码示例：import React, { useEffect } from 'react';
import { Button, Drawer, Guide, Input, Row } from 'tdesign-react';

const classStyles = `
<style>
.guide-container {
  max-width: 600px;
  padding: 40px;
}

.title-major {
  color: var(--td-text-color-primary);
  font-size: 36px;
  font-weight: 700;
  line-height: 44px;
}

.title-sub {
  margin-top: 8px;
  color: var(--td-text-color-secondary);
  font-size: 14px;
  font-weight: 400;
  line-height: 22px;
}

.field {
  margin-top: 50px;
}

.label {
  margin-bottom: 8px;
  color: var(--td-text-color-primary);
  font-size: 14px;
  font-weight: 400;
  line-height: 22px;
}

.action {
  display: inline-flex;
  margin-top: 50px;
}

.action button:first-child {
  margin-right: 10px;
}
</style>
`;
export default function BasicGuide() {
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  const steps = [
    {
      element: '.main-title-base',
      title: '新手引导标题',
      body: '新手引导的说明文案',
      placement: 'bottom-right',
      stepOverlayClass: 't-test-guide-step-overlay',
      popupProps: {
        overlayStyle: {
          fontWeight: 'normal',
        },
        overlayInnerStyle: {
          padding: '4px',
          height: '128px',
        },
        overlayClassName: 'guide-custom-overlay-class',
        overlayInnerClassName: 'guide-custom-overlay-inner-class',
      },
    },
    {
      element: '.label-field-base',
      title: '新手引导标题',
      body: '新手引导的说明文案',
      placement: 'bottom',
    },
    {
      element: '.action-base',
      title: '新手引导标题',
      body: '新手引导的说明文案',
      placement: 'right',
    },
  ];
  const [visible, setVisible] = React.useState(false);
  const [current, setCurrent] = React.useState(-1);
  const handleClick = () => {
    setVisible(true);
    setTimeout(() => {
      setCurrent(0);
    }, 800);
  };
  const handleChange = (current, { e, total }) => {
    setCurrent(current);
    console.log(current, e, total);
  };
  const handlePrevStepClick = ({ e, prev, current, total }) => {
    console.log(e, prev, current, total);
  };
  const handleNextStepClick = ({ e, next, current, total }) => {
    console.log(e, next, current, total);
  };
  const handleFinish = ({ e, current, total }) => {
    setVisible(false);
    console.log(e, current, total);
  };
  const handleSkip = ({ e, current, total }) => {
    console.log('skip');
    setVisible(false);
    console.log(e, current, total);
  };
  return (
    <Row justify="center">
      <Button onClick={handleClick}>新手引导</Button>
      <Drawer
        footer={<Button onClick={() => setVisible(false)}> 关闭抽屉 </Button>}
        visible={visible}
        header="演示新手引导"
        size="60%"
        showOverlay={false}
        destroyOnClose={true}
      >
        <div className="guide-container">
          <div className="main-title-base">
            <div className="title-major">Guide 用户引导</div>
            <div className="title-sub">按钮用于开启一个闭环的操作任务，如“删除”对象、“购买”商品等。</div>
          </div>
          <div className="field label-field-base">
            <div className="label">Label</div>
            <Input placeholder="请输入内容" />
          </div>
          <div className="field">
            <div className="label">Label</div>
            <Input placeholder="请输入内容" />
          </div>
          <Row className="action action-base">
            <Button>确定</Button>
            <Button theme="default" variant="base">
              取消
            </Button>
          </Row>
        </div>

        <Guide
          current={current}
          steps={steps}
          onChange={handleChange}
          onPrevStepClick={handlePrevStepClick}
          onNextStepClick={handleNextStepClick}
          onFinish={handleFinish}
          onSkip={handleSkip}
        />
      </Drawer>
    </Row>
  );
}

                  ===SPLIT===组建:<Guide/>
                  使用描述：不带遮罩的引导 
                  代码示例：import React, { useEffect } from 'react';
import { Button, Drawer, Guide, Input, Row } from 'tdesign-react';

const classStyles = `
<style>
.guide-container {
  max-width: 600px;
  padding: 40px;
}

.title-major {
  color: var(--td-text-color-primary);
  font-size: 36px;
  font-weight: 700;
  line-height: 44px;
}

.title-sub {
  margin-top: 8px;
  color: var(--td-text-color-secondary);
  font-size: 14px;
  font-weight: 400;
  line-height: 22px;
}

.field {
  margin-top: 50px;
}

.label {
  margin-bottom: 8px;
  color: var(--td-text-color-primary);
  font-size: 14px;
  font-weight: 400;
  line-height: 22px;
}

.action {
  display: inline-flex;
  margin-top: 50px;
}

.action button:first-child {
  margin-right: 10px;
}

</style>
`;
export default function NoMaskGuide() {
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  const steps = [
    {
      element: '.main-title-no-mask',
      title: '新手引导标题',
      body: '新手引导的说明文案',
      placement: 'bottom-right',
    },
    {
      element: '.label-field-no-mask',
      title: '新手引导标题',
      body: '新手引导的说明文案',
      placement: 'bottom',
    },
    {
      element: '.action-no-mask',
      title: '新手引导标题',
      body: '新手引导的说明文案',
      placement: 'right',
    },
  ];
  const [visible, setVisible] = React.useState(false);
  const [current, setCurrent] = React.useState(-1);
  const handleClick = () => {
    setVisible(true);
    setTimeout(() => {
      setCurrent(0);
    }, 800);
  };
  const handleChange = (current, { e, total }) => {
    setCurrent(current);
    console.log(current, e, total);
  };
  const handlePrevStepClick = ({ e, prev, current, total }) => {
    console.log(e, prev, current, total);
  };
  const handleNextStepClick = ({ e, next, current, total }) => {
    console.log(e, next, current, total);
  };
  const handleFinish = ({ e, current, total }) => {
    setVisible(false);
    console.log(e, current, total);
  };
  const handleSkip = ({ e, current, total }) => {
    console.log('skip');
    setVisible(false);
    console.log(e, current, total);
  };
  return (
    <Row justify="center">
      <Button onClick={handleClick}>新手引导</Button>
      <Drawer
        footer={<Button onClick={() => setVisible(false)}> 关闭抽屉 </Button>}
        visible={visible}
        header="演示新手引导"
        size="60%"
        showOverlay={false}
        destroyOnClose={true}
      >
        <div className="guide-container">
          <div className="main-title-no-mask">
            <div className="title-major">Guide 用户引导</div>
            <div className="title-sub">按钮用于开启一个闭环的操作任务，如“删除”对象、“购买”商品等。</div>
          </div>
          <div className="field label-field-no-mask">
            <div className="label">Label</div>
            <Input placeholder="请输入内容" />
          </div>
          <div className="field">
            <div className="label">Label</div>
            <Input placeholder="请输入内容" />
          </div>
          <Row className="action action-no-mask">
            <Button>确定</Button>
            <Button theme="default" variant="base">
              取消
            </Button>
          </Row>
        </div>

        <Guide
          current={current}
          steps={steps}
          showOverlay={false}
          onChange={handleChange}
          onPrevStepClick={handlePrevStepClick}
          onNextStepClick={handleNextStepClick}
          onFinish={handleFinish}
          onSkip={handleSkip}
        />
      </Drawer>
    </Row>
  );
}

                  ===SPLIT===组建:<Guide/>
                  使用描述：弹窗形式的引导 
                  代码示例：import React, { useEffect } from 'react';
import { Button, Drawer, Guide, Input, Row } from 'tdesign-react';

const classStyles = `
<style>
.guide-container {
  max-width: 600px;
  padding: 40px;
}

.title-major {
  color: var(--td-text-color-primary);
  font-size: 36px;
  font-weight: 700;
  line-height: 44px;
}

.title-sub {
  margin-top: 8px;
  color: var(--td-text-color-secondary);
  font-size: 14px;
  font-weight: 400;
  line-height: 22px;
}

.field {
  margin-top: 50px;
}

.label {
  margin-bottom: 8px;
  color: var(--td-text-color-primary);
  font-size: 14px;
  font-weight: 400;
  line-height: 22px;
}

.action {
  display: inline-flex;
  margin-top: 50px;
}

.action button:first-child {
  margin-right: 10px;
}

/* dialog body */

.dialog-img {
  width: 100%;
}

p {
  margin-top: 16px;
  color: var(--td-text-color-secondary);
  font-size: 14px;
  font-weight: 400;
  text-align: left;
  line-height: 22px;
}

.dialog-body .img-wrapper {
  border-radius: var(--td-radius-default);
  overflow: hidden;
}

.dialog-body p {
  margin-top: 24px;
  color: var(--td-text-color-secondary);
  font-size: 14px;
  font-weight: 400;
  text-align: left;
  line-height: 22px;
}

.dialog-body .img-wrapper img {
  vertical-align: bottom;
  width: 100%;
}
</style>
`;
function DialogBody() {
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  return (
    <div className="dialog-body">
      <div className="img-wrapper">
        <img className="img" src="https://tdesign.gtimg.com/demo/demo-image-1.png" alt="demo" />
      </div>
      <p>此处显示本页引导的说明文案，可按需要撰写，如内容过多可折行显示。图文也可按需自由设计。</p>
    </div>
  );
}
export default function DialogGuide() {
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  const steps = [
    {
      element: '.main-title-dialog',
      title: '新手引导标题',
      body: DialogBody(),
      placement: 'bottom-right',
    },
    {
      element: '.label-field-dialog',
      title: '新手引导标题',
      body: DialogBody(),
      placement: 'bottom',
    },
    {
      element: '.action-dialog',
      title: '新手引导标题',
      body: DialogBody(),
      placement: 'right',
    },
  ];
  const [visible, setVisible] = React.useState(false);
  const [current, setCurrent] = React.useState(-1);
  const handleClick = () => {
    setVisible(true);
    setTimeout(() => {
      setCurrent(0);
    }, 800);
  };
  const handleChange = (current, { e, total }) => {
    setCurrent(current);
    console.log(current, e, total);
  };
  const handlePrevStepClick = ({ e, prev, current, total }) => {
    console.log(e, prev, current, total);
  };
  const handleNextStepClick = ({ e, next, current, total }) => {
    console.log(e, next, current, total);
  };
  const handleFinish = ({ e, current, total }) => {
    setVisible(false);
    console.log(e, current, total);
  };
  const handleSkip = ({ e, current, total }) => {
    console.log('skip');
    setVisible(false);
    console.log(e, current, total);
  };
  return (
    <Row justify="center">
      <Button onClick={handleClick}>新手引导</Button>
      <Drawer
        footer={<Button onClick={() => setVisible(false)}> 关闭抽屉 </Button>}
        visible={visible}
        header="演示新手引导"
        size="60%"
        showOverlay={false}
        destroyOnClose={true}
      >
        <div className="guide-container">
          <div className="main-title-dialog">
            <div className="title-major">Guide 用户引导</div>
            <div className="title-sub">按钮用于开启一个闭环的操作任务，如“删除”对象、“购买”商品等。</div>
          </div>
          <div className="field label-field-dialog">
            <div className="label">Label</div>
            <Input placeholder="请输入内容" />
          </div>
          <div className="field">
            <div className="label">Label</div>
            <Input placeholder="请输入内容" />
          </div>
          <Row className="action action-dialog">
            <Button>确定</Button>
            <Button theme="default" variant="base">
              取消
            </Button>
          </Row>
        </div>

        <Guide
          current={current}
          steps={steps}
          mode="dialog"
          onChange={handleChange}
          onPrevStepClick={handlePrevStepClick}
          onNextStepClick={handleNextStepClick}
          onFinish={handleFinish}
          onSkip={handleSkip}
        />
      </Drawer>
    </Row>
  );
}

                  ===SPLIT===组建:<Guide/>
                  使用描述：气泡与弹窗混合的引导 
                  代码示例：import React, { useEffect } from 'react';
import { Button, Drawer, Guide, Input, Row } from 'tdesign-react';

const classStyles = `
<style>
.guide-container {
  max-width: 600px;
  padding: 40px;
}

.title-major {
  color: var(--td-text-color-primary);
  font-size: 36px;
  font-weight: 700;
  line-height: 44px;
}

.title-sub {
  margin-top: 8px;
  color: var(--td-text-color-secondary);
  font-size: 14px;
  font-weight: 400;
  line-height: 22px;
}

.field {
  margin-top: 50px;
}

.label {
  margin-bottom: 8px;
  color: var(--td-text-color-primary);
  font-size: 14px;
  font-weight: 400;
  line-height: 22px;
}

.action {
  display: inline-flex;
  margin-top: 50px;
}

.action button:first-child {
  margin-right: 10px;
}

.dialog-body .img-wrapper {
  border-radius: var(--td-radius-default);
  overflow: hidden;
}

.dialog-body p {
  margin-top: 24px;
  color: var(--td-text-color-secondary);
  font-size: 14px;
  font-weight: 400;
  text-align: left;
  line-height: 22px;
}

.dialog-body .img-wrapper img {
  vertical-align: bottom;
  width: 100%;
}
</style>
`;
function DialogBody() {
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  return (
    <div className="dialog-body">
      <div className="img-wrapper">
        <img className="img" src="https://tdesign.gtimg.com/demo/demo-image-1.png" alt="demo" />
      </div>
      <p>此处显示本页引导的说明文案，可按需要撰写，如内容过多可折行显示。图文也可按需自由设计。</p>
    </div>
  );
}
export default function PopupDialogGuide() {
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  const steps = [
    {
      element: '.main-title-popup-dialog',
      title: '新手引导标题',
      body: '新手引导的说明文案',
      placement: 'bottom-right',
    },
    {
      element: '.label-field-popup-dialog',
      title: '新手引导标题',
      body: DialogBody(),
      placement: 'bottom',
      mode: 'dialog',
    },
    {
      element: '.action-popup-dialog',
      title: '新手引导标题',
      body: '新手引导的说明文案',
      placement: 'right',
    },
  ];
  const [visible, setVisible] = React.useState(false);
  const [current, setCurrent] = React.useState(-1);
  const handleClick = () => {
    setVisible(true);
    setTimeout(() => {
      setCurrent(0);
    }, 800);
  };
  const handleChange = (current, { e, total }) => {
    setCurrent(current);
    console.log(current, e, total);
  };
  const handlePrevStepClick = ({ e, prev, current, total }) => {
    console.log(e, prev, current, total);
  };
  const handleNextStepClick = ({ e, next, current, total }) => {
    console.log(e, next, current, total);
  };
  const handleFinish = ({ e, current, total }) => {
    setVisible(false);
    console.log(e, current, total);
  };
  const handleSkip = ({ e, current, total }) => {
    console.log('skip');
    setVisible(false);
    console.log(e, current, total);
  };
  return (
    <Row justify="center">
      <Button onClick={handleClick}>新手引导</Button>
      <Drawer
        footer={<Button onClick={() => setVisible(false)}> 关闭抽屉 </Button>}
        visible={visible}
        header="演示新手引导"
        size="60%"
        showOverlay={false}
        destroyOnClose={true}
      >
        <div className="guide-container">
          <div className="main-title-popup-dialog">
            <div className="title-major">Guide 用户引导</div>
            <div className="title-sub">按钮用于开启一个闭环的操作任务，如“删除”对象、“购买”商品等。</div>
          </div>
          <div className="field label-field-popup-dialog">
            <div className="label">Label</div>
            <Input placeholder="请输入内容" />
          </div>
          <div className="field">
            <div className="label">Label</div>
            <Input placeholder="请输入内容" />
          </div>
          <Row className="action action-popup-dialog">
            <Button>确定</Button>
            <Button theme="default" variant="base">
              取消
            </Button>
          </Row>
        </div>

        <Guide
          current={current}
          steps={steps}
          onChange={handleChange}
          onPrevStepClick={handlePrevStepClick}
          onNextStepClick={handleNextStepClick}
          onFinish={handleFinish}
          onSkip={handleSkip}
        />
      </Drawer>
    </Row>
  );
}

                  ===SPLIT===组建:<Guide/>
                  使用描述：自定义气泡 
                  代码示例：import React, { useEffect } from 'react';
import { ArrowUpIcon } from 'tdesign-icons-react';
import { Button, Drawer, Guide, Input, Row } from 'tdesign-react';

const classStyles = `
<style>
.guide-container {
  max-width: 600px;
  padding: 40px;
}

.title-major {
  color: var(--td-text-color-primary);
  font-size: 36px;
  font-weight: 700;
  line-height: 44px;
}

.title-sub {
  margin-top: 8px;
  color: var(--td-text-color-secondary);
  font-size: 14px;
  font-weight: 400;
  line-height: 22px;
}

.field {
  margin-top: 50px;
}

.label {
  margin-bottom: 8px;
  color: var(--td-text-color-primary);
  font-size: 14px;
  font-weight: 400;
  line-height: 22px;
}

.action {
  display: inline-flex;
  margin-top: 50px;
}

.action button:first-child {
  margin-right: 10px;
}


.my-popup {
  width: 240px;
}

.pop-icon {
  margin-top: 10px;
  color: white;
  font-size: 30px;
  font-weight: bold;
}

.popup-desc {
  margin-top: 10px;
  color: rgba(255, 255, 255, 0.9);
  font-size: 12px;
  font-weight: 400;
  text-align: left;
  line-height: 20px;
}

.popup-action {
  margin-top: 10px;
  text-align: right;
}

.popup-action button {
  margin-left: 8px;
}
</style>
`;
function MyPopup(props) {
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  const { handlePrev, handleNext, handleSkip, handleFinish, current, total } = props;
  return (
    <div className="my-popup">
      <ArrowUpIcon className="pop-icon" />
      <p className="popup-desc">自定义的图形或说明文案，用来解释或指导该功能使用。</p>
      <div className="popup-action">
        <Button theme="default" size="small" onClick={handleSkip}>
          跳过
        </Button>
        {current !== 0 && (
          <Button theme="default" size="small" onClick={handlePrev}>
            上一步
          </Button>
        )}
        {current + 1 < total && (
          <Button theme="primary" size="small" onClick={handleNext}>
            下一步
          </Button>
        )}
        {current + 1 === total && (
          <Button theme="primary" size="small" onClick={handleFinish}>
            完成
          </Button>
        )}
      </div>
    </div>
  );
}
export default function CustomPopupGuide() {
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  const [visible, setVisible] = React.useState(false);
  const [current, setCurrent] = React.useState(-1);
  const handleClick = () => {
    setVisible(true);
    setTimeout(() => {
      setCurrent(0);
    }, 800);
  };
  const handleChange = (current, { e, total }) => {
    setCurrent(current);
    console.log(current, e, total);
  };
  const handlePrevStepClick = ({ e, prev, current, total }) => {
    console.log(e, prev, current, total);
  };
  const handleNextStepClick = ({ e, next, current, total }) => {
    console.log(e, next, current, total);
  };
  const handleFinish = ({ e, current, total }) => {
    setVisible(false);
    console.log(e, current, total);
  };
  const handleSkip = ({ e, current, total }) => {
    console.log('skip');
    setVisible(false);
    console.log(e, current, total);
  };
  const steps = [
    {
      element: '.main-title-custom-popup',
      title: '新手引导标题',
      // description: '新手引导的说明文案',
      placement: 'bottom-right',
      content: <MyPopup />,
    },
    {
      element: '.label-field-1-custom-popup',
      title: '新手引导标题',
      // description: '新手引导的说明文案',
      placement: 'bottom',
      content: <MyPopup />,
    },
    {
      element: '.label-field-2-custom-popup',
      title: '新手引导标题',
      // description: '新手引导的说明文案',
      placement: 'bottom-left',
      content: <MyPopup />,
    },
  ];
  return (
    <Row justify="center">
      <Button onClick={handleClick}>新手引导</Button>
      <Drawer
        footer={<Button onClick={() => setVisible(false)}> 关闭抽屉 </Button>}
        visible={visible}
        header="演示新手引导"
        size="60%"
        showOverlay={false}
        destroyOnClose={true}
      >
        <div className="guide-container">
          <div className="main-title-custom-popup">
            <div className="title-major">Guide 用户引导</div>
            <div className="title-sub">按钮用于开启一个闭环的操作任务，如“删除”对象、“购买”商品等。</div>
          </div>
          <div className="field label-field-1-custom-popup">
            <div className="label">Label</div>
            <Input placeholder="请输入内容" />
          </div>
          <div className="field label-field-2-custom-popup">
            <div className="label">Label</div>
            <Input placeholder="请输入内容" />
          </div>
          <Row className="action">
            <Button>确定</Button>
            <Button theme="default" variant="base">
              取消
            </Button>
          </Row>
        </div>

        <Guide
          current={current}
          steps={steps}
          onChange={handleChange}
          onPrevStepClick={handlePrevStepClick}
          onNextStepClick={handleNextStepClick}
          onFinish={handleFinish}
          onSkip={handleSkip}
        />
      </Drawer>
    </Row>
  );
}

                  组建:<Message/>
                  使用描述：使用简洁文字描述操作反馈。常规全局提示包含：普通信息、成功信息、警示信息、错误信息、帮助信息和加载中。
                  代码示例：import React from 'react';
import { Message, Space } from 'tdesign-react';

export default function () {
  return (
    <Space direction="vertical">
      <Message duration={0} theme="info">
        用户表示普通操作信息提示
      </Message>
      <Message duration={0} theme="success">
        用户表示操作引起一定后果
      </Message>
      <Message duration={0} theme="warning">
        用于表示操作顺利达成
      </Message>
      <Message duration={0} theme="error">
        用于表示操作引起严重的后果
      </Message>
      <Message duration={0} theme="question">
        用于帮助用户操作的信息提示
      </Message>
    </Space>
  );
}

                  ===SPLIT===组建:<Message/>
                  使用描述：加载中信息提示 
                  代码示例：import React, { useState } from 'react';
import { Message, Button, Space } from 'tdesign-react';

export default function () {
  const [successLoading, setSuccessLoading] = useState(false);
  const [warningLoading, setWarningLoading] = useState(false);
  const resetDisabled = successLoading || warningLoading;
  const resetMethod = () => {
    if (!successLoading && !warningLoading) {
      setSuccessLoading(true);
      setWarningLoading(true);
      setTimeout(() => {
        setSuccessLoading(false);
        setWarningLoading(false);
      }, 10000);
    }
  };
  return (
    <Space direction="vertical">
      <Message duration={0} theme="loading">
        用于表示操作正在生效的过程中
      </Message>
      <Message duration={0} theme={successLoading ? 'loading' : 'success'}>
        用于表示操作顺利达成(10s)
      </Message>
      <Message duration={0} theme={warningLoading ? 'loading' : 'warning'}>
        用于表示普通操作失败中断(10s)
      </Message>
      <Button
        style={{
          marginTop: 16,
        }}
        onClick={resetMethod}
        disabled={resetDisabled}
      >
        重置
      </Button>
    </Space>
  );
}

                  ===SPLIT===组建:<Message/>
                  使用描述：带关闭按钮的全局提示 
                  代码示例：import React from 'react';
import { Message, Space } from 'tdesign-react';

export default function () {
  return (
    <Space direction="vertical">
      <Message duration={0} theme="info" closeBtn={true}>
        默认关闭按钮
      </Message>
      <Message duration={0} theme="info" closeBtn={'关闭'}>
        自定义关闭按钮（文字）
      </Message>
      <Message duration={0} theme="info" closeBtn={<div>x</div>}>
        自定义关闭按钮（函数）
      </Message>
      <Message duration={0} theme="info" closeBtn={<div onClick={() => console.log('close')}>x</div>}>
        自定义关闭按钮（ReactNode）
      </Message>
    </Space>
  );
}

                  ===SPLIT===组建:<Message/>
                  使用描述：使用关闭函数控制全局提示 
                  代码示例：import React, { useState } from 'react';
import { MessagePlugin, Button } from 'tdesign-react';

export default function () {
  const [instance, setInstance] = useState(null);
  const isMessageOpen = instance === null;
  const buttonTips = isMessageOpen ? '打开' : '关闭';
  return (
    <Button
      onClick={() => {
        if (isMessageOpen) {
          const ins = MessagePlugin.info('调用关闭函数关闭信息提示框', 0);
          setInstance(ins);
        } else {
          MessagePlugin.close(instance);
          setInstance(null);
        }
      }}
    >
      自由控制关闭时机（{buttonTips}）
    </Button>
  );
}

                  ===SPLIT===组建:<Message/>
                  使用描述：关闭多条全局提示 
                  代码示例：import React from 'react';
import { MessagePlugin, Button, Space } from 'tdesign-react';

export default function () {
  return (
    <Space>
      <Button
        onClick={() => {
          MessagePlugin.info('这是第一条消息');
          MessagePlugin.warning('这是第二条消息');
          MessagePlugin.error('这是第三条消息');
        }}
      >
        点击打开多个消息
      </Button>

      <Button
        onClick={() => {
          MessagePlugin.closeAll();
        }}
      >
        点击关闭所有消息
      </Button>
    </Space>
  );
}

                  ===SPLIT===组建:<Message/>
                  使用描述：控制全局提示显示位置 
                  代码示例：import React, { useState } from 'react';
import { Button, MessagePlugin, Input, Space } from 'tdesign-react';

const placementStyle = {
  position: 'relative',
  margin: '0 auto',
  width: '500px',
  height: '260px',
};
const placementCenterStyle = {
  position: 'absolute',
  right: '42%',
  bottom: '42%',
};
const placementTopStyle = {
  position: 'absolute',
  top: '0',
  left: '42%',
};
const placementTopLeftStyle = {
  position: 'absolute',
  top: '0',
  left: '70px',
};
const placementTopRightStyle = {
  position: 'absolute',
  top: '0',
  right: '70px',
};
const placementBottomStyle = {
  position: 'absolute',
  bottom: '0',
  left: '42%',
};
const placementBottomLeftStyle = {
  position: 'absolute',
  bottom: '0',
  left: '70px',
};
const placementBottomRightStyle = {
  position: 'absolute',
  bottom: '0',
  right: '70px',
};
const placementLeftStyle = {
  position: 'absolute',
  left: '0',
  top: '42%',
};
const placementRightStyle = {
  position: 'absolute',
  right: '0',
  top: '42%',
};
export default function () {
  const [offsetX, setOffsetX] = useState('0');
  const [offsetY, setOffsetY] = useState('0');
  return (
    <Space direction="vertical">
      <Space>
        <Input
          // theme="column"
          style={{
            width: 200,
          }}
          placeholder={'请输入横向偏移量'}
          value={offsetX}
          onChange={(value) => {
            setOffsetX(value);
          }}
        />
        <Input
          // theme="column"
          style={{
            width: 200,
            marginLeft: 16,
          }}
          placeholder={'请输入纵向偏移量'}
          value={offsetY}
          onChange={(value) => {
            setOffsetY(value);
          }}
        />
      </Space>
      <Space style={placementStyle}>
        <Button
          style={placementCenterStyle}
          onClick={() => {
            MessagePlugin.info({
              content: '用户表示普通操作信息提示',
              placement: 'center',
              offset: [Number(offsetX), Number(offsetY)],
            });
          }}
        >
          center
        </Button>
        <Button
          style={placementTopStyle}
          onClick={() => {
            MessagePlugin.info({
              content: '用户表示普通操作信息提示',
              placement: 'top',
              offset: [Number(offsetX), Number(offsetY)],
            });
          }}
        >
          top
        </Button>
        <Button
          style={placementLeftStyle}
          onClick={() => {
            MessagePlugin.info({
              content: '用户表示普通操作信息提示',
              placement: 'left',
              offset: [Number(offsetX), Number(offsetY)],
            });
          }}
        >
          left
        </Button>
        <Button
          style={placementRightStyle}
          onClick={() => {
            MessagePlugin.info({
              content: '用户表示普通操作信息提示',
              placement: 'right',
              offset: [Number(offsetX), Number(offsetY)],
            });
          }}
        >
          right
        </Button>
        <Button
          style={placementBottomStyle}
          onClick={() => {
            MessagePlugin.info({
              content: '用户表示普通操作信息提示',
              placement: 'bottom',
              offset: [Number(offsetX), Number(offsetY)],
            });
          }}
        >
          bottom
        </Button>
        <Button
          style={placementTopLeftStyle}
          onClick={() => {
            MessagePlugin.info({
              content: '用户表示普通操作信息提示',
              placement: 'top-left',
              offset: [Number(offsetX), Number(offsetY)],
            });
          }}
        >
          top-left
        </Button>
        <Button
          style={placementTopRightStyle}
          onClick={() => {
            MessagePlugin.info({
              content: '用户表示普通操作信息提示',
              placement: 'top-right',
              offset: [Number(offsetX), Number(offsetY)],
            });
          }}
        >
          top-right
        </Button>
        <Button
          style={placementBottomLeftStyle}
          onClick={() => {
            MessagePlugin.info({
              content: '用户表示普通操作信息提示',
              placement: 'bottom-left',
              offset: [Number(offsetX), Number(offsetY)],
            });
          }}
        >
          bottom-left
        </Button>
        <Button
          style={placementBottomRightStyle}
          onClick={() => {
            MessagePlugin.info({
              content: '用户表示普通操作信息提示',
              placement: 'bottom-right',
              offset: [Number(offsetX), Number(offsetY)],
            });
          }}
        >
          bottom-right
        </Button>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Message/>
                  使用描述：函数式调用 
                  代码示例：import React from 'react';
import { Button, MessagePlugin, Space } from 'tdesign-react';

let message = null;
export default function () {
  const list = [];
  return (
    <Space>
      <Button
        onClick={() => {
          message = MessagePlugin.info('I am duration 20s Message', 20 * 1000);
          list.unshift(message);
        }}
      >
        I am duration 20s Message
      </Button>
      <Button
        onClick={() => {
          if (list.length !== 0) {
            MessagePlugin.close(list.shift());
          }
        }}
      >
        close latest duration 20s Message
      </Button>

      <Button
        onClick={() => {
          MessagePlugin.closeAll();
        }}
      >
        close all Message
      </Button>
    </Space>
  );
}

                  组建:<Notification/>
                  使用描述：基础消息通知，可手动关闭也可自动退出。
                  代码示例：import React from 'react';
import { Notification } from 'tdesign-react';

export default function NotificationExample() {
  return <Notification title="标题名称" content="这是一条消息通知" theme="info" />;
}

                  ===SPLIT===组建:<Notification/>
                  使用描述：带图标的消息通知提供两种情况：普通消息通知和重要消息通知（如：系统错误等）。
                  代码示例：import React from 'react';
import { Notification, Space } from 'tdesign-react';

export default function NotificationExample() {
  return (
    <Space direction="vertical">
      <Notification
        theme="info"
        title="普通通知"
        content="这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知"
      />
      <Notification
        theme="error"
        title="危险通知"
        content="这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知"
      />
      <Notification
        theme="warning"
        title="告警通知"
        content="这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知"
      />
      <Notification
        theme="success"
        title="成功通知"
        content="这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知这是一条消息通知"
      />
    </Space>
  );
}

                  ===SPLIT===组建:<Notification/>
                  使用描述：带有操作的消息通知为用户提供下一步行动点，在消息提示框中进行简要快捷的交互。
                  代码示例：import React from 'react';
import { Notification, Button, Space } from 'tdesign-react';

export default function NotificationExample() {
  return (
    <Space direction="vertical">
      <Notification
        theme="info"
        title="超出的文本省略号显示"
        content="文案不限长度，但是展示最大显示三行折行的末尾显示折行末尾显示折行末尾显示折行末尾显示折行末尾显示折行折行末尾显示折行折行末尾显示折行末尾显示折行折行末尾"
        footer={
          <div>
            <Button theme="primary" variant="text">
              查看详情
            </Button>
          </div>
        }
      />
      <Notification
        theme="info"
        title="自定义底部"
        content="使用 props function 自定义底部内容"
        footer={
          <div>
            <Button theme="primary" variant="text">
              查看详情
            </Button>
          </div>
        }
      />
      <Notification
        theme="info"
        content="1. 使用 props function 自定义标题；2. 使用插槽自定义底部内容"
        title={
          <div>
            自定义标题 <small>我是副标题</small>
          </div>
        }
        footer={
          <div slot="footer">
            <Button theme="default" variant="text">
              知道了
            </Button>
          </div>
        }
      />
      <Notification
        theme="info"
        content="1. 使用插槽自定义标题 2. 使用插槽自定义底部内容"
        title={
          <div>
            自定义标题 <small>我是副标题</small>
          </div>
        }
        footer={
          <div>
            <Button theme="default" variant="text">
              重启
            </Button>
            <Button theme="primary" variant="text">
              稍后提醒我(10s)
            </Button>
          </div>
        }
      />
      <Notification
        theme="info"
        title="自定义内容"
        content="使用插槽自定义内容"
        footer={
          <div>
            <Button theme="default" variant="text">
              重启
            </Button>
            <Button theme="primary" variant="text">
              更多
            </Button>
          </div>
        }
      ></Notification>
    </Space>
  );
}

                  ===SPLIT===组建:<Notification/>
                  使用描述：全局提示显示位置可控制，placement 用于控制大概位置，offset 用于设置相对于 placement 所在位置的偏移
                  代码示例：import React, { useState } from 'react';
import { NotificationPlugin, Button, Input, Space } from 'tdesign-react';

export default function NotificationExample() {
  const [offsetY, setOffsetY] = useState('0');
  const [offsetX, setOffsetX] = useState('0');
  const openNotification = (placement) => {
    NotificationPlugin.info({
      title: '标题名称',
      content: '这是一条可以自动关闭的消息通知',
      placement,
      duration: 3000,
      offset: [offsetX, offsetY],
      closeBtn: true,
    });
  };
  return (
    <Space direction="vertical">
      <Space>
        <Input
          placeholder="请输入横向偏移量"
          value={offsetX}
          onChange={(v) => setOffsetX(v)}
          style={{
            width: '130px',
            display: 'inline-block',
            margin: '0 20px 36px 0',
          }}
        />
        <Input
          placeholder="请输入纵向偏移量"
          value={offsetY}
          onChange={(v) => setOffsetY(v)}
          style={{
            width: '130px',
            display: 'inline-block',
            margin: '0 20px 36px 0',
          }}
        />
      </Space>
      <Space>
        <Button onClick={() => openNotification('top-left')}>左上角</Button>
        <Button onClick={() => openNotification('top-right')}>右上角</Button>
      </Space>
      <Space>
        <Button onClick={() => openNotification('bottom-left')}>左下角</Button>
        <Button onClick={() => openNotification('bottom-right')}>右下角</Button>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Notification/>
                  使用描述：如果不希望通过计时关闭，或者用户点击按钮关闭，也可以使用关闭函数。
                  代码示例：import React from 'react';
import { NotificationPlugin, Button } from 'tdesign-react';

export default function NotificationExample() {
  const openNotification = () => {
    const notification = NotificationPlugin.info({
      title: '信息',
      content: '这是一条不会自动关闭的消息通知',
      closeBtn: true,
      duration: 0,
      onCloseBtnClick: () => {
        NotificationPlugin.close(notification);
      },
    });
  };
  return <Button onClick={openNotification}>自由控制关闭时机</Button>;
}

                  ===SPLIT===组建:<Notification/>
                  使用描述：示例：NotifyPlugin.warning({ title: '标题', content: '这是一条警告消息' })
                  代码示例：import React from 'react';
import { NotificationPlugin, Button, Space } from 'tdesign-react';

export default function NotificationExample() {
  const openInfoNotification = () => {
    NotificationPlugin.info({
      title: '信息',
      content: '这是一条可以自动关闭的消息通知',
      duration: 3000,
    });
  };
  const openSuccessNotification = () => {
    NotificationPlugin.success({
      title: '信息',
      content: '这是一条可以自动关闭的消息通知',
      duration: 3000,
    });
  };
  const openWarningNotification = () => {
    NotificationPlugin.warning({
      title: '信息',
      content: '这是一条可以自动关闭的消息通知',
      duration: 3000,
    });
  };
  const openErrorNotification = () => {
    NotificationPlugin.error({
      title: '信息',
      content: '这是一条可以自动关闭的消息通知',
      duration: 3000,
    });
  };
  return (
    <Space>
      <Button onClick={() => openInfoNotification()}>信息</Button>
      <Button onClick={() => openSuccessNotification()}>成功</Button>
      <Button onClick={() => openWarningNotification()}>警告</Button>
      <Button onClick={() => openErrorNotification()}>错误</Button>
    </Space>
  );
}

                  组建:<Popconfirm/>
                  使用描述：使用说明文字及操作按钮对较简单的操作进行二次确认。
                  代码示例：import React, { useState } from 'react';
import { Button, Popconfirm, MessagePlugin, Space } from 'tdesign-react';

export default function BasicExample() {
  const [visible, setVisible] = useState(false);
  const deleteClickHandler = () => {
    const msg = MessagePlugin.info('提交中', 0);
    setTimeout(() => {
      MessagePlugin.close(msg);
      MessagePlugin.success('提交成功！');
      setVisible(false);
    }, 1000);
  };
  return (
    <Space>
      <Popconfirm content={'确认删除订单吗'} cancelBtn={null}>
        <Button theme="primary">删除订单</Button>
      </Popconfirm>
      <Popconfirm
        visible={visible}
        content={'是否提交审核？（自由控制浮层显示或隐藏）'}
        confirmBtn={
          <Button size={'small'} onClick={deleteClickHandler}>
            确定
          </Button>
        }
        onCancel={() => {
          setVisible(false);
        }}
      >
        <Button
          theme="primary"
          onClick={() => {
            setVisible(true);
          }}
        >
          提交审核
        </Button>
      </Popconfirm>
    </Space>
  );
}

                  ===SPLIT===组建:<Popconfirm/>
                  使用描述：在说明文字之前增加图标，如普通、警示及告警等图标，增强表达以更好的引起用户注意。
                  代码示例：import React from 'react';
import { Button, Popconfirm, Space } from 'tdesign-react';
import { BrowseIcon } from 'tdesign-icons-react';

export default function IconUsageExample() {
  return (
    <Space direction="vertical">
      <Space>
        <Popconfirm content={'普通事件通知类型偏向于确认'}>
          <Button theme="primary">默认</Button>
        </Popconfirm>
        <Popconfirm content={'事件通知类型偏向于提示'} theme={'warning'}>
          <Button theme="warning">警告</Button>
        </Popconfirm>
        <Popconfirm content={'事件通知类型偏向于高危提醒'} theme={'danger'}>
          <Button theme="danger">危险</Button>
        </Popconfirm>
      </Space>
      <Space>
        <Popconfirm
          content={'基础气泡确认框文案示意文字按钮'}
          icon={<BrowseIcon />}
          popupProps={{
            placement: 'bottom',
          }}
        >
          <Button theme="default" variant="outline">
            自定义图标（属性）
          </Button>
        </Popconfirm>
      </Space>
    </Space>
  );
}

                  ===SPLIT===组建:<Popconfirm/>
                  使用描述：在主要说明文字之外增加了操作相关的详细描述，对较复杂的，可能造成疑惑的操作进行详细描述。
                  代码示例：import React, { useEffect } from 'react';
import { Button, Popconfirm, Space } from 'tdesign-react';

const classStyles = `
<style>
.title {
  font-weight: 500;
  font-size: 14px;
}
.describe {
  margin-top: 8px;
  font-size: 12px;
  color: var(--td-text-color-secondary);
}
</style>
`;
export default function ContentExample() {
  useEffect(() => {
    // 添加示例代码所需样式
    document.head.insertAdjacentHTML('beforeend', classStyles);
  }, []);
  const content = (
    <>
      <p className="title">带描述的气泡确认框文字按钮</p>
      <p className="describe">带描述的气泡确认框在主要说明之外增加了操作相关的详细描述</p>
    </>
  );
  return (
    <Space>
      <Popconfirm theme={'default'} content={content}>
        <Button theme="primary">自定义浮层内容</Button>
      </Popconfirm>
      <Popconfirm theme={'warning'} content={content}>
        <Button theme="warning">自定义浮层内容</Button>
      </Popconfirm>
    </Space>
  );
}

                  ===SPLIT===组建:<Popconfirm/>
                  使用描述：通过 confirmBtn 和 cancelBtn 属性来自定义确认和取消按钮，支持传入 Button 组件属性或使用 slot 方式。
                  代码示例：import React from 'react';
import { Button, Popconfirm, Space } from 'tdesign-react';

export default function ButtonExample() {
  return (
    <Space>
      <Popconfirm theme={'default'} content={'您确定要提交吗'} confirmBtn={'确认提交'} cancelBtn={'我再想想'}>
        <Button theme="default" variant="outline">
          按钮样式（属性-字符串）
        </Button>
      </Popconfirm>
      <Popconfirm
        theme={'default'}
        content="您确定要提交吗"
        confirmBtn={
          <Button theme={'warning'} size={'small'}>
            确定提交
          </Button>
        }
        cancelBtn={
          <Button theme={'default'} size={'small'} variant={'outline'}>
            我再想想
          </Button>
        }
      >
        <Button theme="default" variant="outline">
          按钮样式（TNode）
        </Button>
      </Popconfirm>
    </Space>
  );
}

                  ===SPLIT===组建:<Popconfirm/>
                  使用描述：通过 popupProps 可以透传弹窗底层依赖的 Popup 组件所有已支持的属性，比如控制弹窗出现的位置。
                  代码示例：import React from 'react';
import { Button, Popconfirm, Space } from 'tdesign-react';

export default function InheritExample() {
  return (
    <Space>
      <Popconfirm theme={'default'} content={'直接使用 placement 进行设置'} placement={'bottom'}>
        <Button theme="default" variant="outline">
          浮层出现在下方
        </Button>
      </Popconfirm>
      <Popconfirm
        theme={'default'}
        content="透传属性到 Popup 组件进行设置"
        popupProps={{
          placement: 'right',
          overlayStyle: {
            fontWeight: 'normal',
          },
          overlayInnerStyle: {
            fontWeight: 'normal',
          },
          overlayClassName: 'popconfirm-custom-overlay-class',
          overlayInnerClassName: 'popconfirm-custom-overlay-inner-class',
        }}
        confirmBtn={
          <Button theme={'primary'} size={'small'}>
            确定提交
          </Button>
        }
        cancelBtn={
          <Button theme={'default'} size={'small'} variant={'outline'}>
            我再想想
          </Button>
        }
      >
        <Button theme="default" variant="outline">
          浮层出现在右侧
        </Button>
      </Popconfirm>
    </Space>
  );
}

                  组建:<Popup/>
                  使用描述：由浮层内容和触发元素组成，两者均可自定义。使用 content 自定义浮层内容。
                  代码示例：import React from 'react';
import { Button, Popup } from 'tdesign-react';

export default function BasicUsage() {
  return (
    <Popup trigger="hover" showArrow content="这是一个弹出框">
      <Button>Hover me</Button>
    </Popup>
  );
}

                  ===SPLIT===组建:<Popup/>
                  使用描述：可以使用 triggerElement 自定义触发元素。
                  代码示例：import React from 'react';
import { Button, Popup, Space } from 'tdesign-react';

export default function TriggerElement() {
  return (
    <Space>
      <Popup trigger="hover" showArrow content="这是一个弹出框">
        <Button variant="outline">默认子节点元素触发</Button>
      </Popup>
      <Popup triggerElement={<Button>使用 triggerElement 元素触发</Button>} showArrow content="这是一个弹出框"></Popup>
    </Space>
  );
}

                  ===SPLIT===组建:<Popup/>
                  使用描述：提供悬浮时触发（默认）、点击时触发、获取焦点时触发、右击时触发等方式。
                  代码示例：import React from 'react';
import { Button, Popup, Input, Space } from 'tdesign-react';

export default function Triggers() {
  return (
    <Space>
      <Popup trigger="hover" showArrow content="这是一个弹出框">
        <Button variant="outline">悬浮时触发（默认）</Button>
      </Popup>
      <Popup trigger="focus" showArrow content="这是一个弹出框">
        <Input
          placeholder="获得焦点时触发"
          style={{
            width: 200,
          }}
        ></Input>
      </Popup>
      <Popup trigger="click" showArrow content="这是一个弹出框">
        <Button onClick={() => console.log('自定义事件')} variant="outline">
          点击时触发
        </Button>
      </Popup>
      <Popup trigger="context-menu" showArrow content="这是一个弹出框">
        <Button variant="outline">右击时触发</Button>
      </Popup>
    </Space>
  );
}

                  ===SPLIT===组建:<Popup/>
                  使用描述：使用 placement 控制浮层方向，如果需要浮层箭头，设置 showArrow=true 即可。
                  代码示例：import React from 'react';
import { Button, Popup } from 'tdesign-react';

const styles = {
  container: {
    margin: '0 auto',
    width: '500px',
    height: '260px',
    position: 'relative',
  },
  placementTop: {
    position: 'absolute',
    top: '0',
    left: '42%',
  },
  placementTopLeft: {
    position: 'absolute',
    top: '0',
    left: '70px',
  },
  placementTopRight: {
    position: 'absolute',
    top: '0',
    right: '70px',
  },
  placementBottom: {
    position: 'absolute',
    bottom: '0',
    left: '42%',
  },
  placementBottomLeft: {
    position: 'absolute',
    bottom: '0',
    left: '70px',
    width: '120px',
  },
  placementBottomRight: {
    position: 'absolute',
    bottom: '0',
    right: '70px',
  },
  placementLeft: {
    position: 'absolute',
    left: '0',
    top: '42%',
  },
  placementLeftTop: {
    position: 'absolute',
    left: '0',
    top: '50px',
  },
  placementLeftBottom: {
    position: 'absolute',
    left: '0',
    bottom: '50px',
  },
  placementRight: {
    position: 'absolute',
    right: '0',
    top: '42%',
  },
  placementRightTop: {
    position: 'absolute',
    right: '0',
    top: '50px',
  },
  placementRightBottom: {
    position: 'absolute',
    right: '0',
    bottom: '50px',
  },
};
export default function Placement() {
  return (
    <div style={styles.container}>
      <Popup content="这是Popup内容" placement="top" showArrow destroyOnClose>
        <Button style={styles.placementTop}>top</Button>
      </Popup>
      <Popup content="这是Popup内容 top-left" placement="top-left" showArrow destroyOnClose>
        <Button style={styles.placementTopLeft}>top-left</Button>
      </Popup>
      <Popup content="这是Popup内容top-right" placement="top-right" showArrow destroyOnClose>
        <Button style={styles.placementTopRight}>top-right</Button>
      </Popup>
      <Popup content="这是Popup内容" placement="bottom" showArrow destroyOnClose>
        <Button style={styles.placementBottom}>bottom</Button>
      </Popup>
      <Popup content="这是Popup内容 bottom-left" placement="bottom-left" showArrow destroyOnClose>
        <Button style={styles.placementBottomLeft}>bottom-left</Button>
      </Popup>
      <Popup content="这是Popup内容 bottom-right" placement="bottom-right" showArrow destroyOnClose>
        <Button style={styles.placementBottomRight}>bottom-right</Button>
      </Popup>
      <Popup content="这是Popup内容" placement="left" showArrow destroyOnClose>
        <Button style={styles.placementLeft}>left</Button>
      </Popup>
      <Popup
        content="这是Popup内容   left-top"
        placement="left-top"
        overlayStyle={{
          width: '140px',
        }}
        showArrow
        destroyOnClose
      >
        <Button style={styles.placementLeftTop}>left-top</Button>
      </Popup>
      <Popup
        content="这是Popup内容 left-bottom"
        placement="left-bottom"
        overlayStyle={{
          width: '140px',
        }}
        showArrow
        destroyOnClose
      >
        <Button style={styles.placementLeftBottom}>left-bottom</Button>
      </Popup>
      <Popup content="这是Popup内容" placement="right" showArrow destroyOnClose>
        <Button style={styles.placementRight}>right</Button>
      </Popup>
      <Popup
        content="这是Popup内容 right-top"
        placement="right-top"
        overlayStyle={{
          width: '140px',
        }}
        showArrow
        destroyOnClose
      >
        <Button style={styles.placementRightTop}>right-top</Button>
      </Popup>
      <Popup
        content="这是Popup内容 right-bottom"
        placement="right-bottom"
        overlayStyle={{
          width: '140px',
        }}
        showArrow
        destroyOnClose
      >
        <Button style={styles.placementRightBottom}>right-bottom</Button>
      </Popup>
    </div>
  );
}

                  ===SPLIT===组建:<Popup/>
                  使用描述：overlayClassName 用于定义浮层样式类名。overlayStyle 用于定义浮层样式，比如浮层宽度。浮层宽度默认根据内容宽度呈现，可自由设置宽度和最大宽度。overlayInnerStyle 用于定义浮层内容部分样式，比如内容最大高度以及是否出滚动条。值为类型为函数时，可以实现浮层内容宽度和触发元素同宽。
                  代码示例：import React from 'react';
import { Button, Popup, Space } from 'tdesign-react';

export default function OverlayStyle() {
  return (
    <Space>
      <Popup
        content="浮层拥有自定义类名，可以自定义浮层样式"
        overlayClassName="tdesign-demo__custom-popup"
        placement="bottom"
      >
        <Button variant="outline">自定义浮层类名</Button>
      </Popup>
      <Popup
        content="浮层宽度是固定的，不会随内容变化而变化"
        overlayInnerStyle={{
          width: '350px',
          textAlign: 'center',
        }}
        placement="bottom"
      >
        <Button variant="outline">固定浮层宽度</Button>
      </Popup>
      <Popup
        content="可以设置浮层最大宽度，当内容超出最大宽度时，文本内容才会换行"
        overlayStyle={{
          maxWidth: '250px',
        }}
        placement="bottom"
      >
        <Button variant="outline">浮层最大宽度</Button>
      </Popup>
      <Popup
        content="overlayInnerStyle 作为函数使用，可以让浮层内容和触发元素同宽"
        overlayInnerStyle={(triggerElem) => ({
          width: `${triggerElem.offsetWidth}px`,
        })}
        placement="bottom"
      >
        <Button variant="outline">浮层和触发元素同宽</Button>
      </Popup>
    </Space>
  );
}

                  ===SPLIT===组建:<Popup/>
                  使用描述：可以通过 visible 自由控制弹出层的显示或隐藏。
                  代码示例：import React, { useState } from 'react';
import { Button, Popup } from 'tdesign-react';

export default function Controlled() {
  const [visible, setVisible] = useState(false);
  return (
    <Popup content="这是popup内容" trigger="context-menu" placement="right" visible={visible}>
      {/* 当visible=true，trigger节点无法获取元素位置，会导致popup定位异常 */}
      <Button onClick={() => setVisible(!visible)}>一直显示</Button>
    </Popup>
  );
}

                  ===SPLIT===组建:<Popup/>
                  使用描述：浮层默认父节点是 body，可通过 attach 自由调整挂载的父节点元素。
                  代码示例：import React from 'react';
import { Button, Popup, Space } from 'tdesign-react';

export default function Attach() {
  return (
    <Space>
      <Popup trigger="click" content="触发元素的父元素是组件跟元素，通过 CSSSelector 定义" attach=".t-space">
        <Button>点击查看我的父元素(CSSSelector)</Button>
      </Popup>
      <Popup
        trigger="click"
        content="触发元素的父元素是组件跟元素，通过 Function 定义"
        attach={(triggerElement) => triggerElement.parentElement}
      >
        <Button>点击查看我的父元素(Function)</Button>
      </Popup>
    </Space>
  );
}

                  ===SPLIT===组建:<Popup/>
                  使用描述： 用于控制浮层隐藏时是否销毁浮层内容。
                  代码示例：import React from 'react';
import { Button, Popup } from 'tdesign-react';

export default function Destroy() {
  return (
    <Popup trigger="hover" destroyOnClose showArrow content="这是一个弹出框">
      <Button>Hover me</Button>
    </Popup>
  );
}

                  ===SPLIT===组建:<Popup/>
                  使用描述：组件禁用后，不再显示弹出层。
                  代码示例：import React from 'react';
import { Button, Popup } from 'tdesign-react';

export default function Disabled() {
  return (
    <Popup trigger="hover" disabled showArrow content="这是一个弹出框">
      <Button>Hover me</Button>
    </Popup>
  );
}

                  ===SPLIT===组建:<Popup/>
                  使用描述：PopupPlugin(triggerElement, content, popupProps)
                  代码示例：import React from 'react';
import { Space, Button, PopupPlugin } from 'tdesign-react';

const Plugin = () => {
  const ref = React.useRef(null);
  const handleElement1 = () => {
    PopupPlugin(ref.current, 'Tdesign React PopupPlugin');
  };
  const handleElement2 = async () => {
    PopupPlugin('.trigger-element2', '渲染文本的内容', {
      placement: 'right',
      showArrow: true,
    });
  };
  const handleCreatePopupOffset = () => {
    PopupPlugin('.trigger-element3', <div>透传popperOptions，在offset里控制节点位置</div>, {
      placement: 'bottom',
      popperOptions: {
        modifiers: [
          {
            name: 'offset',
            trigger: 'click',
            options: {
              offset: ({ reference }) => {
                const target = document.querySelector('.trigger-element2');
                let { lineHeight } = getComputedStyle(target);
                if (lineHeight === 'normal') {
                  const temp = document.createElement('div');
                  temp.innerText = 't';
                  document.body.appendChild(temp);
                  lineHeight = `${temp.offsetHeight}px`;
                  document.body.removeChild(temp);
                }
                const isBreakLine = reference.height > parseInt(lineHeight, 10);
                return isBreakLine ? [reference.x, -reference.height + 10] : [0, 0];
              },
            },
          },
        ],
      },
    });
  };
  return (
    <Space direction="vertical">
      <Button ref={ref} variant="outline" onClick={handleElement1} className="trigger-element1">
        正常的方式打开
      </Button>
      <Button variant="outline" onClick={handleElement2} className="trigger-element2">
        通过Plugin打开，并修改不同浮层的配置
      </Button>
      <div>
        <span>这里是一个日志查询的例子，在很长的日志内容中，日志内容存在换行的情况，可以点击链接进行日志查询操作</span>
        <a
          className="trigger-element3"
          style={{
            color: 'var(--td-text-color-brand)',
          }}
          onClick={handleCreatePopupOffset}
        >
          点击此链接，会打开浮层进行跳转操作
        </a>
      </div>
    </Space>
  );
};
export default Plugin;

                  ===SPLIT===组建:<Popup/>
                  使用描述：当trigger或popup显示内容动态变化时，自适应调整位置
                  代码示例：import React, { useState, useRef } from 'react';
import { Button, Popup } from 'tdesign-react';

export default function Controlled() {
  const [spanVisible, setVisible] = useState(false);
  const [content, setContent] = useState('这是popup内容');
  const btnClicksRef = useRef(0);
  const toggleContent = () => {
    btnClicksRef.current += 1;
    const showMore = btnClicksRef.current % 2 !== 0;
    setVisible(showMore);
    setContent(`这是popup内容${showMore ? '，又多出来好多好多好多好多....' : ''}`);
  };
  return (
    <Popup content={content} placement="top">
      <Button onClick={toggleContent}>点击改变内容{spanVisible && <span>，再点一下</span>}</Button>
    </Popup>
  );
}

                  ===SPLIT===组建:<Popup/>
                  使用描述：popperOptions = Options
                  代码示例：import React, { useState } from 'react';
import { Button, Input, Popup, Space } from 'tdesign-react';

export default function PopperOptions() {
  const [offsetX, setOffsetX] = useState('0');
  const [offsetY, setOffsetY] = useState('0');
  return (
    <Space direction="vertical">
      <Space>
        <Space align="center">
          <span>请输入横向偏移量:</span>
          <Input
            placeholder="请输入横向偏移量"
            value={offsetX}
            onChange={(v) => setOffsetX(v)}
            style={{
              width: '130px',
              display: 'inline-block',
            }}
          />
        </Space>
        <Space align="center">
          <span>请输入纵向偏移量:</span>
          <Input
            placeholder="请输入纵向偏移量"
            value={offsetY}
            onChange={(v) => setOffsetY(v)}
            style={{
              width: '130px',
              display: 'inline-block',
            }}
          />
        </Space>
      </Space>
      <Space>
        <Popup
          trigger="hover"
          showArrow
          content="这是一个弹出框"
          popperOptions={{
            modifiers: [
              {
                name: 'offset',
                options: {
                  offset: [Number(offsetX), Number(offsetY)],
                },
              },
            ],
          }}
        >
          <Button>Hover me</Button>
        </Popup>
      </Space>
    </Space>
  );
}

                  